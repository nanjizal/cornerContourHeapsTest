<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/usr/local/lib/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Array" params="T" file="/usr/local/lib/haxe/std/js/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<iterator public="1" get="inline" set="null" line="88">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/usr/local/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/local/lib/haxe/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="46" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="50" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="54" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" get="inline" set="null" line="42">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="js.lib.RegExp" params="" file="/usr/local/lib/haxe/std/js/lib/RegExp.hx" extern="1">
		<global public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "g" flag is used with the regular expression.</haxe_doc>
		</global>
		<ignoreCase public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "i" flag is used with the regular expression.</haxe_doc>
		</ignoreCase>
		<multiline public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "m" flag is used with the regular expression.</haxe_doc>
		</multiline>
		<source public="1" set="null">
			<c path="String"/>
			<haxe_doc>The source text of the regexp object, it doesn't contain the two forward slashes on both sides and any flags.</haxe_doc>
		</source>
		<lastIndex public="1">
			<x path="Int"/>
			<haxe_doc>The index at which to start the next match.</haxe_doc>
		</lastIndex>
		<exec public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Null"><c path="js.lib.RegExpMatch"/></x>
			</f>
			<haxe_doc>Execute a search for a match in a specified string.
		Returns a result array, or null.</haxe_doc>
		</exec>
		<test public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Execute a search for a match between a regular expression and a specified string.
		Returns true or false.</haxe_doc>
		</test>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return a string representing the regular expression.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="pattern:?flags">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a regular expression object for matching text with a pattern.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Native JavaScript regular expressions.

	For cross-platform regular expressions, use Haxe `EReg` class or
	[regexp literals](https://haxe.org/manual/std-regex.html).

	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp>]]></haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="EReg" params="" file="/usr/local/lib/haxe/std/js/_std/EReg.hx">
		<r><c path="_EReg.HaxeRegExp"/></r>
		<match public="1" set="method" line="29">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="37">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, the result is unspecified.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<new public="1" get="inline" set="null" line="25">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/usr/local/lib/haxe/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.lib.RegExp"/>
		<m public="1"><c path="js.lib.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"RegExp"</e></m>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/local/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/local/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/usr/local/lib/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.Syntax" params="" file="/usr/local/lib/haxe/std/js/Syntax.hx" extern="1">
		<code public="1" set="method" static="1">
			<f a="code:args">
				<c path="String"/>
				<t path="haxe.extern.Rest"><d/></t>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.

		`code` must be a string constant.

		Additional `args` are supported to provide code interpolation, for example:
		```haxe
		Syntax.code("console.log({0}, {1})", "hi", 42);
		```
		will generate
		```haxe
		console.log("hi", 42);
		```

		Emits a compilation error if the count of `args` does not match the count of placeholders in `code`.</haxe_doc>
		</code>
		<plainCode public="1" set="method" static="1">
			<f a="code">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.
		The same as `js.Syntax.code` except this one does not provide code interpolation.</haxe_doc>
		</plainCode>
		<construct public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="construct.T"/></x>
				<t path="haxe.extern.Rest"><d/></t>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
			<overloads><construct public="1" set="method">
	<f a="cl:args">
		<c path="String"/>
		<t path="haxe.extern.Rest"><d/></t>
		<d/>
	</f>
	<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
</construct></overloads>
		</construct>
		<instanceof public="1" set="method" static="1">
			<f a="v:cl">
				<d/>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `v instanceof cl` expression.</haxe_doc>
		</instanceof>
		<typeof public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate `typeof o` expression.</haxe_doc>
		</typeof>
		<strictEq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a === b` expression.</haxe_doc>
		</strictEq>
		<strictNeq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a !== b` expression.</haxe_doc>
		</strictNeq>
		<delete public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="o:f">
		<d/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
</delete></overloads>
		</delete>
		<field public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Generate `o.f` expression, if `f` is a constant string,
		or `o[f]` if it's any other expression.</haxe_doc>
		</field>
		<haxe_doc>Generate JavaScript syntax not directly supported by Haxe.
	Use only at low-level when specific target-specific code-generation is required.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noClosure"/>
		</meta>
	</class>
	<class path="js.lib.Date" params="" file="/usr/local/lib/haxe/std/js/lib/Date.hx" extern="1">
		<fromHaxeDate public="1" get="inline" set="null" line="40" static="1">
			<f a="date">
				<t path="_Date.HaxeDate"/>
				<c path="js.lib.Date"/>
			</f>
			<haxe_doc>Cast Haxe's Date to js.lib.Date.</haxe_doc>
		</fromHaxeDate>
		<toHaxeDate public="1" get="inline" set="null" line="47" static="1">
			<f a="date">
				<c path="js.lib.Date"/>
				<t path="_Date.HaxeDate"/>
			</f>
			<haxe_doc>Cast js.lib.Date to Haxe's Date.</haxe_doc>
		</toHaxeDate>
		<now public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value corresponding to the current time - the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC, with leap seconds ignored</haxe_doc>
		</now>
		<parse public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00, UTC, with leap seconds ignored.</haxe_doc>
		</parse>
		<UTC public="1" set="method" static="1">
			<f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored.</haxe_doc>
		</UTC>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the month (1-31) for the specified date according to local time.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) for the specified date according to local time.</haxe_doc>
		</getDay>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) of the specified date according to local time.</haxe_doc>
		</getFullYear>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hour (0-23) in the specified date according to local time.</haxe_doc>
		</getHours>
		<getMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to local time.</haxe_doc>
		</getMilliseconds>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to local time.</haxe_doc>
		</getMinutes>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to local time.</haxe_doc>
		</getMonth>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to local time.</haxe_doc>
		</getSeconds>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).</haxe_doc>
		</getTime>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time-zone offset in minutes for the current locale.</haxe_doc>
		</getTimezoneOffset>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day (date) of the month (1-31) in the specified date according to universal time.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) in the specified date according to universal time.</haxe_doc>
		</getUTCDay>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) in the specified date according to universal time.</haxe_doc>
		</getUTCFullYear>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours (0-23) in the specified date according to universal time.</haxe_doc>
		</getUTCHours>
		<getUTCMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to universal time.</haxe_doc>
		</getUTCMilliseconds>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCMinutes>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to universal time.</haxe_doc>
		</getUTCMonth>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCSeconds>
		<setDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to local time.</haxe_doc>
		</setDate>
		<setFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.</haxe_doc>
		</setFullYear>
		<setHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hours for a specified date according to local time.</haxe_doc>
		</setHours>
		<setMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to local time.</haxe_doc>
		</setMilliseconds>
		<setMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to local time.</haxe_doc>
		</setMinutes>
		<setMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to local time.</haxe_doc>
		</setMonth>
		<setSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to local time.</haxe_doc>
		</setSeconds>
		<setTime public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.</haxe_doc>
		</setTime>
		<setUTCDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to universal time.</haxe_doc>
		</setUTCDate>
		<setUTCFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.</haxe_doc>
		</setUTCFullYear>
		<setUTCHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hour for a specified date according to universal time.</haxe_doc>
		</setUTCHours>
		<setUTCMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to universal time.</haxe_doc>
		</setUTCMilliseconds>
		<setUTCMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to universal time.</haxe_doc>
		</setUTCMinutes>
		<setUTCMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to universal time.</haxe_doc>
		</setUTCMonth>
		<setUTCSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to universal time.</haxe_doc>
		</setUTCSeconds>
		<toDateString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "date" portion of the Date as a human-readable string.</haxe_doc>
		</toDateString>
		<toISOString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string following the ISO 8601 Extended Format.</haxe_doc>
		</toISOString>
		<toJSON public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the Date using toISOString(). Intended for use by JSON.stringify().</haxe_doc>
		</toJSON>
		<toLocaleDateString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleDateString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
</toLocaleDateString></overloads>
		</toLocaleDateString>
		<toLocaleFormat public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a date to a string, using a format string.</haxe_doc>
		</toLocaleFormat>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
			<overloads><toLocaleString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
</toLocaleString></overloads>
		</toLocaleString>
		<toLocaleTimeString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleTimeString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
</toLocaleTimeString></overloads>
		</toLocaleTimeString>
		<toSource public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. Overrides the Object.prototype.toSource() method.</haxe_doc>
		</toSource>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the specified Date object. Overrides the Object.prototype.toString() method.</haxe_doc>
		</toString>
		<toTimeString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "time" portion of the Date as a human-readable string.</haxe_doc>
		</toTimeString>
		<toUTCString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string using the UTC timezone.</haxe_doc>
		</toUTCString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="dateString">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<haxe_doc>Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Date"</e></m>
		</meta>
	</class>
	<class path="Lambda" params="" file="/usr/local/lib/haxe/std/Lambda.hx">
		<array public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="List" params="T" file="/usr/local/lib/haxe/std/List.hx"><c path="haxe.ds.List"><c path="List.T"/></c></typedef>
	<typedef path="Map" params="K:V" file="/usr/local/lib/haxe/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/usr/local/lib/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/usr/local/lib/haxe/std/js/_std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><x path="Float"/></PI>
		<abs public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></abs>
		<acos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<asin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<atan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<ceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></ceil>
		<cos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<floor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></floor>
		<log public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></log>
		<max public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></max>
		<min public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></min>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><x path="Float"/></f></random>
		<round public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<sin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<sqrt public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sqrt>
		<tan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
		</meta>
	</class>
	<class path="Reflect" params="" file="/usr/local/lib/haxe/std/js/_std/Reflect.hx">
		<field public="1" set="method" line="29" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.</haxe_doc>
		</field>
		<fields public="1" set="method" line="60" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="74" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":access"><e>js.Boot</e></m></meta>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="78" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="82" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<isEnumValue public="1" set="method" line="99" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="103" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="String" params="" file="/usr/local/lib/haxe/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="43" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/usr/local/lib/haxe/std/js/_std/Std.hx">
		<string public="1" set="method" line="47" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<parseInt public="1" set="method" line="56" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<random public="1" set="method" line="74" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="StringBuf" params="" file="/usr/local/lib/haxe/std/StringBuf.hx">
		<b><c path="String"/></b>
		<new public="1" get="inline" set="null" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="/usr/local/lib/haxe/std/StringTools.hx">
		<startsWith public="1" set="method" line="226" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<isSpace public="1" set="method" line="278" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="296" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="321" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="343" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<replace public="1" set="method" line="412" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurrences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s` except the last one. If `by` is also the empty String `""`, `s`
		remains unchanged.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="434" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Type" params="" file="/usr/local/lib/haxe/std/js/_std/Type.hx">
		<createInstance public="1" params="T" set="method" line="136" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEnum public="1" params="T" set="method" line="146" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="160" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<enumEq public="1" params="T" set="method" line="276" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumParameters public="1" set="method" line="320" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="cornerContour.ColorWheel24" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/ColorWheel24.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="cornerContour._ColorWheel24.ColorWheel24_Impl_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/ColorWheel24.hx" private="1" module="cornerContour.ColorWheel24" extern="1" final="1">
	<redRadish public="1" get="inline" set="null" expr="cast 0xffef3c42" line="5" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffef3c42</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</redRadish>
	<orangeSoda public="1" get="inline" set="null" expr="cast 0xfff25e40" line="6" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff25e40</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</orangeSoda>
	<gokuOrange public="1" get="inline" set="null" expr="cast 0xfff2823a" line="7" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff2823a</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</gokuOrange>
	<highlighterOrange public="1" get="inline" set="null" expr="cast 0xfff69537" line="8" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff69537</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</highlighterOrange>
	<carona public="1" get="inline" set="null" expr="cast 0xfff4aa2f" line="9" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff4aa2f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</carona>
	<solarPower public="1" get="inline" set="null" expr="cast 0xfff6c137" line="10" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfff6c137</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</solarPower>
	<flirtatious public="1" get="inline" set="null" expr="cast 0xfffad435" line="11" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfffad435</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</flirtatious>
	<yellowBellied public="1" get="inline" set="null" expr="cast 0xfffdf32f" line="12" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xfffdf32f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</yellowBellied>
	<daffodil public="1" get="inline" set="null" expr="cast 0xffffff2d" line="13" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffffff2d</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</daffodil>
	<spoiledEgg public="1" get="inline" set="null" expr="cast 0xffdff429" line="14" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffdff429</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</spoiledEgg>
	<peraRocha public="1" get="inline" set="null" expr="cast 0xffa7d52a" line="15" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffa7d52a</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</peraRocha>
	<appleGreen public="1" get="inline" set="null" expr="cast 0xff79c725" line="16" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff79c725</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</appleGreen>
	<fieldGreen public="1" get="inline" set="null" expr="cast 0xff53c025" line="17" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff53c025</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</fieldGreen>
	<parisGreen public="1" get="inline" set="null" expr="cast 0xff52c67f" line="18" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff52c67f</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</parisGreen>
	<maximumBlue public="1" get="inline" set="null" expr="cast 0xff4daecf" line="19" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4daecf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</maximumBlue>
	<blueTourmaline public="1" get="inline" set="null" expr="cast 0xff4592ca" line="20" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4592ca</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blueTourmaline>
	<celestialPlum public="1" get="inline" set="null" expr="cast 0xff3f77c4" line="21" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3f77c4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</celestialPlum>
	<freeSpeechBlue public="1" get="inline" set="null" expr="cast 0xff3a57bf" line="22" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3a57bf</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</freeSpeechBlue>
	<earlySpringNight public="1" get="inline" set="null" expr="cast 0xff3438bd" line="23" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff3438bd</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</earlySpringNight>
	<blueDepression public="1" get="inline" set="null" expr="cast 0xff4b27bd" line="24" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff4b27bd</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</blueDepression>
	<nebulaFuchsia public="1" get="inline" set="null" expr="cast 0xff7328b6" line="25" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xff7328b6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</nebulaFuchsia>
	<fuchsiaFlair public="1" get="inline" set="null" expr="cast 0xffb528c5" line="26" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffb528c5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</fuchsiaFlair>
	<royalFuchsia public="1" get="inline" set="null" expr="cast 0xffc32a94" line="27" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffc32a94</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</royalFuchsia>
	<fuchsiaPurple public="1" get="inline" set="null" expr="cast 0xffdd3371" line="28" static="1">
		<x path="cornerContour.ColorWheel24"/>
		<meta>
			<m n=":value"><e>cast 0xffdd3371</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</fuchsiaPurple>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour._ColorWheel24.ColorWheel24_Impl_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/ColorWheel24.hx" private="1" module="cornerContour.ColorWheel24" extern="1" final="1">
		<redRadish public="1" get="inline" set="null" expr="cast 0xffef3c42" line="5" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffef3c42</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</redRadish>
		<orangeSoda public="1" get="inline" set="null" expr="cast 0xfff25e40" line="6" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff25e40</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</orangeSoda>
		<gokuOrange public="1" get="inline" set="null" expr="cast 0xfff2823a" line="7" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff2823a</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</gokuOrange>
		<highlighterOrange public="1" get="inline" set="null" expr="cast 0xfff69537" line="8" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff69537</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</highlighterOrange>
		<carona public="1" get="inline" set="null" expr="cast 0xfff4aa2f" line="9" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff4aa2f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</carona>
		<solarPower public="1" get="inline" set="null" expr="cast 0xfff6c137" line="10" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfff6c137</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</solarPower>
		<flirtatious public="1" get="inline" set="null" expr="cast 0xfffad435" line="11" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfffad435</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</flirtatious>
		<yellowBellied public="1" get="inline" set="null" expr="cast 0xfffdf32f" line="12" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xfffdf32f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</yellowBellied>
		<daffodil public="1" get="inline" set="null" expr="cast 0xffffff2d" line="13" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffffff2d</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</daffodil>
		<spoiledEgg public="1" get="inline" set="null" expr="cast 0xffdff429" line="14" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffdff429</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</spoiledEgg>
		<peraRocha public="1" get="inline" set="null" expr="cast 0xffa7d52a" line="15" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffa7d52a</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</peraRocha>
		<appleGreen public="1" get="inline" set="null" expr="cast 0xff79c725" line="16" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff79c725</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</appleGreen>
		<fieldGreen public="1" get="inline" set="null" expr="cast 0xff53c025" line="17" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff53c025</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</fieldGreen>
		<parisGreen public="1" get="inline" set="null" expr="cast 0xff52c67f" line="18" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff52c67f</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</parisGreen>
		<maximumBlue public="1" get="inline" set="null" expr="cast 0xff4daecf" line="19" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4daecf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</maximumBlue>
		<blueTourmaline public="1" get="inline" set="null" expr="cast 0xff4592ca" line="20" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4592ca</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blueTourmaline>
		<celestialPlum public="1" get="inline" set="null" expr="cast 0xff3f77c4" line="21" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3f77c4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</celestialPlum>
		<freeSpeechBlue public="1" get="inline" set="null" expr="cast 0xff3a57bf" line="22" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3a57bf</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</freeSpeechBlue>
		<earlySpringNight public="1" get="inline" set="null" expr="cast 0xff3438bd" line="23" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff3438bd</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</earlySpringNight>
		<blueDepression public="1" get="inline" set="null" expr="cast 0xff4b27bd" line="24" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff4b27bd</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</blueDepression>
		<nebulaFuchsia public="1" get="inline" set="null" expr="cast 0xff7328b6" line="25" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xff7328b6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</nebulaFuchsia>
		<fuchsiaFlair public="1" get="inline" set="null" expr="cast 0xffb528c5" line="26" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffb528c5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</fuchsiaFlair>
		<royalFuchsia public="1" get="inline" set="null" expr="cast 0xffc32a94" line="27" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffc32a94</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</royalFuchsia>
		<fuchsiaPurple public="1" get="inline" set="null" expr="cast 0xffdd3371" line="28" static="1">
			<x path="cornerContour.ColorWheel24"/>
			<meta>
				<m n=":value"><e>cast 0xffdd3371</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</fuchsiaPurple>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="cornerContour.Contour" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/Contour.hx">
		<smallDotScale get="inline" set="null" expr="0.07" line="83" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.07</e></m></meta>
		</smallDotScale>
		<thetaCompute get="inline" set="null" line="165" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaCompute>
		<dist get="inline" set="null" line="169" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></dist>
		<debugCol0 public="1" expr="redRadish">
			<x path="cornerContour.ColorWheel24"/>
			<meta><m n=":value"><e>redRadish</e></m></meta>
		</debugCol0>
		<debugCol1 public="1" expr="gokuOrange">
			<x path="cornerContour.ColorWheel24"/>
			<meta><m n=":value"><e>gokuOrange</e></m></meta>
		</debugCol1>
		<debugCol2 public="1" expr="carona">
			<x path="cornerContour.ColorWheel24"/>
			<meta><m n=":value"><e>carona</e></m></meta>
		</debugCol2>
		<debugCol3 public="1" expr="flirtatious">
			<x path="cornerContour.ColorWheel24"/>
			<meta><m n=":value"><e>flirtatious</e></m></meta>
		</debugCol3>
		<debugCol4 public="1" expr="daffodil">
			<x path="cornerContour.ColorWheel24"/>
			<meta><m n=":value"><e>daffodil</e></m></meta>
		</debugCol4>
		<debugCol5 public="1" expr="peraRocha">
			<x path="cornerContour.ColorWheel24"/>
			<meta><m n=":value"><e>peraRocha</e></m></meta>
		</debugCol5>
		<debugCol6 public="1" expr="fieldGreen">
			<x path="cornerContour.ColorWheel24"/>
			<meta><m n=":value"><e>fieldGreen</e></m></meta>
		</debugCol6>
		<debugCol7 public="1" expr="maximumBlue">
			<x path="cornerContour.ColorWheel24"/>
			<meta><m n=":value"><e>maximumBlue</e></m></meta>
		</debugCol7>
		<debugCol8 public="1" expr="celestialPlum">
			<x path="cornerContour.ColorWheel24"/>
			<meta><m n=":value"><e>celestialPlum</e></m></meta>
		</debugCol8>
		<debugCol9 public="1" expr="earlySpringNight">
			<x path="cornerContour.ColorWheel24"/>
			<meta><m n=":value"><e>earlySpringNight</e></m></meta>
		</debugCol9>
		<debugCol10 public="1" expr="nebulaFuchsia">
			<x path="cornerContour.ColorWheel24"/>
			<meta><m n=":value"><e>nebulaFuchsia</e></m></meta>
		</debugCol10>
		<debugCol11 public="1" expr="royalFuchsia">
			<x path="cornerContour.ColorWheel24"/>
			<meta><m n=":value"><e>royalFuchsia</e></m></meta>
		</debugCol11>
		<debugCol12 public="1" expr="orangeSoda">
			<x path="cornerContour.ColorWheel24"/>
			<meta><m n=":value"><e>orangeSoda</e></m></meta>
		</debugCol12>
		<pointsClock public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsClock>
		<pointsAnti public="1" expr="[]">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pointsAnti>
		<penultimateCX public="1"><x path="Float"/></penultimateCX>
		<penultimateCY public="1"><x path="Float"/></penultimateCY>
		<lastClockX public="1"><x path="Float"/></lastClockX>
		<lastClockY public="1"><x path="Float"/></lastClockY>
		<penultimateAX public="1"><x path="Float"/></penultimateAX>
		<penultimateAY public="1"><x path="Float"/></penultimateAY>
		<lastAntiX public="1"><x path="Float"/></lastAntiX>
		<lastAntiY public="1"><x path="Float"/></lastAntiY>
		<pen><c path="cornerContour.IPen"/></pen>
		<endLine><x path="cornerContour.StyleEndLine"/></endLine>
		<ax><x path="Float"/></ax>
		<ay><x path="Float"/></ay>
		<bx><x path="Float"/></bx>
		<by><x path="Float"/></by>
		<cx><x path="Float"/></cx>
		<cy><x path="Float"/></cy>
		<dx><x path="Null"><x path="Float"/></x></dx>
		<dy><x path="Null"><x path="Float"/></x></dy>
		<ex><x path="Null"><x path="Float"/></x></ex>
		<ey><x path="Null"><x path="Float"/></x></ey>
		<dxPrev><x path="Null"><x path="Float"/></x></dxPrev>
		<dyPrev><x path="Null"><x path="Float"/></x></dyPrev>
		<exPrev><x path="Null"><x path="Float"/></x></exPrev>
		<eyPrev><x path="Null"><x path="Float"/></x></eyPrev>
		<dxOld><x path="Null"><x path="Float"/></x></dxOld>
		<dyOld><x path="Null"><x path="Float"/></x></dyOld>
		<exOld><x path="Null"><x path="Float"/></x></exOld>
		<eyOld><x path="Null"><x path="Float"/></x></eyOld>
		<jx><x path="Float"/></jx>
		<jy><x path="Float"/></jy>
		<lastClock><x path="Bool"/></lastClock>
		<jxOld><x path="Float"/></jxOld>
		<jyOld><x path="Float"/></jyOld>
		<kax><x path="Float"/></kax>
		<kay><x path="Float"/></kay>
		<kbx><x path="Float"/></kbx>
		<kby><x path="Float"/></kby>
		<kcx><x path="Float"/></kcx>
		<kcy><x path="Float"/></kcy>
		<ncx><x path="Float"/></ncx>
		<ncy><x path="Float"/></ncy>
		<quadIndex><x path="Float"/></quadIndex>
		<angleA public="1"><x path="Float"/></angleA>
		<halfA public="1"><x path="Float"/></halfA>
		<beta public="1"><x path="Float"/></beta>
		<r><x path="Float"/></r>
		<theta public="1"><x path="Float"/></theta>
		<angle1 public="1"><x path="Null"><x path="Float"/></x></angle1>
		<angle2 public="1"><x path="Float"/></angle2>
		<reset public="1" set="method" line="85"><f a=""><x path="Void"/></f></reset>
		<count public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<computeDE public="1" get="inline" set="null" line="124"><f a=""><x path="Void"/></f></computeDE>
		<anglesCompute get="inline" set="null" line="140"><f a=""><x path="Void"/></f></anglesCompute>
		<thetaComputeAdj get="inline" set="null" line="161"><f a="qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></thetaComputeAdj>
		<triangleJoin public="1" get="inline" set="null" line="178">
			<f a="ax_:ay_:bx_:by_:width_:?curveEnds:?overlap" v=":::::false:false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ overlap : false, curveEnds : false }</e></m></meta>
		</triangleJoin>
		<overlapQuad get="inline" set="null" line="260"><f a=""><x path="Void"/></f></overlapQuad>
		<end public="1" get="inline" set="null" line="268"><f a="width_">
	<x path="Float"/>
	<x path="Void"/>
</f></end>
		<triangle2DFill get="inline" set="null" line="273">
			<f a="ax_:ay_:bx_:by_:cx_:cy_:?color_" v="::::::-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color_ : -1 }</e></m></meta>
		</triangle2DFill>
		<addPieXstart get="inline" set="null" line="277">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : -1 }</e></m></meta>
		</addPieXstart>
		<addPieX get="inline" set="null" line="295">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::0:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : 0 }</e></m></meta>
		</addPieX>
		<addPie get="inline" set="null" line="311">
			<f a="ax:ay:radius:beta:gamma:prefer:?mark:?sides" v="::::::0:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, mark : 0 }</e></m></meta>
		</addPie>
		<computeJ get="inline" set="null" line="315"><f a="width_:theta0:dif">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></computeJ>
		<addDot get="inline" set="null" line="325"><f a="x:y:color:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addDot>
		<addSmallTriangles get="inline" set="null" line="348"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addSmallTriangles>
		<triangle2DFillangleCorners get="inline" set="null" line="360"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCorners>
		<triangle2DFillangleCornersLess get="inline" set="null" line="368"><f a="oldx_:oldy_:prevx_:prevy_:width_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></triangle2DFillangleCornersLess>
		<connectQuadsWhenQuadsOverlay get="inline" set="null" line="376"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuadsWhenQuadsOverlay>
		<connectQuads get="inline" set="null" line="391"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></connectQuads>
		<addInitialQuads get="inline" set="null" line="407"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addInitialQuads>
		<endEdges public="1" set="method" line="490"><f a=""><x path="Void"/></f></endEdges>
		<counter expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</counter>
		<addQuads set="method" line="516"><f a="clockWise:width_">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addQuads>
		<storeLastQuads get="inline" set="null" line="682"><f a=""><x path="Void"/></f></storeLastQuads>
		<isClockwise get="inline" set="null" line="692"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isClockwise>
		<line public="1" get="inline" set="null" line="697">
			<f a="ax_:ay_:bx_:by_:width_:?endLineCurve" v=":::::no">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="cornerContour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLineCurve : no }</e></m></meta>
		</line>
		<circle public="1" get="inline" set="null" line="738">
			<f a="ax:ay:radius:?color:?sides:?omega" v=":::-1:36:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ omega : 0., sides : 36, color : -1 }</e></m></meta>
		</circle>
		<pie public="1" get="inline" set="null" line="765">
			<f a="ax:ay:radius:beta:gamma:prefer:?color:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
     * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pie>
		<pieX public="1" get="inline" set="null" line="801">
			<f a="ax:ay:radius:beta:gamma:prefer:edgePoly:?color:?sides" v=":::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="fracs.DifferencePreference"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
			<haxe_doc>* When calling Pie you can specify the DifferencePreference of what should be colored in terms of the two angles provided.
     * For example for drawing a packman shape you would want the use DifferencePreference.LARGE .</haxe_doc>
		</pieX>
		<pieDifX public="1" get="inline" set="null" line="835">
			<f a="ax:ay:radius:beta:dif:edgePoly:?color:?sides" v="::::::-1:36">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ sides : 36, color : -1 }</e></m></meta>
		</pieDifX>
		<new public="1" set="method" line="118">
			<f a="pen_:?endLine_" v=":no">
				<c path="cornerContour.IPen"/>
				<x path="cornerContour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cornerContour._CurveMath.CurveMath_Fields_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/CurveMath.hx" private="1" module="cornerContour.CurveMath" final="1">
		<distance public="1" get="inline" set="null" line="3" static="1"><f a="px:py:qx:qy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distance>
		<quadStep public="1" expr="0.03" line="8" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</quadStep>
		<quadCurve public="1" get="inline" set="null" line="11" static="1"><f a="p:ax:ay:bx:by:cx:cy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></quadCurve>
		<cubicStep public="1" get="inline" set="null" expr="0.03" line="27" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.03</e></m></meta>
		</cubicStep>
		<cubicCurve public="1" get="inline" set="null" line="30" static="1"><f a="p:ax:ay:bx:by:cx:cy:dx:dy">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
</f></cubicCurve>
		<calculateQuadStep public="1" get="inline" set="null" line="46" static="1"><f a="ax:ay:bx:by:cx:cy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateQuadStep>
		<calculateCubicStep public="1" get="inline" set="null" line="52" static="1"><f a="ax:ay:bx:by:cx:cy:dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculateCubicStep>
		<quadraticThru public="1" get="inline" set="null" line="58" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadraticThru>
		<quadratic public="1" get="inline" set="null" line="63" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadratic>
		<cubic public="1" get="inline" set="null" line="68" static="1"><f a="t:s:c1:c2:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cubic>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cornerContour.IPen" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/IPen.hx" interface="1">
		<get_pos public="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</get_pos>
		<set_pos public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</set_pos>
		<currentColor public="1"><x path="Int"/></currentColor>
		<triangle2DFill public="1" set="method"><f a="ax:ay:bx:by:cx:cy:?color">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
		<pos public="1" get="accessor" set="accessor"><x path="Float"/></pos>
	</class>
	<class path="cornerContour.Pen2D" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/Pen2D.hx">
		<implements path="cornerContour.IPen"/>
		<arr public="1" expr="new Array2DTriangles()">
			<x path="cornerContour.io.Array2DTriangles"/>
			<meta><m n=":value"><e>new Array2DTriangles()</e></m></meta>
		</arr>
		<pos public="1" get="accessor" set="accessor"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="9"><f a=""><x path="Float"/></f></get_pos>
		<set_pos get="inline" set="null" line="13"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<triangle2DFill public="1" get="inline" set="null" line="21"><f a="ax:ay:bx:by:cx:cy:?color">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
		<applyFill public="1" get="inline" set="null" line="28"><f a="fill2D">
	<f a="::::::">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Int"/>
</f></applyFill>
		<currentColor public="1"><x path="Int"/></currentColor>
		<new public="1" set="method" line="5"><f a="col">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="cornerContour.Dim" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/Sketcher.hx" module="cornerContour.Sketcher"><a>
	<minY><x path="Float"/></minY>
	<minX><x path="Float"/></minX>
	<maxY><x path="Float"/></maxY>
	<maxX><x path="Float"/></maxX>
</a></typedef>
	<class path="justPath.IPathContext" params="" file="/usr/local/lib/haxeLibrary/justPath/0,0,2-alpha/justPath/IPathContext.hx" interface="1">
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" set="method"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" set="method"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
	</class>
	<class path="cornerContour.Sketcher" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/Sketcher.hx">
		<implements path="justPath.IPathContext"/>
		<x expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<width public="1" expr="0.01">
			<x path="Float"/>
			<meta><m n=":value"><e>0.01</e></m></meta>
		</width>
		<widthFunction public="1"><f a="::::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></widthFunction>
		<colourFunction public="1"><f a="::::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></colourFunction>
		<tempArr><c path="Array"><x path="Float"/></c></tempArr>
		<contour public="1"><c path="cornerContour.Contour"/></contour>
		<pen><c path="cornerContour.IPen"/></pen>
		<endLine><x path="cornerContour.StyleEndLine"/></endLine>
		<sketchForm><x path="cornerContour.StyleSketch"/></sketchForm>
		<points public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></points>
		<pointsClock public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></pointsClock>
		<pointsAnti public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></pointsAnti>
		<dim public="1"><c path="Array"><t path="cornerContour.Dim"/></c></dim>
		<tracerLine get="inline" set="null" line="28"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></tracerLine>
		<fillOnlyLine get="inline" set="null" line="31"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillOnlyLine>
		<baseLine set="method" line="33"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></baseLine>
		<crudeLine get="inline" set="null" line="37"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></crudeLine>
		<roundEndLine get="inline" set="null" line="40"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></roundEndLine>
		<mediumLine get="inline" set="null" line="43"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></mediumLine>
		<mediumOverlapLine get="inline" set="null" line="46"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></mediumOverlapLine>
		<fineLine get="inline" set="null" line="49"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fineLine>
		<fineOverlapLine get="inline" set="null" line="52"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fineOverlapLine>
		<line public="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></line>
		<reset public="1" set="method" line="79"><f a=""><x path="Void"/></f></reset>
		<pointsNoEndOverlap public="1" set="method" line="87"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></pointsNoEndOverlap>
		<pointsRewound public="1" set="method" line="109"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></pointsRewound>
		<initDim get="inline" set="null" line="156"><f a=""><t path="cornerContour.Dim"/></f></initDim>
		<updateDim get="inline" set="null" line="159"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></updateDim>
		<moveTo public="1" get="inline" set="null" line="167"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lastClock public="1" get="inline" set="null" line="185"><f a=""><x path="Void"/></f></lastClock>
		<getEdges public="1" get="inline" set="null" line="195"><f a=""><c path="Array"><c path="Array"><x path="Float"/></c></c></f></getEdges>
		<lineTo public="1" get="inline" set="null" line="223"><f a="x_:y_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" get="inline" set="null" line="240"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<quadThru public="1" get="inline" set="null" line="249"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadThru>
		<curveTo public="1" get="inline" set="null" line="255"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<plotCoord public="1" get="inline" set="null" line="263">
			<f a="arr:?withMove" v=":true">
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ withMove : true }</e></m></meta>
		</plotCoord>
		<new public="1" set="method" line="56">
			<f a="pen_:sketchForm_:?endLine_" v="::no">
				<c path="cornerContour.IPen"/>
				<x path="cornerContour.StyleSketch"/>
				<x path="cornerContour.StyleEndLine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endLine_ : no }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="cornerContour.StyleEndLine" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/StyleEndLine.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="cornerContour._StyleEndLine.StyleEndLine_Impl_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/StyleEndLine.hx" private="1" module="cornerContour.StyleEndLine" extern="1" final="1">
	<no public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="cornerContour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</no>
	<begin public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="cornerContour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</begin>
	<end public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="cornerContour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</end>
	<both public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="cornerContour.StyleEndLine"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</both>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour._StyleEndLine.StyleEndLine_Impl_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/StyleEndLine.hx" private="1" module="cornerContour.StyleEndLine" extern="1" final="1">
		<no public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="cornerContour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</no>
		<begin public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="cornerContour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</begin>
		<end public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="cornerContour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</end>
		<both public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="cornerContour.StyleEndLine"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</both>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="cornerContour.StyleSketch" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/StyleSketch.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="cornerContour._StyleSketch.StyleSketch_Impl_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/StyleSketch.hx" private="1" module="cornerContour.StyleSketch" extern="1" final="1">
	<Tracer public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Tracer>
	<Base public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Base>
	<Crude public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Crude>
	<FillOnly public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FillOnly>
	<Fine public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Fine>
	<FineOverlap public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FineOverlap>
	<Medium public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Medium>
	<MediumOverlap public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MediumOverlap>
	<RoundEnd public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="cornerContour.StyleSketch"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RoundEnd>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour._StyleSketch.StyleSketch_Impl_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/StyleSketch.hx" private="1" module="cornerContour.StyleSketch" extern="1" final="1">
		<Tracer public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Tracer>
		<Base public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Base>
		<Crude public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Crude>
		<FillOnly public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FillOnly>
		<Fine public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Fine>
		<FineOverlap public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FineOverlap>
		<Medium public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Medium>
		<MediumOverlap public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MediumOverlap>
		<RoundEnd public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="cornerContour.StyleSketch"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RoundEnd>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="cornerContour.io.Array2DTriangles" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/io/Array2DTriangles.hx">
		<from><icast><x path="cornerContour.io.Array7"/></icast></from>
		<this><x path="cornerContour.io.Array7"/></this>
		<to><icast><x path="cornerContour.io.Array7"/></icast></to>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._Array2DTriangles.Array2DTriangles_Impl_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/io/Array2DTriangles.hx" private="1" module="cornerContour.io.Array2DTriangles" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a=""><x path="cornerContour.io.Array2DTriangles"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<create public="1" get="inline" set="null" line="10" static="1"><f a=""><x path="cornerContour.io.Array2DTriangles"/></f></create>
	<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
	<get_ax set="method" line="14" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_ax>
	<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
	<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
	<get_ay set="method" line="22" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_ay>
	<set_ay set="method" line="25" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
	<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
	<get_bx set="method" line="30" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_bx>
	<set_bx set="method" line="33" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
	<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
	<get_by set="method" line="38" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_by>
	<set_by set="method" line="41" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
	<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
	<get_cx set="method" line="46" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_cx>
	<set_cx set="method" line="49" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
	<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
	<get_cy set="method" line="54" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_cy>
	<set_cy set="method" line="57" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
	<color public="1" get="accessor" set="accessor" static="1"><x path="Float"/></color>
	<get_color set="method" line="62" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_color>
	<set_color set="method" line="65" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_color>
	<colorInt public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorInt>
	<get_colorInt set="method" line="70" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Int"/>
</f></get_colorInt>
	<set_colorInt set="method" line="73" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorInt>
	<applyFill public="1" set="method" line="78" static="1"><f a="this:fill2D">
	<x path="cornerContour.io.Array7"/>
	<f a="::::::">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Int"/>
</f></applyFill>
	<triangle2DFill public="1" get="inline" set="null" line="90" static="1"><f a="this:ax_:ay_:bx_:by_:cx_:cy_:?color_">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
	<triangle public="1" set="method" line="102" static="1">
		<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
			<x path="cornerContour.io.Array7"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":keep"/></meta>
	</triangle>
	<adjustWinding public="1" set="method" line="120" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Bool"/>
</f></adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
	<get_x get="inline" set="null" line="125" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_x>
	<set_x get="inline" set="null" line="129" static="1"><f a="this:x">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
	<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
	<get_y get="inline" set="null" line="138" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_y>
	<set_y get="inline" set="null" line="142" static="1"><f a="this:y">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
	<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
	<get_right get="inline" set="null" line="151" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_right>
	<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
	<get_bottom get="inline" set="null" line="156" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_bottom>
	<moveDelta set="method" line="159" static="1"><f a="this:dx:dy">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
	<sign public="1" get="inline" set="null" line="168" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<distHit public="1" set="method" line="172" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
	<liteHit public="1" get="inline" set="null" line="181" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
	<fullHit public="1" set="method" line="189" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
	<rotate public="1" get="inline" set="null" line="194" static="1"><f a="this:x:y:theta">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
	<rotateTrig public="1" get="inline" set="null" line="200" static="1"><f a="this:x:y:cos:sin">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
	<prettyString public="1" get="inline" set="null" line="229" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<c path="String"/>
</f></prettyString>
	<hex public="1" get="inline" set="null" line="236" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<c path="String"/>
</f></hex>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour.io._Array2DTriangles.Array2DTriangles_Impl_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/io/Array2DTriangles.hx" private="1" module="cornerContour.io.Array2DTriangles" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a=""><x path="cornerContour.io.Array2DTriangles"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<create public="1" get="inline" set="null" line="10" static="1"><f a=""><x path="cornerContour.io.Array2DTriangles"/></f></create>
		<ax public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ax>
		<get_ax set="method" line="14" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_ax>
		<set_ax set="method" line="17" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ax>
		<ay public="1" get="accessor" set="accessor" static="1"><x path="Float"/></ay>
		<get_ay set="method" line="22" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_ay>
		<set_ay set="method" line="25" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_ay>
		<bx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></bx>
		<get_bx set="method" line="30" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_bx>
		<set_bx set="method" line="33" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_bx>
		<by public="1" get="accessor" set="accessor" static="1"><x path="Float"/></by>
		<get_by set="method" line="38" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_by>
		<set_by set="method" line="41" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_by>
		<cx public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cx>
		<get_cx set="method" line="46" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_cx>
		<set_cx set="method" line="49" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cx>
		<cy public="1" get="accessor" set="accessor" static="1"><x path="Float"/></cy>
		<get_cy set="method" line="54" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_cy>
		<set_cy set="method" line="57" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_cy>
		<color public="1" get="accessor" set="accessor" static="1"><x path="Float"/></color>
		<get_color set="method" line="62" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_color>
		<set_color set="method" line="65" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_color>
		<colorInt public="1" get="accessor" set="accessor" static="1"><x path="Int"/></colorInt>
		<get_colorInt set="method" line="70" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Int"/>
</f></get_colorInt>
		<set_colorInt set="method" line="73" static="1"><f a="this:v">
	<x path="cornerContour.io.Array7"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_colorInt>
		<applyFill public="1" set="method" line="78" static="1"><f a="this:fill2D">
	<x path="cornerContour.io.Array7"/>
	<f a="::::::">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Int"/>
</f></applyFill>
		<triangle2DFill public="1" get="inline" set="null" line="90" static="1"><f a="this:ax_:ay_:bx_:by_:cx_:cy_:?color_">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></triangle2DFill>
		<triangle public="1" set="method" line="102" static="1">
			<f a="this:ax_:ay_:bx_:by_:cx_:cy_">
				<x path="cornerContour.io.Array7"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</triangle>
		<adjustWinding public="1" set="method" line="120" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Bool"/>
</f></adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1"><x path="Float"/></x>
		<get_x get="inline" set="null" line="125" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_x>
		<set_x get="inline" set="null" line="129" static="1"><f a="this:x">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor" static="1"><x path="Float"/></y>
		<get_y get="inline" set="null" line="138" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_y>
		<set_y get="inline" set="null" line="142" static="1"><f a="this:y">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<right public="1" get="accessor" set="null" static="1"><x path="Float"/></right>
		<get_right get="inline" set="null" line="151" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_right>
		<bottom public="1" get="accessor" set="null" static="1"><x path="Float"/></bottom>
		<get_bottom get="inline" set="null" line="156" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
</f></get_bottom>
		<moveDelta set="method" line="159" static="1"><f a="this:dx:dy">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
		<sign public="1" get="inline" set="null" line="168" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<distHit public="1" set="method" line="172" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></distHit>
		<liteHit public="1" get="inline" set="null" line="181" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<fullHit public="1" set="method" line="189" static="1"><f a="this:px:py">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<rotate public="1" get="inline" set="null" line="194" static="1"><f a="this:x:y:theta">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateTrig public="1" get="inline" set="null" line="200" static="1"><f a="this:x:y:cos:sin">
	<x path="cornerContour.io.Array7"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
		<prettyString public="1" get="inline" set="null" line="229" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<c path="String"/>
</f></prettyString>
		<hex public="1" get="inline" set="null" line="236" static="1"><f a="this">
	<x path="cornerContour.io.Array7"/>
	<c path="String"/>
</f></hex>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="cornerContour.io.Array7" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/io/Array7.hx">
		<this><x path="cornerContour.io.ArrayFlatDepth"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._Array7.Array7_Impl_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/io/Array7.hx" private="1" module="cornerContour.io.Array7" final="1">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<x path="cornerContour.io.ArrayFlatDepth"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="13" static="1"><f a="this:k:v">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a=""><x path="cornerContour.io.Array7"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<toEnd public="1" get="inline" set="null" line="32" static="1"><f a="this:id:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
	<toStart public="1" get="inline" set="null" line="36" static="1"><f a="this:id:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
	<swap public="1" get="inline" set="null" line="40" static="1"><f a="this:id0:id1:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
</class></impl>
	</abstract>
	<class path="cornerContour.io._Array7.Array7_Impl_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/io/Array7.hx" private="1" module="cornerContour.io.Array7" final="1">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<x path="cornerContour.io.ArrayFlatDepth"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="13" static="1"><f a="this:k:v">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
</f></writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a=""><x path="cornerContour.io.Array7"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="23" static="1"><f a="this">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="27" static="1"><f a="this:id">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<toEnd public="1" get="inline" set="null" line="32" static="1"><f a="this:id:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toEnd>
		<toStart public="1" get="inline" set="null" line="36" static="1"><f a="this:id:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></toStart>
		<swap public="1" get="inline" set="null" line="40" static="1"><f a="this:id0:id1:len">
	<x path="cornerContour.io.ArrayFlatDepth"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></swap>
	</class>
	<abstract path="cornerContour.io.ArrayFlat" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/io/ArrayFlat.hx">
		<this><c path="Array"><x path="Float"/></c></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._ArrayFlat.ArrayFlat_Impl_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/io/ArrayFlat.hx" private="1" module="cornerContour.io.ArrayFlat" final="1">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="13" static="1">
		<f a="this:k:v">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a=""><x path="cornerContour.io.ArrayFlat"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<size public="1" get="accessor" set="null" static="1"><x path="Int"/></size>
	<get_size get="inline" set="null" line="24" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_size>
	<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
	<get_index get="inline" set="null" line="29" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_index>
	<set_index get="inline" set="null" line="33" static="1"><f a="this:id">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
	<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
	<get_pos get="inline" set="null" line="39" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></get_pos>
	<set_pos get="inline" set="null" line="43" static="1"><f a="this:pos_">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
	<hasNext public="1" get="inline" set="null" line="48" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
</f></hasNext>
	<next public="1" get="inline" set="null" line="50" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></next>
	<increment public="1" get="inline" set="null" line="55" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</increment>
	<setArray public="1" get="inline" set="null" line="59" static="1"><f a="this:arr">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></setArray>
	<clone public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="cornerContour.io.ArrayFlat"/>
</f></clone>
</class></impl>
	</abstract>
	<class path="cornerContour.io._ArrayFlat.ArrayFlat_Impl_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/io/ArrayFlat.hx" private="1" module="cornerContour.io.ArrayFlat" final="1">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="13" static="1">
			<f a="this:k:v">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a=""><x path="cornerContour.io.ArrayFlat"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<size public="1" get="accessor" set="null" static="1"><x path="Int"/></size>
		<get_size get="inline" set="null" line="24" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_size>
		<index public="1" get="accessor" set="accessor" static="1"><x path="Int"/></index>
		<get_index get="inline" set="null" line="29" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
</f></get_index>
		<set_index get="inline" set="null" line="33" static="1"><f a="this:id">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></set_index>
		<pos public="1" get="accessor" set="accessor" static="1"><x path="Float"/></pos>
		<get_pos get="inline" set="null" line="39" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></get_pos>
		<set_pos get="inline" set="null" line="43" static="1"><f a="this:pos_">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<hasNext public="1" get="inline" set="null" line="48" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Bool"/>
</f></hasNext>
		<next public="1" get="inline" set="null" line="50" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></next>
		<increment public="1" get="inline" set="null" line="55" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</increment>
		<setArray public="1" get="inline" set="null" line="59" static="1"><f a="this:arr">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></setArray>
		<clone public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<c path="Array"><x path="Float"/></c>
	<x path="cornerContour.io.ArrayFlat"/>
</f></clone>
	</class>
	<abstract path="cornerContour.io.ArrayFlatDepth" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/io/ArrayFlatDepth.hx">
		<this><x path="cornerContour.io.ArrayFlat"/></this>
		<meta>
			<m n=":transitive"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/io/ArrayFlatDepth.hx" private="1" module="cornerContour.io.ArrayFlatDepth" final="1">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a=""><x path="cornerContour.io.ArrayFlatDepth"/></f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<getArray public="1" get="inline" set="null" line="12" static="1"><f a="this">
	<x path="cornerContour.io.ArrayFlat"/>
	<t path="cornerContour.io.Float32Array"/>
</f></getArray>
	<rangeToEnd public="1" set="method" line="20" static="1"><f a="this:starting:totalLen:section">
	<x path="cornerContour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
	<rangeToStart public="1" get="inline" set="null" line="44" static="1"><f a="this:starting:totalLen">
	<x path="cornerContour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
	<rangeSwitch public="1" get="inline" set="null" line="69" static="1"><f a="this:start0:start1:totalLen">
	<x path="cornerContour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwitch>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="cornerContour.io._ArrayFlatDepth.ArrayFlatDepth_Impl_" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/io/ArrayFlatDepth.hx" private="1" module="cornerContour.io.ArrayFlatDepth" final="1">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a=""><x path="cornerContour.io.ArrayFlatDepth"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<getArray public="1" get="inline" set="null" line="12" static="1"><f a="this">
	<x path="cornerContour.io.ArrayFlat"/>
	<t path="cornerContour.io.Float32Array"/>
</f></getArray>
		<rangeToEnd public="1" set="method" line="20" static="1"><f a="this:starting:totalLen:section">
	<x path="cornerContour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToEnd>
		<rangeToStart public="1" get="inline" set="null" line="44" static="1"><f a="this:starting:totalLen">
	<x path="cornerContour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeToStart>
		<rangeSwitch public="1" get="inline" set="null" line="69" static="1"><f a="this:start0:start1:totalLen">
	<x path="cornerContour.io.ArrayFlat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></rangeSwitch>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="cornerContour.io.Float32Array" params="" file="/usr/local/lib/haxeLibrary/cornerContour/git/src/cornerContour/io/Float32Array.hx">
		<x path="haxe.io.Float32Array"/>
		<haxe_doc>* switches between Lime, NME and haxe.io.Float32Array</haxe_doc>
	</typedef>
	<class path="h3d.IDrawable" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/IDrawable.hx" interface="1"><render public="1" set="method"><f a="engine">
	<c path="h3d.Engine"/>
	<x path="Void"/>
</f></render></class>
	<class path="hxd.App" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/App.hx">
		<implements path="h3d.IDrawable"/>
		<staticHandler set="method" line="207" static="1"><f a=""><x path="Void"/></f></staticHandler>
		<engine public="1" set="null">
			<c path="h3d.Engine"/>
			<haxe_doc>Rendering engine.</haxe_doc>
		</engine>
		<s3d public="1" set="null">
			<c path="h3d.scene.Scene"/>
			<haxe_doc>Default 3D scene.</haxe_doc>
		</s3d>
		<s2d public="1" set="null">
			<c path="h2d.Scene"/>
			<haxe_doc>Default 2D scene.</haxe_doc>
		</s2d>
		<sevents public="1" set="null">
			<c path="hxd.SceneEvents"/>
			<haxe_doc>Input event listener collection.
		Both 2D and 3D scenes are added to it by default.</haxe_doc>
		</sevents>
		<isDisposed><x path="Bool"/></isDisposed>
		<onResize set="method" line="59">
			<f a=""><x path="Void"/></f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Screen resize callback.

		By default does nothing. Override this method to provide custom on-resize logic.</haxe_doc>
		</onResize>
		<setScene public="1" set="method" line="66">
			<f a="scene:?disposePrevious" v=":true">
				<c path="hxd.InteractiveScene"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ disposePrevious : true }</e></m></meta>
			<haxe_doc>Switch either the 2d or 3d scene with another instance, both in terms of rendering and event handling.
		If you call disposePrevious, it will call dispose() on the previous scene.</haxe_doc>
		</setScene>
		<setCurrent public="1" set="method" line="94">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* When using multiple hxd.App, this will set the current App (the one on which update etc. will be called)</haxe_doc>
		</setCurrent>
		<setScene2D set="method" line="106">
			<f a="s2d:?disposePrevious" v=":true">
				<c path="h2d.Scene"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ disposePrevious : true }</e></m></meta>
		</setScene2D>
		<setScene3D set="method" line="114">
			<f a="s3d:?disposePrevious" v=":true">
				<c path="h3d.scene.Scene"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ disposePrevious : true }</e></m></meta>
		</setScene3D>
		<render public="1" set="method" line="122"><f a="e">
	<c path="h3d.Engine"/>
	<x path="Void"/>
</f></render>
		<setup set="method" line="127"><f a=""><x path="Void"/></f></setup>
		<dispose set="method" line="150"><f a=""><x path="Void"/></f></dispose>
		<loadAssets set="method" line="169">
			<f a="onLoaded">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Load assets asynchronously.

		Called during application setup. By default immediately calls `onLoaded`.
		Override this method to provide asynchronous asset loading logic.

		@param onLoaded a callback that should be called by the overriden
		                method when loading is complete</haxe_doc>
		</loadAssets>
		<init set="method" line="180">
			<f a=""><x path="Void"/></f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Initialize application.

		Called during application setup after `loadAssets` completed.
		By default does nothing. Override this method to provide application initialization logic.</haxe_doc>
		</init>
		<mainLoop set="method" line="183"><f a=""><x path="Void"/></f></mainLoop>
		<update set="method" line="204">
			<f a="dt">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Update application.

		Called each frame right before rendering.
		First call is done after the application is set up (so `loadAssets` and `init` are called).

		@param dt Time elapsed since last frame, normalized.</haxe_doc>
		</update>
		<new public="1" set="method" line="38"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Base class for a Heaps application.

	This class contains code to set up a typical Heaps app,
	including 3D and 2D scene, input, update and loops.

	It's designed to be a base class for an application entry point,
	and provides several methods for overriding, in which we can plug
	custom code. See API documentation for more information.</haxe_doc>
	</class>
	<class path="cornerContourHeapsTest.CornerContourHeapsTest" params="" file="src/cornerContourHeapsTest/CornerContourHeapsTest.hx">
		<extends path="hxd.App"/>
		<alphaChannel public="1" get="inline" set="null" line="75" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="78" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="81" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="84" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
		<sketcher><c path="cornerContour.Sketcher"/></sketcher>
		<pen2D><c path="cornerContour.Pen2D"/></pen2D>
		<quadtest_d expr="&quot;M200,300 Q400,50 600,300 T1000,300&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M200,300 Q400,50 600,300 T1000,300"</e></m></meta>
		</quadtest_d>
		<cubictest_d expr="&quot;M100,200 C100,100 250,100 250,200S400,300 400,200&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M100,200 C100,100 250,100 250,200S400,300 400,200"</e></m></meta>
		</cubictest_d>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<g><c path="h2d.Graphics"/></g>
		<init set="method" line="34" override="1"><f a=""><x path="Void"/></f></init>
		<rearrageDrawData public="1" set="method" line="50"><f a=""><x path="Void"/></f></rearrageDrawData>
		<renderDraw public="1" set="method" line="87"><f a=""><x path="Void"/></f></renderDraw>
		<update set="method" line="91" override="1"><f a="dt">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<drawHeaps public="1" set="method" line="97">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* draw Heaps word ... not very well</haxe_doc>
		</drawHeaps>
		<birdSVG public="1" set="method" line="158">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* draws Kiwi svg</haxe_doc>
		</birdSVG>
		<cubicSVG public="1" set="method" line="169">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* draws cubic SVG</haxe_doc>
		</cubicSVG>
		<quadSVG public="1" set="method" line="184">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* draws quad SVG</haxe_doc>
		</quadSVG>
		<arcSVG public="1" set="method" line="199">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* draws elipse arcs</haxe_doc>
		</arcSVG>
		<drawSet set="method" line="219"><f a="arcs:col:x:y:s">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawSet>
		<draw_d set="method" line="223"><f a="d:x:y:s:w:color">
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></draw_d>
		<crimson expr="0xFFDC143C">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFFDC143C</e></m></meta>
		</crimson>
		<silver expr="0xFFC0C0C0">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFFC0C0C0</e></m></meta>
		</silver>
		<gainsboro expr="0xFFDCDCDC">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFFDCDCDC</e></m></meta>
		</gainsboro>
		<lightGray expr="0xFFD3D3D3">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFFD3D3D3</e></m></meta>
		</lightGray>
		<arc0_0 expr="&quot;M 100 200 A 100 50 0.0 0 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 0.0 0 1 250 150"</e></m></meta>
		</arc0_0>
		<arc0_1 expr="&quot;M 100 200 A 100 50 0.0 1 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 0.0 1 0 250 150"</e></m></meta>
		</arc0_1>
		<arc0_2 expr="&quot;M 100 200 A 100 50 0.0 1 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 0.0 1 1 250 150"</e></m></meta>
		</arc0_2>
		<arc0_3 expr="&quot;M 100 200 A 100 50 0.0 0 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 0.0 0 0 250 150"</e></m></meta>
		</arc0_3>
		<arc1_0 expr="&quot;M 100 200 A 100 50 0.0 0 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 0.0 0 0 250 150"</e></m></meta>
		</arc1_0>
		<arc1_1 expr="&quot;M 100 200 A 100 50 0.0 1 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 0.0 1 0 250 150"</e></m></meta>
		</arc1_1>
		<arc1_2 expr="&quot;M 100 200 A 100 50 0.0 1 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 0.0 1 1 250 150"</e></m></meta>
		</arc1_2>
		<arc1_3 expr="&quot;M 100 200 A 100 50 0.0 0 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 0.0 0 1 250 150"</e></m></meta>
		</arc1_3>
		<arc2_0 expr="&quot;M 100 200 A 100 50 -15 0 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -15 0 0 250 150"</e></m></meta>
		</arc2_0>
		<arc2_1 expr="&quot;M 100 200 A 100 50 -15 0 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -15 0 1 250 150"</e></m></meta>
		</arc2_1>
		<arc2_2 expr="&quot;M 100 200 A 100 50 -15 1 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -15 1 1 250 150"</e></m></meta>
		</arc2_2>
		<arc2_3 expr="&quot;M 100 200 A 100 50 -15 1 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -15 1 0 250 150"</e></m></meta>
		</arc2_3>
		<arc3_0 expr="&quot;M 100 200 A 100 50 -15 0 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -15 0 0 250 150"</e></m></meta>
		</arc3_0>
		<arc3_1 expr="&quot;M 100 200 A 100 50 -15 0 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -15 0 1 250 150"</e></m></meta>
		</arc3_1>
		<arc3_2 expr="&quot;M 100 200 A 100 50 -15 1 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -15 1 0 250 150"</e></m></meta>
		</arc3_2>
		<arc3_3 expr="&quot;M 100 200 A 100 50 -15 1 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -15 1 1 250 150"</e></m></meta>
		</arc3_3>
		<arc4_0 expr="&quot;M 100 200 A 100 50 -44 1 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -44 1 0 250 150"</e></m></meta>
		</arc4_0>
		<arc4_1 expr="&quot;M 100 200 A 100 50 -44 0 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -44 0 1 250 150"</e></m></meta>
		</arc4_1>
		<arc4_2 expr="&quot;M 100 200 A 100 50 -44 1 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -44 1 1 250 150"</e></m></meta>
		</arc4_2>
		<arc4_3 expr="&quot;M 100 200 A 100 50 -44 0 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -44 0 0 250 150"</e></m></meta>
		</arc4_3>
		<arc5_0 expr="&quot;M 100 200 A 100 50 -44 0 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -44 0 0 250 150"</e></m></meta>
		</arc5_0>
		<arc5_1 expr="&quot;M 100 200 A 100 50 -44 1 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -44 1 1 250 150"</e></m></meta>
		</arc5_1>
		<arc5_2 expr="&quot;M 100 200 A 100 50 -44 1 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -44 1 0 250 150"</e></m></meta>
		</arc5_2>
		<arc5_3 expr="&quot;M 100 200 A 100 50 -44 0 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -44 0 1 250 150"</e></m></meta>
		</arc5_3>
		<arc6_0 expr="&quot;M 100 200 A 100 50 -45 0 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -45 0 0 250 150"</e></m></meta>
		</arc6_0>
		<arc6_1 expr="&quot;M 100 200 A 100 50 -45 0 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -45 0 1 250 150"</e></m></meta>
		</arc6_1>
		<arc6_2 expr="&quot;M 100 200 A 100 50 -45 1 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -45 1 1 250 150"</e></m></meta>
		</arc6_2>
		<arc6_3 expr="&quot;M 100 200 A 100 50 -45 1 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -45 1 0 250 150"</e></m></meta>
		</arc6_3>
		<arc7_0 expr="&quot;M 100 200 A 100 50 -45 0 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -45 0 0 250 150"</e></m></meta>
		</arc7_0>
		<arc7_1 expr="&quot;M 100 200 A 100 50 -45 0 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -45 0 1 250 150"</e></m></meta>
		</arc7_1>
		<arc7_2 expr="&quot;M 100 200 A 100 50 -45 1 0 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -45 1 0 250 150"</e></m></meta>
		</arc7_2>
		<arc7_3 expr="&quot;M 100 200 A 100 50 -45 1 1 250 150&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M 100 200 A 100 50 -45 1 1 250 150"</e></m></meta>
		</arc7_3>
		<bird_d expr="&quot;M210.333,65.331C104.367,66.105-12.349,150.637,1.056,276.449c4.303,40.393,18.533,63.704,52.171,79.03c36.307,16.544,57.022,54.556,50.406,112.954c-9.935,4.88-17.405,11.031-19.132,20.015c7.531-0.17,14.943-0.312,22.59,4.341c20.333,12.375,31.296,27.363,42.979,51.72c1.714,3.572,8.192,2.849,8.312-3.078c0.17-8.467-1.856-17.454-5.226-26.933c-2.955-8.313,3.059-7.985,6.917-6.106c6.399,3.115,16.334,9.43,30.39,13.098c5.392,1.407,5.995-3.877,5.224-6.991c-1.864-7.522-11.009-10.862-24.519-19.229c-4.82-2.984-0.927-9.736,5.168-8.351l20.234,2.415c3.359,0.763,4.555-6.114,0.882-7.875c-14.198-6.804-28.897-10.098-53.864-7.799c-11.617-29.265-29.811-61.617-15.674-81.681c12.639-17.938,31.216-20.74,39.147,43.489c-5.002,3.107-11.215,5.031-11.332,13.024c7.201-2.845,11.207-1.399,14.791,0c17.912,6.998,35.462,21.826,52.982,37.309c3.739,3.303,8.413-1.718,6.991-6.034c-2.138-6.494-8.053-10.659-14.791-20.016c-3.239-4.495,5.03-7.045,10.886-6.876c13.849,0.396,22.886,8.268,35.177,11.218c4.483,1.076,9.741-1.964,6.917-6.917c-3.472-6.085-13.015-9.124-19.18-13.413c-4.357-3.029-3.025-7.132,2.697-6.602c3.905,0.361,8.478,2.271,13.908,1.767c9.946-0.925,7.717-7.169-0.883-9.566c-19.036-5.304-39.891-6.311-61.665-5.225c-43.837-8.358-31.554-84.887,0-90.363c29.571-5.132,62.966-13.339,99.928-32.156c32.668-5.429,64.835-12.446,92.939-33.85c48.106-14.469,111.903,16.113,204.241,149.695c3.926,5.681,15.819,9.94,9.524-6.351c-15.893-41.125-68.176-93.328-92.13-132.085c-24.581-39.774-14.34-61.243-39.957-91.247c-21.326-24.978-47.502-25.803-77.339-17.365c-23.461,6.634-39.234-7.117-52.98-31.273C318.42,87.525,265.838,64.927,210.333,65.331zM445.731,203.01c6.12,0,11.112,4.919,11.112,11.038c0,6.119-4.994,11.111-11.112,11.111s-11.038-4.994-11.038-11.111C434.693,207.929,439.613,203.01,445.731,203.01z&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"M210.333,65.331C104.367,66.105-12.349,150.637,1.056,276.449c4.303,40.393,18.533,63.704,52.171,79.03c36.307,16.544,57.022,54.556,50.406,112.954c-9.935,4.88-17.405,11.031-19.132,20.015c7.531-0.17,14.943-0.312,22.59,4.341c20.333,12.375,31.296,27.363,42.979,51.72c1.714,3.572,8.192,2.849,8.312-3.078c0.17-8.467-1.856-17.454-5.226-26.933c-2.955-8.313,3.059-7.985,6.917-6.106c6.399,3.115,16.334,9.43,30.39,13.098c5.392,1.407,5.995-3.877,5.224-6.991c-1.864-7.522-11.009-10.862-24.519-19.229c-4.82-2.984-0.927-9.736,5.168-8.351l20.234,2.415c3.359,0.763,4.555-6.114,0.882-7.875c-14.198-6.804-28.897-10.098-53.864-7.799c-11.617-29.265-29.811-61.617-15.674-81.681c12.639-17.938,31.216-20.74,39.147,43.489c-5.002,3.107-11.215,5.031-11.332,13.024c7.201-2.845,11.207-1.399,14.791,0c17.912,6.998,35.462,21.826,52.982,37.309c3.739,3.303,8.413-1.718,6.991-6.034c-2.138-6.494-8.053-10.659-14.791-20.016c-3.239-4.495,5.03-7.045,10.886-6.876c13.849,0.396,22.886,8.268,35.177,11.218c4.483,1.076,9.741-1.964,6.917-6.917c-3.472-6.085-13.015-9.124-19.18-13.413c-4.357-3.029-3.025-7.132,2.697-6.602c3.905,0.361,8.478,2.271,13.908,1.767c9.946-0.925,7.717-7.169-0.883-9.566c-19.036-5.304-39.891-6.311-61.665-5.225c-43.837-8.358-31.554-84.887,0-90.363c29.571-5.132,62.966-13.339,99.928-32.156c32.668-5.429,64.835-12.446,92.939-33.85c48.106-14.469,111.903,16.113,204.241,149.695c3.926,5.681,15.819,9.94,9.524-6.351c-15.893-41.125-68.176-93.328-92.13-132.085c-24.581-39.774-14.34-61.243-39.957-91.247c-21.326-24.978-47.502-25.803-77.339-17.365c-23.461,6.634-39.234-7.117-52.98-31.273C318.42,87.525,265.838,64.927,210.333,65.331zM445.731,203.01c6.12,0,11.112,4.919,11.112,11.038c0,6.119-4.994,11.111-11.112,11.111s-11.038-4.994-11.038-11.111C434.693,207.929,439.613,203.01,445.731,203.01z"</e></m></meta>
		</bird_d>
		<new public="1" set="method" line="20"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cornerContourHeapsTest._CornerContourHeapsTest.CornerContourHeapsTest_Fields_" params="" file="src/cornerContourHeapsTest/CornerContourHeapsTest.hx" private="1" module="cornerContourHeapsTest.CornerContourHeapsTest" final="1"><main public="1" set="method" line="16" static="1"><f a=""><x path="Void"/></f></main></class>
	<class path="cornerContourHeapsTest.doc.Doc" params="" file="src/cornerContourHeapsTest/doc/Doc.hx">
		<main public="1" set="method" line="6" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<typedef path="format.gif.Data" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/gif/Data.hx">
		<a>
			<version>
				<e path="format.gif.Version"/>
				<haxe_doc>* Gif version. There is only 2 Gif version exists. 87a and 89a.
   * 87a have less features and does not support any extensions.
   * Unknown version is adviced to be interpreted as newest (89a) official version.</haxe_doc>
			</version>
			<logicalScreenDescriptor>
				<t path="format.gif.LogicalScreenDescriptor"/>
				<haxe_doc>* Information about logical screen of Gif that provides basic information about Gif.</haxe_doc>
			</logicalScreenDescriptor>
			<globalColorTable>
				<x path="Null"><t path="format.gif.ColorTable"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Global color table used for Gif. Present only if Logical Screen Descriptor contained global color table flag.
   * Note that this color table not always present since frames can contain local color tables that overrides global color table.</haxe_doc>
			</globalColorTable>
			<blocks>
				<t path="List"><e path="format.gif.Block"/></t>
				<haxe_doc>* List of Gif data blocks.</haxe_doc>
			</blocks>
		</a>
		<haxe_doc>* Gif data.</haxe_doc>
	</typedef>
	<enum path="format.gif.Block" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/gif/Data.hx" module="format.gif.Data">
		<BFrame a="frame">
			<t path="format.gif.Frame"/>
			<haxe_doc>* Gif frame block.
   * Note that this block does not contain link to graphic control extension of Frame even if it is present. GraphicControl extension Block commonly present right before frame Block.</haxe_doc>
		</BFrame>
		<BExtension a="extension">
			<e path="format.gif.Extension"/>
			<haxe_doc>* Additional extension block. This Block does not supported in 87a Gif specification version.</haxe_doc>
		</BExtension>
		<BEOF><haxe_doc>* End of File block. Represents end of Gif data.</haxe_doc></BEOF>
		<haxe_doc>* Gif data block. Custom blocks are not supported.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.gif.Extension" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/gif/Data.hx" module="format.gif.Data">
		<EGraphicControl a="gce">
			<t path="format.gif.GraphicControlExtension"/>
			<haxe_doc>* Graphic Control extension gives additional control over next frame, like frame delay, disposal method, alpha channel and other information.</haxe_doc>
		</EGraphicControl>
		<EComment a="text">
			<c path="String"/>
			<haxe_doc>* Commentary extension. Not show up as any visual, just a text in file.</haxe_doc>
		</EComment>
		<EText a="pte">
			<t path="format.gif.PlainTextExtension"/>
			<haxe_doc>* Text extension. Must work as text rendering on the image, but ignored by all major Gif decoders.</haxe_doc>
		</EText>
		<EApplicationExtension a="ext">
			<e path="format.gif.ApplicationExtension"/>
			<haxe_doc>* Application extension allow to insert additional application data into Gif. Mostly used app extension is NETSCAPE2.0 looping extension, used to set up amount of loops in frame.</haxe_doc>
		</EApplicationExtension>
		<EUnknown a="id:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
			<haxe_doc>* Unknown extension.</haxe_doc>
		</EUnknown>
		<haxe_doc>* Extension block contains additional data about Gif image. This block does not supported by 87a version.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.gif.ApplicationExtension" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/gif/Data.hx" module="format.gif.Data">
		<AENetscapeLooping a="loops">
			<x path="Int"/>
			<haxe_doc>* NETSCAPE2.0 looping extension. Contains only amount of animation repeats.
   * Note that there is two NETSCAPE2.0 app extensions for Gif format and the type of extension is stored in first byte of data. Looping extension have ID 1.</haxe_doc>
		</AENetscapeLooping>
		<AEUnknown a="name:version:data">
			<c path="String"/>
			<c path="String"/>
			<c path="haxe.io.Bytes"/>
			<haxe_doc>* Unknown or unsupported app extension.</haxe_doc>
		</AEUnknown>
		<haxe_doc>* Application extension. Mostly used only for one reason - setting up loops count. There is exist other app extensions but they are really rare.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.gif.ColorTable" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/gif/Data.hx" module="format.gif.Data">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>* Typical color table for Gif image.
 * Can contain 2, 4, 8, 16, 32, 64, 128 or 256 colors.
 * Data stored in RGB format. Information about alpha channel provided by Graohic Control Extension.</haxe_doc>
	</typedef>
	<typedef path="format.gif.Frame" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/gif/Data.hx" module="format.gif.Data">
		<a>
			<y>
				<x path="Int"/>
				<haxe_doc>* Y position of image on the Logical Screen</haxe_doc>
			</y>
			<x>
				<x path="Int"/>
				<haxe_doc>* X position of image on the Logical Screen</haxe_doc>
			</x>
			<width>
				<x path="Int"/>
				<haxe_doc>* Width of image in pixels</haxe_doc>
			</width>
			<sorted>
				<x path="Bool"/>
				<haxe_doc>* Is local color table sorted in order of decreasing priority?</haxe_doc>
			</sorted>
			<pixels>
				<c path="haxe.io.Bytes"/>
				<haxe_doc>* Pixel data of frame. Stored as Indexed colors, 1 byte per pixel.</haxe_doc>
			</pixels>
			<localColorTableSize>
				<x path="Int"/>
				<haxe_doc>* Size of local color table</haxe_doc>
			</localColorTableSize>
			<localColorTable>
				<x path="Bool"/>
				<haxe_doc>* Is this image uses local color table?</haxe_doc>
			</localColorTable>
			<interlaced>
				<x path="Bool"/>
				<haxe_doc>* Is this image written in interlace mode?
   * Note: The pixel data already deinterlaced and this flag presented only for information purpose (and for Writer when there is one).</haxe_doc>
			</interlaced>
			<height>
				<x path="Int"/>
				<haxe_doc>* Height of image in pixels</haxe_doc>
			</height>
			<colorTable>
				<t path="format.gif.ColorTable"/>
				<haxe_doc>* Local color table used by frame. Stored as 3-byte RGB colors. If value is null, must be used global color table.</haxe_doc>
			</colorTable>
		</a>
		<haxe_doc>* Single frame of the image.
 * Actually it's a merge of 3 consequent blocks:
 * 1. Image Descriptor.
 * Contains frame informations like position, size, existing of local color table and interlaced flag.
 * 2. [Local color table].
 * Only present if Image Descriptor contains local color table flag. Overrides global color table.
 * 3. Pixel data blocks.
 * LZW compressed pixel data.</haxe_doc>
	</typedef>
	<typedef path="format.gif.GraphicControlExtension" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/gif/Data.hx" module="format.gif.Data">
		<a>
			<userInput>
				<x path="Bool"/>
				<haxe_doc>* Is image must wait for user input, before dispose?
   * This flag may be used by user-defined program but absolutely ignored by any Gif players.</haxe_doc>
			</userInput>
			<transparentIndex>
				<x path="Int"/>
				<haxe_doc>* Index in color table that used as transparent.</haxe_doc>
			</transparentIndex>
			<hasTransparentColor>
				<x path="Bool"/>
				<haxe_doc>* Is image have transparency?</haxe_doc>
			</hasTransparentColor>
			<disposalMethod>
				<e path="format.gif.DisposalMethod"/>
				<haxe_doc>* Disposal method of frame.</haxe_doc>
			</disposalMethod>
			<delay>
				<x path="Int"/>
				<haxe_doc>* Delay, before next image appears. Delay is in centiseconds (1 centisecond = 1/100 seconds).
   * Note: Some players (like FastStone) cut fraction of elapsed time when progressing to next frame which results in small timing error.
   * Recommended to use `time -= delay` instead of `time = 0`.</haxe_doc>
			</delay>
		</a>
		<haxe_doc>* Graphic Control Extension block, used for setting up disposal method, transparency, delay and user input.</haxe_doc>
	</typedef>
	<typedef path="format.gif.PlainTextExtension" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/gif/Data.hx" module="format.gif.Data">
		<a>
			<textGridY>
				<x path="Int"/>
				<haxe_doc>* Y position of text grid on Logical Screen.</haxe_doc>
			</textGridY>
			<textGridX>
				<x path="Int"/>
				<haxe_doc>* X position of text grid on Logical Screen.</haxe_doc>
			</textGridX>
			<textGridWidth>
				<x path="Int"/>
				<haxe_doc>* Width of text grid in pixels.</haxe_doc>
			</textGridWidth>
			<textGridHeight>
				<x path="Int"/>
				<haxe_doc>* Height of text grid in pixels.</haxe_doc>
			</textGridHeight>
			<textForegroundColorIndex>
				<x path="Int"/>
				<haxe_doc>* Foreground/character color index.</haxe_doc>
			</textForegroundColorIndex>
			<textBackgroundColorIndex>
				<x path="Int"/>
				<haxe_doc>* Background color index.</haxe_doc>
			</textBackgroundColorIndex>
			<text>
				<c path="String"/>
				<haxe_doc>* Text to render.</haxe_doc>
			</text>
			<charCellWidth>
				<x path="Int"/>
				<haxe_doc>* Width of character cell in text grid.</haxe_doc>
			</charCellWidth>
			<charCellHeight>
				<x path="Int"/>
				<haxe_doc>* Height of character cell in text grid.</haxe_doc>
			</charCellHeight>
		</a>
		<haxe_doc>* Extension for rendering text on Gif logical screen. It does not supported by major Gif decoders.
 * Font and text size decision is left to decoder. (recommended to decide based on grid/cell size)
 * Text must be rendered with one character at cell.
 * It's recommended to replace any characters less than 0x20 and greater than 0xf7 to be rendered as Space (0x20)</haxe_doc>
	</typedef>
	<typedef path="format.gif.LogicalScreenDescriptor" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/gif/Data.hx" module="format.gif.Data">
		<a>
			<width>
				<x path="Int"/>
				<haxe_doc>* Width of GIF image in pixels</haxe_doc>
			</width>
			<sorted>
				<x path="Bool"/>
				<haxe_doc>* Specification:
   * Indicates whether the Global Color Table is sorted.
     If the flag is set, the Global Color Table is sorted, in order of
     decreasing importance. Typically, the order would be decreasing
     frequency, with most frequent color first. This assists a decoder,
     with fewer available colors, in choosing the best subset of colors;
     the decoder may use an initial segment of the table to render the
     graphic.</haxe_doc>
			</sorted>
			<pixelAspectRatio>
				<x path="Float"/>
				<haxe_doc>* Factor used to compute an approximation of the aspect ratio of the pixel in the original image.</haxe_doc>
			</pixelAspectRatio>
			<height>
				<x path="Int"/>
				<haxe_doc>* Height of GIF image in pixels</haxe_doc>
			</height>
			<hasGlobalColorTable>
				<x path="Bool"/>
				<haxe_doc>* Is this file uses global color table?</haxe_doc>
			</hasGlobalColorTable>
			<globalColorTableSize>
				<x path="Int"/>
				<haxe_doc>* Size of global color table.</haxe_doc>
			</globalColorTableSize>
			<colorResolution>
				<x path="Int"/>
				<haxe_doc>* Specification:
   * Number of bits per primary color available
     to the original image, minus 1. This value represents the size of
     the entire palette from which the colors in the graphic were
     selected, not the number of colors actually used in the graphic.
     For example, if the value in this field is 3, then the palette of
     the original image had 4 bits per primary color available to create
     the image.  This value should be set to indicate the richness of
     the original palette, even if not every color from the whole
     palette is available on the source machine.</haxe_doc>
			</colorResolution>
			<backgroundColorIndex>
				<x path="Int"/>
				<haxe_doc>* Background color index in global color table</haxe_doc>
			</backgroundColorIndex>
		</a>
		<haxe_doc>* Logical screen descriptor of GIF file.
 * Contains very basic information about Gif.</haxe_doc>
	</typedef>
	<enum path="format.gif.Version" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/gif/Data.hx" module="format.gif.Data">
		<GIF87a><haxe_doc>* First version of Gif file format from May 1987.
   * 
   * Note: The checking of unsupported blocks disabled by default to save some time. To enable supported blocks check set `yagp_strict_version_check` debug variable.</haxe_doc></GIF87a>
		<GIF89a><haxe_doc>* Second and actual version of Gif file format from July 1989.</haxe_doc></GIF89a>
		<Unknown a="version">
			<c path="String"/>
			<haxe_doc>* Unknown version of Gif file.</haxe_doc>
		</Unknown>
		<haxe_doc>* Version of Gif file.  
 * The only 2 official versions is GIF87a and GIF89a.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.gif.DisposalMethod" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/gif/Data.hx" module="format.gif.Data">
		<UNSPECIFIED><haxe_doc>* The disposal method is unspecified. Action on demand of viewer.
   * 
   * Mostly interpreted as NO_ACTION.</haxe_doc></UNSPECIFIED>
		<NO_ACTION><haxe_doc>* No action required.</haxe_doc></NO_ACTION>
		<FILL_BACKGROUND><haxe_doc>* Fill frame rectangle with background color.
   * 
   * Usage note: 
   * Most renderers clears to transparency instead of filling background color, when frame's transparent color index not equals to background color index.</haxe_doc></FILL_BACKGROUND>
		<RENDER_PREVIOUS><haxe_doc>* Render previous state of gif as it before rendering disposing frame.</haxe_doc></RENDER_PREVIOUS>
		<UNDEFINED a="index">
			<x path="Int"/>
			<haxe_doc>* Reserved disposal methods.</haxe_doc>
		</UNDEFINED>
		<haxe_doc>* Disposal method of GIF frame.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="format.gif.Reader" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/gif/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<read public="1" set="method" line="23"><f a=""><t path="format.gif.Data"/></f></read>
		<readBlock set="method" line="81"><f a=""><e path="format.gif.Block"/></f></readBlock>
		<readImage set="method" line="99"><f a=""><e path="format.gif.Block"/></f></readImage>
		<readPixels set="method" line="130"><f a="width:height:interlaced">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="haxe.io.Bytes"/>
</f></readPixels>
		<deinterlace set="method" line="237"><f a="input:output:step:y:offset:width:height">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></deinterlace>
		<readExtension set="method" line="248"><f a=""><e path="format.gif.Block"/></f></readExtension>
		<readApplicationExtension set="method" line="303"><f a=""><e path="format.gif.Block"/></f></readApplicationExtension>
		<readBlocks get="inline" set="null" line="316"><f a=""><c path="haxe.io.Bytes"/></f></readBlocks>
		<readColorTable set="method" line="333"><f a="size">
	<x path="Int"/>
	<t path="format.gif.ColorTable"/>
</f></readColorTable>
		<new public="1" set="method" line="17"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Yanrishatum</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.gif.Tools" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/gif/Tools.hx">
		<framesCount public="1" set="method" line="17" static="1">
			<f a="data">
				<t path="format.gif.Data"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns amount of frames in Gif data.</haxe_doc>
		</framesCount>
		<frame public="1" set="method" line="38" static="1">
			<f a="data:frameIndex">
				<t path="format.gif.Data"/>
				<x path="Int"/>
				<t path="format.gif.Frame"/>
			</f>
			<haxe_doc>* Returns frame at given index.
   * @param data Gif data.
   * @param frameIndex Index of frame.
   * @return Frame at given index or null, if there is no frame at that index.</haxe_doc>
		</frame>
		<graphicControl public="1" set="method" line="60" static="1">
			<f a="data:frameIndex">
				<t path="format.gif.Data"/>
				<x path="Int"/>
				<t path="format.gif.GraphicControlExtension"/>
			</f>
			<haxe_doc>* Returns Graphic Control extension for frame at given index.
   * @param data Gif data.
   * @param frameIndex Index of frame.
   * @return GCE extension if it is exists for given frame, null otherwise.</haxe_doc>
		</graphicControl>
		<extractBGRA public="1" set="method" line="91" static="1">
			<f a="data:frameIndex">
				<t path="format.gif.Data"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>* Extracts frame pixel data in Blue-Green-Red-Alpha pixel format.
   * This function extracts only exact frame and does put previous frame pixel data into resulting Bytes. Note that frame size may not equal to Gif logical screen size.
   * @param data Gif data.
   * @param frameIndex Frame index.
   * @return BGRA pixel data with dimensions equals to specified Frame size. If frame does not present in Gif data returns null.</haxe_doc>
		</extractBGRA>
		<extractRGBA public="1" set="method" line="142" static="1">
			<f a="data:frameIndex">
				<t path="format.gif.Data"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>* Extracts frame pixel data in Red-Green-Blue-Alpha pixel format.
   * This function extracts only exact frame and does put previous frame pixel data into resulting Bytes. Note that frame size may not equal to Gif logical screen size.
   * @param data Gif data.
   * @param frameIndex Frame index.
   * @return RGBA pixel data with dimensions equals to specified Frame size. If frame does not present in Gif data returns null.</haxe_doc>
		</extractRGBA>
		<extractFullBGRA public="1" set="method" line="193" static="1">
			<f a="data:frameIndex">
				<t path="format.gif.Data"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>* Extracts full Gif pixel data to specified frame in Blue-Green-Red-Alpha pixel format.
   * This functions returns full representation of frame including rendering of all other frames before.
   * @param data Gif data.
   * @param frameIndex Frame index.
   * @return BGRA pixel data with dimensions equals to Gif logical screen with full pixel data of Gif image at specified frame.</haxe_doc>
		</extractFullBGRA>
		<extractFullRGBA public="1" set="method" line="279" static="1">
			<f a="data:frameIndex">
				<t path="format.gif.Data"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>* Extracts full Gif pixel data to specified frame in Red-Green-Blue-Alpha pixel format.
   * This functions returns full representation of frame including rendering of all other frames before.
   * @param data Gif data.
   * @param frameIndex Frame index.
   * @return RGBA pixel data with dimensions equals to Gif logical screen with full pixel data of Gif image at specified frame.</haxe_doc>
		</extractFullRGBA>
		<loopCount public="1" set="method" line="364" static="1">
			<f a="data">
				<t path="format.gif.Data"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns amount of animation repeats stored in Gif data.
   * This is link to Netscape Looping application extension. If this extension does not present amount of loops equals to 1.
   * @param data Gif data.
   * @return Amount of animation repeats. Zero equals to infinite amount of repeats.</haxe_doc>
		</loopCount>
		<LN2 expr="Math.log(2)" line="385" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>Math.log(2)</e></m></meta>
		</LN2>
		<log2 public="1" get="inline" set="null" line="387" static="1">
			<f a="val">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</log2>
		<haxe_doc>* Tools for gif data.
 * @author Yanrishatum</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="format.mp3.SamplingRate" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Data.hx" module="format.mp3.Data">
		<SR_8000/>
		<SR_11025/>
		<SR_12000/>
		<SR_22050/>
		<SR_24000/>
		<SR_32000/>
		<SR_44100/>
		<SR_48000/>
		<SR_Bad/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.mp3.Bitrate" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Data.hx" module="format.mp3.Data">
		<BR_8/>
		<BR_16/>
		<BR_24/>
		<BR_32/>
		<BR_40/>
		<BR_48/>
		<BR_56/>
		<BR_64/>
		<BR_80/>
		<BR_96/>
		<BR_112/>
		<BR_128/>
		<BR_144/>
		<BR_160/>
		<BR_176/>
		<BR_192/>
		<BR_224/>
		<BR_256/>
		<BR_288/>
		<BR_320/>
		<BR_352/>
		<BR_384/>
		<BR_416/>
		<BR_448/>
		<BR_Free/>
		<BR_Bad/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="format.mp3.MPEG" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Constants.hx" module="format.mp3.Constants">
		<V1 public="1" get="inline" set="null" expr="3" line="11" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</V1>
		<V2 public="1" get="inline" set="null" expr="2" line="12" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</V2>
		<V25 public="1" get="inline" set="null" expr="0" line="13" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</V25>
		<Reserved public="1" expr="1" line="14" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</Reserved>
		<enum2Num public="1" set="method" line="16" static="1"><f a="m">
	<e path="format.mp3.MPEGVersion"/>
	<x path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="25" static="1"><f a="m">
	<x path="Int"/>
	<e path="format.mp3.MPEGVersion"/>
</f></num2Enum>
		<V1_Bitrates public="1" expr="[[BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad], [BR_Free, BR_32, BR_40, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_160, BR_192, BR_224, BR_256, BR_320, BR_Bad], [BR_Free, BR_32, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_160, BR_192, BR_224, BR_256, BR_320, BR_384, BR_Bad], [BR_Free, BR_32, BR_64, BR_96, BR_128, BR_160, BR_192, BR_224, BR_256, BR_288, BR_320, BR_352, BR_384, BR_416, BR_448, BR_Bad]]" line="35" static="1">
			<c path="Array"><c path="Array"><e path="format.mp3.Bitrate"/></c></c>
			<meta><m n=":value"><e>[[BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad], [BR_Free, BR_32, BR_40, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_160, BR_192, BR_224, BR_256, BR_320, BR_Bad], [BR_Free, BR_32, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_160, BR_192, BR_224, BR_256, BR_320, BR_384, BR_Bad], [BR_Free, BR_32, BR_64, BR_96, BR_128, BR_160, BR_192, BR_224, BR_256, BR_288, BR_320, BR_352, BR_384, BR_416, BR_448, BR_Bad]]</e></m></meta>
		</V1_Bitrates>
		<V2_Bitrates public="1" expr="[[BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad], [BR_Free, BR_8, BR_16, BR_24, BR_32, BR_40, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_144, BR_160, BR_Bad], [BR_Free, BR_8, BR_16, BR_24, BR_32, BR_40, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_144, BR_160, BR_Bad], [BR_Free, BR_32, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_144, BR_160, BR_176, BR_192, BR_224, BR_256, BR_Bad]]" line="43" static="1">
			<c path="Array"><c path="Array"><e path="format.mp3.Bitrate"/></c></c>
			<meta><m n=":value"><e>[[BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad], [BR_Free, BR_8, BR_16, BR_24, BR_32, BR_40, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_144, BR_160, BR_Bad], [BR_Free, BR_8, BR_16, BR_24, BR_32, BR_40, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_144, BR_160, BR_Bad], [BR_Free, BR_32, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_144, BR_160, BR_176, BR_192, BR_224, BR_256, BR_Bad]]</e></m></meta>
		</V2_Bitrates>
		<SamplingRates public="1" expr="[[SR_11025, SR_12000, SR_8000, SR_Bad], [SR_Bad, SR_Bad, SR_Bad, SR_Bad], [SR_22050, SR_24000, SR_12000, SR_Bad], [SR_44100, SR_48000, SR_32000, SR_Bad]]" line="51" static="1">
			<c path="Array"><c path="Array"><e path="format.mp3.SamplingRate"/></c></c>
			<meta><m n=":value"><e>[[SR_11025, SR_12000, SR_8000, SR_Bad], [SR_Bad, SR_Bad, SR_Bad, SR_Bad], [SR_22050, SR_24000, SR_12000, SR_Bad], [SR_44100, SR_48000, SR_32000, SR_Bad]]</e></m></meta>
		</SamplingRates>
		<srNum2Enum public="1" set="method" line="58" static="1"><f a="sr">
	<x path="Int"/>
	<e path="format.mp3.SamplingRate"/>
</f></srNum2Enum>
		<srEnum2Num public="1" set="method" line="72" static="1"><f a="sr">
	<e path="format.mp3.SamplingRate"/>
	<x path="Int"/>
</f></srEnum2Num>
		<getBitrateIdx public="1" set="method" line="87" static="1"><f a="br:mpeg:layer">
	<e path="format.mp3.Bitrate"/>
	<e path="format.mp3.MPEGVersion"/>
	<e path="format.mp3.Layer"/>
	<x path="Int"/>
</f></getBitrateIdx>
		<getSamplingRateIdx public="1" set="method" line="96" static="1"><f a="sr:mpeg">
	<e path="format.mp3.SamplingRate"/>
	<e path="format.mp3.MPEGVersion"/>
	<x path="Int"/>
</f></getSamplingRateIdx>
		<bitrateEnum2Num public="1" set="method" line="105" static="1"><f a="br">
	<e path="format.mp3.Bitrate"/>
	<x path="Int"/>
</f></bitrateEnum2Num>
		<bitrateNum2Enum public="1" set="method" line="136" static="1"><f a="br">
	<x path="Int"/>
	<e path="format.mp3.Bitrate"/>
</f></bitrateNum2Enum>
		<haxe_doc>* MPEG Version
 *
 * sored on 2 bits in the file,
 * values represent bit values</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.mp3.CLayer" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Constants.hx" module="format.mp3.Constants">
		<LReserved public="1" expr="0" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</LReserved>
		<LLayer3 public="1" expr="1" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LLayer3>
		<LLayer2 public="1" expr="2" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LLayer2>
		<LLayer1 public="1" expr="3" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LLayer1>
		<enum2Num public="1" set="method" line="182" static="1"><f a="l">
	<e path="format.mp3.Layer"/>
	<x path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="191" static="1"><f a="l">
	<x path="Int"/>
	<e path="format.mp3.Layer"/>
</f></num2Enum>
		<haxe_doc>* Layer
 *
 * stored on 2 bits in the file,
 * values represent bit values</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.mp3.CChannelMode" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Constants.hx" module="format.mp3.Constants">
		<CStereo public="1" get="inline" set="null" expr="0" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</CStereo>
		<CJointStereo public="1" get="inline" set="null" expr="1" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</CJointStereo>
		<CDualChannel public="1" get="inline" set="null" expr="2" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CDualChannel>
		<CMono public="1" get="inline" set="null" expr="3" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</CMono>
		<enum2Num public="1" set="method" line="214" static="1"><f a="c">
	<e path="format.mp3.ChannelMode"/>
	<x path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="223" static="1"><f a="c">
	<x path="Int"/>
	<e path="format.mp3.ChannelMode"/>
</f></num2Enum>
		<haxe_doc>* Sound channel mode
 *
 * stored on 2 bits in the file,
 * values represent bit values</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.mp3.CEmphasis" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Constants.hx" module="format.mp3.Constants">
		<ENone public="1" get="inline" set="null" expr="0" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ENone>
		<EMs50_15 public="1" get="inline" set="null" expr="1" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</EMs50_15>
		<EReserved public="1" get="inline" set="null" expr="2" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</EReserved>
		<ECCIT_J17 public="1" get="inline" set="null" expr="3" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</ECCIT_J17>
		<enum2Num public="1" set="method" line="245" static="1"><f a="c">
	<e path="format.mp3.Emphasis"/>
	<x path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="254" static="1"><f a="c">
	<x path="Int"/>
	<e path="format.mp3.Emphasis"/>
</f></num2Enum>
		<haxe_doc>* Emphasis
 *
 * 2 bits</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="format.mp3.MP3" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Data.hx" module="format.mp3.Data"><a>
	<sampleSize><x path="Int"/></sampleSize>
	<sampleCount><x path="Int"/></sampleCount>
	<id3v2><t path="format.mp3.ID3v2Info"/></id3v2>
	<frames><c path="Array"><t path="format.mp3.MP3Frame"/></c></frames>
</a></typedef>
	<typedef path="format.mp3.ID3v2Info" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Data.hx" module="format.mp3.Data"><a>
	<versionBytes><x path="Int"/></versionBytes>
	<flagByte><x path="Int"/></flagByte>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<typedef path="format.mp3.MP3Frame" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Data.hx" module="format.mp3.Data"><a>
	<header><t path="format.mp3.MP3Header"/></header>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<typedef path="format.mp3.MP3Header" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Data.hx" module="format.mp3.Data"><a>
	<version><e path="format.mp3.MPEGVersion"/></version>
	<samplingRate><e path="format.mp3.SamplingRate"/></samplingRate>
	<privateBit><x path="Bool"/></privateBit>
	<layer><e path="format.mp3.Layer"/></layer>
	<isPadded><x path="Bool"/></isPadded>
	<isOriginal><x path="Bool"/></isOriginal>
	<isMSStereo><x path="Bool"/></isMSStereo>
	<isIntensityStereo><x path="Bool"/></isIntensityStereo>
	<isCopyrighted><x path="Bool"/></isCopyrighted>
	<hasCrc><x path="Bool"/></hasCrc>
	<emphasis><e path="format.mp3.Emphasis"/></emphasis>
	<crc16><x path="Int"/></crc16>
	<channelMode><e path="format.mp3.ChannelMode"/></channelMode>
	<bitrate><e path="format.mp3.Bitrate"/></bitrate>
</a></typedef>
	<enum path="format.mp3.MPEGVersion" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Data.hx" module="format.mp3.Data">
		<MPEG_V1/>
		<MPEG_V2/>
		<MPEG_V25/>
		<MPEG_Reserved/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.mp3.Layer" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Data.hx" module="format.mp3.Data">
		<LayerReserved/>
		<Layer3/>
		<Layer2/>
		<Layer1/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.mp3.ChannelMode" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Data.hx" module="format.mp3.Data">
		<Stereo/>
		<JointStereo/>
		<DualChannel/>
		<Mono/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.mp3.Emphasis" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Data.hx" module="format.mp3.Data">
		<NoEmphasis/>
		<Ms50_15/>
		<CCIT_J17/>
		<InvalidEmphasis/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.mp3.FrameType" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Reader.hx" module="format.mp3.Reader">
		<FT_MP3/>
		<FT_NONE/>
		<haxe_doc>* Used by seekFrame to retrun the type
 * of frame (possibly) found.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="format.mp3.Reader" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<bits><c path="format.tools.BitsInput"/></bits>
		<version><x path="Int"/></version>
		<samples><x path="Int"/></samples>
		<sampleSize><x path="Int"/></sampleSize>
		<any_read><x path="Bool"/></any_read>
		<id3v2_data><c path="haxe.io.Bytes"/></id3v2_data>
		<id3v2_version><x path="Int"/></id3v2_version>
		<id3v2_flags><x path="Int"/></id3v2_flags>
		<skipID3v2 public="1" set="method" line="78">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Called after found 'ID3' signature
    * at the beginning of the file.
    *
    * Records the raw tag data.</haxe_doc>
		</skipID3v2>
		<seekFrame public="1" set="method" line="101">
			<f a=""><e path="format.mp3.FrameType"/></f>
			<haxe_doc>* Winds the input stream until the 11-bit
    * syncword is found.
    *
    * @returns Bool false if not found (this should happen at eof).</haxe_doc>
		</seekFrame>
		<readFrames public="1" set="method" line="150">
			<f a=""><c path="Array"><t path="format.mp3.MP3Frame"/></c></f>
			<haxe_doc>* Returns all valid frames. Invalid frames
    * are discarded.</haxe_doc>
		</readFrames>
		<readFrameHeader public="1" set="method" line="170">
			<f a=""><t path="format.mp3.MP3Header"/></f>
			<haxe_doc>* Returns null if header proves to be invalid.</haxe_doc>
		</readFrameHeader>
		<readFrame public="1" set="method" line="250">
			<f a=""><t path="format.mp3.MP3Frame"/></f>
			<haxe_doc>* Reads a frame from the input.
    *
    * The input position should already be just past the
    * 11 bit syncword.
    *
    * Returns null if the header is invalid or the frame was incomplete.</haxe_doc>
		</readFrame>
		<read public="1" set="method" line="280">
			<f a=""><t path="format.mp3.MP3"/></f>
			<haxe_doc>* Reads the MP3 data.
    *
    * Currently returns all valid frames.</haxe_doc>
		</read>
		<new public="1" set="method" line="62"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.mp3.Tools" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/mp3/Tools.hx">
		<getBitrate public="1" set="method" line="40" static="1">
			<f a="mpegVersion:layerIdx:bitrateIdx">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<e path="format.mp3.Bitrate"/>
			</f>
			<haxe_doc>* Returns kbps</haxe_doc>
		</getBitrate>
		<getSamplingRate public="1" set="method" line="50" static="1">
			<f a="mpegVersion:samplingRateIdx">
				<x path="Int"/>
				<x path="Int"/>
				<e path="format.mp3.SamplingRate"/>
			</f>
			<haxe_doc>* Returns Hz</haxe_doc>
		</getSamplingRate>
		<isInvalidFrameHeader public="1" set="method" line="57" static="1">
			<f a="hdr">
				<t path="format.mp3.MP3Header"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Tells whether the header is invalid.</haxe_doc>
		</isInvalidFrameHeader>
		<getSampleDataSize public="1" set="method" line="74" static="1">
			<f a="mpegVersion:bitrate:samplingRate:isPadded:hasCrc">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Return sample data size. Note that
    * the 4 bytes subtracted is the size of the header,
    * so this 4 bytes less the frame size.
    *
    * Also, 2 bytes are subtracted for CRC too, if present</haxe_doc>
		</getSampleDataSize>
		<getSampleDataSizeHdr public="1" set="method" line="78" static="1"><f a="hdr">
	<t path="format.mp3.MP3Header"/>
	<x path="Int"/>
</f></getSampleDataSizeHdr>
		<getSampleCount public="1" set="method" line="89" static="1">
			<f a="mpegVersion">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the number of samples in the frame.</haxe_doc>
		</getSampleCount>
		<getSampleCountHdr public="1" set="method" line="94" static="1"><f a="hdr">
	<t path="format.mp3.MP3Header"/>
	<x path="Int"/>
</f></getSampleCountHdr>
		<getFrameInfo public="1" set="method" line="102" static="1">
			<f a="fr">
				<t path="format.mp3.MP3Frame"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Displays frame info in human-readable format.
    * Subject to change, do not use for programmatical parsing!</haxe_doc>
		</getFrameInfo>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="format.png.Color" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/png/Data.hx" module="format.png.Data">
		<ColGrey a="alpha"><x path="Bool"/></ColGrey>
		<ColTrue a="alpha"><x path="Bool"/></ColTrue>
		<ColIndexed/>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.png.Header" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/png/Data.hx" module="format.png.Data"><a>
	<width><x path="Int"/></width>
	<interlaced><x path="Bool"/></interlaced>
	<height><x path="Int"/></height>
	<color><e path="format.png.Color"/></color>
	<colbits><x path="Int"/></colbits>
</a></typedef>
	<enum path="format.png.Chunk" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/png/Data.hx" module="format.png.Data">
		<CEnd/>
		<CHeader a="h"><t path="format.png.Header"/></CHeader>
		<CData a="b"><c path="haxe.io.Bytes"/></CData>
		<CPalette a="b"><c path="haxe.io.Bytes"/></CPalette>
		<CUnknown a="id:data">
			<c path="String"/>
			<c path="haxe.io.Bytes"/>
		</CUnknown>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.png.Data" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/png/Data.hx"><t path="List"><e path="format.png.Chunk"/></t></typedef>
	<class path="format.png.Reader" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/png/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<checkCRC public="1"><x path="Bool"/></checkCRC>
		<read public="1" set="method" line="41"><f a=""><t path="format.png.Data"/></f></read>
		<readHeader set="method" line="56"><f a="i">
	<c path="haxe.io.Input"/>
	<t path="format.png.Header"/>
</f></readHeader>
		<readChunk set="method" line="91"><f a=""><e path="format.png.Chunk"/></f></readChunk>
		<new public="1" set="method" line="35"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.png.Tools" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/png/Tools.hx">
		<getHeader public="1" set="method" line="35" static="1">
			<f a="d">
				<t path="format.png.Data"/>
				<t path="format.png.Header"/>
			</f>
			<haxe_doc>Returns the PNG header informations. Throws an exception if no header found.</haxe_doc>
		</getHeader>
		<getPalette public="1" set="method" line="47" static="1">
			<f a="d">
				<t path="format.png.Data"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Return the PNG palette colors, or null if no palette chunk was found</haxe_doc>
		</getPalette>
		<filter get="inline" set="null" line="56" static="1">
			<f a="data:x:y:stride:prev:p:?numChannels" v="::::::4">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ numChannels : 4 }</e></m></meta>
		</filter>
		<reverseBytes public="1" set="method" line="69" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Converts from BGRA to ARGB and the other way by reversing bytes.</haxe_doc>
		</reverseBytes>
		<extractGrey public="1" set="method" line="106" static="1">
			<f a="d">
				<t path="format.png.Data"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":noDebug"/></meta>
			<haxe_doc>Decode the greyscale PNG data and apply filters, extracting only the grey channel if alpha is present.</haxe_doc>
		</extractGrey>
		<extract32 public="1" set="method" line="205" static="1">
			<f a="d:?bytes:?flipY">
				<t path="format.png.Data"/>
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":noDebug"/></meta>
			<haxe_doc>Decode the PNG data and apply filters. By default this will output BGRA low-endian format. You can use the [reverseBytes] function to inverse the bytes to ARGB big-endian format.</haxe_doc>
		</extract32>
		<buildGrey public="1" set="method" line="653" static="1">
			<f a="width:height:data:?level" v=":::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains one bytes (grey values) for each pixel.</haxe_doc>
		</buildGrey>
		<buildIndexed public="1" set="method" line="672" static="1">
			<f a="width:height:data:palette:?level" v="::::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains a one byte palette index for each pixel and a separate palette with 3 RGB bytes per color.</haxe_doc>
		</buildIndexed>
		<buildRGB public="1" set="method" line="691" static="1">
			<f a="width:height:data:?level" v=":::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains three bytes (R,G and B values) for each pixel.</haxe_doc>
		</buildRGB>
		<build32ARGB public="1" set="method" line="714" static="1">
			<f a="width:height:data:?level" v=":::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains four bytes in ARGB format for each pixel.</haxe_doc>
		</build32ARGB>
		<build32BGRA public="1" set="method" line="738" static="1">
			<f a="width:height:data:?level" v=":::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains four bytes in BGRA format for each pixel.</haxe_doc>
		</build32BGRA>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.png.Writer" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/png/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<write public="1" set="method" line="39"><f a="png">
	<t path="format.png.Data"/>
	<x path="Void"/>
</f></write>
		<writeChunk set="method" line="75"><f a="id:data">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></writeChunk>
		<new public="1" set="method" line="34"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="format.tga.Header" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/tga/Data.hx" module="format.tga.Data"><a>
	<yOrigin>
		<x path="Int"/>
		<haxe_doc>* These bytes specify the absolute vertical coordinate for the lower left
   * corner of the image as it is positioned on a display device having an
   * origin at the lower left of the screen (e.g., the TARGA series).</haxe_doc>
	</yOrigin>
	<xOrigin>
		<x path="Int"/>
		<haxe_doc>* These bytes specify the absolute horizontal coordinate for the lower left
   * corner of the image as it is positioned on a display device having an
   * origin at the lower left of the screen (e.g., the TARGA series).</haxe_doc>
	</xOrigin>
	<width>
		<x path="Int"/>
		<haxe_doc>This field specifies the width of the image in pixels.</haxe_doc>
	</width>
	<imageType>
		<e path="format.tga.ImageType"/>
		<haxe_doc>Image data type.</haxe_doc>
	</imageType>
	<imageOrigin><e path="format.tga.ImageOrigin"/></imageOrigin>
	<height>
		<x path="Int"/>
		<haxe_doc>This field specifies the height of the image in pixels.</haxe_doc>
	</height>
	<colorMapType>
		<x path="Int"/>
		<haxe_doc>* Indicated type of color map.
   * 0 = no color map present.
   * 1 = color map included.
   * 2-127 is reserved by Truevision
   * 128-255 may be used by app developers.</haxe_doc>
	</colorMapType>
	<colorMapLength>
		<x path="Int"/>
		<haxe_doc>Total number of color map entries included.</haxe_doc>
	</colorMapLength>
	<colorMapFirstIndex>
		<x path="Int"/>
		<haxe_doc>* Index of the first color map entry. Index refers to the starting entry in
   * loading the color map.</haxe_doc>
	</colorMapFirstIndex>
	<colorMapEntrySize>
		<x path="Int"/>
		<haxe_doc>* Establishes the number of bits per entry. Typically 15, 16, 24 or 32-bit
   * values are used.</haxe_doc>
	</colorMapEntrySize>
	<bitsPerPixel>
		<x path="Int"/>
		<haxe_doc>* This field indicates the number of bits per pixel. This number includes
   * the Attribute or Alpha channel bits. Common values are 8, 16, 24 and
   * 32 but other pixel depths could be used.</haxe_doc>
	</bitsPerPixel>
	<alphaChannelBits>
		<x path="Int"/>
		<haxe_doc>* the number of attribute bits per
   * pixel. In the case of the TrueVista, these bits
   * indicate the number of bits per pixel which are
   * designated as Alpha Channel bits. For the ICB
   * and TARGA products, these bits indicate the
   * number of overlay bits available per pixel.</haxe_doc>
	</alphaChannelBits>
</a></typedef>
	<enum path="format.tga.ImageOrigin" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/tga/Data.hx" module="format.tga.Data">
		<BottomLeft/>
		<BottomRight/>
		<TopLeft/>
		<TopRight/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.tga.ImageType" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/tga/Data.hx" module="format.tga.Data">
		<NoImage><haxe_doc>There is no image data present</haxe_doc></NoImage>
		<UncompressedColorMapped><haxe_doc>Uncompressed image with color-map usage</haxe_doc></UncompressedColorMapped>
		<UncompressedTrueColor><haxe_doc>True-color uncompressed image</haxe_doc></UncompressedTrueColor>
		<UncompressedBlackAndWhite><haxe_doc>Black-and-White uncompresed image</haxe_doc></UncompressedBlackAndWhite>
		<RunLengthColorMapped><haxe_doc>Run-length encoded image with color-map usage</haxe_doc></RunLengthColorMapped>
		<RunLengthTrueColor><haxe_doc>Run-length encoded true-color image</haxe_doc></RunLengthTrueColor>
		<RunLengthBlackAndWhite><haxe_doc>Run-length encoded black-and-white image</haxe_doc></RunLengthBlackAndWhite>
		<Unknown a="type">
			<x path="Int"/>
			<haxe_doc>Unknown type</haxe_doc>
		</Unknown>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.tga.Data" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/tga/Data.hx"><a>
	<imageId><c path="String"/></imageId>
	<imageData><x path="haxe.ds.Vector"><x path="Int"/></x></imageData>
	<header><t path="format.tga.Header"/></header>
	<developerData><d/></developerData>
	<colorMapData><x path="haxe.ds.Vector"><x path="Int"/></x></colorMapData>
</a></typedef>
	<class path="format.tga.Reader" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/tga/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<read public="1" set="method" line="22"><f a=""><t path="format.tga.Data"/></f></read>
		<readHeader set="method" line="38"><f a=""><t path="format.tga.Header"/></f></readHeader>
		<readColorMapData set="method" line="104"><f a="header">
	<t path="format.tga.Header"/>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
</f></readColorMapData>
		<readImageData set="method" line="110"><f a="header:colorMap">
	<t path="format.tga.Header"/>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
</f></readImageData>
		<readPixels set="method" line="137"><f a="bitsPerPixel:amount:alphaChannelBits:rle">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
</f></readPixels>
		<readMono set="method" line="207"><f a="bitsPerPixel:amount:alphaChannelBits:rle">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
</f></readMono>
		<readIndexes set="method" line="267"><f a="bitsPerPixel:amount:colorMap:offset:rle">
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
</f></readIndexes>
		<parsePixel1 set="method" line="325"><f a="value:alpha">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></parsePixel1>
		<parsePixelGreyAlpha set="method" line="330"><f a="value:alpha">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></parsePixelGreyAlpha>
		<parsePixel2 set="method" line="335"><f a="value:alpha">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></parsePixel2>
		<parsePixel3 set="method" line="343"><f a="value:alpha">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></parsePixel3>
		<parsePixel4 set="method" line="348"><f a="value:alpha">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></parsePixel4>
		<new public="1" set="method" line="16"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Yanrishatum</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.tools.BitsInput" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/tools/BitsInput.hx">
		<i><c path="haxe.io.Input"/></i>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<readBits public="1" set="method" line="41"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></readBits>
		<readBit public="1" set="method" line="63"><f a=""><x path="Bool"/></f></readBit>
		<reset public="1" get="inline" set="null" line="72"><f a=""><x path="Void"/></f></reset>
		<new public="1" set="method" line="35"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.tools.Deflate" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/tools/Deflate.hx">
		<run public="1" set="method" line="31" static="1">
			<f a="b:?level" v=":9">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
		</run>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.tools.Inflate" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/tools/Inflate.hx">
		<run public="1" set="method" line="31" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="format.wav.WAVE" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/wav/Data.hx" module="format.wav.Data"><a>
	<header><t path="format.wav.WAVEHeader"/></header>
	<data><c path="haxe.io.Bytes"/></data>
	<cuePoints><c path="Array"><t path="format.wav.CuePoint"/></c></cuePoints>
</a></typedef>
	<typedef path="format.wav.WAVEHeader" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/wav/Data.hx" module="format.wav.Data"><a>
	<samplingRate><x path="Int"/></samplingRate>
	<format><e path="format.wav.WAVEFormat"/></format>
	<channels><x path="Int"/></channels>
	<byteRate><x path="Int"/></byteRate>
	<blockAlign><x path="Int"/></blockAlign>
	<bitsPerSample><x path="Int"/></bitsPerSample>
</a></typedef>
	<typedef path="format.wav.CuePoint" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/wav/Data.hx" module="format.wav.Data"><a>
	<sampleOffset><x path="Int"/></sampleOffset>
	<id><x path="Int"/></id>
</a></typedef>
	<enum path="format.wav.WAVEFormat" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/wav/Data.hx" module="format.wav.Data">
		<WF_PCM/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="format.wav.Reader" params="" file="/usr/local/lib/haxeLibrary/format/3,5,0/format/wav/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<version><x path="Int"/></version>
		<readInt get="inline" set="null" line="43"><f a=""><x path="Int"/></f></readInt>
		<read public="1" set="method" line="51"><f a=""><t path="format.wav.WAVE"/></f></read>
		<new public="1" set="method" line="38"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="fracs.DifferencePreference" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Angles.hx" module="fracs.Angles">
		<CLOCKWISE/>
		<ANTICLOCKWISE/>
		<SMALL/>
		<LARGE/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="fracs.Angles" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Angles.hx">
		<pi2pi public="1" get="inline" set="null" line="11" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></pi2pi>
		<zeroto2pi public="1" get="inline" set="null" line="19" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zeroto2pi>
		<zerotoMinus2pi public="1" get="inline" set="null" line="27" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zerotoMinus2pi>
		<differencePrefer public="1" get="inline" set="null" line="36" static="1"><f a="a:b:prefer">
	<x path="Float"/>
	<x path="Float"/>
	<e path="fracs.DifferencePreference"/>
	<x path="Float"/>
</f></differencePrefer>
		<difference public="1" get="inline" set="null" line="48" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></difference>
		<differenceClockWise public="1" get="inline" set="null" line="57" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceClockWise>
		<differenceAntiClockwise public="1" get="inline" set="null" line="61" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceAntiClockwise>
		<differenceSmall public="1" get="inline" set="null" line="65" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceSmall>
		<differenceLarge public="1" get="inline" set="null" line="80" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></differenceLarge>
		<differenceSmallLarge public="1" get="inline" set="null" line="95" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<a>
		<small><x path="Float"/></small>
		<large><x path="Float"/></large>
	</a>
</f></differenceSmallLarge>
	</class>
	<typedef path="fracs.Fractional" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx" module="fracs.Fraction"><a>
	<value><x path="Null"><x path="Float"/></x></value>
	<positive><x path="Bool"/></positive>
	<numerator><x path="Int"/></numerator>
	<denominator><x path="Int"/></denominator>
</a></typedef>
	<abstract path="fracs.FractionArray" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx" module="fracs.Fraction">
		<from><icast><c path="Array"><x path="fracs.Fraction"/></c></icast></from>
		<this><c path="Array"><x path="fracs.Fraction"/></c></this>
		<to>
			<icast><c path="Array"><x path="fracs.Fraction"/></c></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta>
			<m n=":arrayAccess"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="fracs._Fraction.FractionArray_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="?val">
			<c path="Array"><x path="fracs.Fraction"/></c>
			<x path="fracs.FractionArray"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<add public="1" get="inline" set="null" line="17" static="1"><f a="this:val">
	<c path="Array"><x path="fracs.Fraction"/></c>
	<x path="fracs.Fraction"/>
	<x path="Void"/>
</f></add>
	<toString public="1" get="inline" set="null" line="23" static="1">
		<f a="this">
			<c path="Array"><x path="fracs.Fraction"/></c>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._Fraction.FractionArray_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="?val">
				<c path="Array"><x path="fracs.Fraction"/></c>
				<x path="fracs.FractionArray"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<add public="1" get="inline" set="null" line="17" static="1"><f a="this:val">
	<c path="Array"><x path="fracs.Fraction"/></c>
	<x path="fracs.Fraction"/>
	<x path="Void"/>
</f></add>
		<toString public="1" get="inline" set="null" line="23" static="1">
			<f a="this">
				<c path="Array"><x path="fracs.Fraction"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
	</class>
	<abstract path="fracs.Fraction" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx">
		<from>
			<icast><t path="fracs.Fractional"/></icast>
			<icast field="fromString"><c path="String"/></icast>
			<icast field="fromFloat"><x path="Float"/></icast>
		</from>
		<this><t path="fracs.Fractional"/></this>
		<to>
			<icast><t path="fracs.Fractional"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="fracs._Fraction.Fraction_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="numerator:denominator:?positive:?value" v="::true:null">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta>
			<m n=":value"><e>{ value : null, positive : true }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<optimize get="inline" set="null" line="45" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.Fraction"/>
</f></optimize>
	<optimizeFraction get="inline" set="null" line="49" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.Fraction"/>
</f></optimizeFraction>
	<toFloat public="1" get="inline" set="null" line="54" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
	<float public="1" get="inline" set="null" line="62" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="Float"/>
</f></float>
	<verbose public="1" get="inline" set="null" line="66" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<c path="String"/>
</f></verbose>
	<fromString public="1" get="inline" set="null" line="71" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="82" static="1">
		<f a="this">
			<t path="fracs.Fractional"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
	<fromFloat public="1" get="inline" set="null" line="98" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<firstFloat public="1" get="inline" set="null" line="119" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.Fraction"/>
</f></firstFloat>
	<byDenominator public="1" get="inline" set="null" line="126" static="1"><f a="this:val">
	<t path="fracs.Fractional"/>
	<x path="Int"/>
	<c path="String"/>
</f></byDenominator>
	<all public="1" get="inline" set="null" line="137" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.FractionArray"/>
</f></all>
	<similarToFraction public="1" get="inline" set="null" line="141" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.FractionArray"/>
</f></similarToFraction>
	<similarToValue public="1" get="inline" set="null" line="146" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.FractionArray"/>
</f></similarToValue>
</class></impl>
	</abstract>
	<class path="fracs._Fraction.Fraction_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx" private="1" module="fracs.Fraction" final="1">
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="numerator:denominator:?positive:?value" v="::true:null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta>
				<m n=":value"><e>{ value : null, positive : true }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<optimize get="inline" set="null" line="45" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.Fraction"/>
</f></optimize>
		<optimizeFraction get="inline" set="null" line="49" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.Fraction"/>
</f></optimizeFraction>
		<toFloat public="1" get="inline" set="null" line="54" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
		<float public="1" get="inline" set="null" line="62" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="Float"/>
</f></float>
		<verbose public="1" get="inline" set="null" line="66" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<c path="String"/>
</f></verbose>
		<fromString public="1" get="inline" set="null" line="71" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="82" static="1">
			<f a="this">
				<t path="fracs.Fractional"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
		<fromFloat public="1" get="inline" set="null" line="98" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<firstFloat public="1" get="inline" set="null" line="119" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.Fraction"/>
</f></firstFloat>
		<byDenominator public="1" get="inline" set="null" line="126" static="1"><f a="this:val">
	<t path="fracs.Fractional"/>
	<x path="Int"/>
	<c path="String"/>
</f></byDenominator>
		<all public="1" get="inline" set="null" line="137" static="1"><f a="f">
	<x path="Float"/>
	<x path="fracs.FractionArray"/>
</f></all>
		<similarToFraction public="1" get="inline" set="null" line="141" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.FractionArray"/>
</f></similarToFraction>
		<similarToValue public="1" get="inline" set="null" line="146" static="1"><f a="this">
	<t path="fracs.Fractional"/>
	<x path="fracs.FractionArray"/>
</f></similarToValue>
	</class>
	<class path="fracs.Fracs" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Fraction.hx" module="fracs.Fraction">
		<grabDecimalInput get="inline" set="null" line="154" static="1"><f a="decimalVal">
	<c path="String"/>
	<x path="Float"/>
</f></grabDecimalInput>
		<approximateFractions set="method" line="160" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.FractionArray"/>
			</f>
			<meta><m n=":allow"><e>fracs.Fraction</e></m></meta>
		</approximateFractions>
		<getMaxNumerator get="inline" set="null" line="186" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></getMaxNumerator>
		<extractDigitStr get="inline" set="null" line="219" static="1"><f a="fStr">
	<c path="String"/>
	<c path="String"/>
</f></extractDigitStr>
		<getMaxNumeratorStr get="inline" set="null" line="240" static="1"><f a="fStr">
	<c path="String"/>
	<x path="Float"/>
</f></getMaxNumeratorStr>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="fracs.Pi2pi" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Pi2pi.hx">
		<from>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromFraction"><x path="fracs.Fraction"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="tofraction"><x path="fracs.Fraction"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta><m n="forward"/></meta>
		<impl><class path="fracs._Pi2pi.Pi2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Pi2pi.hx" private="1" module="fracs.Pi2pi" final="1">
	<_new get="inline" set="null" line="5" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromFloat public="1" get="inline" set="null" line="11" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<additionPi public="1" set="method" line="20" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</additionPi>
	<subtractionPi public="1" set="method" line="24" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtractionPi>
	<dividePi public="1" set="method" line="28" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</dividePi>
	<timesPi public="1" set="method" line="32" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</timesPi>
	<addition public="1" set="method" line="36" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</addition>
	<subtraction public="1" set="method" line="40" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtraction>
	<divide public="1" set="method" line="44" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<times public="1" set="method" line="48" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</times>
	<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
	<get_degrees public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
	<set_degrees public="1" get="inline" set="null" line="57" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
	<fromFraction get="inline" set="null" line="63" static="1">
		<f a="val">
			<x path="fracs.Fraction"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFraction>
	<tofraction get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":to"/></meta>
	</tofraction>
	<fromString get="inline" set="null" line="72" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.Pi2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="78" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._Pi2pi.Pi2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/Pi2pi.hx" private="1" module="fracs.Pi2pi" final="1">
		<_new get="inline" set="null" line="5" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromFloat public="1" get="inline" set="null" line="11" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<additionPi public="1" set="method" line="20" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</additionPi>
		<subtractionPi public="1" set="method" line="24" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtractionPi>
		<dividePi public="1" set="method" line="28" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</dividePi>
		<timesPi public="1" set="method" line="32" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</timesPi>
		<addition public="1" set="method" line="36" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</addition>
		<subtraction public="1" set="method" line="40" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtraction>
		<divide public="1" set="method" line="44" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<times public="1" set="method" line="48" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</times>
		<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
		<get_degrees public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
		<set_degrees public="1" get="inline" set="null" line="57" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
		<fromFraction get="inline" set="null" line="63" static="1">
			<f a="val">
				<x path="fracs.Fraction"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFraction>
		<tofraction get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":to"/></meta>
		</tofraction>
		<fromString get="inline" set="null" line="72" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.Pi2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="78" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
	</class>
	<abstract path="fracs.ZeroTo2pi" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/ZeroTo2pi.hx">
		<from>
			<icast field="fromFloat"><x path="Float"/></icast>
			<icast field="fromFraction"><x path="fracs.Fraction"/></icast>
			<icast field="fromString"><c path="String"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to>
			<icast><x path="Float"/></icast>
			<icast field="tofraction"><x path="fracs.Fraction"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<meta><m n="forward"/></meta>
		<impl><class path="fracs._ZeroTo2pi.ZeroTo2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/ZeroTo2pi.hx" private="1" module="fracs.ZeroTo2pi" final="1">
	<_new get="inline" set="null" line="5" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<fromFloat public="1" get="inline" set="null" line="11" static="1">
		<f a="f">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<additionPi public="1" set="method" line="20" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</additionPi>
	<subtractionPi public="1" set="method" line="24" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtractionPi>
	<dividePi public="1" set="method" line="28" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</dividePi>
	<timesPi public="1" set="method" line="32" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</timesPi>
	<addition public="1" set="method" line="36" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</addition>
	<subtraction public="1" set="method" line="40" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtraction>
	<divide public="1" set="method" line="44" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<times public="1" set="method" line="48" static="1">
		<f a="this:b">
			<x path="Float"/>
			<x path="Float"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</times>
	<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
	<get_degrees public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
	<set_degrees public="1" get="inline" set="null" line="57" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
	<fromFraction get="inline" set="null" line="63" static="1">
		<f a="val">
			<x path="fracs.Fraction"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFraction>
	<tofraction get="inline" set="null" line="67" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="fracs.Fraction"/>
		</f>
		<meta><m n=":to"/></meta>
	</tofraction>
	<fromString get="inline" set="null" line="72" static="1">
		<f a="val">
			<c path="String"/>
			<x path="fracs.ZeroTo2pi"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="78" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta><m n=":to"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="fracs._ZeroTo2pi.ZeroTo2pi_Impl_" params="" file="/usr/local/lib/haxeLibrary/fracs/0,0,2-alpha/src/fracs/ZeroTo2pi.hx" private="1" module="fracs.ZeroTo2pi" final="1">
		<_new get="inline" set="null" line="5" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<fromFloat public="1" get="inline" set="null" line="11" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<additionPi public="1" set="method" line="20" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</additionPi>
		<subtractionPi public="1" set="method" line="24" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtractionPi>
		<dividePi public="1" set="method" line="28" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</dividePi>
		<timesPi public="1" set="method" line="32" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</timesPi>
		<addition public="1" set="method" line="36" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</addition>
		<subtraction public="1" set="method" line="40" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtraction>
		<divide public="1" set="method" line="44" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<times public="1" set="method" line="48" static="1">
			<f a="this:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</times>
		<degrees public="1" get="accessor" set="accessor" static="1"><x path="Float"/></degrees>
		<get_degrees public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<x path="Float"/>
	<x path="Float"/>
</f></get_degrees>
		<set_degrees public="1" get="inline" set="null" line="57" static="1"><f a="this:val">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></set_degrees>
		<fromFraction get="inline" set="null" line="63" static="1">
			<f a="val">
				<x path="fracs.Fraction"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFraction>
		<tofraction get="inline" set="null" line="67" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="fracs.Fraction"/>
			</f>
			<meta><m n=":to"/></meta>
		</tofraction>
		<fromString get="inline" set="null" line="72" static="1">
			<f a="val">
				<c path="String"/>
				<x path="fracs.ZeroTo2pi"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="78" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":to"/></meta>
		</toString>
	</class>
	<class path="h2d.Object" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Object.hx">
		<nullDrawable static="1"><c path="h2d.Drawable"/></nullDrawable>
		<children><c path="Array"><c path="h2d.Object"/></c></children>
		<parentContainer>
			<c path="h2d.Object"/>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>The parent container of this object.
		See `Object.contentChanged` for more details.</haxe_doc>
		</parentContainer>
		<parent public="1" set="null">
			<c path="h2d.Object"/>
			<haxe_doc>The parent object in the scene tree.</haxe_doc>
		</parent>
		<numChildren public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>How many immediate children this object has.</haxe_doc>
		</numChildren>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the object. Can be used to retrieve an object within a tree by using `Object.getObjectByName`.</haxe_doc>
		</name>
		<x public="1" set="accessor" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
			<haxe_doc>The x position (in pixels) of the object relative to its parent.</haxe_doc>
		</x>
		<y public="1" set="accessor" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
			<haxe_doc>The y position (in pixels) of the object relative to its parent.</haxe_doc>
		</y>
		<scaleX public="1" set="accessor" expr="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1</e></m></meta>
			<haxe_doc>The amount of horizontal scaling of this object.</haxe_doc>
		</scaleX>
		<scaleY public="1" set="accessor" expr="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1</e></m></meta>
			<haxe_doc>The amount of vertical scaling of this object.</haxe_doc>
		</scaleY>
		<rotation public="1" set="accessor" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
			<haxe_doc>The rotation angle of this object, in radians.</haxe_doc>
		</rotation>
		<visible public="1" set="accessor" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
			<haxe_doc>Is the object and its children are displayed on screen.</haxe_doc>
		</visible>
		<alpha public="1" expr="1.">
			<x path="Float"/>
			<meta><m n=":value"><e>1.</e></m></meta>
			<haxe_doc>The amount of transparency of the Object.</haxe_doc>
		</alpha>
		<filter public="1" set="accessor">
			<c path="h2d.filter.Filter"/>
			<haxe_doc>The post process filter for this object.

		When set, `Object.alpha` value affects both filter and object transparency (use `Drawable.color.a` to set transparency only for the object).</haxe_doc>
		</filter>
		<blendMode public="1" expr="Alpha">
			<e path="h2d.BlendMode"/>
			<meta><m n=":value"><e>Alpha</e></m></meta>
			<haxe_doc>The blending mode of the object.

		If there is no `Object.filter` active, only applies to the current object (not inherited by children).
		Otherwise tells how the filter is blended with background.</haxe_doc>
		</blendMode>
		<matA><x path="Float"/></matA>
		<matB><x path="Float"/></matB>
		<matC><x path="Float"/></matC>
		<matD><x path="Float"/></matD>
		<absX><x path="Float"/></absX>
		<absY><x path="Float"/></absY>
		<posChanged>
			<x path="Bool"/>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>A flag that indicates that the object transform was modified and absolute position recalculation is required.

		Automatically cleared on `Object.sync` and can be manually synced with the `Object.syncPos`.</haxe_doc>
		</posChanged>
		<allocated>
			<x path="Bool"/>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>A flag that indicates whether the object was allocated or not.

		When adding children to allocated objects, `onAdd` is being called immediately,
		otherwise it's delayed until the whole tree is added to a currently active `Scene`.</haxe_doc>
		</allocated>
		<lastFrame><x path="Int"/></lastFrame>
		<getBounds public="1" set="method" line="145">
			<f a="?relativeTo:?out">
				<c path="h2d.Object"/>
				<c path="h2d.col.Bounds"/>
				<c path="h2d.col.Bounds"/>
			</f>
			<haxe_doc>Return the bounds of the object for its whole content, recursively.
		@param relativeTo An optional object relative to coordinates of which bounds are returned.
		Returns bounds in the absolute coordinates if not set.
		@param out An optional bounds instance to fill. Allocates new Bounds instance and returns it if not set.</haxe_doc>
		</getBounds>
		<getSize public="1" set="method" line="166">
			<f a="?out">
				<c path="h2d.col.Bounds"/>
				<c path="h2d.col.Bounds"/>
			</f>
			<haxe_doc>Similar to `getBounds(parent)`, but instead of the full content, it will return
		the size based on the alignment of the object. For instance for a text, `Object.getBounds` will return
		the full glyphs size whereas `getSize` will ignore the pixels under the baseline.
		@param out An optional bounds instance to fill. Allocates new Bounds instance and returns it if not set.</haxe_doc>
		</getSize>
		<getAbsPos public="1" set="method" line="183">
			<f a=""><c path="h2d.col.Matrix"/></f>
			<haxe_doc>Returns the updated absolute position matrix. See `Object.getMatrix` for current matrix values.</haxe_doc>
		</getAbsPos>
		<contains public="1" set="method" line="198">
			<f a="o">
				<c path="h2d.Object"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the object is contained into this object children, recursively.</haxe_doc>
		</contains>
		<find public="1" params="T" set="method" line="209">
			<f a="f">
				<f a="">
					<c path="h2d.Object"/>
					<x path="Null"><c path="find.T"/></x>
				</f>
				<x path="Null"><c path="find.T"/></x>
			</f>
			<haxe_doc>Find a single object in the tree by calling `f` on each and returning the first not-null value returned, or null if not found.</haxe_doc>
		</find>
		<findAll public="1" params="T" set="method" line="224">
			<f a="f:?arr">
				<f a="">
					<c path="h2d.Object"/>
					<x path="Null"><c path="findAll.T"/></x>
				</f>
				<c path="Array"><c path="findAll.T"/></c>
				<c path="Array"><c path="findAll.T"/></c>
			</f>
			<haxe_doc>Find several objects in the tree by calling `f` on each and returning all the not-null values returned.
		@param arr An optional array instance to fill results with. Allocates a new array if not set.</haxe_doc>
		</findAll>
		<set_filter set="method" line="234"><f a="f">
	<c path="h2d.filter.Filter"/>
	<c path="h2d.filter.Filter"/>
</f></set_filter>
		<getBoundsRec set="method" line="249">
			<f a="relativeTo:out:forSize">
				<c path="h2d.Object"/>
				<c path="h2d.col.Bounds"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Override this method in order to expand the reported bounds of an object. `Object.addBounds` can be used to add bounds with respect to `relativeTo`.
		Do not remove the super call.
		@param relativeTo An object relative to which the Object bounds coordinates should be.
		@param out An output Bounds instance.
		@param forSize Whether it's being called for `Object.getSize` or `Object.getBounds`.</haxe_doc>
		</getBoundsRec>
		<addBounds set="method" line="292">
			<f a="relativeTo:out:dx:dy:width:height">
				<c path="h2d.Object"/>
				<c path="h2d.col.Bounds"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Adds specified area in local coordinate space to the bounds. Expected to be used within `Object.getBoundsRec`.
		@param relativeTo An object relative to which the Object bounds coordinates should be. If not set, coordinates are in absolute coordinate space.
		@param out An output Bounds instance.
		@param dx The top-left X offset of the added bounds rectangle.
		@param dy The top-left Y offset of the added bounds rectangle.
		@param width The width of the added bounds rectangle.
		@param height The height of the added bounds rectangle.</haxe_doc>
		</addBounds>
		<getObjectsCount public="1" set="method" line="347">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the total number of children in the whole tree, recursively.</haxe_doc>
		</getObjectsCount>
		<localToGlobal public="1" set="method" line="358">
			<f a="?pt">
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
			</f>
			<haxe_doc>Convert a local position (or `[0,0]` if `pt` is null) relative to the object origin into an absolute screen position, applying all the inherited transforms.
		@param pt An optional position to convert and return. Allocates new Point at 0,0 position if not set. Modifies the Point instance as is.</haxe_doc>
		</localToGlobal>
		<globalToLocal public="1" set="method" line="372">
			<f a="pt">
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
			</f>
			<haxe_doc>Convert an absolute screen position into a local position relative to the object origin, applying all the inherited transforms.
		@param pt A position to convert and return. Modifies the Point instance as is.</haxe_doc>
		</globalToLocal>
		<getScene public="1" set="method" line="387">
			<f a=""><c path="h2d.Scene"/></f>
			<haxe_doc>Returns an `h2d.Scene` down the hierarchy tree or `null` if object is not added to Scene.</haxe_doc>
		</getScene>
		<set_visible set="method" line="393"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<addChild public="1" set="method" line="404">
			<f a="s">
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add a child object at the end of the children list.</haxe_doc>
		</addChild>
		<addChildAt public="1" set="method" line="411">
			<f a="s:pos">
				<c path="h2d.Object"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Insert a child object at the specified position of the children list.</haxe_doc>
		</addChildAt>
		<onContentChanged get="inline" set="null" line="449">
			<f a=""><x path="Void"/></f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Should be called when Object content was changed in order to notify parent container. See `Object.contentChanged`.</haxe_doc>
		</onContentChanged>
		<onHierarchyMoved set="method" line="461">
			<f a="parentChanged">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Sent when object was already allocated and moved within scene object tree hierarchy.

		Do not remove the super call when overriding.

		@param parentChanged Whether Object was moved withing same parent (through `Layers.ysort` for example) or relocated to a new one.</haxe_doc>
		</onHierarchyMoved>
		<onAdd set="method" line="472">
			<f a=""><x path="Void"/></f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Sent when object is being added to an allocated scene.

		Do not remove the super call when overriding.</haxe_doc>
		</onAdd>
		<onRemove set="method" line="487">
			<f a=""><x path="Void"/></f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Sent when object is removed from the allocated scene.

		Do not remove the super call when overriding.</haxe_doc>
		</onRemove>
		<getMatrix set="method" line="499">
			<f a="m">
				<c path="h2d.col.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Populates Matrix with current absolute object transform values. See `Object.getAbsPos` for up-to-date values.</haxe_doc>
		</getMatrix>
		<removeChild public="1" set="method" line="511">
			<f a="s">
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the given object from the immediate children list of the object if it's part of it.</haxe_doc>
		</removeChild>
		<setParentContainer set="method" line="529">
			<f a="c">
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Sets the parent container for this Object and it's children.
		See `Object.contentChanged` for more details.</haxe_doc>
		</setParentContainer>
		<removeChildren public="1" set="method" line="538">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Remove all children from the immediate children list.</haxe_doc>
		</removeChildren>
		<remove public="1" get="inline" set="null" line="546">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Same as `parent.removeChild(this)`, but does nothing if parent is null.</haxe_doc>
		</remove>
		<drawTo public="1" set="method" line="553">
			<f a="t">
				<c path="h3d.mat.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draw the object and all its children into the given Texture.</haxe_doc>
		</drawTo>
		<drawToTextures public="1" set="method" line="567">
			<f a="texs:outputs">
				<c path="Array"><c path="h3d.mat.Texture"/></c>
				<c path="Array"><e path="hxsl.Output"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Draw the object and all its children into the given Textures.</haxe_doc>
		</drawToTextures>
		<draw set="method" line="583">
			<f a="ctx">
				<c path="h2d.RenderContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Override this method in order to add custom graphics rendering to your Object.
		`draw` is invoked before rendering of the object children.</haxe_doc>
		</draw>
		<sync set="method" line="593">
			<f a="ctx">
				<c path="h2d.RenderContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Performs a sync of data for rendering (such as absolute position recalculation).
		While this method can be used as a substitute to an update loop, it's primary purpose it to prepare the Object to be rendered.

		Do not remove the super call when overriding.</haxe_doc>
		</sync>
		<syncPos set="method" line="624">
			<f a=""><x path="Void"/></f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Ensures that object has an up-to-date position transform.</haxe_doc>
		</syncPos>
		<calcAbsPos set="method" line="641">
			<f a=""><x path="Void"/></f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>
		Calculates the absolute object position transform.
		See `Object.syncPos` for a safe position sync method.
		This method does not ensure that object parents also have up-to-date transform nor does it clear the `Object.posChanged` flag.]]></haxe_doc>
		</calcAbsPos>
		<emitTile set="method" line="689">
			<f a="ctx:tile">
				<c path="h2d.RenderContext"/>
				<c path="h2d.Tile"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc>Draws single Tile instance with this Object transform.</haxe_doc>
		</emitTile>
		<clipBounds set="method" line="765">
			<f a="ctx:bounds">
				<c path="h2d.RenderContext"/>
				<c path="h2d.col.Bounds"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>
		Clip a local bounds with our global viewport.
		Used during filter rendering in order to clip out areas that are off-screen and should not be rendered.]]></haxe_doc>
		</clipBounds>
		<drawFilters set="method" line="833"><f a="ctx">
	<c path="h2d.RenderContext"/>
	<x path="Void"/>
</f></drawFilters>
		<drawFiltered set="method" line="916"><f a="ctx:tile">
	<c path="h2d.RenderContext"/>
	<c path="h2d.Tile"/>
	<x path="Void"/>
</f></drawFiltered>
		<drawRec set="method" line="930"><f a="ctx">
	<c path="h2d.RenderContext"/>
	<x path="Void"/>
</f></drawRec>
		<drawContent set="method" line="951"><f a="ctx">
	<c path="h2d.RenderContext"/>
	<x path="Void"/>
</f></drawContent>
		<set_x get="inline" set="null" line="962"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y get="inline" set="null" line="967"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<set_scaleX get="inline" set="null" line="972"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleX>
		<set_scaleY get="inline" set="null" line="977"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleY>
		<set_rotation get="inline" set="null" line="982"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotation>
		<move public="1" set="method" line="990">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Move the object by the specified amount along its current direction (`Object.rotation` angle).</haxe_doc>
		</move>
		<setPosition public="1" get="inline" set="null" line="998">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the position of the object relative to its parent.</haxe_doc>
		</setPosition>
		<rotate public="1" get="inline" set="null" line="1006">
			<f a="v">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Rotate the object by the given angle (in radians)</haxe_doc>
		</rotate>
		<scale public="1" get="inline" set="null" line="1013">
			<f a="v">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scale uniformly the object by the given factor.</haxe_doc>
		</scale>
		<setScale public="1" get="inline" set="null" line="1021">
			<f a="v">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the uniform scale for the object.</haxe_doc>
		</setScale>
		<getChildAt public="1" get="inline" set="null" line="1029">
			<f a="n">
				<x path="Int"/>
				<c path="h2d.Object"/>
			</f>
			<haxe_doc>Return the `n`th element among the immediate children list of this object, or `null` if there is no Object at this position.</haxe_doc>
		</getChildAt>
		<getChildIndex public="1" set="method" line="1036">
			<f a="o">
				<c path="h2d.Object"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Return the index of the object `o` within the immediate children list of this object, or `-1` if it is not part of the children list.</haxe_doc>
		</getChildIndex>
		<getObjectByName public="1" set="method" line="1046">
			<f a="name">
				<c path="String"/>
				<c path="h2d.Object"/>
			</f>
			<haxe_doc>Search for an object recursively by name, return `null` if not found.</haxe_doc>
		</getObjectByName>
		<get_numChildren get="inline" set="null" line="1056"><f a=""><x path="Int"/></f></get_numChildren>
		<iterator public="1" get="inline" set="null" line="1063">
			<f a=""><c path="hxd.impl.ArrayIterator_h2d_Object"/></f>
			<haxe_doc>Return an iterator over this object immediate children</haxe_doc>
		</iterator>
		<toString set="method" line="1068">
			<f a=""><c path="String"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</toString>
		<contentChanged set="method" line="1082">
			<f a="s">
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc><![CDATA[<span class="label">Advanced usage</span>
		Called by the children of a container object if they have `parentContainer` defined in them.
		Primary use-case is when the child size got changed, requiring content to reevaluate positioning such as `Flow` layouts,
		but also can be used for other purposes.]]></haxe_doc>
		</contentChanged>
		<constraintSize set="method" line="1095">
			<f a="maxWidth:maxHeight">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>show</e></m></meta>
			<haxe_doc><![CDATA[<span class="label">Advanced usage</span>
		This can be called by a parent container to constraint the size of its children.
		Negative value mean that constraint is to be disabled.

		For example, `Text` constraints it's maximum width, causing word-wrap to occur within constrained area.

		@see `FlowProperties.constraint`]]></haxe_doc>
		</constraintSize>
		<new public="1" set="method" line="131">
			<f a="?parent">
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new empty object.
		@param parent An optional parent `h2d.Object` instance to which Object adds itself if set.</haxe_doc>
		</new>
		<haxe_doc>A base 2D class that all scene tree elements inherit from.

	Serves as a virtual container that does not display anything but can contain other objects
	so the various transforms are inherited to its children.

	Private events `Object.onAdd`, `Object.onRemove` and `Object.onHierarchyChanged` can be used
	to capture when Object is added/removed from the currently active scene as well as being moved withing the object tree.

	Object exposes a number of properties to control position, scale and rotation of the Object relative to its parent,
	but they are used indirectly during rendering. Instead, they are being used to calculate the absolute matrix transform
	relative to the Scene. As optimization, it's not recalculated as soon as properties are modified and delayed until
	`Object.sync`. Absolute object position can be accessed through private variables `Object.matA`, `Object.matB`,
	`Object.matC`, `Object.matD`, `Object.absX` and `Object.absY`.
	But it should be noted that in order to ensure up-to-date values, it's advised to call `Object.syncPos` before accessing them.</haxe_doc>
		<meta><m n=":allow"><e>h2d.Tools</e></m></meta>
	</class>
	<class path="h2d.Drawable" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Drawable.hx">
		<extends path="h2d.Object"/>
		<color public="1">
			<c path="h3d.Vector"/>
			<haxe_doc>The color multiplier for the drawable. Can be used to adjust individually each of the four channels R,G,B,A (default [1,1,1,1])</haxe_doc>
		</color>
		<smooth public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>By enabling smoothing, scaling the object up or down will use hardware bilinear filtering resulting in a less crisp aspect.

		By default smooth is `null` in which case `Scene.defaultSmooth` value is used.</haxe_doc>
		</smooth>
		<tileWrap public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Enables texture uv wrap for this Drawable, causing tiles with uv exceeding the texture size to repeat instead of clamping on edges.

		Note that `tileWrap` does not use the `Tile` region as a wrapping area but instead uses underlying `h3d.mat.Texture` size.
		This is due to implementation specifics, as it just sets the `Texture.wrap` to either `Repeat` or `Clamp`.
		Because of that, proper Tile tiling can be expected only when the tile covers an entire Texture area.</haxe_doc>
		</tileWrap>
		<colorKey public="1" set="accessor">
			<x path="Null"><x path="Int"/></x>
			<haxe_doc>Setting a colorKey color value will discard all pixels that have this exact color in the tile.</haxe_doc>
		</colorKey>
		<colorMatrix public="1" get="accessor" set="accessor">
			<x path="Null"><c path="h3d.Matrix"/></x>
			<haxe_doc>Setting a colorMatrix will apply a color transformation. See also `adjustColor`.</haxe_doc>
		</colorMatrix>
		<colorAdd public="1" get="accessor" set="accessor">
			<x path="Null"><c path="h3d.Vector"/></x>
			<haxe_doc>Setting colorAdd will add the amount of color of each channel R,G,B,A to the object pixels.</haxe_doc>
		</colorAdd>
		<shaders><c path="hxsl.ShaderList"/></shaders>
		<set_tileWrap set="method" line="57"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_tileWrap>
		<get_colorAdd set="method" line="61"><f a=""><x path="Null"><c path="h3d.Vector"/></x></f></get_colorAdd>
		<set_colorAdd set="method" line="66"><f a="c">
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
</f></set_colorAdd>
		<drawFiltered set="method" line="82" override="1"><f a="ctx:tile">
	<c path="h2d.RenderContext"/>
	<c path="h2d.Tile"/>
	<x path="Void"/>
</f></drawFiltered>
		<set_colorKey set="method" line="89"><f a="v">
	<x path="Null"><x path="Int"/></x>
	<x path="Null"><x path="Int"/></x>
</f></set_colorKey>
		<adjustColor public="1" set="method" line="107">
			<f a="?col">
				<x path="Null"><t path="h3d.ColorAdjust"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the `Drawable.colorMatrix` value by specifying which effects to apply.
		Calling `adjustColor()` without arguments will reset the colorMatrix to `null`.</haxe_doc>
		</adjustColor>
		<get_colorMatrix set="method" line="121"><f a=""><x path="Null"><c path="h3d.Matrix"/></x></f></get_colorMatrix>
		<set_colorMatrix set="method" line="126"><f a="m">
	<c path="h3d.Matrix"/>
	<c path="h3d.Matrix"/>
</f></set_colorMatrix>
		<getDebugShaderCode public="1" set="method" line="146">
			<f a="?toHxsl" v="true">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ toHxsl : true }</e></m></meta>
			<haxe_doc>Returns the built shader code, can be used for debugging shader assembly
		@param toHxsl Whether return an HXSL shader or the native shading language of the backend.</haxe_doc>
		</getDebugShaderCode>
		<getShader public="1" params="T" set="method" line="163">
			<f a="stype">
				<x path="Class"><c path="getShader.T"/></x>
				<c path="getShader.T"/>
			</f>
			<haxe_doc>Returns the first shader of the given shader class among the drawable shaders.
		@param stype The class of the shader to look up.</haxe_doc>
		</getShader>
		<getShaders public="1" get="inline" set="null" line="175">
			<f a=""><c path="hxsl._ShaderList.ShaderIterator"/></f>
			<haxe_doc>Returns an iterator of all drawable shaders</haxe_doc>
		</getShaders>
		<addShader public="1" params="T" set="method" line="184">
			<f a="s">
				<c path="addShader.T"/>
				<c path="addShader.T"/>
			</f>
			<haxe_doc>Add a shader to the drawable shaders.

		Keep in mind, that as stated before, drawable children do not inherit Drawable properties, which includes shaders.</haxe_doc>
		</addShader>
		<removeShader public="1" set="method" line="193">
			<f a="s">
				<c path="hxsl.Shader"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Remove a shader from the drawable shaders, returns true if found or false if it was not part of our shaders.</haxe_doc>
		</removeShader>
		<emitTile set="method" line="209" override="1"><f a="ctx:tile">
	<c path="h2d.RenderContext"/>
	<c path="h2d.Tile"/>
	<x path="Void"/>
</f></emitTile>
		<new set="method" line="52">
			<f a="parent">
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Drawable instance with given parent.
		@param parent An optional parent `h2d.Object` instance to which Drawable adds itself if set.</haxe_doc>
		</new>
		<haxe_doc>A base class for all 2D objects that will draw something on the screen.

	Unlike Object base class, all properties of Drawable only apply to the current object and are not inherited by its children.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h2d.Bitmap" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Bitmap.hx">
		<extends path="h2d.Drawable"/>
		<tile public="1" set="accessor">
			<c path="h2d.Tile"/>
			<haxe_doc>The tile to display. See `h2d.Tile` documentation for details.
		If the tile is null, a pink 5x5 bitmap will be displayed instead.</haxe_doc>
		</tile>
		<width public="1" set="accessor">
			<x path="Null"><x path="Float"/></x>
			<haxe_doc>If set, rescale the tile to match the given width, keeping the aspect ratio unless `height` is also set.

		Note that both `width` and `height` are `null` by default and in order to retrieve bitmap dimensions with
		scaling accurately, call `getSize` method or address `tile.width/height` to get unscaled dimensions.</haxe_doc>
		</width>
		<height public="1" set="accessor">
			<x path="Null"><x path="Float"/></x>
			<haxe_doc>If set, rescale the tile to match the given height, keeping the aspect ratio unless `width` is also set.

		Note that both `width` and `height` are `null` by default and in order to retrieve bitmap dimensions with
		scaling accurately, call `getSize` method or address `tile.width/height` to get unscaled dimensions.</haxe_doc>
		</height>
		<getBoundsRec set="method" line="51" override="1"><f a="relativeTo:out:forSize">
	<c path="h2d.Object"/>
	<c path="h2d.col.Bounds"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></getBoundsRec>
		<set_width set="method" line="61"><f a="w">
	<x path="Null"><x path="Float"/></x>
	<x path="Null"><x path="Float"/></x>
</f></set_width>
		<set_height set="method" line="68"><f a="h">
	<x path="Null"><x path="Float"/></x>
	<x path="Null"><x path="Float"/></x>
</f></set_height>
		<set_tile set="method" line="75"><f a="t">
	<c path="h2d.Tile"/>
	<c path="h2d.Tile"/>
</f></set_tile>
		<draw set="method" line="82" override="1"><f a="ctx">
	<c path="h2d.RenderContext"/>
	<x path="Void"/>
</f></draw>
		<new public="1" set="method" line="38">
			<f a="?tile:?parent">
				<c path="h2d.Tile"/>
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a Bitmap with specified tile and parent object.
		@param tile A Tile that should be rendered by this Bitmap.
		@param parent An optional parent `h2d.Object` instance to which Bitmap adds itself if set.</haxe_doc>
		</new>
		<haxe_doc>Displays a single bitmap Tile on the screen.

	It is a most primitive Drawable and easiest to use, but vastly inferior to others in terms of performance when used for rendering of many tiles.
	When dealing with many images at once, it is recommended to use batched renderers, like `h2d.SpriteBatch` or `h2d.TileGroup`.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="h2d.BlendMode" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/BlendMode.hx">
		<None><haxe_doc>`Out = 1 * Src + 0 * Dst`</haxe_doc></None>
		<Alpha><haxe_doc>`Out = SrcA * Src + (1 - SrcA) * Dst`</haxe_doc></Alpha>
		<Add><haxe_doc>`Out = SrcA * Src + 1 * Dst`</haxe_doc></Add>
		<AlphaAdd><haxe_doc>`Out = Src + (1 - SrcA) * Dst`</haxe_doc></AlphaAdd>
		<SoftAdd><haxe_doc>`Out = (1 - Dst) * Src + 1 * Dst`</haxe_doc></SoftAdd>
		<Multiply><haxe_doc>`Out = Dst * Src + 0 * Dst`</haxe_doc></Multiply>
		<AlphaMultiply><haxe_doc>`Out = Dst * Src + (1 - SrcA) * Dst`</haxe_doc></AlphaMultiply>
		<Erase><haxe_doc>`Out = 0 * Src + (1 - Srb) * Dst`</haxe_doc></Erase>
		<Screen><haxe_doc>`Out = 1 * Src + (1 - Srb) * Dst`</haxe_doc></Screen>
		<Sub><haxe_doc>`Out = 1 * Dst - SrcA * Src`</haxe_doc></Sub>
		<Max><haxe_doc>The output color is the max of the source and dest colors.  
		The blend parameters Src and Dst are ignored for this equation.  
		`Out = MAX( Src, Dst )`</haxe_doc></Max>
		<Min><haxe_doc>The output color is the min of the source and dest colors.  
		The blend parameters Src and Dst are ignored for this equation.  
		`Out = MAX( Src, Dst )`</haxe_doc></Min>
		<haxe_doc>The blending rules when rendering a Tile/Material.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="h2d.Camera" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Camera.hx">
		<x public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>X position of the camera in world space based on anchorX.</haxe_doc>
		</x>
		<y public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>Y position of the camera in world space based on anchorY.</haxe_doc>
		</y>
		<scaleX public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>Horizontal scale factor of the camera. Scaling applied, using anchored position as pivot.</haxe_doc>
		</scaleX>
		<scaleY public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>Vertical scale factor of the camera. Scaling applied, using anchored position as pivot.</haxe_doc>
		</scaleY>
		<rotation public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>Rotation of the camera in radians. Camera is rotated around anchored position.</haxe_doc>
		</rotation>
		<clipViewport public="1">
			<x path="Bool"/>
			<haxe_doc>Enables viewport clipping. Allow to restrict rendering area of the camera to the viewport boundaries.

		Does not affect the user input when Camera is set as interactive camera.</haxe_doc>
		</clipViewport>
		<viewportX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Horizontal viewport offset of the camera relative to internal scene viewport (see `h2d.Scene.scaleMode`) in scene coordinates. ( default : 0 )  
		Automatically scales on scene resize.</haxe_doc>
		</viewportX>
		<viewportY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Vertical viewport offset of the camera relative to internal scene viewport (see `h2d.Scene.scaleMode`) in scene coordinates. ( default : 0 )  
		Automatically scales on scene resize.</haxe_doc>
		</viewportY>
		<viewportWidth public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Camera viewport width in scene coordinates. ( default : scene.width )  
		Automatically scales on scene resize.</haxe_doc>
		</viewportWidth>
		<viewportHeight public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Camera viewport height in scene coordinates. ( default: scene.height )  
		Automatically scales on scene resize.</haxe_doc>
		</viewportHeight>
		<anchorX public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>Horizontal anchor position inside viewport boundaries used for positioning and resize compensation. ( default : 0 )  
		Value is a percentile (0..1) from left viewport edge to right viewport edge with 0.5 being center.</haxe_doc>
		</anchorX>
		<anchorY public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>Vertical anchor position inside viewport boundaries used for positioning and resize compensation. ( default : 0 )  
		Value is a percentile (0..1) from top viewport edge to bottom viewport edge with 0.5 being center.</haxe_doc>
		</anchorY>
		<visible public="1">
			<x path="Bool"/>
			<haxe_doc>Camera visibility.

		Does not affect the user input when Camera is set as interactive camera.</haxe_doc>
		</visible>
		<follow public="1">
			<c path="h2d.Object"/>
			<haxe_doc>Makes camera to follow the referenced Object position.</haxe_doc>
		</follow>
		<followRotation public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Enables `h2d.Object.rotation` sync between `Camera.follow` object and Camera.</haxe_doc>
		</followRotation>
		<posChanged><x path="Bool"/></posChanged>
		<viewX><x path="Float"/></viewX>
		<viewY><x path="Float"/></viewY>
		<viewW><x path="Float"/></viewW>
		<viewH><x path="Float"/></viewH>
		<matA><x path="Float"/></matA>
		<matB><x path="Float"/></matB>
		<matC><x path="Float"/></matC>
		<matD><x path="Float"/></matD>
		<absX><x path="Float"/></absX>
		<absY><x path="Float"/></absY>
		<invDet><x path="Float"/></invDet>
		<scene><c path="h2d.Scene"/></scene>
		<remove public="1" get="inline" set="null" line="134">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Detaches Camera from the Scene it currently attached to.</haxe_doc>
		</remove>
		<layerVisible public="1" set="dynamic" line="164">
			<f a="layer">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Override this method to set visibility only to specific layers. Renders all layers by default.

		Does not affect the user input when Camera is set as interactive camera.

		Usage example:

		```haxe
		final LAYER_SHARED = 0;
		final LAYER_PLAYER_1 = 2;
		final LAYER_PLAYER_2 = 3;
		final LAYER_UI = 4;
		// Set first camera to only render shared layer and one that only visible to player 1.
		s2d.camera.layerVisible = (layer) -> layer == LAYER_SHARED || layer == LAYER_PLAYER_1;
		var player2 = new h2d.Camera(s2d);
		// Set second camera to only render shared layer and one that only visible to player 2.
		player2.layerVisible = (layer) -> layer == LAYER_SHARED || layer == LAYER_PLAYER_2;
		var ui = new h2d.Camera(s2d);
		// Set last camera to only render UI layer.
		ui.layerVisible = (layer) -> layer == LAYER_UI;
		```

		@param layer The rendered layer index in `h2d.Scene`.
		@returns `true` if layer can be rendered, `false` otherwise.]]></haxe_doc>
		</layerVisible>
		<enter public="1" set="method" line="173">
			<f a="ctx">
				<c path="h2d.RenderContext"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>

		Prepares RenderContext to render the camera contents and clips viewport if necessary. Should call `Camera.exit` afterwards.]]></haxe_doc>
		</enter>
		<exit public="1" set="method" line="188">
			<f a="ctx">
				<c path="h2d.RenderContext"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>

		Causes RenderContext to restore the state prior to camera rendering. Should be called after `Camera.enter` when rendering is finished.]]></haxe_doc>
		</exit>
		<sync public="1" set="method" line="205">
			<f a="ctx:?force" v=":false">
				<c path="h2d.RenderContext"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ force : false }</e></m>
				<m n=":access"><e>h2d.Object</e></m>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>

		Synchronizes the camera transform matrix.]]></haxe_doc>
		</sync>
		<setScale public="1" get="inline" set="null" line="237">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Camera.scaleX` and `Camera.scaleY` to given `x` and `y`.</haxe_doc>
		</setScale>
		<scale public="1" get="inline" set="null" line="245">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Multiplies the `Camera.scaleX` by `x` and `Camera.scaleY` by `y`.</haxe_doc>
		</scale>
		<setPosition public="1" get="inline" set="null" line="253">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the camera position to given `x` and `y`.</haxe_doc>
		</setPosition>
		<move public="1" get="inline" set="null" line="261">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves the camera position by given `dx` and `dy`.</haxe_doc>
		</move>
		<rotate public="1" get="inline" set="null" line="269">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Rotates the camera relative to current rotation by given `angle` in radians.</haxe_doc>
		</rotate>
		<setAnchor public="1" get="inline" set="null" line="276">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Camera.anchorX` and `Camera.anchorY` to given `x` and `y`.</haxe_doc>
		</setAnchor>
		<setViewport public="1" get="inline" set="null" line="286">
			<f a="?x:?y:?w:?h" v="0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : 0, w : 0, y : 0, x : 0 }</e></m></meta>
			<haxe_doc>Sets camera viewport dimensions. If `w` or `h` arguments are 0 - scene size is used (width or height respectively).

		Requires Camera being attached to a Scene.</haxe_doc>
		</setViewport>
		<setRawViewport public="1" get="inline" set="null" line="297">
			<f a="?x:?y:?w:?h" v="0:0:1:1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : 1, w : 1, y : 0, x : 0 }</e></m></meta>
			<haxe_doc>Sets camera viewport dimensions in raw format of 0..1 percentiles.</haxe_doc>
		</setRawViewport>
		<screenXToCamera get="inline" set="null" line="311">
			<f a="mx:my">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Convert screen position into a local camera position.

		Requires Camera being attached to a Scene.</haxe_doc>
		</screenXToCamera>
		<screenYToCamera get="inline" set="null" line="320">
			<f a="mx:my">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Convert screen position into a local camera position.

		Requires Camera being attached to a Scene.</haxe_doc>
		</screenYToCamera>
		<cameraXToScreen get="inline" set="null" line="329">
			<f a="mx:my">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Convert local camera position to absolute screen position.

		Requires Camera being attached to a Scene.</haxe_doc>
		</cameraXToScreen>
		<cameraYToScreen get="inline" set="null" line="338">
			<f a="mx:my">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Convert local camera position to absolute screen position.

		Requires Camera being attached to a Scene.</haxe_doc>
		</cameraYToScreen>
		<sceneXToCamera get="inline" set="null" line="347">
			<f a="mx:my">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Convert an absolute scene position into a local camera position.
		Does not represent screen position, see `Camera.screenXToCamera` to convert position with accounting of `scaleMode`.</haxe_doc>
		</sceneXToCamera>
		<sceneYToCamera get="inline" set="null" line="355">
			<f a="mx:my">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Convert an absolute scene position into a local camera position.
		Does not represent screen position, see `Camera.screenYToCamera` to convert position with accounting of `scaleMode`.</haxe_doc>
		</sceneYToCamera>
		<cameraXToScene get="inline" set="null" line="363">
			<f a="mx:my">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Convert local camera position into absolute scene position.
		Does not represent screen position, see `Camera.cameraXToScreen` to convert position with accounting of `scaleMode`.</haxe_doc>
		</cameraXToScene>
		<cameraYToScene get="inline" set="null" line="371">
			<f a="mx:my">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Convert local camera position into absolute scene position.
		Does not represent screen position, see `Camera.cameraYToScreen` to convert position with accounting of `scaleMode`.</haxe_doc>
		</cameraYToScene>
		<eventToCamera public="1" set="method" line="380">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>
		Convert `Event.relX` and `Event.relY` to local camera position.]]></haxe_doc>
		</eventToCamera>
		<screenToCamera public="1" set="method" line="392">
			<f a="pt">
				<c path="h2d.col.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Convert screen position into a local camera position.

		Requires Camera being attached to a Scene.</haxe_doc>
		</screenToCamera>
		<cameraToScreen public="1" set="method" line="405">
			<f a="pt">
				<c path="h2d.col.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Convert local camera position to absolute screen position.

		Requires Camera being attached to a Scene.</haxe_doc>
		</cameraToScreen>
		<sceneToCamera public="1" set="method" line="419">
			<f a="pt">
				<c path="h2d.col.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Convert an absolute scene position into a local camera position.
		Does not represent screen position, see `Camera.screenToCamera` to convert position with accounting of `scaleMode`.

		Requires Camera being attached to a Scene.</haxe_doc>
		</sceneToCamera>
		<cameraToScene public="1" set="method" line="433">
			<f a="pt">
				<c path="h2d.col.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Convert local camera position into absolute scene position.
		Does not represent screen position, see `Camera.cameraToScreen` to convert position with accounting of `scaleMode`.

		Requires Camera being attached to a Scene.</haxe_doc>
		</cameraToScene>
		<checkScene get="inline" set="null" line="441"><f a=""><x path="Void"/></f></checkScene>
		<set_x get="inline" set="null" line="447"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y get="inline" set="null" line="452"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<set_scaleX get="inline" set="null" line="457"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleX>
		<set_scaleY get="inline" set="null" line="462"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleY>
		<set_rotation get="inline" set="null" line="467"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotation>
		<get_viewportX get="inline" set="null" line="472"><f a=""><x path="Float"/></f></get_viewportX>
		<set_viewportX get="inline" set="null" line="473"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_viewportX>
		<get_viewportY get="inline" set="null" line="480"><f a=""><x path="Float"/></f></get_viewportY>
		<set_viewportY get="inline" set="null" line="481"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_viewportY>
		<get_viewportWidth get="inline" set="null" line="488"><f a=""><x path="Float"/></f></get_viewportWidth>
		<set_viewportWidth get="inline" set="null" line="489"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_viewportWidth>
		<get_viewportHeight get="inline" set="null" line="496"><f a=""><x path="Float"/></f></get_viewportHeight>
		<set_viewportHeight get="inline" set="null" line="497"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_viewportHeight>
		<set_anchorX get="inline" set="null" line="504"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_anchorX>
		<set_anchorY get="inline" set="null" line="509"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_anchorY>
		<new public="1" set="method" line="119">
			<f a="?scene">
				<c path="h2d.Scene"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Camera instance and attach to the given `scene`.
		@param scene Optional owner Scene to which camera auto-attaches to.
		Note that when Camera is not attached to the Scene, a number of methods would lead to an error if called.</haxe_doc>
		</new>
		<haxe_doc>A 2D camera representation attached to `h2d.Scene`.

	Enables ability to move, scale and rotate the scene viewport.

	Scene supports usage of multiple Camera instances.
	To configure which layers each Camera renders - `Camera.layerVisible` method should be overridden.
	By default, camera does not clip out the contents that are outside camera bounding box, which can be enabled through `Camera.clipViewport`.

	Due to Heaps event handling structure, only one Camera instance can handle the mouse/touch input, and can be set through `h2d.Scene.interactiveCamera` variable.
	Note that during even handing, interactive camera does not check if the Camera itself is visible nor the layers filters as well as `clipViewport` is not applied.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>h2d.RenderContext</e></m>
			<m n=":access"><e>h2d.Scene</e></m>
			<m n=":allow"><e>h2d.Scene</e></m>
		</meta>
	</class>
	<typedef path="h2d._Graphics.GraphicsPoint" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Graphics.hx" private="1" module="h2d.Graphics"><c path="hxd.poly2tri.Point"/></typedef>
	<class path="h2d.GPoint" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Graphics.hx" module="h2d.Graphics">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<r public="1"><x path="Float"/></r>
		<g public="1"><x path="Float"/></g>
		<b public="1"><x path="Float"/></b>
		<a public="1"><x path="Float"/></a>
		<load public="1" set="method" line="19"><f a="x:y:r:g:b:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></load>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="hxd.impl._Serializable.NoSerializeSupport" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/Serializable.hx" private="1" module="hxd.impl.Serializable" interface="1"/>
	<class path="h3d.prim.Primitive" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/prim/Primitive.hx">
		<implements path="hxd.impl._Serializable.NoSerializeSupport"/>
		<buffer public="1">
			<c path="h3d.Buffer"/>
			<haxe_doc>The primitive vertex buffer, holding its vertexes data.</haxe_doc>
		</buffer>
		<indexes public="1">
			<c path="h3d.Indexes"/>
			<haxe_doc>The primitive indexes buffer, holding its triangles indices.</haxe_doc>
		</indexes>
		<refCount public="1" set="null" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
			<haxe_doc>Current amount of references to this Primitive.  
		Use `incref` and `decref` methods to affect this value. If it reaches 0, it will be atuomatically disposed.</haxe_doc>
		</refCount>
		<triCount public="1" set="method" line="28">
			<f a=""><x path="Int"/></f>
			<haxe_doc>The number of triangles the primitive has.</haxe_doc>
		</triCount>
		<vertexCount public="1" set="method" line="35">
			<f a=""><x path="Int"/></f>
			<haxe_doc>The number of vertexes the primitive has.</haxe_doc>
		</vertexCount>
		<getCollider public="1" set="method" line="42">
			<f a=""><c path="h3d.col.Collider"/></f>
			<haxe_doc>Return a local collider for the primitive</haxe_doc>
		</getCollider>
		<getBounds public="1" set="method" line="50">
			<f a=""><c path="h3d.col.Bounds"/></f>
			<haxe_doc>Return the bounds for the primitive</haxe_doc>
		</getBounds>
		<incref public="1" set="method" line="59">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Increase reference count of the Primitive.</haxe_doc>
		</incref>
		<decref public="1" set="method" line="68">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Decrease reference count of the Primitive.  
		If recount reaches zero, Primitive is automatically disposed when last referencing mesh is removed from scene.</haxe_doc>
		</decref>
		<alloc public="1" set="method" line="79">
			<f a="engine">
				<c path="h3d.Engine"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate the primitive on GPU. Used for internal usage.</haxe_doc>
		</alloc>
		<selectMaterial public="1" set="method" line="86">
			<f a="material">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Select the specified sub material before drawin. Used for internal usage.</haxe_doc>
		</selectMaterial>
		<buildNormalsDisplay public="1" set="method" line="89">
			<f a=""><c path="h3d.prim.Primitive"/></f>
			<meta><m n=":noCompletion"/></meta>
		</buildNormalsDisplay>
		<render public="1" set="method" line="97">
			<f a="engine">
				<c path="h3d.Engine"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Render the primitive. Used for internal usage.</haxe_doc>
		</render>
		<dispose public="1" set="method" line="111">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Dispose the primitive, freeing the GPU memory it uses.</haxe_doc>
		</dispose>
		<toString public="1" set="method" line="125">
			<f a=""><x path="Null"><c path="String"/></x></f>
			<haxe_doc>Return the primitive type.</haxe_doc>
		</toString>
		<new public="1" set="method" line="7">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
		<haxe_doc>h3d.prim.Primitive is the base class for all 3D primitives.
	You can't create an instance of it and need to use one of its subclasses.</haxe_doc>
	</class>
	<class path="h2d._Graphics.GraphicsContent" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Graphics.hx" private="1" module="h2d.Graphics">
		<extends path="h3d.prim.Primitive"/>
		<tmp><x path="hxd.FloatBuffer"/></tmp>
		<index><x path="hxd.IndexBuffer"/></index>
		<buffers><c path="Array"><a>
	<vbuf><c path="h3d.Buffer"/></vbuf>
	<idx><x path="hxd.IndexBuffer"/></idx>
	<ibuf><c path="h3d.Indexes"/></ibuf>
	<buf><x path="hxd.FloatBuffer"/></buf>
</a></c></buffers>
		<bufferDirty><x path="Bool"/></bufferDirty>
		<indexDirty><x path="Bool"/></indexDirty>
		<addIndex public="1" get="inline" set="null" line="48"><f a="i">
	<x path="Int"/>
	<x path="Void"/>
</f></addIndex>
		<add public="1" get="inline" set="null" line="53"><f a="x:y:u:v:r:g:b:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></add>
		<next public="1" set="method" line="65"><f a=""><x path="Bool"/></f></next>
		<alloc public="1" set="method" line="76" override="1"><f a="engine">
	<c path="h3d.Engine"/>
	<x path="Void"/>
</f></alloc>
		<render public="1" set="method" line="92" override="1"><f a="engine">
	<c path="h3d.Engine"/>
	<x path="Void"/>
</f></render>
		<flush public="1" set="method" line="100"><f a=""><x path="Void"/></f></flush>
		<dispose public="1" set="method" line="118" override="1"><f a=""><x path="Void"/></f></dispose>
		<clear public="1" set="method" line="139"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method" line="41"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h2d.Graphics" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Graphics.hx">
		<extends path="h2d.Drawable"/>
		<EARCUT expr="null" line="374" static="1">
			<c path="hxd.earcut.Earcut"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</EARCUT>
		<content><c path="h2d._Graphics.GraphicsContent"/></content>
		<tmpPoints><c path="Array"><c path="h2d.GPoint"/></c></tmpPoints>
		<pindex><x path="Int"/></pindex>
		<curR><x path="Float"/></curR>
		<curG><x path="Float"/></curG>
		<curB><x path="Float"/></curB>
		<curA><x path="Float"/></curA>
		<lineSize><x path="Float"/></lineSize>
		<lineR><x path="Float"/></lineR>
		<lineG><x path="Float"/></lineG>
		<lineB><x path="Float"/></lineB>
		<lineA><x path="Float"/></lineA>
		<doFill><x path="Bool"/></doFill>
		<xMin><x path="Float"/></xMin>
		<yMin><x path="Float"/></yMin>
		<xMax><x path="Float"/></xMax>
		<yMax><x path="Float"/></yMax>
		<ma expr="1.">
			<x path="Float"/>
			<meta><m n=":value"><e>1.</e></m></meta>
		</ma>
		<mb expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</mb>
		<mc expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</mc>
		<md expr="1.">
			<x path="Float"/>
			<meta><m n=":value"><e>1.</e></m></meta>
		</md>
		<mx expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</mx>
		<my expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</my>
		<tile public="1">
			<c path="h2d.Tile"/>
			<haxe_doc>The Tile used as source of Texture to render.</haxe_doc>
		</tile>
		<bevel public="1" expr="0.25">
			<x path="Float"/>
			<meta><m n=":value"><e>0.25</e></m></meta>
			<haxe_doc>Adds bevel cut-off at line corners.

		The value is a percentile in range of 0...1, dictating at which point edges get beveled based on their angle.
		Value of 0 being not beveled and 1 being always beveled.</haxe_doc>
		</bevel>
		<onRemove set="method" line="208" override="1"><f a=""><x path="Void"/></f></onRemove>
		<clear public="1" set="method" line="216">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears the Graphics contents.</haxe_doc>
		</clear>
		<getBoundsRec set="method" line="227" override="1"><f a="relativeTo:out:forSize">
	<c path="h2d.Object"/>
	<c path="h2d.col.Bounds"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></getBoundsRec>
		<isConvex set="method" line="232"><f a="points">
	<c path="Array"><c path="h2d.GPoint"/></c>
	<x path="Bool"/>
</f></isConvex>
		<flushLine set="method" line="248"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></flushLine>
		<flushFill set="method" line="376"><f a="i0">
	<x path="Int"/>
	<x path="Void"/>
</f></flushFill>
		<flush set="method" line="407"><f a=""><x path="Void"/></f></flush>
		<beginFill public="1" set="method" line="432">
			<f a="?color:?alpha" v="0:1.">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1., color : 0 }</e></m></meta>
			<haxe_doc>Begins a solid color fill.

		Beginning new fill will finish previous fill operation without need to call `Graphics.endFill`.

		@param color An RGB color with which to fill the drawn shapes.
		@param alpha A transparency of the fill color.</haxe_doc>
		</beginFill>
		<beginTileFill public="1" set="method" line="455">
			<f a="?dx:?dy:?scaleX:?scaleY:?tile">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="h2d.Tile"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Position a virtual tile at the given position and scale. Every draw will display a part of this tile relative
		to these coordinates.

		Note that in by default, Tile is not wrapped, and in order to render tiling texture, `Drawable.tileWrap` have to be set.
		Additionally, both `Tile.dx` and `Tile.dy` are ignored (use `dx`/`dy` arguments instead)
		as well as tile defined size of the tile through `Tile.width` and `Tile.height` (use `scaleX`/`scaleY` relative to texture size).

		Beginning new fill will finish previous fill operation without need to call `Graphics.endFill`.

		@param dx An X offset of the Tile relative to Graphics.
		@param dy An Y offset of the Tile relative to Graphics.
		@param scaleX A horizontal scale factor applied to the Tile texture.
		@param scaleY A vertical scale factor applied to the Tile texture.
		@param tile The tile to fill with. If null, uses previously used Tile with `beginTileFill` or throws an error.
		Previous tile is remembered across `Graphics.clear` calls.</haxe_doc>
		</beginTileFill>
		<drawTile public="1" set="method" line="497">
			<f a="x:y:tile">
				<x path="Float"/>
				<x path="Float"/>
				<c path="h2d.Tile"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draws a Tile at given position.
		See `Graphics.beginTileFill` for limitations.

		This methods ends current fill operation.
		@param x The X position of the tile.
		@param y The Y position of the tile.
		@param tile The tile to draw.</haxe_doc>
		</drawTile>
		<lineStyle public="1" set="method" line="510">
			<f a="?size:?color:?alpha" v="0:0:1.">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1., color : 0, size : 0 }</e></m></meta>
			<haxe_doc>Sets an outline style. Changing the line style ends the currently drawn line.

		@param size Width of the outline. Setting size to 0 will remove the outline.
		@param color An outline RGB color.
		@param alpha An outline transparency.</haxe_doc>
		</lineStyle>
		<moveTo public="1" get="inline" set="null" line="522">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Ends the current line and starts new one at given position.</haxe_doc>
		</moveTo>
		<endFill public="1" set="method" line="530">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Ends the current fill operation.</haxe_doc>
		</endFill>
		<setColor public="1" get="inline" set="null" line="542">
			<f a="color:?alpha" v=":1.">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1. }</e></m></meta>
			<haxe_doc>Changes current fill color.
		Does not interrupt current fill operation and can be utilized to customize color per vertex.
		During tile fill operation, color serves as a tile color multiplier.
		@param color The new fill color.
		@param alpha The new fill transparency.</haxe_doc>
		</setColor>
		<drawRect public="1" set="method" line="556">
			<f a="x:y:w:h">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draws a rectangle with given parameters.
		@param x The rectangle top-left corner X position.
		@param y The rectangle top-left corner Y position.
		@param w The rectangle width.
		@param h The rectangle height.</haxe_doc>
		</drawRect>
		<drawRoundedRect public="1" set="method" line="582">
			<f a="x:y:w:h:radius:?nsegments" v=":::::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ nsegments : 0 }</e></m></meta>
			<haxe_doc>Draws a rounded rectangle with given parameters.
		@param x The rectangle top-left corner X position.
		@param y The rectangle top-left corner Y position.
		@param w The rectangle width.
		@param h The rectangle height.
		@param radius Radius of the rectangle corners.
		@param nsegments Amount of segments used for corners. When `0` segment count calculated automatically.</haxe_doc>
		</drawRoundedRect>
		<drawCircle public="1" set="method" line="620">
			<f a="cx:cy:radius:?nsegments" v=":::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ nsegments : 0 }</e></m></meta>
			<haxe_doc>Draws a circle centered at given position.
		@param cx X center position of the circle.
		@param cy Y center position of the circle.
		@param radius Radius of the circle.
		@param nsegments Amount of segments used to draw the circle. When `0`, amount of segments calculated automatically.</haxe_doc>
		</drawCircle>
		<drawEllipse public="1" set="method" line="642">
			<f a="cx:cy:radiusX:radiusY:?rotationAngle:?nsegments" v="::::0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ nsegments : 0, rotationAngle : 0 }</e></m></meta>
			<haxe_doc>Draws an ellipse centered at given position.
		@param cx X center position of the ellipse.
		@param cy Y center position of the ellipse.
		@param radiusX Horizontal radius of an ellipse.
		@param radiusY Vertical radius of an ellipse.
		@param rotationAngle Ellipse rotation in radians.
		@param nsegments Amount of segments used to draw an ellipse. When `0`, amount of segments calculated automatically.</haxe_doc>
		</drawEllipse>
		<drawPie public="1" set="method" line="667">
			<f a="cx:cy:radius:angleStart:angleLength:?nsegments" v=":::::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ nsegments : 0 }</e></m></meta>
			<haxe_doc>Draws a pie centered at given position.
		@param cx X center position of the pie.
		@param cy Y center position of the pie.
		@param radius Radius of the pie.
		@param angleStart Starting angle of the pie in radians.
		@param angleLength The pie size in clockwise direction with `2*PI` being full circle.
		@param nsegments Amount of segments used to draw the pie. When `0`, amount of segments calculated automatically.</haxe_doc>
		</drawPie>
		<drawPieInner public="1" set="method" line="695">
			<f a="cx:cy:radius:innerRadius:angleStart:angleLength:?nsegments" v="::::::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ nsegments : 0 }</e></m></meta>
			<haxe_doc>Draws a double-edged pie centered at given position.
		@param cx X center position of the pie.
		@param cy Y center position of the pie.
		@param radius The outer radius of the pie.
		@param innerRadius The inner radius of the pie.
		@param angleStart Starting angle of the pie in radians.
		@param angleLength The pie size in clockwise direction with `2*PI` being full circle.
		@param nsegments Amount of segments used to draw the pie. When `0`, amount of segments calculated automatically.</haxe_doc>
		</drawPieInner>
		<drawRectanglePie public="1" set="method" line="732">
			<f a="cx:cy:width:height:angleStart:angleLength:?nsegments" v="::::::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ nsegments : 0 }</e></m></meta>
			<haxe_doc>Draws a rectangular pie centered at given position.
		@param cx X center position of the pie.
		@param cy Y center position of the pie.
		@param width Width of the pie.
		@param height Height of the pie.
		@param angleStart Starting angle of the pie in radians.
		@param angleLength The pie size in clockwise direction with `2*PI` being solid rectangle.
		@param nsegments Amount of segments used to draw the pie. When `0`, amount of segments calculated automatically.</haxe_doc>
		</drawRectanglePie>
		<curveTo public="1" set="method" line="762">
			<f a="bx:by:cx:cy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws a quadratic Bezier curve using the current line style from the current drawing position to (cx, cy) and using the control point that (bx, by) specifies.
	 * IvanK Lib port ( http://lib.ivank.net )</haxe_doc>
		</curveTo>
		<cubicCurveTo public="1" set="method" line="780">
			<f a="bx:by:cx:cy:dx:dy:?nsegments" v="::::::40">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ nsegments : 40 }</e></m></meta>
			<haxe_doc>* Draws a cubic Bezier curve from the current drawing position to the specified anchor point.
	 * IvanK Lib port ( http://lib.ivank.net )
	 * @param bx control X for start point
	 * @param by control Y for start point
	 * @param cx control X for end point
	 * @param cy control Y for end point
	 * @param dx end X
	 * @param dy end Y
	 * @param nsegments = 40</haxe_doc>
		</cubicCurveTo>
		<lineTo public="1" get="inline" set="null" line="807">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draws a straight line from the current drawing position to the given position.</haxe_doc>
		</lineTo>
		<addVertex public="1" set="method" line="822">
			<f a="x:y:r:g:b:a:?u:?v" v="::::::0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ v : 0., u : 0. }</e></m></meta>
			<haxe_doc>Advanced usage. Adds new vertex to the current polygon with given parameters and current line style.
		@param x Vertex X position
		@param y Vertex Y position
		@param r Red tint value of the vertex when performing fill operation.
		@param g Green tint value of the vertex when performing fill operation.
		@param b Blue tint value of the vertex when performing fill operation.
		@param a Alpha of the vertex when performing fill operation.
		@param u Normalized horizontal Texture position from the current Tile fill operation.
		@param v Normalized vertical Texture position from the current Tile fill operation.</haxe_doc>
		</addVertex>
		<draw set="method" line="834" override="1"><f a="ctx">
	<c path="h2d.RenderContext"/>
	<x path="Void"/>
</f></draw>
		<sync set="method" line="839" override="1"><f a="ctx">
	<c path="h2d.RenderContext"/>
	<x path="Void"/>
</f></sync>
		<new public="1" set="method" line="201">
			<f a="?parent">
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Graphics instance.
		@param parent An optional parent `h2d.Object` instance to which Graphics adds itself if set.</haxe_doc>
		</new>
		<haxe_doc>A simple interface to draw arbitrary 2D geometry.

	Usage notes:
	* While Graphics allows for multiple unique textures, each texture swap causes a new drawcall,
	and due to that it's recommended to minimize the amount of used textures per Graphics instance,
	ideally limiting to only one texture.
	* Due to how Graphics operate, removing them from the active `h2d.Scene` will cause a loss of all data.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.Interactive" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/SceneEvents.hx" module="hxd.SceneEvents" interface="1">
		<set_cursor public="1" set="method">
			<f a="value">
				<e path="hxd.Cursor"/>
				<e path="hxd.Cursor"/>
			</f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</set_cursor>
		<propagateEvents public="1"><x path="Bool"/></propagateEvents>
		<cursor public="1" set="accessor"><e path="hxd.Cursor"/></cursor>
		<handleEvent public="1" set="method"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></handleEvent>
		<getInteractiveScene public="1" set="method"><f a=""><c path="hxd.InteractiveScene"/></f></getInteractiveScene>
	</class>
	<class path="h2d.Interactive" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Interactive.hx">
		<extends path="h2d.Drawable"/>
		<implements path="hxd.Interactive"/>
		<width public="1">
			<x path="Float"/>
			<haxe_doc>Width of the Interactive. Ignored if `Interactive.shape` is set.</haxe_doc>
		</width>
		<height public="1">
			<x path="Float"/>
			<haxe_doc>Height of the Interactive. Ignored if `Interactive.shape` is set.</haxe_doc>
		</height>
		<cursor public="1" set="accessor" expr="Button">
			<x path="Null"><e path="hxd.Cursor"/></x>
			<meta><m n=":value"><e>Button</e></m></meta>
			<haxe_doc>Cursor used when Interactive is under mouse cursor.</haxe_doc>
		</cursor>
		<isEllipse public="1">
			<x path="Bool"/>
			<haxe_doc>Performs an elliptic hit-test instead of rectangular one based on `Interactive.width` and `height`. Ignored if `Interactive.shape` is set.</haxe_doc>
		</isEllipse>
		<cancelEvents public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Set the default `hxd.Event.cancel` mode.</haxe_doc>
		</cancelEvents>
		<propagateEvents public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Set the default `hxd.Event.propagate` mode.</haxe_doc>
		</propagateEvents>
		<backgroundColor public="1">
			<x path="Null"><x path="Int"/></x>
			<haxe_doc>If set, Interactive will draw a `Tile` with `[width, height]` dimensions of specified color (including alpha).</haxe_doc>
		</backgroundColor>
		<enableRightButton public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>When enabled, interacting with secondary mouse buttons (right button/wheel) will cause `onPush`, `onClick`, `onRelease` and `onReleaseOutside` callbacks.
		Otherwise those callbacks will only be triggered with primary mouse button (left button).

		Note that Interactive remembers only the last pressed button when pressing on it, hence pressing Interactive with the left button and then the right button
		would not cause `onClick` on either when releasing left button first, as pressed state is reset internally.</haxe_doc>
		</enableRightButton>
		<scene><c path="h2d.Scene"/></scene>
		<mouseDownButton expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</mouseDownButton>
		<parentMask><c path="h2d.Mask"/></parentMask>
		<invDet><x path="Float"/></invDet>
		<shape public="1">
			<c path="h2d.col.Collider"/>
			<haxe_doc>Detailed shape collider for Interactive.
		If set, `width` and `height` properties are ignored for collision checks.</haxe_doc>
		</shape>
		<shapeX public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
			<haxe_doc>Detailed shape X offset from Interactive.</haxe_doc>
		</shapeX>
		<shapeY public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
			<haxe_doc>Detailed shape Y offset from Interactive.</haxe_doc>
		</shapeY>
		<onAdd set="method" line="85" override="1"><f a=""><x path="Void"/></f></onAdd>
		<draw set="method" line="92" override="1"><f a="ctx">
	<c path="h2d.RenderContext"/>
	<x path="Void"/>
</f></draw>
		<getBoundsRec set="method" line="96" override="1"><f a="relativeTo:out:forSize">
	<c path="h2d.Object"/>
	<c path="h2d.col.Bounds"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></getBoundsRec>
		<onHierarchyMoved set="method" line="102" override="1"><f a="parentChanged">
	<x path="Bool"/>
	<x path="Void"/>
</f></onHierarchyMoved>
		<updateMask set="method" line="114"><f a=""><x path="Void"/></f></updateMask>
		<onRemove set="method" line="127" override="1"><f a=""><x path="Void"/></f></onRemove>
		<checkBounds set="method" line="135"><f a="e">
	<c path="hxd.Event"/>
	<x path="Bool"/>
</f></checkBounds>
		<preventClick public="1" set="method" line="145">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Reset current pressed state of the Interactive, preventing the `onClick` or `onReleaseOutside` being triggered when user releases mouse button.</haxe_doc>
		</preventClick>
		<getInteractiveScene public="1" set="method" line="150">
			<f a=""><c path="hxd.InteractiveScene"/></f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
		</getInteractiveScene>
		<handleEvent public="1" set="method" line="155">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
		</handleEvent>
		<calcAbsPos set="method" line="228" override="1"><f a=""><x path="Void"/></f></calcAbsPos>
		<set_cursor set="method" line="233"><f a="c">
	<x path="Null"><e path="hxd.Cursor"/></x>
	<x path="Null"><e path="hxd.Cursor"/></x>
</f></set_cursor>
		<eventToLocal set="method" line="240"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></eventToLocal>
		<startCapture public="1" set="method" line="264">
			<f a="callb:?onCancel:?touchId">
				<f a="">
					<c path="hxd.Event"/>
					<x path="Void"/>
				</f>
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts input events capture and redirects them to `callb` method until `Interactive.stopCapture` is called.
		While the method name may imply that only mouse events would be captured: This is not the case,
		as it will also capture all other input events, including keyboard events.

		Starting event capture through `Interactive.startCapture` will convert `Event.relX` and `relY` to local coordinates
		of the Interactive and will restore them after invoking `callb`.
		In order to receive coordinates in scene coordinate space use `Scene.startCapture`.

		@param callb A callback method that receives `hxd.Event` when input event happens.
		Unless `callb` sets `Event.propagate` to `true`, event won't be sent to other Interactives.
		@param onCancel An optional callback that is invoked when `Interactive.stopCapture` is called.</haxe_doc>
		</startCapture>
		<stopCapture public="1" set="method" line="277">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops current input event capture.</haxe_doc>
		</stopCapture>
		<startDrag public="1" get="inline" set="null" line="282">
			<f a="callb:?onCancel">
				<f a="">
					<c path="hxd.Event"/>
					<x path="Void"/>
				</f>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"Renamed to startCapture"</e></m>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</startDrag>
		<stopDrag public="1" get="inline" set="null" line="287">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":deprecated"><e>"Renamed to stopCapture"</e></m>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</stopDrag>
		<focus public="1" set="method" line="296">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets focus on this `Interactive`.
		If Interactive was not already focused and it receives focus - `onFocus` event is sent.
		Interactive won't become focused if during `onFocus` call it will set `Event.cancel` to `true`.</haxe_doc>
		</focus>
		<blur public="1" set="method" line="307">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes focus from interactive if it's focused.
		If Interactive is currently focused - `onFocusLost` event will be sent.
		Interactive won't lose focus if during `onFocusLost` call it will set `Event.cancel` to `true`.</haxe_doc>
		</blur>
		<isOver public="1" set="method" line="314">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Checks if Interactive is currently hovered by the mouse.</haxe_doc>
		</isOver>
		<hasFocus public="1" set="method" line="321">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Checks if Interactive is currently focused.</haxe_doc>
		</hasFocus>
		<onOver public="1" set="dynamic" line="331">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when mouse enters Interactive hitbox area.

		`Event.propagate` and `Event.cancel` are ignored during `onOver`.
		Propagation can be set with `onMove` event, as well as cancelling `onMove` will prevent `onOver`.</haxe_doc>
		</onOver>
		<onOut public="1" set="dynamic" line="338">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when mouse exits Interactive hitbox area.
		`Event.propagate` and `Event.cancel` are ignored during `onOut`.</haxe_doc>
		</onOut>
		<onPush public="1" set="dynamic" line="344">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when Interactive is pressed by the user.</haxe_doc>
		</onPush>
		<onRelease public="1" set="dynamic" line="358">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when Interactive is unpressed under multiple circumstances.
		* Always sent if user releases mouse while it is inside Interactive hitbox area.
			This happens regardless if that Interactive was pressed prior or not,
			and due to that it's not guaranteed that `Interactive.onPush` would precede this event.
			`Event.kind` is set to `ERelease` during this event.
		* Sent before `Interactive.onReleaseOutside` if this Interactive was pressed, but released outside its hitbox area.
			`Event.kind` is set to `EReleaseOutside` during this event.

		See `Interactive.onClick` and `Interactive.onReleaseOutside` methods for separate events that trigger only when user interacts with this particular Interactive.</haxe_doc>
		</onRelease>
		<onReleaseOutside public="1" set="dynamic" line="368">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when user presses the Interactive, moves the mouse outside its hitbox area and releases the mouse button.

		Can be prevented to fire by calling `Interactive.preventClick` during or after `Interactive.onPush` event.

		`Interactive.onRelease` is sent with `Event.kind` being `EReleaseOutside` just before this event.</haxe_doc>
		</onReleaseOutside>
		<onClick public="1" set="dynamic" line="378">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when the Interactive is clicked by the user.

		Can be prevented to fire by calling `Interactive.preventClick` during or after `Interactive.onPush` event.

		`Interactive.onRelease` is sent with `Event.kind` being `ERelease` just before this event.</haxe_doc>
		</onClick>
		<onMove public="1" set="dynamic" line="389">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when user moves within the Interactive hitbox area.
		See `Interactive.onCheck` for event when user does not move the mouse.

		Cancelling the `Event` will prevent interactive from becoming overed,
		causing `Interactive.onOut` if it was overed previously.
		Interactive would be treated as not overed as long as event is cancelled even if mouse is within the hitbox area.</haxe_doc>
		</onMove>
		<onWheel public="1" set="dynamic" line="395">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when user scrolls mouse wheel above the Interactive. Wheel delta can be obtained through the `Event.wheelDelta`.</haxe_doc>
		</onWheel>
		<onFocus public="1" set="dynamic" line="403">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when Interactive receives focus during `Interactive.focus` call.

		Cancelling the `Event` will prevent the Interactive from becoming focused.</haxe_doc>
		</onFocus>
		<onFocusLost public="1" set="dynamic" line="411">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when Interactive lost focus either via `Interactive.blur` call or when user clicks on another Interactive/outside this Interactive hitbox area.

		Cancelling the `Event` will prevent the Interactive from losing focus.</haxe_doc>
		</onFocusLost>
		<onKeyUp public="1" set="dynamic" line="418">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when this Interactive is focused and user unpressed a keyboard key.
		Unpressed key can be accessed through `Event.keyCode`.</haxe_doc>
		</onKeyUp>
		<onKeyDown public="1" set="dynamic" line="425">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when this Interactive is focused and user pressed a keyboard key.
		Pressed key can be accessed through `Event.keyCode`.</haxe_doc>
		</onKeyDown>
		<onCheck public="1" set="dynamic" line="436">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent every frame when user hovers an Interactive but does not move the mouse.
		See `Interactive.onMove` for event when user moves the mouse.

		Cancelling the `Event` will prevent interactive from becoming overed,
		causing `Interactive.onOut` if it was overed previously.
		Interactive would be treated as not overed as long as event is cancelled even if mouse is within the hitbox area.</haxe_doc>
		</onCheck>
		<onTextInput public="1" set="dynamic" line="442">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when this Interactive is focused and user inputs text. Character added can be accessed through `Event.charCode`.</haxe_doc>
		</onTextInput>
		<new public="1" set="method" line="78">
			<f a="width:height:?parent:?shape">
				<x path="Float"/>
				<x path="Float"/>
				<c path="h2d.Object"/>
				<c path="h2d.col.Collider"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Interactive with specified parameters. `width`, `height` and `parent` with optional detailed `shape`.
		@param width The width of the Interactive hitbox.
		@param height The height of the Interactive hitbox.
		@param parent An optional parent `h2d.Object` instance to which Interactive adds itself if set.
		@param shape An optional detailed Interactive hitbox.</haxe_doc>
		</new>
		<haxe_doc>A user input handler.

	Hitbox area can be a rectangle, an ellipse or an arbitrary shape (`h2d.col.Collider`).

	Note that Interactive does not reports its hitbox bounds in `Object.getBounds`
	unless `Interactive.backgroundColor` is set, in which case `width` and `height` are reported.

	By default, Interactive only reacts to primary (left) mouse button for actions, see `Interactive.enableRightButton` for details.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>h2d.Scene</e></m>
		</meta>
	</class>
	<class path="h2d.Layers" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Layers.hx">
		<extends path="h2d.Object"/>
		<layersIndexes><c path="Array"><x path="Int"/></c></layersIndexes>
		<layerCount><x path="Int"/></layerCount>
		<addChild public="1" set="method" line="29" override="1">
			<f a="s">
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child object `s` at the end of the layer 0.
		@param s An object to be added.</haxe_doc>
		</addChild>
		<add public="1" get="inline" set="null" line="39">
			<f a="s:layer">
				<c path="h2d.Object"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child object `s` at the end of the given `layer`.
		`h2d.Layers.addChildAt` can be used as an alternative.
		@param s An object to be added.
		@param layer An index of the layer, 0 is the bottom-most layer.</haxe_doc>
		</add>
		<addChildAt public="1" set="method" line="49" override="1">
			<f a="s:layer">
				<c path="h2d.Object"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child object `s` at the end of the given `layer`.
		`h2d.Layers.addChildAt` can be used as an alternative.
		@param s An object to be added.
		@param layer An index of the layer, 0 is the bottom-most layer.</haxe_doc>
		</addChildAt>
		<removeChild public="1" set="method" line="64" override="1"><f a="s">
	<c path="h2d.Object"/>
	<x path="Void"/>
</f></removeChild>
		<under public="1" set="method" line="88">
			<f a="s">
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves an object `s` to the bottom of its layer (rendered first, behind the other Objects in the layer).
		Causes `Object.onHierarchyMoved` on the Object.
		@param s An object to be moved.</haxe_doc>
		</under>
		<over public="1" set="method" line="115">
			<f a="s">
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves an object `s` to the top of its layer (rendered last, in front of other Objects in layer).
		Causes `Object.onHierarchyMoved` on the Object.
		@param s An object to be moved.</haxe_doc>
		</over>
		<getLayer public="1" set="method" line="140">
			<f a="layer">
				<x path="Int"/>
				<t path="Iterator"><c path="h2d.Object"/></t>
			</f>
			<haxe_doc>Returns an Iterator with objects in a specified `layer`.
		Returns an empty iterator if no objects are present in the layer.

		Objects added or removed from Layers during iteration do not affect the output of the Iterator.

		@param layer A layer index to iterate over.</haxe_doc>
		</getLayer>
		<getChildLayer public="1" set="method" line="157">
			<f a="s">
				<c path="h2d.Object"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the layer on which the child `s` resides on.
		@param s An object to look up to.
		@return An index of the layer where the object resides on or `-1` if `s` is not a child of the Layers.</haxe_doc>
		</getChildLayer>
		<drawLayer set="method" line="166"><f a="ctx:layer">
	<c path="h2d.RenderContext"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawLayer>
		<ysort public="1" set="method" line="186">
			<f a="layer">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sorts specified layer based on `Object.y` value of it's children.
		Causes `Object.onHierarchyChanged` on moved children.
		@param layer An index of the layer to sort.</haxe_doc>
		</ysort>
		<new public="1" set="method" line="19">
			<f a="?parent">
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Layers instance.
		@param parent An optional parent `h2d.Object` instance to which Layers adds itself if set.</haxe_doc>
		</new>
		<haxe_doc>A layer-based container for Objects.

	Hierarchically organizes objects based on their layer.
	Supports per-layer Y-sorting through `Layers.ysort`.</haxe_doc>
	</class>
	<class path="h2d.Mask" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Mask.hx">
		<extends path="h2d.Object"/>
		<maskWith public="1" set="method" line="24" static="1">
			<f a="ctx:object:width:height:?scrollX:?scrollY" v="::::0:0">
				<c path="h2d.RenderContext"/>
				<c path="h2d.Object"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ scrollY : 0, scrollX : 0 }</e></m>
				<m n=":access"><e>h2d.RenderContext</e></m>
			</meta>
			<haxe_doc>Masks render zone based off object position and given dimensions.
		Should call `Mask.unmask()` afterwards.
		@param ctx The render context to mask.
		@param object An Object which transform will be used as mask origin.
		@param width The width of the mask in scene coordinate space.
		@param height The height of the mask in scene coordinate space.
		@param scrollX Additional horizontal offset of the masked area.
		@param scrollY Additional vertical offset of the masked area.</haxe_doc>
		</maskWith>
		<unmask public="1" set="method" line="53" static="1">
			<f a="ctx">
				<c path="h2d.RenderContext"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Unmasks the previously masked area from `Mask.maskWith`.
		@param ctx The render context to unmask.</haxe_doc>
		</unmask>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>The width of the masked area.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>The height of the masked area.</haxe_doc>
		</height>
		<parentMask><c path="h2d.Mask"/></parentMask>
		<scrollX public="1" set="accessor" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
			<haxe_doc>Horizontal scroll offset of the Mask content in pixels. Can be clamped by `Mask.scrollBounds`.</haxe_doc>
		</scrollX>
		<scrollY public="1" set="accessor" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
			<haxe_doc>Vertical scroll offset of the Mask content in pixels. Can be clamped by `Mask.scrollBounds`.</haxe_doc>
		</scrollY>
		<scrollBounds public="1">
			<c path="h2d.col.Bounds"/>
			<haxe_doc>Optional scroll boundaries that prevent content from overscroll.</haxe_doc>
		</scrollBounds>
		<scrollTo public="1" set="method" line="97">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scroll the Mask content to the specified offset.</haxe_doc>
		</scrollTo>
		<scrollBy public="1" set="method" line="105">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scroll the Mask content by the specified offset relative to the current scroll offset.</haxe_doc>
		</scrollBy>
		<onHierarchyMoved set="method" line="110" override="1"><f a="parentChanged">
	<x path="Bool"/>
	<x path="Void"/>
</f></onHierarchyMoved>
		<onAdd set="method" line="116" override="1"><f a=""><x path="Void"/></f></onAdd>
		<updateMask set="method" line="121"><f a=""><x path="Void"/></f></updateMask>
		<set_scrollX set="method" line="134"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scrollX>
		<set_scrollY set="method" line="140"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scrollY>
		<calcAbsPos set="method" line="147" override="1"><f a=""><x path="Void"/></f></calcAbsPos>
		<getBoundsRec set="method" line="153" override="1"><f a="relativeTo:out:forSize">
	<c path="h2d.Object"/>
	<c path="h2d.col.Bounds"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></getBoundsRec>
		<drawRec set="method" line="175" override="1"><f a="ctx">
	<c path="h2d.RenderContext"/>
	<x path="Void"/>
</f></drawRec>
		<new public="1" set="method" line="88">
			<f a="width:height:?parent">
				<x path="Int"/>
				<x path="Int"/>
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Mask instance.
		@param width The width of the masked area.
		@param height The height of the masked area.
		@param parent An optional parent `h2d.Object` instance to which Mask adds itself if set.</haxe_doc>
		</new>
		<haxe_doc>Restricts rendering area within the `[width, height]` rectangle.
	For more advanced masking, see `h2d.filter.AbstractMask`.

	Rotation of the mask does not rotate the masked area and instead causes it to cover the bounding box of the mask.

	The `Mask.maskWidth` and `Mask.unmask` can be used to mask out rendering area without direct usage of Mask instance in-between.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="h2d._RenderContext.CameraStackEntry" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/RenderContext.hx" private="1" module="h2d.RenderContext"><a>
	<vy><x path="Float"/></vy>
	<vx><x path="Float"/></vx>
	<vd><x path="Float"/></vd>
	<vc><x path="Float"/></vc>
	<vb><x path="Float"/></vb>
	<va><x path="Float"/></va>
</a></typedef>
	<typedef path="h2d._RenderContext.TargetStackEntry" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/RenderContext.hx" private="1" module="h2d.RenderContext"><a>
	<vy><x path="Float"/></vy>
	<vx><x path="Float"/></vx>
	<vd><x path="Float"/></vd>
	<vc><x path="Float"/></vc>
	<vb><x path="Float"/></vb>
	<va><x path="Float"/></va>
	<t><c path="h3d.mat.Texture"/></t>
	<rzY><x path="Float"/></rzY>
	<rzX><x path="Float"/></rzX>
	<rzW><x path="Float"/></rzW>
	<rzH><x path="Float"/></rzH>
	<hasRZ><x path="Bool"/></hasRZ>
</a></typedef>
	<typedef path="h2d._RenderContext.RenderZoneStack" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/RenderContext.hx" private="1" module="h2d.RenderContext"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<w><x path="Float"/></w>
	<hasRZ><x path="Bool"/></hasRZ>
	<h><x path="Float"/></h>
</a></typedef>
	<class path="h3d.impl.RenderContext" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/RenderContext.hx">
		<engine public="1"><c path="h3d.Engine"/></engine>
		<time public="1"><x path="Float"/></time>
		<elapsedTime public="1"><x path="Float"/></elapsedTime>
		<frame public="1"><x path="Int"/></frame>
		<textures public="1"><c path="h3d.impl.TextureCache"/></textures>
		<dispose public="1" set="method" line="19"><f a=""><x path="Void"/></f></dispose>
		<new set="method" line="11"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="h2d.RenderContext" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/RenderContext.hx">
		<extends path="h3d.impl.RenderContext"/>
		<BUFFERING get="inline" set="null" expr="false" line="20" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</BUFFERING>
		<globalAlpha public="1" expr="1.">
			<x path="Float"/>
			<meta><m n=":value"><e>1.</e></m></meta>
			<haxe_doc>Current transparency value used for rendering objects. 
		Automatically managed by `Object`.</haxe_doc>
		</globalAlpha>
		<buffer public="1">
			<x path="hxd.FloatBuffer"/>
			<meta><m n=":dox"><e>hide</e></m></meta>
			<haxe_doc>Temporary vertex buffer used to emit Tiles when `RenderContext.BUFFERING` is on.  
		Otherwise it's `null`. Internal usage only.</haxe_doc>
		</buffer>
		<bufPos public="1">
			<x path="Int"/>
			<meta><m n=":dox"><e>hide</e></m></meta>
			<haxe_doc>Current temporary buffer position. Internal usage only.</haxe_doc>
		</bufPos>
		<scene public="1">
			<c path="h2d.Scene"/>
			<haxe_doc>The 2D scene attached to this RenderContext instance.</haxe_doc>
		</scene>
		<defaultSmooth public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>

		Determines texture filtering method (Linear or Nearest).
		Not recommended to use - assign `Scene.defaultSmooth` instead.]]></haxe_doc>
		</defaultSmooth>
		<killAlpha public="1">
			<x path="Bool"/>
			<haxe_doc>When enabled, pixels with alpha value below 0.001 will be discarded.</haxe_doc>
		</killAlpha>
		<front2back public="1">
			<x path="Bool"/>
			<haxe_doc>When enabled, causes `Object` to render its children in reverse order.</haxe_doc>
		</front2back>
		<onBeginDraw public="1">
			<f a="">
				<c path="h2d.Drawable"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Sent before Drawable is rendered.
		Drawable won't be rendered if callback returns `false`.</haxe_doc>
		</onBeginDraw>
		<onEnterFilter public="1">
			<f a="">
				<c path="h2d.Object"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Sent before filter begins rendering.
		Filter (and it's object tree) won't be rendered if callback returns `false`.</haxe_doc>
		</onEnterFilter>
		<onLeaveFilter public="1">
			<f a="">
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Send after filter has been rendered.</haxe_doc>
		</onLeaveFilter>
		<tmpBounds public="1" expr="new h2d.col.Bounds()">
			<c path="h2d.col.Bounds"/>
			<meta>
				<m n=":value"><e>new h2d.col.Bounds()</e></m>
				<m n=":dox"><e>hide</e></m>
			</meta>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>

		Used to calculate filter rendering bounds.]]></haxe_doc>
		</tmpBounds>
		<texture><c path="h3d.mat.Texture"/></texture>
		<baseShader><c path="h3d.shader.Base2d"/></baseShader>
		<manager><c path="h3d.pass.ShaderManager"/></manager>
		<compiledShader><c path="hxsl.RuntimeShader"/></compiledShader>
		<buffers><c path="h3d.shader.Buffers"/></buffers>
		<fixedBuffer><c path="h3d.Buffer"/></fixedBuffer>
		<pass><c path="h3d.mat.Pass"/></pass>
		<currentShaders><c path="hxsl.ShaderList"/></currentShaders>
		<baseShaderList><c path="hxsl.ShaderList"/></baseShaderList>
		<currentObj><c path="h2d.Drawable"/></currentObj>
		<stride><x path="Int"/></stride>
		<targetsStack><c path="Array"><t path="h2d._RenderContext.TargetStackEntry"/></c></targetsStack>
		<targetsStackIndex><x path="Int"/></targetsStackIndex>
		<cameraStack><c path="Array"><t path="h2d._RenderContext.CameraStackEntry"/></c></cameraStack>
		<cameraStackIndex><x path="Int"/></cameraStackIndex>
		<curTarget><c path="h3d.mat.Texture"/></curTarget>
		<renderZoneStack expr="[]">
			<c path="Array"><t path="h2d._RenderContext.RenderZoneStack"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</renderZoneStack>
		<renderZoneIndex expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</renderZoneIndex>
		<hasUVPos><x path="Bool"/></hasUVPos>
		<filterStack><c path="Array"><c path="h2d.Object"/></c></filterStack>
		<inFilter><c path="h2d.Object"/></inFilter>
		<inFilterBlend><e path="h2d.BlendMode"/></inFilterBlend>
		<viewA><x path="Float"/></viewA>
		<viewB><x path="Float"/></viewB>
		<viewC><x path="Float"/></viewC>
		<viewD><x path="Float"/></viewD>
		<viewX><x path="Float"/></viewX>
		<viewY><x path="Float"/></viewY>
		<hasRenderZone><x path="Bool"/></hasRenderZone>
		<renderX><x path="Float"/></renderX>
		<renderY><x path="Float"/></renderY>
		<renderW><x path="Float"/></renderW>
		<renderH><x path="Float"/></renderH>
		<currentBlend><e path="h2d.BlendMode"/></currentBlend>
		<baseFlipY><x path="Float"/></baseFlipY>
		<targetFlipY><x path="Float"/></targetFlipY>
		<dispose public="1" set="method" line="144" override="1"><f a=""><x path="Void"/></f></dispose>
		<hasBuffering public="1" get="inline" set="null" line="153">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
			<haxe_doc>Tells if tile buffering is enabled.</haxe_doc>
		</hasBuffering>
		<begin public="1" set="method" line="162">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>

		Prepares RenderContext to begin rendering a new frame.]]></haxe_doc>
		</begin>
		<allocTarget public="1" set="method" line="196">
			<f a="name:?filter" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="h3d.mat.Texture"/>
			</f>
			<meta><m n=":value"><e>{ filter : false }</e></m></meta>
			<haxe_doc>Allocated a cached render target Texture with specified name, filter mode and current `Scene.width` and `Scene.height`.
		@returns Either precached Texture under same name or newly allocated one.</haxe_doc>
		</allocTarget>
		<clear public="1" set="method" line="205">
			<f a="color">
				<x path="Null"><x path="Int"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Clears current render target with specified color.</haxe_doc>
		</clear>
		<initShaders set="method" line="209"><f a="shaders">
	<c path="hxsl.ShaderList"/>
	<x path="Void"/>
</f></initShaders>
		<end public="1" set="method" line="226">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>

		Performers cleanup after frame is rendered.]]></haxe_doc>
		</end>
		<pushCamera public="1" set="method" line="242">
			<f a="cam">
				<c path="h2d.Camera"/>
				<x path="Void"/>
			</f>
			<meta><m n=":access"><e>h2d.Camera</e></m></meta>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>

		Applies Camera `cam` transform to current viewport and pushes it onto the camera stack.
		Should call `RenderContext.popCamera` when rendering is complete.]]></haxe_doc>
		</pushCamera>
		<popCamera public="1" set="method" line="276">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>

		Restores previous viewport state prior to camera rendering, removing it from the camera stack.]]></haxe_doc>
		</popCamera>
		<pushFilter public="1" set="method" line="297">
			<f a="spr">
				<c path="h2d.Object"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>

		Prepares to render Filter and pushes provided Object onto filter stack.

		@returns true if filter is allowed to render, false otherwise (see `RenderContext.onEnterFilter`)]]></haxe_doc>
		</pushFilter>
		<popFilter public="1" set="method" line="310">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>

		Finalizes Filter rendering and removes top-most Object from filter stack.]]></haxe_doc>
		</popFilter>
		<pushTarget public="1" set="method" line="330">
			<f a="t:?startX:?startY:?width:?height" v=":0:0:-1:-1">
				<c path="h3d.mat.Texture"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : -1, width : -1, startY : 0, startX : 0 }</e></m></meta>
			<haxe_doc>Sets provided texture as a render target and pushes it onto target stack.
		If only part of the Texture should be rendered onto, method should be used with `pushRenderZone()` to avoid rendering outside specified texture area.

		@param t Texture to which RenderContext will render to. Texture should be allocated as a render target (have `Target` flag).
		@param startX X offset of rendering area on the Texture.
		@param startY Y offset of rendering area on the Texture.
		@param width Width of the clipping area on the Texture. If equals to `-1`, will use texture width.
		@param height Height of the clipping area on the Texture. If equals to `-1` will use texture height.</haxe_doc>
		</pushTarget>
		<pushTargets public="1" set="method" line="374">
			<f a="texs">
				<c path="Array"><c path="h3d.mat.Texture"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes an array of render targets onto target stack.</haxe_doc>
		</pushTargets>
		<popTarget public="1" set="method" line="386">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Pops current render target from the target stack.
		If last texture was removed from the stack, will restore the primary render buffer as a render target.</haxe_doc>
		</popTarget>
		<pushRenderZone public="1" set="method" line="415">
			<f a="x:y:w:h">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets rectangular render zone area, saving previous render zone settings.
		To respect previous render zone area, use `RenderContext.clipRenderZone` method.

		`RenderContext.popRenderZone` should be called afterwards to clear render zone stack.</haxe_doc>
		</pushRenderZone>
		<popRenderZone public="1" set="method" line="436">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Restores previous render zone settings.</haxe_doc>
		</popRenderZone>
		<clipRenderZone public="1" set="method" line="451">
			<f a="x:y:w:h">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes new render zone with respect to the old render zone settings by clipping new and old render zones,
		pushing the intersection area result.
		Used so that any call to the clipRenderZone respects the already set zone, and can't render outside of it.</haxe_doc>
		</clipRenderZone>
		<setRZ set="method" line="467"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setRZ>
		<clearRZ get="inline" set="null" line="497"><f a=""><x path="Void"/></f></clearRZ>
		<setRenderZone public="1" get="inline" set="null" line="503">
			<f a="x:y:w:h">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"Use pushRenderZone"</e></m>
			</meta>
		</setRenderZone>
		<clearRenderZone public="1" get="inline" set="null" line="508">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"Use popRenderZone"</e></m>
			</meta>
		</clearRenderZone>
		<drawLayer set="method" line="512"><f a="layer">
	<x path="Int"/>
	<x path="Void"/>
</f></drawLayer>
		<drawScene public="1" set="method" line="519">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Renders the assigned Scene. Same as `s2d.drawRec(s2d.renderer)`.</haxe_doc>
		</drawScene>
		<flush public="1" get="inline" set="null" line="527">
			<f a=""><x path="Void"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
			<haxe_doc>Flushes buffered tile data if one present.</haxe_doc>
		</flush>
		<_flush set="method" line="531"><f a=""><x path="Void"/></f></_flush>
		<beforeDraw public="1" set="method" line="548">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>

		Should be called before performing a new draw call in order to sync shader data and other parameters.]]></haxe_doc>
		</beforeDraw>
		<setupColor get="inline" set="null" line="579"><f a="obj">
	<c path="h2d.Drawable"/>
	<x path="Void"/>
</f></setupColor>
		<beginDrawBatchState public="1" set="method" line="595">
			<f a="obj">
				<c path="h2d.Drawable"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":access"><e>h2d.Drawable</e></m></meta>
			<haxe_doc>Prepares rendering with BatchState.
		Each state draw should be preceded with `swapTexture` call.</haxe_doc>
		</beginDrawBatchState>
		<swapTexture public="1" get="inline" set="null" line="606">
			<f a="texture">
				<c path="h3d.mat.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Swap current active texture and prepares for next drawcall.</haxe_doc>
		</swapTexture>
		<beginDrawObject public="1" set="method" line="616">
			<f a="obj:texture">
				<c path="h2d.Drawable"/>
				<c path="h3d.mat.Texture"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":access"><e>h2d.Drawable</e></m></meta>
			<haxe_doc>Prepares rendering of the Drawable object with specified texture.
		@returns true if rendering is prepared, false otherwise (see `RenderContext.onBeginDraw`)</haxe_doc>
		</beginDrawObject>
		<beginDrawBatch public="1" set="method" line="631">
			<f a="obj:texture">
				<c path="h2d.Drawable"/>
				<c path="h3d.mat.Texture"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":access"><e>h2d.Drawable</e></m>
			</meta>
			<haxe_doc>Begins buffered Tile render of the Drawable object.
		@returns true if rendering is prepared, false otherwise (see `RenderContext.onBeginDraw`)</haxe_doc>
		</beginDrawBatch>
		<drawTile public="1" set="method" line="642">
			<f a="obj:tile">
				<c path="h2d.Drawable"/>
				<c path="h2d.Tile"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":access"><e>h2d.Drawable</e></m></meta>
			<haxe_doc>Renders a Tile with the transform of the given Drawable.

		@returns `true` if tile was drawn, `false` otherwise.
		Tile is not drawn if it's either outside of the rendering area or was cancelled by `RenderContext.onBeginDraw`.</haxe_doc>
		</drawTile>
		<beginDraw set="method" line="715">
			<f a="obj:texture:isRelative:?hasUVPos" v=":::false">
				<c path="h2d.Drawable"/>
				<c path="h3d.mat.Texture"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":value"><e>{ hasUVPos : false }</e></m>
				<m n=":access"><e>h2d.Drawable</e></m>
			</meta>
		</beginDraw>
		<new public="1" set="method" line="123">
			<f a="scene">
				<c path="h2d.Scene"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new RenderContext and attach it to specified Scene.
		@param scene The scene which RenderContext will render.</haxe_doc>
		</new>
		<haxe_doc>A 2D scene renderer.

	Passed during `Object.sync` and `Object.drawRec` and can be accessed directly via `Scene.renderer`.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>h2d.Scene</e></m>
		</meta>
	</class>
	<enum path="h2d.ScaleModeAlign" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Scene.hx" module="h2d.Scene">
		<Left><haxe_doc>Anchor Scene viewport horizontally to the left side of the window. When passed to `verticalAlign` it will be treated as Center.</haxe_doc></Left>
		<Right><haxe_doc>Anchor Scene viewport horizontally to the right side of the window. When passed to `verticalAlign` it will be treated as Center.</haxe_doc></Right>
		<Center><haxe_doc>Anchor to the center of the window.</haxe_doc></Center>
		<Top><haxe_doc>Anchor Scene viewport vertically to the top of the window. When passed to `horizontalAlign` it will be treated as Center.</haxe_doc></Top>
		<Bottom><haxe_doc>Anchor Scene viewport vertically to the bottom of the window. When passed to `horizontalAlign` it will be treated as Center.</haxe_doc></Bottom>
		<haxe_doc>Viewport alignment when scaling mode supports it. See `ScaleMode`.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="h2d.ScaleMode" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Scene.hx" module="h2d.Scene">
		<Resize><haxe_doc>Matches scene size to window size. `width` and `height` of Scene will match window size. Default scaling mode.</haxe_doc></Resize>
		<Stretch a="width:height">
			<x path="Int"/>
			<x path="Int"/>
			<haxe_doc>Sets constant Scene size and stretches it to cover entire window. This behavior is same as old `setFixedSize` method.

		@param width The width of the internal Scene viewport.
		@param height The height of the internal Scene viewport.</haxe_doc>
		</Stretch>
		<LetterBox a="width:height:?integerScale:?horizontalAlign:?verticalAlign">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<e path="h2d.ScaleModeAlign"/>
			<e path="h2d.ScaleModeAlign"/>
			<haxe_doc>Sets constant Scene size and upscales it with preserving the aspect-ratio to fit the window.

		With `800x600` window, `LetterBox(320, 260)` will result in center-aligned Scene of size `320x260` upscaled to fit into the window.  
		With same window but setting of `LetterBox(320, 260, true, Left, Top)` would result in the same Scene internal size,
		upscaled to `640x480` resolution and anchored to the top-left corner of the window.

		Note that while it's called LetterBox, there is no viewport rendering clipping apart from the out-of-bounds culling in `RenderContext.drawTile` / `Object.emitTile`.

		@param width The width of the internal Scene viewport.
		@param height The height of the internal Scene viewport.
		@param integerScale When enabled, upscaling is performed only with integer increments (1x, 2x, 3x, etc) and can be used to achieve pixel-perfect scaling.
		While enabled, the Scene won't be downscaled when internal viewport is larger than the window size and will remain at 1x zoom. Default: `false`.
		@param horizontalAlign The horizontal viewport anchoring rule. Accepted values are `Left`, `Center` and `Right`. Default: `Center`.
		@param verticalAlign The vertical viewport anchoring rule. Accepted values are `Top`, `Center` and `Bottom`. Default: `Center`.</haxe_doc>
		</LetterBox>
		<Fixed a="width:height:zoom:?horizontalAlign:?verticalAlign">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<e path="h2d.ScaleModeAlign"/>
			<e path="h2d.ScaleModeAlign"/>
			<haxe_doc>Sets constant Scene size, scale and alignment. Does not perform any adaptation to the window size apart from alignment.

		With `800x600` window, `Fixed(200, 150, 2, Left, Center)` will result in the Scene size of `200x150`, and visually upscaled to `400x300`, and aligned to a middle-left of the window.

		@param width The width of the internal Scene viewport.
		@param height The height of the internal Scene viewport.
		@param zoom The scaling multiplier of internal viewport when rendering onto the screen.
		@param horizontalAlign The horizontal viewport anchoring rule. Accepted values are `Left`, `Center` and `Right`. Default: `Center`.
		@param verticalAlign The vertical viewport anchoring rule. Accepted values are `Top`, `Center` and `Bottom`. Default: `Center`.</haxe_doc>
		</Fixed>
		<Zoom a="level">
			<x path="Float"/>
			<haxe_doc>Upscales/downscales the Scene internal viewport according to `level` and matches Scene size to `ceil(window size / level)`.

		With `800x600` window, `Zoom(2)` will result in the `400x300` Scene size upscaled to fill the entire window.</haxe_doc>
		</Zoom>
		<AutoZoom a="minWidth:minHeight:?integerScaling">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
			<haxe_doc>Ensures that the Scene size will be of the minimum specified size.

		Automatically calculates zoom level based on provided size according to `min(window width / min width, window height / min height)`, then applies same scaling as `Zoom(level)`.
		The behavior is similar to `LetterBox`, however instead of constant internal viewport size, Scene size will change to cover the entire window.

		`minWidth` or `minHeight` can be set to `0` in order to force scaling adjustment account only for either horizontal of vertical window size.
		If both are `0`, results are undefined.

		With `800x600` window, `AutoZoom(320, 260, false)` will result in the Scene size of `347x260`. `AutoZoom(320, 260, true)` will result in the size of `400x300`.

		@param minWidth The minimum width of the internal Scene viewport.
		@param minHeight The minimum height of the internal Scene viewport.
		@param integerScale When enabled, upscaling is performed only with integer increments (1x, 2x, 3x, etc) and can be used to achieve pixel-perfect scaling.
		While enabled, the Scene won't be downscaled when internal viewport is larger than the window size and will remain at 1x zoom. Default: `false`.</haxe_doc>
		</AutoZoom>
		<haxe_doc>Scaling mode of the 2D Scene.

	Set via `Scene.scaleMode`.

	See ScaleMode2D sample for usage showcase.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="hxd.InteractiveScene" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/SceneEvents.hx" module="hxd.SceneEvents" interface="1">
		<setEvents public="1" set="method"><f a="s">
	<c path="hxd.SceneEvents"/>
	<x path="Void"/>
</f></setEvents>
		<handleEvent public="1" set="method"><f a="e:last">
	<c path="hxd.Event"/>
	<c path="hxd.Interactive"/>
	<c path="hxd.Interactive"/>
</f></handleEvent>
		<dispatchEvent public="1" set="method"><f a="e:to">
	<c path="hxd.Event"/>
	<c path="hxd.Interactive"/>
	<x path="Void"/>
</f></dispatchEvent>
		<dispatchListeners public="1" set="method"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></dispatchListeners>
		<isInteractiveVisible public="1" set="method"><f a="i">
	<c path="hxd.Interactive"/>
	<x path="Bool"/>
</f></isInteractiveVisible>
	</class>
	<class path="h2d.Scene" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Scene.hx">
		<extends path="h2d.Layers"/>
		<implements path="hxd.InteractiveScene"/>
		<implements path="h3d.IDrawable"/>
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The current width (in pixels) of the scene. Can change if the screen gets resized or `scaleMode` changes.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The current height (in pixels) of the scene. Can change if the screen gets resized or `scaleMode` changes.</haxe_doc>
		</height>
		<viewportA set="null">
			<x path="Float"/>
			<haxe_doc>Viewport horizontal scale transform value. Converts from scene space to screen space of [0, 2] range.</haxe_doc>
		</viewportA>
		<viewportD set="null">
			<x path="Float"/>
			<haxe_doc>Viewport vertical scale transform value. Converts from scene space to screen space of [0, 2] range.</haxe_doc>
		</viewportD>
		<viewportX set="null">
			<x path="Float"/>
			<haxe_doc>Horizontal viewport offset relative to top-left corner of the window. Can change if the screen gets resized or `scaleMode` changes.
		Offset is in screen-space coordinates: [-1, 1] where 0 is center of the window.</haxe_doc>
		</viewportX>
		<viewportY set="null">
			<x path="Float"/>
			<haxe_doc>Vertical viewport offset relative to top-left corner of the window. Can change if the screen gets resized or `scaleMode` changes.
		Offset is in screen-space coordinates: [-1, 1] where 0 is center of the window.</haxe_doc>
		</viewportY>
		<offsetX set="null">
			<x path="Float"/>
			<haxe_doc>Horizontal viewport offset relative to top-left corner of the window in pixels.
		Assigned if the screen gets resized or `scaleMode` changes.</haxe_doc>
		</offsetX>
		<offsetY set="null">
			<x path="Float"/>
			<haxe_doc>Vertical viewport offset relative to top-left corner of the window in pixels.
		Assigned if the screen gets resized or `scaleMode` changes.</haxe_doc>
		</offsetY>
		<viewportScaleX public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Horizontal scale of a scene when rendering to the screen.

		Can change if the screen gets resized or `scaleMode` changes.</haxe_doc>
		</viewportScaleX>
		<viewportScaleY public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Vertical scale of a scene when rendering to the screen.

		Can change if the screen gets resized or `scaleMode` changes.</haxe_doc>
		</viewportScaleY>
		<mouseX public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>The current mouse X coordinates (in pixels) relative to the current `Scene.interactiveCamera`.</haxe_doc>
		</mouseX>
		<mouseY public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>The current mouse Y coordinates (in pixels) relative to the current `Scene.interactiveCamera`.</haxe_doc>
		</mouseY>
		<zoom public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta>
				<m n=":deprecated"><e>"zoom is deprecated, use scaleMode = Zoom(v) instead"</e></m>
				<m n=":dox"><e>hide</e></m>
			</meta>
			<haxe_doc><![CDATA[The zoom factor of the scene, allows to set a fixed x2, x4 etc. zoom for pixel art
		When setting a zoom > 0, the scene resize will be automatically managed.]]></haxe_doc>
		</zoom>
		<scaleMode public="1" set="accessor" expr="Resize">
			<e path="h2d.ScaleMode"/>
			<meta><m n=":value"><e>Resize</e></m></meta>
			<haxe_doc>Scene scaling mode.

		Important thing to keep in mind - Scene does not clip rendering to it's scaled size and
		graphics can render outside of it. However `RenderContext.drawTile` (and consecutively `Object.emitTile`) does check for those bounds and
		will clip out tiles that are outside of the scene bounds.</haxe_doc>
		</scaleMode>
		<cameras public="1" get="accessor" set="null">
			<x path="haxe.ds.ReadOnlyArray"><c path="h2d.Camera"/></x>
			<haxe_doc>List of all cameras attached to the Scene. Should contain at least one camera to render (created by default).

		Override `h2d.Camera.layerVisible` method to filter out specific layers from camera rendering.

		To add or remove cameras use `Scene.addCamera` and `Scene.removeCamera` methods.</haxe_doc>
		</cameras>
		<_cameras><c path="Array"><c path="h2d.Camera"/></c></_cameras>
		<camera public="1" get="accessor" set="null">
			<c path="h2d.Camera"/>
			<haxe_doc>Alias to the first camera in the camera list: `cameras[0]`</haxe_doc>
		</camera>
		<interactiveCamera public="1" set="accessor">
			<c path="h2d.Camera"/>
			<haxe_doc>Camera instance that handles the scene events.

		Due to Heaps structure, only one Camera can work with the Interactives.
		Contrary to rendering, event handling does not check if layer is visible for the camera or not.

		Should never be null. When set, if Camera does not belong to the Scene, it will be added with `Scene.addCamera`.
		Would cause an exception when trying to remove current interactive camera from the list.</haxe_doc>
		</interactiveCamera>
		<defaultSmooth public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Controls the default value for `h2d.Drawable.smooth`. Default: `false`</haxe_doc>
		</defaultSmooth>
		<renderer public="1" get="accessor" set="accessor">
			<c path="h2d.RenderContext"/>
			<haxe_doc>The current Scene renderer. Can be customized.</haxe_doc>
		</renderer>
		<interactive><c path="Array"><c path="h2d.Interactive"/></c></interactive>
		<eventListeners><c path="Array"><f a="">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></c></eventListeners>
		<ctx><c path="h2d.RenderContext"/></ctx>
		<window><c path="hxd.Window"/></window>
		<events>
			<c path="hxd.SceneEvents"/>
			<meta><m n=":allow"><e>h2d.Interactive</e></m></meta>
		</events>
		<shapePoint><c path="h2d.col.Point"/></shapePoint>
		<get_defaultSmooth get="inline" set="null" line="257"><f a=""><x path="Bool"/></f></get_defaultSmooth>
		<set_defaultSmooth get="inline" set="null" line="258"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_defaultSmooth>
		<setEvents public="1" set="method" line="261">
			<f a="events">
				<c path="hxd.SceneEvents"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
		</setEvents>
		<get_zoom set="method" line="265">
			<f a=""><x path="Int"/></f>
			<meta><m n=":deprecated"><e>"zoom is deprecated, use scaleMode = Zoom(v) instead"</e></m></meta>
		</get_zoom>
		<set_zoom set="method" line="272">
			<f a="v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":deprecated"><e>"zoom is deprecated, use scaleMode = Zoom(v) instead"</e></m></meta>
		</set_zoom>
		<set_scaleMode set="method" line="277"><f a="v">
	<e path="h2d.ScaleMode"/>
	<e path="h2d.ScaleMode"/>
</f></set_scaleMode>
		<get_renderer set="method" line="283"><f a=""><c path="h2d.RenderContext"/></f></get_renderer>
		<set_renderer set="method" line="284"><f a="v">
	<c path="h2d.RenderContext"/>
	<c path="h2d.RenderContext"/>
</f></set_renderer>
		<get_camera get="inline" set="null" line="286"><f a=""><c path="h2d.Camera"/></f></get_camera>
		<get_cameras get="inline" set="null" line="288"><f a=""><c path="Array"><c path="h2d.Camera"/></c></f></get_cameras>
		<set_interactiveCamera set="method" line="290"><f a="cam">
	<c path="h2d.Camera"/>
	<c path="h2d.Camera"/>
</f></set_interactiveCamera>
		<addCamera public="1" set="method" line="301">
			<f a="cam:?pos">
				<c path="h2d.Camera"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a Camera to the Scene camera list with optional index at which it is added.
		@param cam The Camera instance to add.
		@param pos Optional index at which the camera will be inserted.</haxe_doc>
		</addCamera>
		<removeCamera public="1" set="method" line="314">
			<f a="cam">
				<c path="h2d.Camera"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the Camera from the Scene camera list.
		Attempting to remove current `Scene.interactiveCamera` would cause an exception.</haxe_doc>
		</removeCamera>
		<setFixedSize public="1" set="method" line="325">
			<f a="w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"setFixedSize is deprecated, use scaleMode = Stretch(w, h) instead"</e></m>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Set the fixed size for the scene, will prevent automatic scene resizing when screen size changes.</haxe_doc>
		</setFixedSize>
		<checkResize public="1" set="method" line="333">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Recalculates the scene viewport parameters based on `scaleMode`.</haxe_doc>
		</checkResize>
		<screenXToViewport get="inline" set="null" line="424"><f a="mx">
	<x path="Float"/>
	<x path="Float"/>
</f></screenXToViewport>
		<screenYToViewport get="inline" set="null" line="428"><f a="my">
	<x path="Float"/>
	<x path="Float"/>
</f></screenYToViewport>
		<get_mouseX set="method" line="432"><f a=""><x path="Float"/></f></get_mouseX>
		<get_mouseY set="method" line="440"><f a=""><x path="Float"/></f></get_mouseY>
		<dispatchListeners public="1" set="method" line="449">
			<f a="event">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
		</dispatchListeners>
		<isInteractiveVisible public="1" set="method" line="458">
			<f a="i">
				<c path="hxd.Interactive"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
		</isInteractiveVisible>
		<getInteractive public="1" set="method" line="470">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="h2d.Interactive"/>
			</f>
			<haxe_doc>Returns the topmost visible Interactive at the specified coordinates.</haxe_doc>
		</getInteractive>
		<screenToViewport set="method" line="505"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></screenToViewport>
		<dispatchEvent public="1" set="method" line="510">
			<f a="event:to">
				<c path="hxd.Event"/>
				<c path="hxd.Interactive"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
		</dispatchEvent>
		<handleEvent public="1" set="method" line="523">
			<f a="event:last">
				<c path="hxd.Event"/>
				<c path="hxd.Interactive"/>
				<c path="hxd.Interactive"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
		</handleEvent>
		<addEventListener public="1" set="method" line="585">
			<f a="f">
				<f a="">
					<c path="hxd.Event"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Add an event listener that will capture all events that were not caught by an `h2d.Interactive`</haxe_doc>
		</addEventListener>
		<removeEventListener public="1" set="method" line="592">
			<f a="f">
				<f a="">
					<c path="hxd.Event"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Remove a previously added event listener, returns false it was not part of the event listeners.</haxe_doc>
		</removeEventListener>
		<startCapture public="1" set="method" line="612">
			<f a="onEvent:?onCancel:?touchId">
				<f a="">
					<c path="hxd.Event"/>
					<x path="Void"/>
				</f>
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts input events capture and redirects them to `onEvent` method until `Scene.stopDrag` is called.

		While the method name may imply that only mouse events would be captured: This is not the case,
		as it will also capture all other input events, including keyboard events.

		@param onEvent A callback method that receives `hxd.Event` when input event happens.
		Unless `onEvent` sets `Event.propagate` to `true`, event won't be sent to other Interactives.
		@param onCancel An optional callback that is invoked when `Scene.stopDrag` is called.
		@param refEvent For touch events, when defined, only capture events that match the reference `Event.touchId`.</haxe_doc>
		</startCapture>
		<stopCapture public="1" set="method" line="622">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops current input event capture.</haxe_doc>
		</stopCapture>
		<startDrag public="1" get="inline" set="null" line="627">
			<f a="onEvent:?onCancel:?refEvent">
				<f a="">
					<c path="hxd.Event"/>
					<x path="Void"/>
				</f>
				<f a=""><x path="Void"/></f>
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"Renamed to startCapture"</e></m>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</startDrag>
		<stopDrag public="1" get="inline" set="null" line="632">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":deprecated"><e>"Renamed to stopCapture"</e></m>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</stopDrag>
		<getFocus public="1" set="method" line="639">
			<f a=""><c path="h2d.Interactive"/></f>
			<haxe_doc>Get the currently focused Interactive.</haxe_doc>
		</getFocus>
		<addEventTarget set="method" line="653">
			<f a="i">
				<c path="h2d.Interactive"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>h2d</e></m></meta>
		</addEventTarget>
		<removeEventTarget set="method" line="705">
			<f a="i:?notify" v=":false">
				<c path="h2d.Interactive"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ notify : false }</e></m>
				<m n=":allow"><e>h2d</e></m>
			</meta>
		</removeEventTarget>
		<dispose public="1" set="method" line="716">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Dispose the scene and all its children, freeing used GPU memory.

		If Scene was allocated, causes `Object.onRemove` on all Scene objects.</haxe_doc>
		</dispose>
		<setElapsedTime public="1" set="method" line="728">
			<f a="v">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>

		Before `Scene.render` or `Scene.sync` are called, allows to set how much time has elapsed (in seconds) since the last frame in order to update scene animations.
		This is managed automatically by hxd.App.]]></haxe_doc>
		</setElapsedTime>
		<drawImplTo set="method" line="732"><f a="s:texs:?outputs">
	<c path="h2d.Object"/>
	<c path="Array"><c path="h3d.mat.Texture"/></c>
	<c path="Array"><e path="hxsl.Output"/></c>
	<x path="Void"/>
</f></drawImplTo>
		<syncOnly public="1" set="method" line="753">
			<f a="et">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronize the scene without rendering, updating all objects and animations by the given amount of time, in seconds.</haxe_doc>
		</syncOnly>
		<render public="1" set="method" line="768">
			<f a="engine">
				<c path="h3d.Engine"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[<span class="label">Internal usage</span>

		Render the scene on the screen.]]></haxe_doc>
		</render>
		<sync set="method" line="780" override="1"><f a="ctx">
	<c path="h2d.RenderContext"/>
	<x path="Void"/>
</f></sync>
		<clipBounds set="method" line="789" override="1"><f a="ctx:bounds">
	<c path="h2d.RenderContext"/>
	<c path="h2d.col.Bounds"/>
	<x path="Void"/>
</f></clipBounds>
		<drawContent set="method" line="809" override="1"><f a="ctx">
	<c path="h2d.RenderContext"/>
	<x path="Void"/>
</f></drawContent>
		<onAdd set="method" line="851" override="1"><f a=""><x path="Void"/></f></onAdd>
		<onRemove set="method" line="857" override="1"><f a=""><x path="Void"/></f></onRemove>
		<captureBitmap public="1" set="method" line="868">
			<f a="?target">
				<c path="h2d.Tile"/>
				<c path="h2d.Bitmap"/>
			</f>
			<haxe_doc>Capture the scene into a texture and returns the resulting `h2d.Bitmap`.

		@param target Optional Tile to render onto. If not set, new Texture with interval Scene viewport dimensions is allocated,
		otherwise Tile boundaries and Texture are used.</haxe_doc>
		</captureBitmap>
		<new public="1" set="method" line="233">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create a new 2D scene. A default 2D scene is already available in `hxd.App.s2d`.</haxe_doc>
		</new>
		<haxe_doc>The root class for a 2D scene. All root objects are added to it before being drawn on screen.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h2d.Tile" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/Tile.hx">
		<fromColor public="1" set="method" line="356" static="1">
			<f a="color:?width:?height:?alpha" v=":1:1:1.">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="h2d.Tile"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1., height : 1, width : 1 }</e></m></meta>
			<haxe_doc>Create a solid color Tile with specified width, height, color and alpha.
		@param color The RGB color of the Tile.
		@param width The width of the Tile in pixels.
		@param height The height of the Tile in pixels.
		@param alpha The transparency of the Tile.</haxe_doc>
		</fromColor>
		<fromBitmap public="1" set="method" line="367" static="1">
			<f a="bmp">
				<c path="hxd.BitmapData"/>
				<c path="h2d.Tile"/>
			</f>
			<haxe_doc>Creates a new Texture from provided BitmapData and returns a Tile representing it.</haxe_doc>
		</fromBitmap>
		<autoCut public="1" set="method" line="383" static="1">
			<f a="bmp:width:?height">
				<c path="hxd.BitmapData"/>
				<x path="Int"/>
				<x path="Int"/>
				<a>
					<tiles><c path="Array"><c path="Array"><c path="h2d.Tile"/></c></c></tiles>
					<main><c path="h2d.Tile"/></main>
				</a>
			</f>
			<haxe_doc>Creates a new POT Texture from bmp and cuts it in a grid of tiles with maximum size of `[width, height]`.

		Algorithm will use bottom-right pixels as background color and cut out empty space from each Tile and
		will modify the origin point to retain the Tile position.
		Each row scan continues as long as there are no empty tiles.

		@param bmp The BitmapData which will be split into tiles.
		@param width The width of a single grid entry.
		@param height An optional height of a single grid entry. Width will be used if not provided.</haxe_doc>
		</autoCut>
		<fromTexture public="1" set="method" line="417" static="1">
			<f a="t">
				<c path="h3d.mat.Texture"/>
				<c path="h2d.Tile"/>
			</f>
			<haxe_doc>Create new Tile from provided Texture instance.</haxe_doc>
		</fromTexture>
		<fromPixels public="1" set="method" line="424" static="1">
			<f a="pixels">
				<c path="hxd.Pixels"/>
				<c path="h2d.Tile"/>
			</f>
			<haxe_doc>Creates new POT Texture from Pixels and returns a Tile representing it.</haxe_doc>
		</fromPixels>
		<isEmpty set="method" line="431" static="1"><f a="b:px:py:width:height:bg">
	<c path="hxd.BitmapData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Null"><a>
	<w><x path="Int"/></w>
	<h><x path="Int"/></h>
	<dy><x path="Int"/></dy>
	<dx><x path="Int"/></dx>
</a></x>
</f></isEmpty>
		<innerTex><c path="h3d.mat.Texture"/></innerTex>
		<u><x path="Float"/></u>
		<v><x path="Float"/></v>
		<u2><x path="Float"/></u2>
		<v2><x path="Float"/></v2>
		<dx public="1">
			<x path="Float"/>
			<haxe_doc>Visual offset of the Tile along the X axis during rendering.</haxe_doc>
		</dx>
		<dy public="1">
			<x path="Float"/>
			<haxe_doc>Visual offset of the Tile along the Y axis during rendering.</haxe_doc>
		</dy>
		<x public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Horizontal position of the Tile on the Texture.

		Cannot be modified directly, use `Tile.setPosition` instead.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Vertical position of the Tile on the Texture.

		Cannot be modified directly, use `Tile.setPosition` instead.</haxe_doc>
		</y>
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Width of the Tile.
		Not guaranteed to represent real width of the Tile on texture. (see `Tile.scaleToSize`)

		Cannot be modified directly, use `Tile.setSize` instead.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Height of the Tile.
		Not guaranteed to represent real height of the Tile on texture. (see `Tile.scaleToSize`)

		Cannot be modified directly, use `Tile.setSize` instead.</haxe_doc>
		</height>
		<xFlip public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>The flip state of the Tile.
		@see `Tile.flipX`</haxe_doc>
		</xFlip>
		<yFlip public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>The flip state of the Tile.
		@see `Tile.flipY`</haxe_doc>
		</yFlip>
		<ix public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>An integer horizontal position of the Tile on the Texture.
		Alias to `Math.floor(tile.x)`.</haxe_doc>
		</ix>
		<get_ix get="inline" set="null" line="74"><f a=""><x path="Int"/></f></get_ix>
		<iy public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>An integer vertical position of the Tile on the Texture.
		Alias to `Math.floor(tile.y)`.</haxe_doc>
		</iy>
		<get_iy get="inline" set="null" line="81"><f a=""><x path="Int"/></f></get_iy>
		<iwidth public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>An integer width of the Tile.
		Alias to `Math.ceil(tile.width + tile.x) - tile.ix`.</haxe_doc>
		</iwidth>
		<get_iwidth get="inline" set="null" line="88"><f a=""><x path="Int"/></f></get_iwidth>
		<iheight public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>An integer height of the Tile.
		Alias to `Math.ceil(tile.height + tile.y) - tile.iy`.</haxe_doc>
		</iheight>
		<get_iheight get="inline" set="null" line="95"><f a=""><x path="Int"/></f></get_iheight>
		<getTexture public="1" get="inline" set="null" line="111">
			<f a=""><c path="h3d.mat.Texture"/></f>
			<haxe_doc>Returns an underlying Texture instance.</haxe_doc>
		</getTexture>
		<isDisposed public="1" set="method" line="118">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Checks if Tile or underlying Texture were disposed.</haxe_doc>
		</isDisposed>
		<setTexture set="method" line="122"><f a="tex">
	<c path="h3d.mat.Texture"/>
	<x path="Void"/>
</f></setTexture>
		<switchTexture public="1" get="inline" set="null" line="144">
			<f a="t">
				<c path="h2d.Tile"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes this Tile underlying texture to one used in the specified Tile.

		If Tile was scaled, new uv will cover new width and height instead of the original unscaled one.

		@param t The Tile used as a source of the Texture instance.

		It's possible to switch texture by referring the Texture instance directly, by using access hacks:
		```haxe
		@:privateAccess tile.setTexture(myTextureInstance);
		```</haxe_doc>
		</switchTexture>
		<sub public="1" set="method" line="157">
			<f a="x:y:w:h:?dx:?dy" v="::::0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="h2d.Tile"/>
			</f>
			<meta><m n=":value"><e>{ dy : 0., dx : 0. }</e></m></meta>
			<haxe_doc>Create a sub-region of this Tile with specified size and offset.
		@param x The offset on top of the current Tile offset along the X axis.
		@param y The offset on top of the current Tile offset along the Y axis.
		@param w The width of the new Tile region. Can exceed current tile size.
		@param h The height of the new Tile region. Can exceed the current tile size.
		@param dx An optional visual offset of the new Tile along the X axis.
		@param dy An optional visual offset of the new Tile along the Y axis.</haxe_doc>
		</sub>
		<center public="1" set="method" line="166">
			<f a=""><c path="h2d.Tile"/></f>
			<haxe_doc>Returns a new Tile with shifting origin point (`dx` and `dy`) to the tile center.

		To modify this Tile origin point, use `Tile.setCenterRatio`.</haxe_doc>
		</center>
		<setCenterRatio public="1" get="inline" set="null" line="173">
			<f a="?px:?py" v="0.5:0.5">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ py : 0.5, px : 0.5 }</e></m></meta>
			<haxe_doc>Sets `dx` / `dy` as origin point dictated by `px` / `py` with a default being center.</haxe_doc>
		</setCenterRatio>
		<flipX public="1" set="method" line="181">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flips the Tile horizontally. Note that `dx` is flipped as well.</haxe_doc>
		</flipX>
		<flipY public="1" set="method" line="189">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flips the Tile vertically. Note that `dy` is flipped as well.</haxe_doc>
		</flipY>
		<setPosition public="1" set="method" line="197">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the Tile position in the texture to the specified coordinate.</haxe_doc>
		</setPosition>
		<setSize public="1" set="method" line="212">
			<f a="w:h">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the Tile size in the texture to the specified dimensions.</haxe_doc>
		</setSize>
		<scaleToSize public="1" set="method" line="229">
			<f a="w:h">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Rescales the Tile to be of the set width and height, but without affecting the uv coordinates.

		Using this method allows to upscale/downscale Tiles, but creates a mismatch between the tile uv and width/height values.
		Due to that, using any methods that modify the uv value will cause the new uv to treat scaled width and height as true dimensions
		and can lead to unexpected results if not accounted for.</haxe_doc>
		</scaleToSize>
		<scrollDiscrete public="1" set="method" line="237">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the texture position by specified amount.</haxe_doc>
		</scrollDiscrete>
		<dispose public="1" set="method" line="251">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Disposes of the Tile and its underlying Texture.
		Note that if Texture is used by other Tile instances, it will cause them to point at a disposed texture and can lead to errors.</haxe_doc>
		</dispose>
		<clone public="1" set="method" line="259">
			<f a=""><c path="h2d.Tile"/></f>
			<haxe_doc>Create a copy of this Tile instance.</haxe_doc>
		</clone>
		<get_xFlip set="method" line="269"><f a=""><x path="Bool"/></f></get_xFlip>
		<get_yFlip set="method" line="270"><f a=""><x path="Bool"/></f></get_yFlip>
		<set_xFlip set="method" line="271"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_xFlip>
		<set_yFlip set="method" line="275"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_yFlip>
		<split public="1" set="method" line="286">
			<f a="?frames:?vertical:?subpixel" v="0:false:false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="Array"><c path="h2d.Tile"/></c>
			</f>
			<meta><m n=":value"><e>{ subpixel : false, vertical : false, frames : 0 }</e></m></meta>
			<haxe_doc>Split the Tile horizontally or vertically by the number of given frames.
		@param frames The amount of frames this Tile has to be split into.
		@param vertical Causes split to be done vertically instead of horizontal split.
		@param subpixel When enabled, retains the floating-point remainder if calculated frame size is not integral.</haxe_doc>
		</split>
		<gridFlatten public="1" set="method" line="312">
			<f a="size:?dx:?dy" v=":0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><c path="h2d.Tile"/></c>
			</f>
			<meta><m n=":value"><e>{ dy : 0., dx : 0. }</e></m></meta>
			<haxe_doc>Split the tile into a list of tiles of Size x Size pixels.

		@param size The width and height of the new Tiles.
		@param dx Optional visual offset of the new Tiles along the X axis.
		@param dy Optional visual offset of the new Tiles along the Y axis.
		@returns A one-dimensional array ordered in Y/X.</haxe_doc>
		</gridFlatten>
		<grid public="1" set="method" line="324">
			<f a="size:?dx:?dy" v=":0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><c path="Array"><c path="h2d.Tile"/></c></c>
			</f>
			<meta><m n=":value"><e>{ dy : 0., dx : 0. }</e></m></meta>
			<haxe_doc>Split the tile into a list of tiles of Size x Size pixels.

		@param size The width and height of the new Tiles.
		@param dx Optional visual offset of the new Tiles along the X axis.
		@param dy Optional visual offset of the new Tiles along the Y axis.
		@returns A two-dimensional array ordered in `[X][Y]`.</haxe_doc>
		</grid>
		<toString public="1" set="method" line="329">
			<f a=""><c path="String"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</toString>
		<upload set="method" line="333"><f a="bmp">
	<c path="hxd.BitmapData"/>
	<x path="Void"/>
</f></upload>
		<new set="method" line="97">
			<f a="tex:x:y:w:h:?dx:?dy" v=":::::0:0">
				<c path="h3d.mat.Texture"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ dy : 0, dx : 0 }</e></m></meta>
		</new>
		<haxe_doc>A core 2D rendering component representing a region of an underlying `h3d.mat.Texture`.

	Tiles cannot be created directly, and instances are created with the following methods:
	* Via the Resource Management system: `hxd.res.Image.toTile`.
	* From pre-existing Texture: `Tile.fromTexture`.
	* From pre-existing `BitmapData` or `Pixels`: `Tile.fromBitmap` and `Tile.fromPixels` (as well as `Tile.autoCut`).
	* From solid color: `Tile.fromColor`.
	* From previously existing Tile instance via various methods, such as `Tile.sub`.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>h2d</e></m>
		</meta>
	</class>
	<class path="h2d.col.Bounds" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Bounds.hx">
		<fromValues public="1" get="inline" set="null" line="378" static="1">
			<f a="x0:y0:width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="h2d.col.Bounds"/>
			</f>
			<haxe_doc>Returns a new Bounds instance from given rectangle.
		@param x Rectangle horizontal position.
		@param y Rectangle vertical position.
		@param width Rectangle width.
		@param height Rectangle height.</haxe_doc>
		</fromValues>
		<fromPoints public="1" get="inline" set="null" line="390" static="1">
			<f a="min:max">
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Bounds"/>
			</f>
			<haxe_doc>Returns a new Bounds instance from given `min`/`max` Points.</haxe_doc>
		</fromPoints>
		<xMin public="1">
			<x path="Float"/>
			<haxe_doc>X-axis left-most bounding box point.</haxe_doc>
		</xMin>
		<yMin public="1">
			<x path="Float"/>
			<haxe_doc>Y-axis top-most bounding box point.</haxe_doc>
		</yMin>
		<xMax public="1">
			<x path="Float"/>
			<haxe_doc>X-axis right-most bounding box point.</haxe_doc>
		</xMax>
		<yMax public="1">
			<x path="Float"/>
			<haxe_doc>Y-axis bottom-most bounding box point.</haxe_doc>
		</yMax>
		<x public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>X-axis position of the bounding box top-left corner. Modifying it alters both `Bounds.xMin` and `Bounds.xMax`.</haxe_doc>
		</x>
		<y public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Y-axis position of the bounding box top-left corner. Modifying it alters both `Bounds.yMin` and `Bounds.yMax`.</haxe_doc>
		</y>
		<width public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Width of the bounding box. Equivalent of `xMax - xMin`.</haxe_doc>
		</width>
		<height public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>Height of the bounding box. Equivalent of `yMax - yMin`.</haxe_doc>
		</height>
		<toIBounds public="1" get="inline" set="null" line="49">
			<f a="?scale" v="1.">
				<x path="Float"/>
				<c path="h2d.col.IBounds"/>
			</f>
			<meta><m n=":value"><e>{ scale : 1. }</e></m></meta>
			<haxe_doc>Converts bounding box to integer bounding box scaled by provided scalar `scale` (rounded down for `min` and up for `max`).</haxe_doc>
		</toIBounds>
		<intersects public="1" get="inline" set="null" line="58">
			<f a="b">
				<c path="h2d.col.Bounds"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if this Bounds instance intersects with given `b` Bounds.</haxe_doc>
		</intersects>
		<contains public="1" get="inline" set="null" line="65">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if the Point `p` is inside the bounding box.</haxe_doc>
		</contains>
		<distanceSq public="1" get="inline" set="null" line="72">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Same as distance but does not perform sqrt</haxe_doc>
		</distanceSq>
		<distance public="1" get="inline" set="null" line="81">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Returns the distance betwen the point and the bounds. Or 0 if the point is inside the bounds.</haxe_doc>
		</distance>
		<addBounds public="1" get="inline" set="null" line="88">
			<f a="b">
				<c path="h2d.col.Bounds"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds Bounds `b` to the Bounds, expanding min/max when necessary.</haxe_doc>
		</addBounds>
		<addPoint public="1" get="inline" set="null" line="98">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the Point `p` to the bounding box, expanding min/max when necessary.</haxe_doc>
		</addPoint>
		<addPos public="1" get="inline" set="null" line="108">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the `x` and `y` position to the bounding box, expanding min/max when necessary.</haxe_doc>
		</addPos>
		<set public="1" get="inline" set="null" line="122">
			<f a="x:y:width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the bounding box from the given rectangle.
		@param x Rectangle top-left corner horizontal position.
		@param y Rectangle top-left corner vertical position.
		@param width Rectangle width.
		@param height Rectangle height.</haxe_doc>
		</set>
		<setMin public="1" get="inline" set="null" line="132">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Bounds.xMin` and `Bounds.yMin` to values in the given Point `p`.</haxe_doc>
		</setMin>
		<setMax public="1" get="inline" set="null" line="140">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Bounds.xMax` and `Bounds.yMax` to values in the given Point `p`.</haxe_doc>
		</setMax>
		<doIntersect public="1" get="inline" set="null" line="150">
			<f a="b">
				<c path="h2d.col.Bounds"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the bounding box min/max values to a result of the intersection between this Bounds and the given Bounds `b`.

		See `Bounds.intersection` to get new instance of Bounds as intersection result.</haxe_doc>
		</doIntersect>
		<doUnion public="1" get="inline" set="null" line="162">
			<f a="b">
				<c path="h2d.col.Bounds"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets this bounding box min/max values to a result of combining this Bounds and the given Bounds `b`.

		Equivalent of `Bounds.addBounds`.</haxe_doc>
		</doUnion>
		<intersection public="1" set="method" line="172">
			<f a="b">
				<c path="h2d.col.Bounds"/>
				<c path="h2d.col.Bounds"/>
			</f>
			<haxe_doc>Returns a new Bounds instance containing intersection results of this Bounds and the given Bounds `b`.</haxe_doc>
		</intersection>
		<union public="1" set="method" line="186">
			<f a="b">
				<c path="h2d.col.Bounds"/>
				<c path="h2d.col.Bounds"/>
			</f>
			<haxe_doc>Returns a new Bounds instance containing union of this Bounds and the given Bounds `b`.</haxe_doc>
		</union>
		<load public="1" set="method" line="198">
			<f a="b">
				<c path="h2d.col.Bounds"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the min/max values from the given Bounds `b` to this Bounds.</haxe_doc>
		</load>
		<scalePivot public="1" get="inline" set="null" line="208">
			<f a="v">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scales the min/max values relative to `0,0` coordinate.</haxe_doc>
		</scalePivot>
		<scaleCenter public="1" set="method" line="218">
			<f a="v">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scales the min/max values relative the current bounding box center point.</haxe_doc>
		</scaleCenter>
		<rotate public="1" set="method" line="232">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Rotates the bounding box around `0,0` point by given `angle` and sets min/max to the new rotated boundaries.</haxe_doc>
		</rotate>
		<offset public="1" get="inline" set="null" line="246">
			<f a="dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves entire bounding box by `dx, dy`.</haxe_doc>
		</offset>
		<getMin public="1" get="inline" set="null" line="256">
			<f a=""><c path="h2d.col.Point"/></f>
			<haxe_doc>Returns a new Point containing `Bounds.xMin` and `Bounds.yMin`.</haxe_doc>
		</getMin>
		<getCenter public="1" get="inline" set="null" line="263">
			<f a=""><c path="h2d.col.Point"/></f>
			<haxe_doc>Returns a new Point containing the center coordinate of the bounding box.</haxe_doc>
		</getCenter>
		<getSize public="1" get="inline" set="null" line="270">
			<f a=""><c path="h2d.col.Point"/></f>
			<haxe_doc>Returns a new Point containing size of the bounding box.</haxe_doc>
		</getSize>
		<getMax public="1" get="inline" set="null" line="277">
			<f a=""><c path="h2d.col.Point"/></f>
			<haxe_doc>Returns a new Point containing `Bounds.xMax` and `Bounds.yMax`.</haxe_doc>
		</getMax>
		<isEmpty public="1" get="inline" set="null" line="285">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tests if bounding box is empty.
		Bounds are considered empty when either `Bounds.xMax` is less than or equals to `Bounds.xMin` or `Bounds.yMax` is less than or equals to `Bounds.yMin`.</haxe_doc>
		</isEmpty>
		<empty public="1" get="inline" set="null" line="292">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears bounding box into an empty state.</haxe_doc>
		</empty>
		<all public="1" get="inline" set="null" line="302">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets the bounding box to cover maximum area (`-1e20...1e20`).</haxe_doc>
		</all>
		<clone public="1" get="inline" set="null" line="312">
			<f a=""><c path="h2d.col.Bounds"/></f>
			<haxe_doc>Returns new copy of this Bounds instance.</haxe_doc>
		</clone>
		<get_x get="inline" set="null" line="321"><f a=""><x path="Float"/></f></get_x>
		<get_y get="inline" set="null" line="325"><f a=""><x path="Float"/></f></get_y>
		<set_x get="inline" set="null" line="329"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y get="inline" set="null" line="334"><f a="y">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<get_width get="inline" set="null" line="339"><f a=""><x path="Float"/></f></get_width>
		<get_height get="inline" set="null" line="343"><f a=""><x path="Float"/></f></get_height>
		<set_width get="inline" set="null" line="347"><f a="w">
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<set_height get="inline" set="null" line="352"><f a="h">
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
		<toString public="1" set="method" line="358">
			<f a=""><c path="String"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</toString>
		<toCircle public="1" get="inline" set="null" line="365">
			<f a=""><c path="h2d.col.Circle"/></f>
			<haxe_doc>Returns the bounding circle which includes all the bounds.</haxe_doc>
		</toCircle>
		<new public="1" get="inline" set="null" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create new empty Bounds instance.</haxe_doc>
		</new>
		<haxe_doc>A 2D bounding box often used for determining Object bounding area.

	Bounds holds min/max coordinates of bounding box instead of it's position and size.
	@see `Object.getBounds`
	@see `Object.getSize`</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h2d.col.Collider" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Collider.hx" interface="1">
		<contains public="1" set="method">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if Point `p` is inside the Collider.</haxe_doc>
		</contains>
		<haxe_doc>A common interface for 2D Shapes to hit-test again the mouse or a specific point in space.</haxe_doc>
	</class>
	<class path="h2d.col.Circle" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Circle.hx">
		<implements path="h2d.col.Collider"/>
		<x public="1">
			<x path="Float"/>
			<haxe_doc>Horizontal position of the Circle center.</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>Vertical position of the Circle center.</haxe_doc>
		</y>
		<ray public="1">
			<x path="Float"/>
			<haxe_doc>Radius of the circle.</haxe_doc>
		</ray>
		<distanceSq public="1" get="inline" set="null" line="37">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a squared distance between the Circle center and the given Point `p`.</haxe_doc>
		</distanceSq>
		<side public="1" get="inline" set="null" line="47">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a squared distance between the Circle border and the given Point `p`.</haxe_doc>
		</side>
		<collideCircle public="1" get="inline" set="null" line="56">
			<f a="c">
				<c path="h2d.col.Circle"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if this Circle collides with the given Circle `c`.</haxe_doc>
		</collideCircle>
		<collideBounds public="1" get="inline" set="null" line="65">
			<f a="b">
				<c path="h2d.col.Bounds"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Test if this Circle collides with the given Bounds `b`.</haxe_doc>
		</collideBounds>
		<lineIntersect public="1" get="inline" set="null" line="83">
			<f a="p1:p2">
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
				<c path="Array"><c path="h2d.col.Point"/></c>
			</f>
			<haxe_doc>Tests if this Circle intersects with a line segment from Point `p1` to Point `p2`.
		@returns An array of Points with intersection coordinates.
		Contains 1 Point if line intersects only once or 2 points if line enters and exits the circle.
		If no intersection is found, returns `null`.</haxe_doc>
		</lineIntersect>
		<toString public="1" set="method" line="104">
			<f a=""><c path="String"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</toString>
		<contains public="1" set="method" line="111">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if Point `p` is inside this Circle.</haxe_doc>
		</contains>
		<new public="1" get="inline" set="null" line="28">
			<f a="x:y:ray">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create new Circle collider.
		@param x X position of the Circle center.
		@param y Y position of the Circle center.
		@param ray Radius of the circle.</haxe_doc>
		</new>
		<haxe_doc>The circular hitbox implementation of a 2D Collider.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h2d.col.IBounds" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/IBounds.hx">
		<fromValues public="1" get="inline" set="null" line="309" static="1">
			<f a="x0:y0:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="h2d.col.IBounds"/>
			</f>
			<haxe_doc>Returns a new IBounds instance from given rectangle.
		@param x Rectangle horizontal position.
		@param y Rectangle vertical position.
		@param width Rectangle width.
		@param height Rectangle height.</haxe_doc>
		</fromValues>
		<fromPoints public="1" get="inline" set="null" line="321" static="1">
			<f a="min:max">
				<c path="h2d.col.IPoint"/>
				<c path="h2d.col.IPoint"/>
				<c path="h2d.col.IBounds"/>
			</f>
			<haxe_doc>Returns a new IBounds instance from given min/max IPoints.</haxe_doc>
		</fromPoints>
		<xMin public="1">
			<x path="Int"/>
			<haxe_doc>X-axis left-most bounding box point.</haxe_doc>
		</xMin>
		<yMin public="1">
			<x path="Int"/>
			<haxe_doc>Y-axis top-most bounding box point.</haxe_doc>
		</yMin>
		<xMax public="1">
			<x path="Int"/>
			<haxe_doc>X-axis right-most bounds box point.</haxe_doc>
		</xMax>
		<yMax public="1">
			<x path="Int"/>
			<haxe_doc>Y-axis bottom-most bounding box point.</haxe_doc>
		</yMax>
		<x public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>X-axis position of the bounding-box top-left corner. Modifying it alters both `xMin` and `xMax`.</haxe_doc>
		</x>
		<y public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>Y-axis position of the bounding-box top-left corner. Modifying it alters both `xMin` and `xMax`.</haxe_doc>
		</y>
		<width public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>Width of the bounding box. Equivalent of `xMax - xMin`.</haxe_doc>
		</width>
		<height public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>Height of the bounding box. Equivalent of `yMax - yMin`.</haxe_doc>
		</height>
		<toBounds public="1" get="inline" set="null" line="48">
			<f a="?scale" v="1.">
				<x path="Float"/>
				<c path="h2d.col.Bounds"/>
			</f>
			<meta><m n=":value"><e>{ scale : 1. }</e></m></meta>
			<haxe_doc>Converts `IBounds` to regular `Bounds` scaled by provided scalar `scale`.</haxe_doc>
		</toBounds>
		<intersects public="1" get="inline" set="null" line="55">
			<f a="b">
				<c path="h2d.col.IBounds"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if this IBounds instances intersects given `b` IBounds.</haxe_doc>
		</intersects>
		<contains public="1" get="inline" set="null" line="62">
			<f a="p">
				<c path="h2d.col.IPoint"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if IPoint `p` is inside the IBounds.</haxe_doc>
		</contains>
		<addBounds public="1" get="inline" set="null" line="69">
			<f a="b">
				<c path="h2d.col.IBounds"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds IBounds `b` to the IBounds, expanding min/max when necessary.</haxe_doc>
		</addBounds>
		<addPoint public="1" get="inline" set="null" line="79">
			<f a="p">
				<c path="h2d.col.IPoint"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds IPoint `p` to the IBounds, expanding min/max when necessary.</haxe_doc>
		</addPoint>
		<addPos public="1" get="inline" set="null" line="89">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds position `x` and `y` to the IBounds, expanding min/max when necessary.</haxe_doc>
		</addPos>
		<set public="1" get="inline" set="null" line="103">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets bounds from given rectangle.
		@param x Rectangle horizontal position.
		@param y Rectangle vertical position.
		@param width Rectangle width.
		@param height Rectangle height.</haxe_doc>
		</set>
		<setMin public="1" get="inline" set="null" line="113">
			<f a="p">
				<c path="h2d.col.IPoint"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets `xMin` and `yMin` to values in given IPoint `p`.</haxe_doc>
		</setMin>
		<setMax public="1" get="inline" set="null" line="121">
			<f a="p">
				<c path="h2d.col.IPoint"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets `xMax` and `yMax` to values in given IPoint `p`.</haxe_doc>
		</setMax>
		<doIntersect public="1" get="inline" set="null" line="130">
			<f a="b">
				<c path="h2d.col.IBounds"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets this IBounds min/max values to a result of intersection between this IBounds and given IBounds `b`.
		See `intersection` to get new instance of IBounds as intersection result.</haxe_doc>
		</doIntersect>
		<doUnion public="1" get="inline" set="null" line="140">
			<f a="b">
				<c path="h2d.col.IBounds"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets this IBounds min/max values to a result of combining this IBounds and given IBounds `b`. Equivalent of `addBounds`.</haxe_doc>
		</doUnion>
		<intersection public="1" set="method" line="150">
			<f a="b">
				<c path="h2d.col.IBounds"/>
				<c path="h2d.col.IBounds"/>
			</f>
			<haxe_doc>Returns new Bounds instance containing intersection results of this IBounds and given IBounds `b`.</haxe_doc>
		</intersection>
		<union public="1" set="method" line="164">
			<f a="b">
				<c path="h2d.col.IBounds"/>
				<c path="h2d.col.IBounds"/>
			</f>
			<haxe_doc>Returns new Bounds instance containing union of this IBounds and given IBounds `b`.</haxe_doc>
		</union>
		<load public="1" set="method" line="176">
			<f a="b">
				<c path="h2d.col.IBounds"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies min/max values from given IBounds `b` to this IBounds.</haxe_doc>
		</load>
		<offset public="1" get="inline" set="null" line="186">
			<f a="dx:dy">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves entire bounding box by `dx,dy`.</haxe_doc>
		</offset>
		<getMin public="1" get="inline" set="null" line="196">
			<f a=""><c path="h2d.col.IPoint"/></f>
			<haxe_doc>Returns a new IPoint containing `xMin` and `yMin`.</haxe_doc>
		</getMin>
		<getCenter public="1" get="inline" set="null" line="203">
			<f a=""><c path="h2d.col.IPoint"/></f>
			<haxe_doc>Returns a new IPoint containing center coordinate of the IBounds.</haxe_doc>
		</getCenter>
		<getSize public="1" get="inline" set="null" line="210">
			<f a=""><c path="h2d.col.IPoint"/></f>
			<haxe_doc>Returns a new IPoint containing size of the IBounds.</haxe_doc>
		</getSize>
		<getMax public="1" get="inline" set="null" line="217">
			<f a=""><c path="h2d.col.IPoint"/></f>
			<haxe_doc>Returns a new IPoint containing `xMax` and `yMax`.</haxe_doc>
		</getMax>
		<isEmpty public="1" get="inline" set="null" line="225">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tests if bounding box is empty.
		IBounds are considered empty when either `xMax` is less than or equals to `xMin` or `yMax` is less than or equals to `yMin`.</haxe_doc>
		</isEmpty>
		<empty public="1" get="inline" set="null" line="232">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears IBounds into an empty state.</haxe_doc>
		</empty>
		<all public="1" get="inline" set="null" line="242">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets bounds to cover maximum area (`-2147483648...0x7FFFFFFF`).</haxe_doc>
		</all>
		<clone public="1" get="inline" set="null" line="252">
			<f a=""><c path="h2d.col.IBounds"/></f>
			<haxe_doc>Returns new copy of this IBounds instance.</haxe_doc>
		</clone>
		<get_x get="inline" set="null" line="261"><f a=""><x path="Int"/></f></get_x>
		<get_y get="inline" set="null" line="265"><f a=""><x path="Int"/></f></get_y>
		<set_x get="inline" set="null" line="269"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></set_x>
		<set_y get="inline" set="null" line="274"><f a="y">
	<x path="Int"/>
	<x path="Int"/>
</f></set_y>
		<get_width get="inline" set="null" line="279"><f a=""><x path="Int"/></f></get_width>
		<get_height get="inline" set="null" line="283"><f a=""><x path="Int"/></f></get_height>
		<set_width get="inline" set="null" line="287"><f a="w">
	<x path="Int"/>
	<x path="Int"/>
</f></set_width>
		<set_height get="inline" set="null" line="292"><f a="h">
	<x path="Int"/>
	<x path="Int"/>
</f></set_height>
		<toString public="1" set="method" line="298">
			<f a=""><c path="String"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</toString>
		<new public="1" get="inline" set="null" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create new empty IBounds instance.</haxe_doc>
		</new>
		<haxe_doc>An integer-based bounding box.
	@see `h2d.col.Bounds`</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h2d.col.IPoint" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/IPoint.hx">
		<x public="1">
			<x path="Int"/>
			<haxe_doc>Horizontal position of the point.</haxe_doc>
		</x>
		<y public="1">
			<x path="Int"/>
			<haxe_doc>Vertical position of the point.</haxe_doc>
		</y>
		<load public="1" get="inline" set="null" line="34">
			<f a="p">
				<c path="h2d.col.IPoint"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copy the position from the give point `p` into this IPoint.</haxe_doc>
		</load>
		<scale public="1" get="inline" set="null" line="42">
			<f a="v">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Multiplies the position of this IPoint by a given scalar `v`. Modifies this instance.</haxe_doc>
		</scale>
		<multiply public="1" get="inline" set="null" line="50">
			<f a="v">
				<x path="Int"/>
				<c path="h2d.col.IPoint"/>
			</f>
			<haxe_doc>Returns a new IPoint with the position of this IPoint multiplied by a given scalar `v`.</haxe_doc>
		</multiply>
		<distanceSq public="1" get="inline" set="null" line="57">
			<f a="p">
				<c path="h2d.col.IPoint"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns squared distance between this IPoint and given IPoint `p`.</haxe_doc>
		</distanceSq>
		<distance public="1" get="inline" set="null" line="66">
			<f a="p">
				<c path="h2d.col.IPoint"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a distance between this IPoint and given IPoint `p`.</haxe_doc>
		</distance>
		<toString public="1" set="method" line="71">
			<f a=""><c path="String"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</toString>
		<sub public="1" get="inline" set="null" line="78">
			<f a="p">
				<c path="h2d.col.IPoint"/>
				<c path="h2d.col.IPoint"/>
			</f>
			<haxe_doc>Subtracts IPoint `p` from this IPoint and returns new Point with the result.</haxe_doc>
		</sub>
		<add public="1" get="inline" set="null" line="85">
			<f a="p">
				<c path="h2d.col.IPoint"/>
				<c path="h2d.col.IPoint"/>
			</f>
			<haxe_doc>Adds IPoint `p` to this IPoint and returns new Point with the result.</haxe_doc>
		</add>
		<equals public="1" get="inline" set="null" line="92">
			<f a="other">
				<c path="h2d.col.IPoint"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if this IPoint position equals to `other` IPoint position.</haxe_doc>
		</equals>
		<dot public="1" get="inline" set="null" line="99">
			<f a="p">
				<c path="h2d.col.IPoint"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns a dot product between this IPoint and given IPoint `p`.</haxe_doc>
		</dot>
		<lengthSq public="1" get="inline" set="null" line="106">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns squared length of this IPoint.</haxe_doc>
		</lengthSq>
		<length public="1" get="inline" set="null" line="113">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns length (distance to `0,0`) of this IPoint.</haxe_doc>
		</length>
		<set public="1" get="inline" set="null" line="120">
			<f a="?x:?y" v="0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
			<haxe_doc>Sets the IPoint `x, y` with given values.</haxe_doc>
		</set>
		<clone public="1" get="inline" set="null" line="128">
			<f a=""><c path="h2d.col.IPoint"/></f>
			<haxe_doc>Returns a copy of this IPoint.</haxe_doc>
		</clone>
		<cross public="1" get="inline" set="null" line="135">
			<f a="p">
				<c path="h2d.col.IPoint"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns a cross product between this IPoint and a given IPoint `p`.</haxe_doc>
		</cross>
		<toPoint public="1" get="inline" set="null" line="144">
			<f a="?scale" v="1.">
				<x path="Float"/>
				<c path="h2d.col.Point"/>
			</f>
			<meta><m n=":value"><e>{ scale : 1. }</e></m></meta>
			<haxe_doc>Converts this IPoint to floating point-based `Point` scaled by provided scalar `scale`.</haxe_doc>
		</toPoint>
		<new public="1" get="inline" set="null" line="26">
			<f a="?x:?y" v="0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
			<haxe_doc>Create a new integer Point instance.
		@param x Horizontal position of the point.
		@param y Vertical position of the point.</haxe_doc>
		</new>
		<haxe_doc>An integer-based point.
	@see `h2d.col.Point`</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="h2d.col.OffsetKind" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/IPolygon.hx" module="h2d.col.IPolygon">
		<Square/>
		<Miter/>
		<Round a="arc"><x path="Float"/></Round>
		<haxe_doc>The type of the edges when offsetting polygon with `IPolygon.offset`.</haxe_doc>
	</enum>
	<abstract path="h2d.col.IPolygon" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/IPolygon.hx">
		<from><icast><c path="Array"><c path="h2d.col.IPoint"/></c></icast></from>
		<this><c path="Array"><c path="h2d.col.IPoint"/></c></this>
		<to><icast><c path="Array"><c path="h2d.col.IPoint"/></c></icast></to>
		<haxe_doc>An abstract around an Array of `IPoint`s that define a polygonal shape that can be collision-tested against.
	@see `h2d.col.Polygon`</haxe_doc>
		<meta><m n=":forward">
	<e>push</e>
	<e>remove</e>
</m></meta>
		<impl><class path="h2d.col._IPolygon.IPolygon_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/IPolygon.hx" private="1" module="h2d.col.IPolygon" final="1">
	<points public="1" get="accessor" set="null" static="1">
		<c path="Array"><c path="h2d.col.IPoint"/></c>
		<haxe_doc>The underlying Array of vertices.</haxe_doc>
	</points>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The amount of vertices in the polygon.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="27" static="1"><f a="this">
	<c path="Array"><c path="h2d.col.IPoint"/></c>
	<x path="Int"/>
</f></get_length>
	<get_points get="inline" set="null" line="28" static="1"><f a="this">
	<c path="Array"><c path="h2d.col.IPoint"/></c>
	<c path="Array"><c path="h2d.col.IPoint"/></c>
</f></get_points>
	<_new public="1" get="inline" set="null" line="34" static="1">
		<f a="?points">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<x path="h2d.col.IPolygon"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Create a new Polygon shape.
		@param points An optional array of vertices the polygon should use.</haxe_doc>
	</_new>
	<iterator public="1" get="inline" set="null" line="39" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<c path="hxd.impl.ArrayIterator_h2d_col_IPoint"/>
		</f>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</iterator>
	<toPolygon public="1" set="method" line="46" static="1">
		<f a="this:?scale" v=":1.">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<x path="Float"/>
			<x path="h2d.col.Polygon"/>
		</f>
		<meta><m n=":value"><e>{ scale : 1. }</e></m></meta>
		<haxe_doc>Converts this IPolygon into a floating point-based Polygon.</haxe_doc>
	</toPolygon>
	<getBounds public="1" set="method" line="53" static="1">
		<f a="this:?b">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<c path="h2d.col.IBounds"/>
			<c path="h2d.col.IBounds"/>
		</f>
		<haxe_doc>Returns the bounding box of the IPolygon.</haxe_doc>
	</getBounds>
	<union public="1" set="method" line="65" static="1">
		<f a="this:p:?withHoles" v="::true">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<x path="h2d.col.IPolygon"/>
			<x path="Bool"/>
			<x path="h2d.col.IPolygons"/>
		</f>
		<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
		<haxe_doc>Combines this IPolygon and a given IPolygon `p` and returns the resulting IPolygons.
		@param p The IPolygon to union with.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
	</union>
	<intersection public="1" get="inline" set="null" line="78" static="1">
		<f a="this:p:?withHoles" v="::true">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<x path="h2d.col.IPolygon"/>
			<x path="Bool"/>
			<x path="h2d.col.IPolygons"/>
		</f>
		<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
		<haxe_doc>Calculates an intersection areas between this IPolygon and a given IPolygon `p` and returns the resulting IPolygons.
		@param p The IPolygon to intersect with.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
	</intersection>
	<subtraction public="1" get="inline" set="null" line="87" static="1">
		<f a="this:p:?withHoles" v="::true">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<x path="h2d.col.IPolygon"/>
			<x path="Bool"/>
			<x path="h2d.col.IPolygons"/>
		</f>
		<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
		<haxe_doc>Subtracts the area of a given IPolygon `p` from this IPolygon and returns the resulting IPolygons.
		@param p The IPolygon to subtract with.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
	</subtraction>
	<offset public="1" set="method" line="97" static="1">
		<f a="this:delta:kind:?withHoles" v=":::true">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<x path="Float"/>
			<e path="h2d.col.OffsetKind"/>
			<x path="Bool"/>
			<x path="h2d.col.IPolygons"/>
		</f>
		<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
		<haxe_doc>Offsets the polygon edges by specified amount and returns the resulting IPolygons.
		@param delta The offset amount.
		@param kind The corner rounding method.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
	</offset>
	<clipperOp set="method" line="112" static="1"><f a="this:p:op:withHoles">
	<c path="Array"><c path="h2d.col.IPoint"/></c>
	<x path="h2d.col.IPolygon"/>
	<e path="hxd.clipper.ClipType"/>
	<x path="Bool"/>
	<x path="h2d.col.IPolygons"/>
</f></clipperOp>
	<convexHull public="1" set="method" line="124" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<c path="Array"><c path="h2d.col.IPoint"/></c>
		</f>
		<haxe_doc>Returns a new IPolygon containing a convex hull of this IPolygon.
		See Monotone chain algorithm for more details.</haxe_doc>
	</convexHull>
	<isClockwise public="1" set="method" line="157" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<x path="Bool"/>
		</f>
		<haxe_doc>Tests if polygon points are in the clockwise order.</haxe_doc>
	</isClockwise>
	<area public="1" set="method" line="170" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<x path="Float"/>
		</f>
		<haxe_doc>Calculates total area of the IPolygon.</haxe_doc>
	</area>
	<side get="inline" set="null" line="180" static="1"><f a="this:p1:p2:t">
	<c path="Array"><c path="h2d.col.IPoint"/></c>
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<x path="Int"/>
</f></side>
	<isConvex public="1" set="method" line="187" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<x path="Bool"/>
		</f>
		<haxe_doc>Tests if the polygon is convex or concave.</haxe_doc>
	</isConvex>
	<reverse public="1" set="method" line="205" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<x path="Void"/>
		</f>
		<haxe_doc>Reverses the IPolygon points ordering. Can be used to change polygon from anti-clockwise to clockwise.</haxe_doc>
	</reverse>
	<contains public="1" set="method" line="214" static="1">
		<f a="this:p:?isConvex" v="::false">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<c path="h2d.col.Point"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":value"><e>{ isConvex : false }</e></m></meta>
		<haxe_doc>Tests if Point `p` is inside this IPolygon.
		@param p The point to test against.
		@param isConvex Use simplified collision test suited for convex polygons. Results are undefined if polygon is concave.</haxe_doc>
	</contains>
	<optimize public="1" set="method" line="243" static="1">
		<f a="this:epsilon">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<x path="Float"/>
			<x path="h2d.col.IPolygon"/>
		</f>
		<haxe_doc>Creates a new optimized polygon by eliminating almost colinear edges according to the epsilon distance.</haxe_doc>
	</optimize>
	<optimizeRec set="method" line="249" static="1"><f a="points:index:len:out:epsilon">
	<c path="Array"><c path="h2d.col.IPoint"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="h2d.col.IPoint"/></c>
	<x path="Float"/>
	<x path="Void"/>
</f></optimizeRec>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="h2d.col._IPolygon.IPolygon_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/IPolygon.hx" private="1" module="h2d.col.IPolygon" final="1">
		<points public="1" get="accessor" set="null" static="1">
			<c path="Array"><c path="h2d.col.IPoint"/></c>
			<haxe_doc>The underlying Array of vertices.</haxe_doc>
		</points>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The amount of vertices in the polygon.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="27" static="1"><f a="this">
	<c path="Array"><c path="h2d.col.IPoint"/></c>
	<x path="Int"/>
</f></get_length>
		<get_points get="inline" set="null" line="28" static="1"><f a="this">
	<c path="Array"><c path="h2d.col.IPoint"/></c>
	<c path="Array"><c path="h2d.col.IPoint"/></c>
</f></get_points>
		<_new public="1" get="inline" set="null" line="34" static="1">
			<f a="?points">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<x path="h2d.col.IPolygon"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Create a new Polygon shape.
		@param points An optional array of vertices the polygon should use.</haxe_doc>
		</_new>
		<iterator public="1" get="inline" set="null" line="39" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<c path="hxd.impl.ArrayIterator_h2d_col_IPoint"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</iterator>
		<toPolygon public="1" set="method" line="46" static="1">
			<f a="this:?scale" v=":1.">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<x path="Float"/>
				<x path="h2d.col.Polygon"/>
			</f>
			<meta><m n=":value"><e>{ scale : 1. }</e></m></meta>
			<haxe_doc>Converts this IPolygon into a floating point-based Polygon.</haxe_doc>
		</toPolygon>
		<getBounds public="1" set="method" line="53" static="1">
			<f a="this:?b">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<c path="h2d.col.IBounds"/>
				<c path="h2d.col.IBounds"/>
			</f>
			<haxe_doc>Returns the bounding box of the IPolygon.</haxe_doc>
		</getBounds>
		<union public="1" set="method" line="65" static="1">
			<f a="this:p:?withHoles" v="::true">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<x path="h2d.col.IPolygon"/>
				<x path="Bool"/>
				<x path="h2d.col.IPolygons"/>
			</f>
			<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
			<haxe_doc>Combines this IPolygon and a given IPolygon `p` and returns the resulting IPolygons.
		@param p The IPolygon to union with.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
		</union>
		<intersection public="1" get="inline" set="null" line="78" static="1">
			<f a="this:p:?withHoles" v="::true">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<x path="h2d.col.IPolygon"/>
				<x path="Bool"/>
				<x path="h2d.col.IPolygons"/>
			</f>
			<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
			<haxe_doc>Calculates an intersection areas between this IPolygon and a given IPolygon `p` and returns the resulting IPolygons.
		@param p The IPolygon to intersect with.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
		</intersection>
		<subtraction public="1" get="inline" set="null" line="87" static="1">
			<f a="this:p:?withHoles" v="::true">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<x path="h2d.col.IPolygon"/>
				<x path="Bool"/>
				<x path="h2d.col.IPolygons"/>
			</f>
			<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
			<haxe_doc>Subtracts the area of a given IPolygon `p` from this IPolygon and returns the resulting IPolygons.
		@param p The IPolygon to subtract with.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
		</subtraction>
		<offset public="1" set="method" line="97" static="1">
			<f a="this:delta:kind:?withHoles" v=":::true">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<x path="Float"/>
				<e path="h2d.col.OffsetKind"/>
				<x path="Bool"/>
				<x path="h2d.col.IPolygons"/>
			</f>
			<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
			<haxe_doc>Offsets the polygon edges by specified amount and returns the resulting IPolygons.
		@param delta The offset amount.
		@param kind The corner rounding method.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
		</offset>
		<clipperOp set="method" line="112" static="1"><f a="this:p:op:withHoles">
	<c path="Array"><c path="h2d.col.IPoint"/></c>
	<x path="h2d.col.IPolygon"/>
	<e path="hxd.clipper.ClipType"/>
	<x path="Bool"/>
	<x path="h2d.col.IPolygons"/>
</f></clipperOp>
		<convexHull public="1" set="method" line="124" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<c path="Array"><c path="h2d.col.IPoint"/></c>
			</f>
			<haxe_doc>Returns a new IPolygon containing a convex hull of this IPolygon.
		See Monotone chain algorithm for more details.</haxe_doc>
		</convexHull>
		<isClockwise public="1" set="method" line="157" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if polygon points are in the clockwise order.</haxe_doc>
		</isClockwise>
		<area public="1" set="method" line="170" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<x path="Float"/>
			</f>
			<haxe_doc>Calculates total area of the IPolygon.</haxe_doc>
		</area>
		<side get="inline" set="null" line="180" static="1"><f a="this:p1:p2:t">
	<c path="Array"><c path="h2d.col.IPoint"/></c>
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<x path="Int"/>
</f></side>
		<isConvex public="1" set="method" line="187" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if the polygon is convex or concave.</haxe_doc>
		</isConvex>
		<reverse public="1" set="method" line="205" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Reverses the IPolygon points ordering. Can be used to change polygon from anti-clockwise to clockwise.</haxe_doc>
		</reverse>
		<contains public="1" set="method" line="214" static="1">
			<f a="this:p:?isConvex" v="::false">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<c path="h2d.col.Point"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ isConvex : false }</e></m></meta>
			<haxe_doc>Tests if Point `p` is inside this IPolygon.
		@param p The point to test against.
		@param isConvex Use simplified collision test suited for convex polygons. Results are undefined if polygon is concave.</haxe_doc>
		</contains>
		<optimize public="1" set="method" line="243" static="1">
			<f a="this:epsilon">
				<c path="Array"><c path="h2d.col.IPoint"/></c>
				<x path="Float"/>
				<x path="h2d.col.IPolygon"/>
			</f>
			<haxe_doc>Creates a new optimized polygon by eliminating almost colinear edges according to the epsilon distance.</haxe_doc>
		</optimize>
		<optimizeRec set="method" line="249" static="1"><f a="points:index:len:out:epsilon">
	<c path="Array"><c path="h2d.col.IPoint"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="h2d.col.IPoint"/></c>
	<x path="Float"/>
	<x path="Void"/>
</f></optimizeRec>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="h2d.col.IPolygons" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/IPolygons.hx">
		<from><icast><c path="Array"><x path="h2d.col.IPolygon"/></c></icast></from>
		<this><c path="Array"><x path="h2d.col.IPolygon"/></c></this>
		<to><icast><c path="Array"><x path="h2d.col.IPolygon"/></c></icast></to>
		<haxe_doc>An abstract over an Array of `IPolygon` instances that define multiple polygonal shapes that can be collision-tested against.
	@see `h2d.Polygons`</haxe_doc>
		<meta><m n=":forward">
	<e>push</e>
	<e>remove</e>
</m></meta>
		<impl><class path="h2d.col._IPolygons.IPolygons_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/IPolygons.hx" private="1" module="h2d.col.IPolygons" final="1">
	<polygons public="1" get="accessor" set="null" static="1">
		<c path="Array"><x path="h2d.col.IPolygon"/></c>
		<haxe_doc>An underlying IPolygon array.</haxe_doc>
	</polygons>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The amount of polygons in the IPolygons instance.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="18" static="1"><f a="this">
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
	<x path="Int"/>
</f></get_length>
	<get_polygons get="inline" set="null" line="20" static="1"><f a="this">
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
</f></get_polygons>
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="?polygons">
			<c path="Array"><x path="h2d.col.IPolygon"/></c>
			<x path="h2d.col.IPolygons"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Create a new IPolygons instance.
		@param polygons An optional list of polygons to use.</haxe_doc>
	</_new>
	<iterator public="1" get="inline" set="null" line="31" static="1">
		<f a="this">
			<c path="Array"><x path="h2d.col.IPolygon"/></c>
			<c path="hxd.impl.ArrayIterator_h2d_col_IPolygon"/>
		</f>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</iterator>
	<toPolygons public="1" set="method" line="38" static="1">
		<f a="this:?scale" v=":1.">
			<c path="Array"><x path="h2d.col.IPolygon"/></c>
			<x path="Float"/>
			<x path="h2d.col.Polygons"/>
		</f>
		<meta><m n=":value"><e>{ scale : 1. }</e></m></meta>
		<haxe_doc>Converts the IPolygons instance to the floating point-based Polygons.</haxe_doc>
	</toPolygons>
	<getBounds public="1" set="method" line="46" static="1">
		<f a="this:?b">
			<c path="Array"><x path="h2d.col.IPolygon"/></c>
			<c path="h2d.col.IBounds"/>
			<x path="Null"><c path="h2d.col.IBounds"/></x>
		</f>
		<haxe_doc>Returns bounding box of all IPolygon instances in IPolygons.
		@param b Optional Bounds instance to be filled. Returns new Bounds instance if `null`.</haxe_doc>
	</getBounds>
	<union public="1" set="method" line="58" static="1">
		<f a="this:?p:?withHoles" v="::true">
			<c path="Array"><x path="h2d.col.IPolygon"/></c>
			<x path="h2d.col.IPolygons"/>
			<x path="Bool"/>
			<x path="h2d.col.IPolygons"/>
		</f>
		<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
		<haxe_doc>Combines this IPolygons and given IPolygons `p` and returns resulting IPolygons.
		@param p Optional IPolygons to union with. When not set, unions all polygons in this IPolygons.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
	</union>
	<intersection public="1" get="inline" set="null" line="71" static="1">
		<f a="this:p:?withHoles" v="::true">
			<c path="Array"><x path="h2d.col.IPolygon"/></c>
			<x path="h2d.col.IPolygons"/>
			<x path="Bool"/>
			<x path="h2d.col.IPolygons"/>
		</f>
		<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
		<haxe_doc>Calculates an intersection areas between this IPolygons and given IPolygons `p` and returns resulting IPolygons.
		@param p The IPolygons to intersect with.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
	</intersection>
	<subtraction public="1" get="inline" set="null" line="80" static="1">
		<f a="this:p:?withHoles" v="::true">
			<c path="Array"><x path="h2d.col.IPolygon"/></c>
			<x path="h2d.col.IPolygons"/>
			<x path="Bool"/>
			<x path="h2d.col.IPolygons"/>
		</f>
		<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
		<haxe_doc>Subtracts the area of given IPolygons `p` from this IPolygons and returns resulting IPolygons.
		@param p The IPolygons to subtract with.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
	</subtraction>
	<offset public="1" set="method" line="90" static="1">
		<f a="this:delta:kind:?withHoles" v=":::true">
			<c path="Array"><x path="h2d.col.IPolygon"/></c>
			<x path="Float"/>
			<e path="h2d.col.OffsetKind"/>
			<x path="Bool"/>
			<x path="h2d.col.IPolygons"/>
		</f>
		<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
		<haxe_doc>Offsets polygon edges by specified amount and returns resulting IPolygons.
		@param delta The offset amount.
		@param kind The corner rounding method.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
	</offset>
	<clipperOp set="method" line="107" static="1"><f a="this:p:op:withHoles">
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
	<x path="h2d.col.IPolygons"/>
	<e path="hxd.clipper.ClipType"/>
	<x path="Bool"/>
	<x path="h2d.col.IPolygons"/>
</f></clipperOp>
	<contains public="1" set="method" line="120" static="1">
		<f a="this:p:?isConvex" v="::false">
			<c path="Array"><x path="h2d.col.IPolygon"/></c>
			<c path="h2d.col.Point"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":value"><e>{ isConvex : false }</e></m></meta>
		<haxe_doc>Tests if Point `p` is inside this IPolygons.
		@param p The point to test against.
		@param isConvex Use simplified collision test suited for convex polygons. Results are undefined if polygon is concave.</haxe_doc>
	</contains>
	<optimize public="1" set="method" line="130" static="1">
		<f a="this:epsilon">
			<c path="Array"><x path="h2d.col.IPolygon"/></c>
			<x path="Float"/>
			<x path="h2d.col.IPolygons"/>
		</f>
		<haxe_doc>Creates a set of new optimized polygons by eliminating almost colinear edges according to the epsilon distance.</haxe_doc>
	</optimize>
</class></impl>
	</abstract>
	<class path="h2d.col._IPolygons.IPolygons_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/IPolygons.hx" private="1" module="h2d.col.IPolygons" final="1">
		<polygons public="1" get="accessor" set="null" static="1">
			<c path="Array"><x path="h2d.col.IPolygon"/></c>
			<haxe_doc>An underlying IPolygon array.</haxe_doc>
		</polygons>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The amount of polygons in the IPolygons instance.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="18" static="1"><f a="this">
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
	<x path="Int"/>
</f></get_length>
		<get_polygons get="inline" set="null" line="20" static="1"><f a="this">
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
</f></get_polygons>
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="?polygons">
				<c path="Array"><x path="h2d.col.IPolygon"/></c>
				<x path="h2d.col.IPolygons"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Create a new IPolygons instance.
		@param polygons An optional list of polygons to use.</haxe_doc>
		</_new>
		<iterator public="1" get="inline" set="null" line="31" static="1">
			<f a="this">
				<c path="Array"><x path="h2d.col.IPolygon"/></c>
				<c path="hxd.impl.ArrayIterator_h2d_col_IPolygon"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</iterator>
		<toPolygons public="1" set="method" line="38" static="1">
			<f a="this:?scale" v=":1.">
				<c path="Array"><x path="h2d.col.IPolygon"/></c>
				<x path="Float"/>
				<x path="h2d.col.Polygons"/>
			</f>
			<meta><m n=":value"><e>{ scale : 1. }</e></m></meta>
			<haxe_doc>Converts the IPolygons instance to the floating point-based Polygons.</haxe_doc>
		</toPolygons>
		<getBounds public="1" set="method" line="46" static="1">
			<f a="this:?b">
				<c path="Array"><x path="h2d.col.IPolygon"/></c>
				<c path="h2d.col.IBounds"/>
				<x path="Null"><c path="h2d.col.IBounds"/></x>
			</f>
			<haxe_doc>Returns bounding box of all IPolygon instances in IPolygons.
		@param b Optional Bounds instance to be filled. Returns new Bounds instance if `null`.</haxe_doc>
		</getBounds>
		<union public="1" set="method" line="58" static="1">
			<f a="this:?p:?withHoles" v="::true">
				<c path="Array"><x path="h2d.col.IPolygon"/></c>
				<x path="h2d.col.IPolygons"/>
				<x path="Bool"/>
				<x path="h2d.col.IPolygons"/>
			</f>
			<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
			<haxe_doc>Combines this IPolygons and given IPolygons `p` and returns resulting IPolygons.
		@param p Optional IPolygons to union with. When not set, unions all polygons in this IPolygons.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
		</union>
		<intersection public="1" get="inline" set="null" line="71" static="1">
			<f a="this:p:?withHoles" v="::true">
				<c path="Array"><x path="h2d.col.IPolygon"/></c>
				<x path="h2d.col.IPolygons"/>
				<x path="Bool"/>
				<x path="h2d.col.IPolygons"/>
			</f>
			<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
			<haxe_doc>Calculates an intersection areas between this IPolygons and given IPolygons `p` and returns resulting IPolygons.
		@param p The IPolygons to intersect with.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
		</intersection>
		<subtraction public="1" get="inline" set="null" line="80" static="1">
			<f a="this:p:?withHoles" v="::true">
				<c path="Array"><x path="h2d.col.IPolygon"/></c>
				<x path="h2d.col.IPolygons"/>
				<x path="Bool"/>
				<x path="h2d.col.IPolygons"/>
			</f>
			<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
			<haxe_doc>Subtracts the area of given IPolygons `p` from this IPolygons and returns resulting IPolygons.
		@param p The IPolygons to subtract with.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
		</subtraction>
		<offset public="1" set="method" line="90" static="1">
			<f a="this:delta:kind:?withHoles" v=":::true">
				<c path="Array"><x path="h2d.col.IPolygon"/></c>
				<x path="Float"/>
				<e path="h2d.col.OffsetKind"/>
				<x path="Bool"/>
				<x path="h2d.col.IPolygons"/>
			</f>
			<meta><m n=":value"><e>{ withHoles : true }</e></m></meta>
			<haxe_doc>Offsets polygon edges by specified amount and returns resulting IPolygons.
		@param delta The offset amount.
		@param kind The corner rounding method.
		@param withHoles When enabled, keeps the holes in resulting polygons as a separate IPolygon.</haxe_doc>
		</offset>
		<clipperOp set="method" line="107" static="1"><f a="this:p:op:withHoles">
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
	<x path="h2d.col.IPolygons"/>
	<e path="hxd.clipper.ClipType"/>
	<x path="Bool"/>
	<x path="h2d.col.IPolygons"/>
</f></clipperOp>
		<contains public="1" set="method" line="120" static="1">
			<f a="this:p:?isConvex" v="::false">
				<c path="Array"><x path="h2d.col.IPolygon"/></c>
				<c path="h2d.col.Point"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ isConvex : false }</e></m></meta>
			<haxe_doc>Tests if Point `p` is inside this IPolygons.
		@param p The point to test against.
		@param isConvex Use simplified collision test suited for convex polygons. Results are undefined if polygon is concave.</haxe_doc>
		</contains>
		<optimize public="1" set="method" line="130" static="1">
			<f a="this:epsilon">
				<c path="Array"><x path="h2d.col.IPolygon"/></c>
				<x path="Float"/>
				<x path="h2d.col.IPolygons"/>
			</f>
			<haxe_doc>Creates a set of new optimized polygons by eliminating almost colinear edges according to the epsilon distance.</haxe_doc>
		</optimize>
	</class>
	<class path="h2d.col.Matrix" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Matrix.hx">
		<tmp expr="new Matrix()" line="15" static="1">
			<c path="h2d.col.Matrix"/>
			<meta><m n=":value"><e>new Matrix()</e></m></meta>
		</tmp>
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<identity public="1" get="inline" set="null" line="38">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets the matrix values to ones that would perform no transformation.
		```
		[1, 0, 0]
		[0, 1, 0]
		```</haxe_doc>
		</identity>
		<initTranslate public="1" get="inline" set="null" line="50">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the matrix values to ones that would only move the transformed positions by given `x` and `y`.
		```
		[1, 0, x]
		[0, 1, y]
		```</haxe_doc>
		</initTranslate>
		<initScale public="1" get="inline" set="null" line="63">
			<f a="sx:sy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the matrix values to ones that would only scale the transformed positions by given `sx` and `sy`.
		```
		[sx, 0, 0]
		[0, sy, 0]
		```</haxe_doc>
		</initScale>
		<initRotate public="1" get="inline" set="null" line="75">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the matrix values to ones that would only rotate the transformed position by given `angle`.
		```
		[cos(angle), -sin(angle), 0]
		[sin(angle),  cos(angle), 0]
		```</haxe_doc>
		</initRotate>
		<initSkew public="1" get="inline" set="null" line="93">
			<f a="sx:sy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the matrix values to ones that would only skew the transformed position by given `sx` and `sy`.
		```
		[1, tan(sx), 0]
		[tan(sy), 1, 0]
		```</haxe_doc>
		</initSkew>
		<invert public="1" set="method" line="108">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Inverts the matrix to perform the opposite transformation. Can be used to undo the previously applied transformation.
		@see `Matrix.inverse`</haxe_doc>
		</invert>
		<getDeterminant public="1" get="inline" set="null" line="115">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the determinant of the Matrix `a`, `b`, `c` and `d` values.</haxe_doc>
		</getDeterminant>
		<inverse public="1" set="method" line="122">
			<f a="m">
				<c path="h2d.col.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets this Matrix value to be the inverse of the given Matrix `m`.</haxe_doc>
		</inverse>
		<transform public="1" get="inline" set="null" line="138">
			<f a="pt">
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
			</f>
			<haxe_doc>Returns a new Point that is a result of transforming Point `pt` by this Matrix.</haxe_doc>
		</transform>
		<translate public="1" get="inline" set="null" line="145">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies translation transform to Matrix by given `x` and `y`.</haxe_doc>
		</translate>
		<translateX public="1" get="inline" set="null" line="153">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies translation transform on X-axis to Matrix by given `x`. Equivalent of `matrix.x += x`.</haxe_doc>
		</translateX>
		<translateY public="1" get="inline" set="null" line="160">
			<f a="y">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies translation transform on Y-axis to Matrix by given `y`. Equivalent of `matrix.y += y`.</haxe_doc>
		</translateY>
		<prependTranslate public="1" get="inline" set="null" line="168">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Transforms given `x` and `y` with current Matrix values (excluding translation) and
		applies translation transform to Matrix by resulting `x` and `y`.</haxe_doc>
		</prependTranslate>
		<prependTranslateX public="1" get="inline" set="null" line="178">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Transforms given `x` with current Matrix values (excluding translation) and
		applies translation transform on X-axis to Matrix by resulting `x` and `y`.
		Equivalent of `matrix.x += matrix.a * x`.</haxe_doc>
		</prependTranslateX>
		<prependTranslateY public="1" get="inline" set="null" line="187">
			<f a="y">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Transforms given `y` with current Matrix values (excluding translation) and
		applies translation transform on Y-axis to Matrix by resulting `y`.
		Equivalent of `matrix.y += matrix.d * y`.</haxe_doc>
		</prependTranslateY>
		<multiply public="1" set="method" line="196">
			<f a="a:b">
				<c path="h2d.col.Matrix"/>
				<c path="h2d.col.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Concatenates Matrix `a` and `b` and stores the result in this Matrix. 
		Matrix can be the target of of it's own `multiply`.
		Keep in mind that order of matrixes matter in concatenation.</haxe_doc>
		</multiply>
		<getScale public="1" get="inline" set="null" line="211">
			<f a="?p">
				<c path="h2d.col.Point"/>
				<x path="Null"><c path="h2d.col.Point"/></x>
			</f>
			<haxe_doc>Returns a Point with a total scaling applied by the Matrix.
		@param p Optional Point instance. If provided, sets values of given Point and returns it. Otherwise returns new Point instance.</haxe_doc>
		</getScale>
		<scale public="1" get="inline" set="null" line="226">
			<f a="sx:sy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Multiplies the `a`, `c` and `x` by given `sx` and `b`, `d` and `y` by `sy`.</haxe_doc>
		</scale>
		<scaleX public="1" get="inline" set="null" line="238">
			<f a="sx">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Multiplies the `a`, `c` and `x` by given `sx`.</haxe_doc>
		</scaleX>
		<scaleY public="1" get="inline" set="null" line="247">
			<f a="sy">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Multiplies the `b`, `d` and `y` by `sy`.</haxe_doc>
		</scaleY>
		<rotate public="1" set="method" line="256">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies rotation transform to the Matrix by given `angle`.</haxe_doc>
		</rotate>
		<skew public="1" set="method" line="264">
			<f a="sx:sy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies skewing transform to the Matrix by given `sx` and `sy`.</haxe_doc>
		</skew>
		<skewX public="1" set="method" line="281">
			<f a="sx">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies skewing transform on X-axis to the Matrix by given `sx`.</haxe_doc>
		</skewX>
		<skewY public="1" set="method" line="293">
			<f a="sy">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies skewing transform on Y-axis to the Matrix by given `sy`.</haxe_doc>
		</skewY>
		<clone public="1" set="method" line="305">
			<f a=""><c path="h2d.col.Matrix"/></f>
			<haxe_doc>Returns a copy of this Matrix.</haxe_doc>
		</clone>
		<getPosition public="1" get="inline" set="null" line="320">
			<f a="?p">
				<c path="h2d.col.Point"/>
				<x path="Null"><c path="h2d.col.Point"/></x>
			</f>
			<haxe_doc>Returns a Point with `x` and `y` of the Matrix.
		@param p Optional Point instance to use. Otherwise returns new instance.</haxe_doc>
		</getPosition>
		<toString public="1" set="method" line="327">
			<f a=""><c path="String"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</toString>
		<new public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create a new identity Matrix.</haxe_doc>
		</new>
		<haxe_doc>An affine 2D 2x3 matrix.

	Matrix properties are as follows:
	```
	[a, c, x]
	[b, d, y]
	```</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h2d.col.Point" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Point.hx">
		<x public="1">
			<x path="Float"/>
			<haxe_doc>The horizontal position of the point.</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>The vertical position of the point.</haxe_doc>
		</y>
		<distanceSq public="1" get="inline" set="null" line="34">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns squared distance between this Point and given Point `p`.</haxe_doc>
		</distanceSq>
		<distance public="1" get="inline" set="null" line="43">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a distance between this Point and given Point `p`.</haxe_doc>
		</distance>
		<toString public="1" set="method" line="48">
			<f a=""><c path="String"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</toString>
		<sub public="1" get="inline" set="null" line="55">
			<f a="p">
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
			</f>
			<haxe_doc>Substracts Point `p` from this Point and returns new Point with the result.</haxe_doc>
		</sub>
		<add public="1" get="inline" set="null" line="62">
			<f a="p">
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
			</f>
			<haxe_doc>Adds Point `p` to this Point and returns new Point with the result.</haxe_doc>
		</add>
		<multiply public="1" get="inline" set="null" line="69">
			<f a="v">
				<x path="Float"/>
				<c path="h2d.col.Point"/>
			</f>
			<haxe_doc>Returns a new Point with the position of this Point multiplied by a given scalar `v`.</haxe_doc>
		</multiply>
		<equals public="1" get="inline" set="null" line="76">
			<f a="other">
				<c path="h2d.col.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if this Point position equals to `other` Point position.</haxe_doc>
		</equals>
		<dot public="1" get="inline" set="null" line="83">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a dot product between this Point and given Point `p`.</haxe_doc>
		</dot>
		<lengthSq public="1" get="inline" set="null" line="90">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns squared length of this Point.</haxe_doc>
		</lengthSq>
		<length public="1" get="inline" set="null" line="97">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns length (distance to `0,0`) of this Point.</haxe_doc>
		</length>
		<normalize public="1" get="inline" set="null" line="104">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Normalizes the Point.</haxe_doc>
		</normalize>
		<normalized public="1" get="inline" set="null" line="114">
			<f a=""><c path="h2d.col.Point"/></f>
			<haxe_doc>Returns a new Point with the normalized values of this Point.</haxe_doc>
		</normalized>
		<set public="1" get="inline" set="null" line="123">
			<f a="?x:?y" v="0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0., x : 0. }</e></m></meta>
			<haxe_doc>Sets the Point `x,y` with given values.</haxe_doc>
		</set>
		<load public="1" get="inline" set="null" line="131">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `x,y` from given Point `p` to this Point.</haxe_doc>
		</load>
		<scale public="1" get="inline" set="null" line="139">
			<f a="f">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Multiplies `x,y` by scalar `f`.</haxe_doc>
		</scale>
		<clone public="1" get="inline" set="null" line="147">
			<f a=""><c path="h2d.col.Point"/></f>
			<haxe_doc>Returns a copy of this Point.</haxe_doc>
		</clone>
		<cross public="1" get="inline" set="null" line="154">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a cross product between this Point and a given Point `p`.</haxe_doc>
		</cross>
		<lerp public="1" get="inline" set="null" line="161">
			<f a="a:b:k">
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets this Point position to a result of linear interpolation between Points `p1` and `p2` at the interpolant position `k`.</haxe_doc>
		</lerp>
		<transform public="1" get="inline" set="null" line="169">
			<f a="m">
				<c path="h2d.col.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies a given Matrix `m` transformation to this Point position.</haxe_doc>
		</transform>
		<transformed public="1" get="inline" set="null" line="179">
			<f a="m">
				<c path="h2d.col.Matrix"/>
				<c path="h2d.col.Point"/>
			</f>
			<haxe_doc>Returns a new Point with a result of applying a Matrix `m` to this Point position.</haxe_doc>
		</transformed>
		<transform2x2 public="1" get="inline" set="null" line="188">
			<f a="m">
				<c path="h2d.col.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies a given 2x2 Matrix `m` transformation to this Point position.</haxe_doc>
		</transform2x2>
		<transformed2x2 public="1" get="inline" set="null" line="198">
			<f a="m">
				<c path="h2d.col.Matrix"/>
				<c path="h2d.col.Point"/>
			</f>
			<haxe_doc>Returns a new Point with a result of applying a 2x2 Matrix `m` to this Point position.</haxe_doc>
		</transformed2x2>
		<toIPoint public="1" get="inline" set="null" line="210">
			<f a="?scale" v="1.">
				<x path="Float"/>
				<c path="h2d.col.IPoint"/>
			</f>
			<meta><m n=":value"><e>{ scale : 1. }</e></m></meta>
			<haxe_doc>Converts this point to integer point scaled by provided scalar `scale` (rounded).</haxe_doc>
		</toIPoint>
		<rotate public="1" get="inline" set="null" line="217">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Rotates this Point around `0,0` by a given `angle`.</haxe_doc>
		</rotate>
		<new public="1" get="inline" set="null" line="26">
			<f a="?x:?y" v="0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0., x : 0. }</e></m></meta>
			<haxe_doc>Create a new Point instance.
		@param x The horizontal position of the point.
		@param y The vertical position of the point.</haxe_doc>
		</new>
		<haxe_doc>A simple 2D position/vector container.
	@see `h2d.col.IPoint`</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="h2d.col.Polygon" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Polygon.hx">
		<from><icast><c path="Array"><c path="h2d.col.Point"/></c></icast></from>
		<this><c path="Array"><c path="h2d.col.Point"/></c></this>
		<to><icast><c path="Array"><c path="h2d.col.Point"/></c></icast></to>
		<haxe_doc>An abstract around an Array of `Point`s that define a polygonal shape that can be collision-tested against.
	@see `h2d.col.IPolygon`</haxe_doc>
		<meta><m n=":forward">
	<e>push</e>
	<e>remove</e>
	<e>insert</e>
	<e>copy</e>
</m></meta>
		<impl><class path="h2d.col._Polygon.Polygon_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Polygon.hx" private="1" module="h2d.col.Polygon" final="1">
	<points public="1" get="accessor" set="null" static="1">
		<c path="Array"><c path="h2d.col.Point"/></c>
		<haxe_doc>The underlying Array of vertices.</haxe_doc>
	</points>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The amount of vertices in the polygon.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="19" static="1"><f a="this">
	<c path="Array"><c path="h2d.col.Point"/></c>
	<x path="Int"/>
</f></get_length>
	<get_points get="inline" set="null" line="20" static="1"><f a="this">
	<c path="Array"><c path="h2d.col.Point"/></c>
	<c path="Array"><c path="h2d.col.Point"/></c>
</f></get_points>
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="?points">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<x path="h2d.col.Polygon"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Create a new Polygon shape.
		@param points An optional array of vertices the polygon should use.</haxe_doc>
	</_new>
	<iterator public="1" get="inline" set="null" line="31" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<c path="hxd.impl.ArrayIterator_h2d_col_Point"/>
		</f>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</iterator>
	<fastTriangulate public="1" set="method" line="40" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<c path="Array"><x path="Int"/></c>
		</f>
		<haxe_doc>Uses EarCut algorithm to quickly triangulate the polygon.
		This will not create the best triangulation possible but is quite solid wrt self-intersections and merged points.
		Returns the points indexes</haxe_doc>
	</fastTriangulate>
	<toSegments public="1" set="method" line="47" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<x path="h2d.col.Segments"/>
		</f>
		<haxe_doc>Returns new Segments instance containing polygon edges.</haxe_doc>
	</toSegments>
	<toIPolygon public="1" set="method" line="61" static="1">
		<f a="this:?scale" v=":1.">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<x path="Float"/>
			<x path="h2d.col.IPolygon"/>
		</f>
		<meta><m n=":value"><e>{ scale : 1. }</e></m></meta>
		<haxe_doc>Converts Polygon to Int-based IPolygon.</haxe_doc>
	</toIPolygon>
	<getBounds public="1" set="method" line="69" static="1">
		<f a="this:?b">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<c path="h2d.col.Bounds"/>
			<x path="Null"><c path="h2d.col.Bounds"/></x>
		</f>
		<haxe_doc>Returns bounding box of the Polygon.
		@param b Optional Bounds instance to be filled. Returns new Bounds instance if `null`.</haxe_doc>
	</getBounds>
	<getCollider public="1" set="method" line="80" static="1">
		<f a="this:?isConvex" v=":false">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<x path="Bool"/>
			<c path="h2d.col.PolygonCollider"/>
		</f>
		<meta><m n=":value"><e>{ isConvex : false }</e></m></meta>
		<haxe_doc>Returns new `PolygonCollider` instance containing this Polygon.
		@param isConvex Use simplified collision test suited for convex polygons. Results are undefined if polygon is concave.</haxe_doc>
	</getCollider>
	<xSort get="inline" set="null" line="84" static="1"><f a="this:a:b">
	<c path="Array"><c path="h2d.col.Point"/></c>
	<c path="h2d.col.Point"/>
	<c path="h2d.col.Point"/>
	<x path="Int"/>
</f></xSort>
	<convexHull public="1" set="method" line="94" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<c path="Array"><c path="h2d.col.Point"/></c>
		</f>
		<haxe_doc>Returns a new Polygon containing a convex hull of this Polygon.
		See Monotone chain algorithm for more details.</haxe_doc>
	</convexHull>
	<isClockwise public="1" set="method" line="127" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<x path="Bool"/>
		</f>
		<haxe_doc>Tests if polygon points are in the clockwise order.</haxe_doc>
	</isClockwise>
	<area public="1" set="method" line="140" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<x path="Float"/>
		</f>
		<haxe_doc>Calculates total area of the Polygon.</haxe_doc>
	</area>
	<centroid public="1" set="method" line="153" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<c path="h2d.col.Point"/>
		</f>
		<haxe_doc>Calculates a centroid of the Polygon and returns its position.</haxe_doc>
	</centroid>
	<side get="inline" set="null" line="174" static="1"><f a="this:p1:p2:t">
	<c path="Array"><c path="h2d.col.Point"/></c>
	<c path="h2d.col.Point"/>
	<c path="h2d.col.Point"/>
	<c path="h2d.col.Point"/>
	<x path="Float"/>
</f></side>
	<isConvex public="1" set="method" line="181" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<x path="Bool"/>
		</f>
		<haxe_doc>Tests if polygon is convex or concave.</haxe_doc>
	</isConvex>
	<reverse public="1" set="method" line="200" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<x path="Void"/>
		</f>
		<haxe_doc>Reverses the Polygon points ordering. Can be used to change polygon from anti-clockwise to clockwise.</haxe_doc>
	</reverse>
	<transform public="1" set="method" line="207" static="1">
		<f a="this:mat">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<c path="h2d.col.Matrix"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Transforms Polygon points by provided matrix.</haxe_doc>
	</transform>
	<contains public="1" set="method" line="219" static="1">
		<f a="this:p:?isConvex" v="::false">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<c path="h2d.col.Point"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":value"><e>{ isConvex : false }</e></m>
			<m n=":noDebug"/>
		</meta>
		<haxe_doc>Tests if Point `p` is inside this Polygon.
		@param p The point to test against.
		@param isConvex Use simplified collision test suited for convex polygons. Results are undefined if polygon is concave.</haxe_doc>
	</contains>
	<findClosestPoint public="1" set="method" line="250" static="1">
		<f a="this:pt:maxDist">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<c path="h2d.col.Point"/>
			<x path="Float"/>
			<c path="h2d.col.Point"/>
		</f>
		<haxe_doc>Returns closest Polygon vertex to Point `pt` within set maximum distance.
		@param pt The point to test against.
		@param maxDist Maximum distance vertex can be away from `pt` before it no longer considered close.
		@returns A `Point` instance in the Polygon representing closest vertex (not the copy). `null` if no vertices were found near the `pt` within `maxDist`.</haxe_doc>
	</findClosestPoint>
	<projectPoint public="1" set="method" line="266" static="1">
		<f a="this:pt">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<c path="h2d.col.Point"/>
			<c path="h2d.col.Point"/>
		</f>
		<haxe_doc>Return the closest point on the edges of the polygon</haxe_doc>
	</projectPoint>
	<distance public="1" set="method" line="287" static="1">
		<f a="this:pt:?outside">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<c path="h2d.col.Point"/>
			<x path="Bool"/>
			<x path="Float"/>
		</f>
		<haxe_doc>Return the distance of `pt` to the closest edge.
		If outside is `true`, only return a positive value if `pt` is outside the polygon, zero otherwise
		If outside is `false`, only return a positive value if `pt` is inside the polygon, zero otherwise</haxe_doc>
	</distance>
	<distanceSq public="1" set="method" line="294" static="1">
		<f a="this:pt:?outside">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<c path="h2d.col.Point"/>
			<x path="Bool"/>
			<x path="Float"/>
		</f>
		<haxe_doc>* Same as `distance` but returns the squared value</haxe_doc>
	</distanceSq>
	<rayIntersection public="1" set="method" line="309" static="1"><f a="this:r:bestMatch">
	<c path="Array"><c path="h2d.col.Point"/></c>
	<c path="h2d.col.Ray"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></rayIntersection>
	<orientation get="inline" set="null" line="338" static="1"><f a="this:p:q:r">
	<c path="Array"><c path="h2d.col.Point"/></c>
	<c path="h2d.col.Point"/>
	<c path="h2d.col.Point"/>
	<c path="h2d.col.Point"/>
	<x path="Int"/>
</f></orientation>
	<onSegment get="inline" set="null" line="348" static="1">
		<f a="this:p:q:r">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<c path="h2d.col.Point"/>
			<c path="h2d.col.Point"/>
			<c path="h2d.col.Point"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>p, q, r : must be colinear points!
		checks if 'r' lies on segment 'pq'</haxe_doc>
	</onSegment>
	<intersect set="method" line="359" static="1">
		<f a="this:p1:q1:p2:q2">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<c path="h2d.col.Point"/>
			<c path="h2d.col.Point"/>
			<c path="h2d.col.Point"/>
			<c path="h2d.col.Point"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>check if segment 'p1q1' and 'p2q2' intersect.</haxe_doc>
	</intersect>
	<selfIntersecting public="1" set="method" line="379" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<x path="Bool"/>
		</f>
		<haxe_doc>Check if polygon self-intersect</haxe_doc>
	</selfIntersecting>
	<optimize public="1" set="method" line="399" static="1">
		<f a="this:epsilon">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<x path="Float"/>
			<x path="h2d.col.Polygon"/>
		</f>
		<haxe_doc>Creates a new optimized polygon by eliminating almost colinear edges according to epsilon distance.</haxe_doc>
	</optimize>
	<optimizeRec set="method" line="405" static="1"><f a="points:start:end:out:epsilon">
	<c path="Array"><c path="h2d.col.Point"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="h2d.col.Point"/></c>
	<x path="Float"/>
	<x path="Void"/>
</f></optimizeRec>
	<makeCircle public="1" set="method" line="461" static="1">
		<f a="x:y:radius:?npoints" v=":::0">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="h2d.col.Polygon"/>
		</f>
		<meta><m n=":value"><e>{ npoints : 0 }</e></m></meta>
	</makeCircle>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="h2d.col._Polygon.Polygon_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Polygon.hx" private="1" module="h2d.col.Polygon" final="1">
		<points public="1" get="accessor" set="null" static="1">
			<c path="Array"><c path="h2d.col.Point"/></c>
			<haxe_doc>The underlying Array of vertices.</haxe_doc>
		</points>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The amount of vertices in the polygon.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="19" static="1"><f a="this">
	<c path="Array"><c path="h2d.col.Point"/></c>
	<x path="Int"/>
</f></get_length>
		<get_points get="inline" set="null" line="20" static="1"><f a="this">
	<c path="Array"><c path="h2d.col.Point"/></c>
	<c path="Array"><c path="h2d.col.Point"/></c>
</f></get_points>
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="?points">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<x path="h2d.col.Polygon"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Create a new Polygon shape.
		@param points An optional array of vertices the polygon should use.</haxe_doc>
		</_new>
		<iterator public="1" get="inline" set="null" line="31" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<c path="hxd.impl.ArrayIterator_h2d_col_Point"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</iterator>
		<fastTriangulate public="1" set="method" line="40" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Uses EarCut algorithm to quickly triangulate the polygon.
		This will not create the best triangulation possible but is quite solid wrt self-intersections and merged points.
		Returns the points indexes</haxe_doc>
		</fastTriangulate>
		<toSegments public="1" set="method" line="47" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<x path="h2d.col.Segments"/>
			</f>
			<haxe_doc>Returns new Segments instance containing polygon edges.</haxe_doc>
		</toSegments>
		<toIPolygon public="1" set="method" line="61" static="1">
			<f a="this:?scale" v=":1.">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<x path="Float"/>
				<x path="h2d.col.IPolygon"/>
			</f>
			<meta><m n=":value"><e>{ scale : 1. }</e></m></meta>
			<haxe_doc>Converts Polygon to Int-based IPolygon.</haxe_doc>
		</toIPolygon>
		<getBounds public="1" set="method" line="69" static="1">
			<f a="this:?b">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<c path="h2d.col.Bounds"/>
				<x path="Null"><c path="h2d.col.Bounds"/></x>
			</f>
			<haxe_doc>Returns bounding box of the Polygon.
		@param b Optional Bounds instance to be filled. Returns new Bounds instance if `null`.</haxe_doc>
		</getBounds>
		<getCollider public="1" set="method" line="80" static="1">
			<f a="this:?isConvex" v=":false">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<x path="Bool"/>
				<c path="h2d.col.PolygonCollider"/>
			</f>
			<meta><m n=":value"><e>{ isConvex : false }</e></m></meta>
			<haxe_doc>Returns new `PolygonCollider` instance containing this Polygon.
		@param isConvex Use simplified collision test suited for convex polygons. Results are undefined if polygon is concave.</haxe_doc>
		</getCollider>
		<xSort get="inline" set="null" line="84" static="1"><f a="this:a:b">
	<c path="Array"><c path="h2d.col.Point"/></c>
	<c path="h2d.col.Point"/>
	<c path="h2d.col.Point"/>
	<x path="Int"/>
</f></xSort>
		<convexHull public="1" set="method" line="94" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<c path="Array"><c path="h2d.col.Point"/></c>
			</f>
			<haxe_doc>Returns a new Polygon containing a convex hull of this Polygon.
		See Monotone chain algorithm for more details.</haxe_doc>
		</convexHull>
		<isClockwise public="1" set="method" line="127" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if polygon points are in the clockwise order.</haxe_doc>
		</isClockwise>
		<area public="1" set="method" line="140" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<x path="Float"/>
			</f>
			<haxe_doc>Calculates total area of the Polygon.</haxe_doc>
		</area>
		<centroid public="1" set="method" line="153" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<c path="h2d.col.Point"/>
			</f>
			<haxe_doc>Calculates a centroid of the Polygon and returns its position.</haxe_doc>
		</centroid>
		<side get="inline" set="null" line="174" static="1"><f a="this:p1:p2:t">
	<c path="Array"><c path="h2d.col.Point"/></c>
	<c path="h2d.col.Point"/>
	<c path="h2d.col.Point"/>
	<c path="h2d.col.Point"/>
	<x path="Float"/>
</f></side>
		<isConvex public="1" set="method" line="181" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if polygon is convex or concave.</haxe_doc>
		</isConvex>
		<reverse public="1" set="method" line="200" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Reverses the Polygon points ordering. Can be used to change polygon from anti-clockwise to clockwise.</haxe_doc>
		</reverse>
		<transform public="1" set="method" line="207" static="1">
			<f a="this:mat">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<c path="h2d.col.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Transforms Polygon points by provided matrix.</haxe_doc>
		</transform>
		<contains public="1" set="method" line="219" static="1">
			<f a="this:p:?isConvex" v="::false">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<c path="h2d.col.Point"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":value"><e>{ isConvex : false }</e></m>
				<m n=":noDebug"/>
			</meta>
			<haxe_doc>Tests if Point `p` is inside this Polygon.
		@param p The point to test against.
		@param isConvex Use simplified collision test suited for convex polygons. Results are undefined if polygon is concave.</haxe_doc>
		</contains>
		<findClosestPoint public="1" set="method" line="250" static="1">
			<f a="this:pt:maxDist">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<c path="h2d.col.Point"/>
				<x path="Float"/>
				<c path="h2d.col.Point"/>
			</f>
			<haxe_doc>Returns closest Polygon vertex to Point `pt` within set maximum distance.
		@param pt The point to test against.
		@param maxDist Maximum distance vertex can be away from `pt` before it no longer considered close.
		@returns A `Point` instance in the Polygon representing closest vertex (not the copy). `null` if no vertices were found near the `pt` within `maxDist`.</haxe_doc>
		</findClosestPoint>
		<projectPoint public="1" set="method" line="266" static="1">
			<f a="this:pt">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
			</f>
			<haxe_doc>Return the closest point on the edges of the polygon</haxe_doc>
		</projectPoint>
		<distance public="1" set="method" line="287" static="1">
			<f a="this:pt:?outside">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<c path="h2d.col.Point"/>
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Return the distance of `pt` to the closest edge.
		If outside is `true`, only return a positive value if `pt` is outside the polygon, zero otherwise
		If outside is `false`, only return a positive value if `pt` is inside the polygon, zero otherwise</haxe_doc>
		</distance>
		<distanceSq public="1" set="method" line="294" static="1">
			<f a="this:pt:?outside">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<c path="h2d.col.Point"/>
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Same as `distance` but returns the squared value</haxe_doc>
		</distanceSq>
		<rayIntersection public="1" set="method" line="309" static="1"><f a="this:r:bestMatch">
	<c path="Array"><c path="h2d.col.Point"/></c>
	<c path="h2d.col.Ray"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></rayIntersection>
		<orientation get="inline" set="null" line="338" static="1"><f a="this:p:q:r">
	<c path="Array"><c path="h2d.col.Point"/></c>
	<c path="h2d.col.Point"/>
	<c path="h2d.col.Point"/>
	<c path="h2d.col.Point"/>
	<x path="Int"/>
</f></orientation>
		<onSegment get="inline" set="null" line="348" static="1">
			<f a="this:p:q:r">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>p, q, r : must be colinear points!
		checks if 'r' lies on segment 'pq'</haxe_doc>
		</onSegment>
		<intersect set="method" line="359" static="1">
			<f a="this:p1:q1:p2:q2">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>check if segment 'p1q1' and 'p2q2' intersect.</haxe_doc>
		</intersect>
		<selfIntersecting public="1" set="method" line="379" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check if polygon self-intersect</haxe_doc>
		</selfIntersecting>
		<optimize public="1" set="method" line="399" static="1">
			<f a="this:epsilon">
				<c path="Array"><c path="h2d.col.Point"/></c>
				<x path="Float"/>
				<x path="h2d.col.Polygon"/>
			</f>
			<haxe_doc>Creates a new optimized polygon by eliminating almost colinear edges according to epsilon distance.</haxe_doc>
		</optimize>
		<optimizeRec set="method" line="405" static="1"><f a="points:start:end:out:epsilon">
	<c path="Array"><c path="h2d.col.Point"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="h2d.col.Point"/></c>
	<x path="Float"/>
	<x path="Void"/>
</f></optimizeRec>
		<makeCircle public="1" set="method" line="461" static="1">
			<f a="x:y:radius:?npoints" v=":::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="h2d.col.Polygon"/>
			</f>
			<meta><m n=":value"><e>{ npoints : 0 }</e></m></meta>
		</makeCircle>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h2d.col.PolygonCollider" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/PolygonCollider.hx">
		<implements path="h2d.col.Collider"/>
		<polygons public="1">
			<x path="h2d.col.Polygons"/>
			<haxe_doc>The Polygons instance used for collision checks.</haxe_doc>
		</polygons>
		<isConvex public="1">
			<x path="Bool"/>
			<haxe_doc>Whether Polygons is convex or concave.
		Convex polygons are cheaper to test against.</haxe_doc>
		</isConvex>
		<contains public="1" set="method" line="28">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Test is Point `p` is inside `polygons`.</haxe_doc>
		</contains>
		<new public="1" set="method" line="20">
			<f a="polygons:?isConvex" v=":false">
				<x path="h2d.col.Polygons"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ isConvex : false }</e></m></meta>
			<haxe_doc>Create new PolygonCollider with specified Polygons and flag to check as convex or concave.</haxe_doc>
		</new>
		<haxe_doc>A `Collider` wrapper around `Polygons` to enable using those for hit-testing testing.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="h2d.col.Polygons" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Polygons.hx">
		<from><icast><c path="Array"><x path="h2d.col.Polygon"/></c></icast></from>
		<this><c path="Array"><x path="h2d.col.Polygon"/></c></this>
		<to><icast><c path="Array"><x path="h2d.col.Polygon"/></c></icast></to>
		<haxe_doc>An abstract over an Array of `Polygon` instances that define multiple polygonal shapes that can be collision-tested against.
	@see `h2d.IPolygons`</haxe_doc>
		<meta><m n=":forward">
	<e>push</e>
	<e>remove</e>
</m></meta>
		<impl><class path="h2d.col._Polygons.Polygons_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Polygons.hx" private="1" module="h2d.col.Polygons" final="1">
	<polygons public="1" get="accessor" set="null" static="1">
		<c path="Array"><x path="h2d.col.Polygon"/></c>
		<haxe_doc>An underlying Polygon array.</haxe_doc>
	</polygons>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The amount of polygons in the Polygons instance.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="19" static="1"><f a="this">
	<c path="Array"><x path="h2d.col.Polygon"/></c>
	<x path="Int"/>
</f></get_length>
	<get_polygons get="inline" set="null" line="20" static="1"><f a="this">
	<c path="Array"><x path="h2d.col.Polygon"/></c>
	<c path="Array"><x path="h2d.col.Polygon"/></c>
</f></get_polygons>
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="?polygons">
			<c path="Array"><x path="h2d.col.Polygon"/></c>
			<x path="h2d.col.Polygons"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Create a new Polygons instance.
		@param polygons An optional list of polygons to use.</haxe_doc>
	</_new>
	<iterator public="1" get="inline" set="null" line="31" static="1">
		<f a="this">
			<c path="Array"><x path="h2d.col.Polygon"/></c>
			<c path="hxd.impl.ArrayIterator_h2d_col_Polygon"/>
		</f>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</iterator>
	<toIPolygons public="1" set="method" line="38" static="1">
		<f a="this:?scale" v=":1.">
			<c path="Array"><x path="h2d.col.Polygon"/></c>
			<x path="Float"/>
			<x path="h2d.col.IPolygons"/>
		</f>
		<meta><m n=":value"><e>{ scale : 1. }</e></m></meta>
		<haxe_doc>Converts Polygons instance to Int-based IPolygons.</haxe_doc>
	</toIPolygons>
	<getBounds public="1" set="method" line="46" static="1">
		<f a="this:?b">
			<c path="Array"><x path="h2d.col.Polygon"/></c>
			<c path="h2d.col.Bounds"/>
			<x path="Null"><c path="h2d.col.Bounds"/></x>
		</f>
		<haxe_doc>Returns bounding box of all Polygon instances in Polygons.
		@param b Optional Bounds instance to be filled. Returns new Bounds instance if `null`.</haxe_doc>
	</getBounds>
	<getCollider public="1" set="method" line="57" static="1">
		<f a="this:?isConvex" v=":false">
			<c path="Array"><x path="h2d.col.Polygon"/></c>
			<x path="Bool"/>
			<c path="h2d.col.PolygonCollider"/>
		</f>
		<meta><m n=":value"><e>{ isConvex : false }</e></m></meta>
		<haxe_doc>Returns new `PolygonCollider` instance containing this Polygons.
		@param isConvex Use simplified collision test suited for convex polygons. Results are undefined if polygon is concave.</haxe_doc>
	</getCollider>
	<contains public="1" set="method" line="66" static="1">
		<f a="this:p:?isConvex" v="::false">
			<c path="Array"><x path="h2d.col.Polygon"/></c>
			<c path="h2d.col.Point"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":value"><e>{ isConvex : false }</e></m></meta>
		<haxe_doc>Tests if Point `p` is inside any of the Polygon instances in Polygons.
		@param p The point to test against.
		@param isConvex Use simplified collision test suited for convex polygons. Results are undefined if polygon is concave.</haxe_doc>
	</contains>
	<optimize public="1" set="method" line="76" static="1">
		<f a="this:epsilon">
			<c path="Array"><x path="h2d.col.Polygon"/></c>
			<x path="Float"/>
			<x path="h2d.col.Polygons"/>
		</f>
		<haxe_doc>Optimizes all polygons and returns new Polygons instances. See [h2d.col.Polygon.optimize].</haxe_doc>
	</optimize>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="h2d.col._Polygons.Polygons_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Polygons.hx" private="1" module="h2d.col.Polygons" final="1">
		<polygons public="1" get="accessor" set="null" static="1">
			<c path="Array"><x path="h2d.col.Polygon"/></c>
			<haxe_doc>An underlying Polygon array.</haxe_doc>
		</polygons>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The amount of polygons in the Polygons instance.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="19" static="1"><f a="this">
	<c path="Array"><x path="h2d.col.Polygon"/></c>
	<x path="Int"/>
</f></get_length>
		<get_polygons get="inline" set="null" line="20" static="1"><f a="this">
	<c path="Array"><x path="h2d.col.Polygon"/></c>
	<c path="Array"><x path="h2d.col.Polygon"/></c>
</f></get_polygons>
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="?polygons">
				<c path="Array"><x path="h2d.col.Polygon"/></c>
				<x path="h2d.col.Polygons"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Create a new Polygons instance.
		@param polygons An optional list of polygons to use.</haxe_doc>
		</_new>
		<iterator public="1" get="inline" set="null" line="31" static="1">
			<f a="this">
				<c path="Array"><x path="h2d.col.Polygon"/></c>
				<c path="hxd.impl.ArrayIterator_h2d_col_Polygon"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</iterator>
		<toIPolygons public="1" set="method" line="38" static="1">
			<f a="this:?scale" v=":1.">
				<c path="Array"><x path="h2d.col.Polygon"/></c>
				<x path="Float"/>
				<x path="h2d.col.IPolygons"/>
			</f>
			<meta><m n=":value"><e>{ scale : 1. }</e></m></meta>
			<haxe_doc>Converts Polygons instance to Int-based IPolygons.</haxe_doc>
		</toIPolygons>
		<getBounds public="1" set="method" line="46" static="1">
			<f a="this:?b">
				<c path="Array"><x path="h2d.col.Polygon"/></c>
				<c path="h2d.col.Bounds"/>
				<x path="Null"><c path="h2d.col.Bounds"/></x>
			</f>
			<haxe_doc>Returns bounding box of all Polygon instances in Polygons.
		@param b Optional Bounds instance to be filled. Returns new Bounds instance if `null`.</haxe_doc>
		</getBounds>
		<getCollider public="1" set="method" line="57" static="1">
			<f a="this:?isConvex" v=":false">
				<c path="Array"><x path="h2d.col.Polygon"/></c>
				<x path="Bool"/>
				<c path="h2d.col.PolygonCollider"/>
			</f>
			<meta><m n=":value"><e>{ isConvex : false }</e></m></meta>
			<haxe_doc>Returns new `PolygonCollider` instance containing this Polygons.
		@param isConvex Use simplified collision test suited for convex polygons. Results are undefined if polygon is concave.</haxe_doc>
		</getCollider>
		<contains public="1" set="method" line="66" static="1">
			<f a="this:p:?isConvex" v="::false">
				<c path="Array"><x path="h2d.col.Polygon"/></c>
				<c path="h2d.col.Point"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ isConvex : false }</e></m></meta>
			<haxe_doc>Tests if Point `p` is inside any of the Polygon instances in Polygons.
		@param p The point to test against.
		@param isConvex Use simplified collision test suited for convex polygons. Results are undefined if polygon is concave.</haxe_doc>
		</contains>
		<optimize public="1" set="method" line="76" static="1">
			<f a="this:epsilon">
				<c path="Array"><x path="h2d.col.Polygon"/></c>
				<x path="Float"/>
				<x path="h2d.col.Polygons"/>
			</f>
			<haxe_doc>Optimizes all polygons and returns new Polygons instances. See [h2d.col.Polygon.optimize].</haxe_doc>
		</optimize>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h2d.col.Ray" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Ray.hx">
		<fromPoints public="1" get="inline" set="null" line="63" static="1">
			<f a="p1:p2">
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Ray"/>
			</f>
			<haxe_doc>Returns a new Ray starting at Point `p1` and pointing at Point `p2`.</haxe_doc>
		</fromPoints>
		<fromValues public="1" get="inline" set="null" line="76" static="1">
			<f a="x:y:dx:dy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="h2d.col.Ray"/>
			</f>
			<haxe_doc>Returns a new Ray at given position and direction.</haxe_doc>
		</fromValues>
		<px public="1">
			<x path="Float"/>
			<haxe_doc>X position of the ray start.</haxe_doc>
		</px>
		<py public="1">
			<x path="Float"/>
			<haxe_doc>Y position of the ray start.</haxe_doc>
		</py>
		<lx public="1">
			<x path="Float"/>
			<haxe_doc>X normal of the ray direction.</haxe_doc>
		</lx>
		<ly public="1">
			<x path="Float"/>
			<haxe_doc>Y normal of the ray direction.</haxe_doc>
		</ly>
		<side public="1" get="inline" set="null" line="27">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a positive value if Point `p` is on the right side of the Ray axis and negative if it's on the left.</haxe_doc>
		</side>
		<getPoint public="1" get="inline" set="null" line="34">
			<f a="distance">
				<x path="Float"/>
				<c path="h2d.col.Point"/>
			</f>
			<haxe_doc>Returns a new Point containing the Ray vector with specified length.</haxe_doc>
		</getPoint>
		<getPos public="1" get="inline" set="null" line="41">
			<f a=""><c path="h2d.col.Point"/></f>
			<haxe_doc>Returns new Point containing Ray starting position.</haxe_doc>
		</getPos>
		<getDir public="1" get="inline" set="null" line="48">
			<f a=""><c path="h2d.col.Point"/></f>
			<haxe_doc>Returns new Point containing Ray direction.</haxe_doc>
		</getDir>
		<normalize set="method" line="52"><f a=""><x path="Void"/></f></normalize>
		<new public="1" get="inline" set="null" line="21">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create a new Ray instance.</haxe_doc>
		</new>
		<haxe_doc>A raycast from the given position in a specified direction.</haxe_doc>
	</class>
	<class path="h2d.col.Segment" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Segment.hx">
		<x public="1">
			<x path="Float"/>
			<haxe_doc>X starting position of the Segment.

		Please use `Segment.setPoints` to modify this value.</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>Y starting position of the Segment.

		Please use `Segment.setPoints` to modify this value.</haxe_doc>
		</y>
		<dx public="1">
			<x path="Float"/>
			<haxe_doc>The delta-value of X end position of the Segment relative to starting position.

		Please use `Segment.setPoints` to modify this value.</haxe_doc>
		</dx>
		<dy public="1">
			<x path="Float"/>
			<haxe_doc>The delta-value of Y end position of the Segment relative to starting position.

		Please use `Segment.setPoints` to modify this value.</haxe_doc>
		</dy>
		<lenSq public="1">
			<x path="Float"/>
			<haxe_doc>Squared length of the segment.

		Please use `Segment.setPoints` to modify this value.</haxe_doc>
		</lenSq>
		<invLenSq public="1">
			<x path="Float"/>
			<haxe_doc>Inverse of the Segments squared length.

		Please use `Segment.setPoints` to modify this value.</haxe_doc>
		</invLenSq>
		<setPoints public="1" get="inline" set="null" line="57">
			<f a="p1:p2">
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets Segment starting position at Point `p1` and ending position at Point `p2`.</haxe_doc>
		</setPoints>
		<side public="1" get="inline" set="null" line="69">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a positive value if Point `p` is on the right side of the Segment axis and negative if it's on the left.</haxe_doc>
		</side>
		<distanceSq public="1" get="inline" set="null" line="76">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns squared distance to the Segment as an infinite line to the Point `p`.</haxe_doc>
		</distanceSq>
		<distance public="1" get="inline" set="null" line="97">
			<f a="p">
				<c path="h2d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns distance from the Segment as an infinite line to the Point `p`.</haxe_doc>
		</distance>
		<project public="1" get="inline" set="null" line="104">
			<f a="p">
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
			</f>
			<haxe_doc>Projects Point `p` onto Segment. Returns position of intersection between Segment and line perpendicular to it going through Point `p`.</haxe_doc>
		</project>
		<lineIntersection public="1" get="inline" set="null" line="123">
			<f a="r:?pt">
				<c path="h2d.col.Ray"/>
				<c path="h2d.col.Point"/>
				<x path="Null"><c path="h2d.col.Point"/></x>
			</f>
			<haxe_doc>Tests if Segments intersects given Ray `r`.
		@param pt Optional Point instance to which intersection point is written. If not provided, returns new Point instance.
		@returns A `Point` with intersection position or `null` if Segment and Ray do not intersect.</haxe_doc>
		</lineIntersection>
		<new public="1" get="inline" set="null" line="50">
			<f a="p1:p2">
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Segment starting from Point `p1` and ending at Point `p2`.</haxe_doc>
		</new>
		<haxe_doc>A 2D line segment.
	@see `h2d.Segments`</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="h2d.col.Segments" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Segments.hx">
		<from><icast><c path="Array"><c path="h2d.col.Segment"/></c></icast></from>
		<this><c path="Array"><c path="h2d.col.Segment"/></c></this>
		<to><icast><c path="Array"><c path="h2d.col.Segment"/></c></icast></to>
		<haxe_doc>An abstract over the list of `Segment`s. Alternative representation of a polygon.

	Segments must be connected to form a complete polygonal shape.
	Provides a more efficient distance calculus.

	@see `h2d.Polygon`</haxe_doc>
		<impl><class path="h2d.col._Segments.Segments_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Segments.hx" private="1" module="h2d.col.Segments" final="1">
	<segments public="1" get="accessor" set="null" static="1">
		<c path="Array"><c path="h2d.col.Segment"/></c>
		<haxe_doc>The underlying Array of segments.</haxe_doc>
	</segments>
	<get_segments get="inline" set="null" line="18" static="1"><f a="this">
	<c path="Array"><c path="h2d.col.Segment"/></c>
	<c path="Array"><c path="h2d.col.Segment"/></c>
</f></get_segments>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The amount of segments in the polygon.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="23" static="1"><f a="this">
	<c path="Array"><c path="h2d.col.Segment"/></c>
	<x path="Int"/>
</f></get_length>
	<iterator public="1" get="inline" set="null" line="26" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.Segment"/></c>
			<c path="hxd.impl.ArrayIterator_h2d_col_Segment"/>
		</f>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</iterator>
	<containsPoint public="1" set="method" line="37" static="1">
		<f a="this:p:isConvex">
			<c path="Array"><c path="h2d.col.Segment"/></c>
			<c path="h2d.col.Point"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Tests if Point `p` is inside this Segments.
		@param p The Point to test against.
		@param isConvex Use simplified collision test suited for convex polygons. Results are undefined if polygon is concave.

		**Note**: Currently only convex check is implemented and using non-convex test results in an exception.</haxe_doc>
	</containsPoint>
	<toPolygon public="1" set="method" line="51" static="1">
		<f a="this">
			<c path="Array"><c path="h2d.col.Segment"/></c>
			<x path="h2d.col.Polygon"/>
		</f>
		<haxe_doc>Converts this Segments to a Polygon.</haxe_doc>
	</toPolygon>
	<project public="1" set="method" line="58" static="1">
		<f a="this:p">
			<c path="Array"><c path="h2d.col.Segment"/></c>
			<c path="h2d.col.Point"/>
			<c path="h2d.col.Point"/>
		</f>
		<haxe_doc>Projects Point `p` onto closest Segment in Segments and returns new Point with projected position.</haxe_doc>
	</project>
	<distanceSq public="1" set="method" line="73" static="1">
		<f a="this:p">
			<c path="Array"><c path="h2d.col.Segment"/></c>
			<c path="h2d.col.Point"/>
			<x path="Float"/>
		</f>
		<haxe_doc>Returns squared distance from the Segments to the Point `p`.</haxe_doc>
	</distanceSq>
	<distance public="1" get="inline" set="null" line="85" static="1">
		<f a="this:p">
			<c path="Array"><c path="h2d.col.Segment"/></c>
			<c path="h2d.col.Point"/>
			<x path="Float"/>
		</f>
		<haxe_doc>Returns distance from the Segments to the Point `p`.</haxe_doc>
	</distance>
</class></impl>
	</abstract>
	<class path="h2d.col._Segments.Segments_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/col/Segments.hx" private="1" module="h2d.col.Segments" final="1">
		<segments public="1" get="accessor" set="null" static="1">
			<c path="Array"><c path="h2d.col.Segment"/></c>
			<haxe_doc>The underlying Array of segments.</haxe_doc>
		</segments>
		<get_segments get="inline" set="null" line="18" static="1"><f a="this">
	<c path="Array"><c path="h2d.col.Segment"/></c>
	<c path="Array"><c path="h2d.col.Segment"/></c>
</f></get_segments>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The amount of segments in the polygon.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="23" static="1"><f a="this">
	<c path="Array"><c path="h2d.col.Segment"/></c>
	<x path="Int"/>
</f></get_length>
		<iterator public="1" get="inline" set="null" line="26" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.Segment"/></c>
				<c path="hxd.impl.ArrayIterator_h2d_col_Segment"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</iterator>
		<containsPoint public="1" set="method" line="37" static="1">
			<f a="this:p:isConvex">
				<c path="Array"><c path="h2d.col.Segment"/></c>
				<c path="h2d.col.Point"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests if Point `p` is inside this Segments.
		@param p The Point to test against.
		@param isConvex Use simplified collision test suited for convex polygons. Results are undefined if polygon is concave.

		**Note**: Currently only convex check is implemented and using non-convex test results in an exception.</haxe_doc>
		</containsPoint>
		<toPolygon public="1" set="method" line="51" static="1">
			<f a="this">
				<c path="Array"><c path="h2d.col.Segment"/></c>
				<x path="h2d.col.Polygon"/>
			</f>
			<haxe_doc>Converts this Segments to a Polygon.</haxe_doc>
		</toPolygon>
		<project public="1" set="method" line="58" static="1">
			<f a="this:p">
				<c path="Array"><c path="h2d.col.Segment"/></c>
				<c path="h2d.col.Point"/>
				<c path="h2d.col.Point"/>
			</f>
			<haxe_doc>Projects Point `p` onto closest Segment in Segments and returns new Point with projected position.</haxe_doc>
		</project>
		<distanceSq public="1" set="method" line="73" static="1">
			<f a="this:p">
				<c path="Array"><c path="h2d.col.Segment"/></c>
				<c path="h2d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns squared distance from the Segments to the Point `p`.</haxe_doc>
		</distanceSq>
		<distance public="1" get="inline" set="null" line="85" static="1">
			<f a="this:p">
				<c path="Array"><c path="h2d.col.Segment"/></c>
				<c path="h2d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns distance from the Segments to the Point `p`.</haxe_doc>
		</distance>
	</class>
	<class path="h2d.filter.Filter" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h2d/filter/Filter.hx">
		<autoBounds public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
			<haxe_doc>When enabled, rendering bounds of the filter will be expanded by `Filter.boundsExtend` in all directions.
		Otherwise filter should provide custom bounds through `Filter.getBounds` call.  
		Default : true.</haxe_doc>
		</autoBounds>
		<boundsExtend public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
			<haxe_doc>Rendering texture boundaries extent. Increases the rendering area by twice the `Filter.boundsExtend` value.  
		Automatically applied to object bounds when `autoBounds = true` or `Filter.getBounds` is not overridden.  
		Does not affect boundaries when `autoBounds = true` and `boundsExtend` is less than 0.</haxe_doc>
		</boundsExtend>
		<smooth public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>When enabled, some filters will use bilinear filtering on temporary textures.  
		Does not affect the majority of filters.
		@see `AbstractMask`</haxe_doc>
		</smooth>
		<enable public="1" get="accessor" set="accessor" expr="true">
			<x path="Bool"/>
			<meta>
				<m n=":value"><e>true</e></m>
				<m n=":isVar"/>
			</meta>
			<haxe_doc>When filter is disabled, attached object will render as usual.</haxe_doc>
		</enable>
		<get_enable set="method" line="45"><f a=""><x path="Bool"/></f></get_enable>
		<set_enable set="method" line="46"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enable>
		<sync public="1" set="method" line="51">
			<f a="ctx:s">
				<c path="h2d.RenderContext"/>
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Used to sync data for rendering.</haxe_doc>
		</sync>
		<bind public="1" set="method" line="58">
			<f a="s">
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when filter is bound to an Object `s`.
		If Object was not yet allocated, method will be called when it's added to allocated Scene.</haxe_doc>
		</bind>
		<unbind public="1" set="method" line="65">
			<f a="s">
				<c path="h2d.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when filter was unbound from an Object `s`.
		Method won't be called if Object was not yet allocated.</haxe_doc>
		</unbind>
		<getBounds public="1" set="method" line="75">
			<f a="s:bounds">
				<c path="h2d.Object"/>
				<c path="h2d.col.Bounds"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Method should populate `bounds` with rendering boundaries of the Filter for Object `s`.
		Initial `bounds` contents are undefined and it's recommended to either clear them or call `s.getBounds(s, bounds)`.
		Only used when `Filter.autoBounds` is `false`.
		By default uses given Object bounds and extends them with `Filter.boundsExtend`.
		Compared to `autoBounds = true`, negative `boundsExtend` is still applied, causing rendering area to shrink.</haxe_doc>
		</getBounds>
		<draw public="1" set="method" line="86">
			<f a="ctx:input">
				<c path="h2d.RenderContext"/>
				<c path="h2d.Tile"/>
				<c path="h2d.Tile"/>
			</f>
			<haxe_doc>Renders the filter onto Texture in `input` Tile.</haxe_doc>
		</draw>
		<new set="method" line="42"><f a=""><x path="Void"/></f></new>
		<haxe_doc>The base filter class, you can extend it in order to define your own filters, although ShaderFilter will be the most straightforward way to define simple custom filter.

	Keep in mind that filters use internal Object resolution to render its content, hence scaling of the filtered object would not increase the rendering resolution.
	For example, 20x20px `Bitmap` with `scale = 2` will render onto 20x20 filter texture if filter is attached to it directly,
	but if filter is attached to the parent of that bitmap, filter will render 40x40 texture.  
	Another thing to be aware of, is that `Scene.scaleMode` does not affect filter resolution either,
	and upscaling contents with `scaleMode` would not upscale the resolution of filtered content.

	Filters limit their render area dictated by bound object boundaries, `Filter.autoBounds` and `Filter.boundsExtend` variables and `Filter.getBounds` method.
	See their respective docs for details.

	For optimization purposes, rendering boundaries are clipped by scene viewport and nothing will be rendered offscreen.</haxe_doc>
	</class>
	<enum path="h3d.BufferFlag" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/Buffer.hx" module="h3d.Buffer">
		<Dynamic><haxe_doc>Indicate that the buffer content will be often modified.</haxe_doc></Dynamic>
		<Triangles><haxe_doc>The buffer contains only triangles. Imply Managed. Make sure the position is aligned on 3 vertices multiples.</haxe_doc></Triangles>
		<Quads><haxe_doc>The buffer contains only quads. Imply Managed. Make sure the position is aligned on 4 vertices multiples.</haxe_doc></Quads>
		<Managed><haxe_doc>Will allocate the memory as part of an shared buffer pool, preventing a lot of small GPU buffers to be allocated.</haxe_doc></Managed>
		<RawFormat><haxe_doc>Directly map the buffer content to the shader inputs, without assuming [pos:vec3,normal:vec3,uv:vec2] default prefix.</haxe_doc></RawFormat>
		<NoAlloc><haxe_doc>Used internaly</haxe_doc></NoAlloc>
		<UniformBuffer><haxe_doc>Used for shader input buffer</haxe_doc></UniformBuffer>
		<LargeBuffer><haxe_doc><![CDATA[Use to allow to alloc buffers with >64K vertices (requires 32 bit indexes)]]></haxe_doc></LargeBuffer>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="h3d.Buffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/Buffer.hx">
		<GUID public="1" expr="0" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</GUID>
		<ofFloats public="1" set="method" line="143" static="1"><f a="v:stride:?flags">
	<x path="hxd.FloatBuffer"/>
	<x path="Int"/>
	<c path="Array"><e path="h3d.BufferFlag"/></c>
	<c path="h3d.Buffer"/>
</f></ofFloats>
		<ofSubFloats public="1" set="method" line="150" static="1"><f a="v:stride:vertices:?flags">
	<x path="hxd.FloatBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><e path="h3d.BufferFlag"/></c>
	<c path="h3d.Buffer"/>
</f></ofSubFloats>
		<id public="1"><x path="Int"/></id>
		<buffer public="1" set="null"><c path="h3d.impl.ManagedBuffer"/></buffer>
		<position public="1" set="null"><x path="Int"/></position>
		<vertices public="1" set="null"><x path="Int"/></vertices>
		<next public="1" set="null"><c path="h3d.Buffer"/></next>
		<flags public="1" set="null"><x path="haxe.EnumFlags"><e path="h3d.BufferFlag"/></x></flags>
		<isDisposed public="1" get="inline" set="null" line="72"><f a=""><x path="Bool"/></f></isDisposed>
		<dispose public="1" set="method" line="76"><f a=""><x path="Void"/></f></dispose>
		<totalVertices public="1" set="method" line="87">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the total number of vertices including the potential next buffers if it is split.</haxe_doc>
		</totalVertices>
		<uploadVector public="1" set="method" line="97">
			<f a="buf:bufPos:vertices:?startVertice" v=":::0">
				<x path="hxd.FloatBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ startVertice : 0 }</e></m></meta>
		</uploadVector>
		<uploadBytes public="1" set="method" line="114"><f a="data:dataPos:vertices">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadBytes>
		<readBytes public="1" set="method" line="126">
			<f a="bytes:bytesPosition:vertices:?startVertice" v=":::0">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ startVertice : 0 }</e></m></meta>
		</readBytes>
		<new public="1" set="method" line="52"><f a="vertices:stride:?flags">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><e path="h3d.BufferFlag"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.BufferOffset" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/Buffer.hx" module="h3d.Buffer">
		<buffer public="1"><c path="h3d.Buffer"/></buffer>
		<offset public="1"><x path="Int"/></offset>
		<next public="1"><c path="h3d.BufferOffset"/></next>
		<clone public="1" get="inline" set="null" line="180"><f a=""><c path="h3d.BufferOffset"/></f></clone>
		<dispose public="1" set="method" line="188"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="172"><f a="buffer:offset">
	<c path="h3d.Buffer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.Camera" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/Camera.hx">
		<zoom public="1"><x path="Float"/></zoom>
		<screenRatio public="1">
			<x path="Float"/>
			<haxe_doc>The screenRatio represents the W/H screen ratio.</haxe_doc>
		</screenRatio>
		<fovY public="1">
			<x path="Float"/>
			<haxe_doc>The vertical FieldOfView, in degrees.
		Usually cameras are using an horizontal FOV, but the value will change depending on the screen ratio.
		For instance a 4:3 screen will have a lower horizontal FOV than a 16:9 one, however the vertical FOV remains constant.
		Use setFovX to initialize fovY based on an horizontal FOV and an initial screen ratio.</haxe_doc>
		</fovY>
		<zNear public="1"><x path="Float"/></zNear>
		<zFar public="1"><x path="Float"/></zFar>
		<orthoBounds public="1">
			<c path="h3d.col.Bounds"/>
			<haxe_doc>Set orthographic bounds.</haxe_doc>
		</orthoBounds>
		<rightHanded public="1"><x path="Bool"/></rightHanded>
		<mproj public="1"><c path="h3d.Matrix"/></mproj>
		<mcam public="1"><c path="h3d.Matrix"/></mcam>
		<m public="1"><c path="h3d.Matrix"/></m>
		<pos public="1"><c path="h3d.Vector"/></pos>
		<up public="1"><c path="h3d.Vector"/></up>
		<target public="1"><c path="h3d.Vector"/></target>
		<viewX public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</viewX>
		<viewY public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</viewY>
		<follow public="1"><a>
	<target><c path="h3d.scene.Object"/></target>
	<pos><c path="h3d.scene.Object"/></pos>
</a></follow>
		<frustum public="1" set="null"><c path="h3d.col.Frustum"/></frustum>
		<minv><c path="h3d.Matrix"/></minv>
		<mcamInv><c path="h3d.Matrix"/></mcamInv>
		<mprojInv><c path="h3d.Matrix"/></mprojInv>
		<needInv><x path="Bool"/></needInv>
		<setFovX public="1" set="method" line="71">
			<f a="fovX:withRatio">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the vertical fov based on a given horizontal fov (in degrees) for a specified screen ratio.</haxe_doc>
		</setFovX>
		<getFovX public="1" set="method" line="79">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Calculate the current horizontal fov (in degrees).</haxe_doc>
		</getFovX>
		<clone public="1" set="method" line="86"><f a=""><c path="h3d.Camera"/></f></clone>
		<getInverseViewProj public="1" set="method" line="98">
			<f a=""><c path="h3d.Matrix"/></f>
			<haxe_doc>Returns the inverse of the camera matrix view and projection. Cache the result until the next update().</haxe_doc>
		</getInverseViewProj>
		<getInverseProj public="1" set="method" line="110">
			<f a=""><c path="h3d.Matrix"/></f>
			<haxe_doc>Returns the inverse of the camera matrix projection. Cache the result until the next update().</haxe_doc>
		</getInverseProj>
		<getInverseView public="1" set="method" line="123">
			<f a=""><c path="h3d.Matrix"/></f>
			<haxe_doc>Returns the inverse of the camera matrix view only. Cache the result until the next update().</haxe_doc>
		</getInverseView>
		<setCubeMap public="1" set="method" line="136">
			<f a="face:?position">
				<x path="Int"/>
				<c path="h3d.Vector"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Setup camera for cubemap rendering on the given face.</haxe_doc>
		</setCubeMap>
		<unproject public="1" set="method" line="158">
			<f a="screenX:screenY:camZ">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="h3d.Vector"/>
			</f>
			<haxe_doc>Transforms a 2D screen position into the 3D one according to the current camera.
		The screenX and screenY values must be in the [-1,1] range.
		The camZ value represents the normalized z in the frustum in the [0,1] range.
		[unproject] can be used to get the ray from the camera position to a given screen position by using two different camZ values.
		For instance the 3D ray between unproject(0,0,0) and unproject(0,0,1) is the center axis of the 3D frustum.</haxe_doc>
		</unproject>
		<rayFromScreen public="1" set="method" line="164">
			<f a="pixelX:pixelY:?sceneWidth:?sceneHeight" v="::-1:-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="h3d.col.Ray"/>
			</f>
			<meta><m n=":value"><e>{ sceneHeight : -1, sceneWidth : -1 }</e></m></meta>
		</rayFromScreen>
		<update public="1" set="method" line="173"><f a=""><x path="Void"/></f></update>
		<getFrustumCorners public="1" set="method" line="206">
			<f a="?zMax:?zMin" v="1.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><c path="h3d.Vector"/></c>
			</f>
			<meta><m n=":value"><e>{ zMin : 0., zMax : 1. }</e></m></meta>
		</getFrustumCorners>
		<lostUp public="1" set="method" line="213"><f a=""><x path="Bool"/></f></lostUp>
		<getViewDirection public="1" set="method" line="219">
			<f a="dx:dy:?dz" v="::0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="h3d.col.Point"/>
			</f>
			<meta><m n=":value"><e>{ dz : 0. }</e></m></meta>
		</getViewDirection>
		<movePosAxis public="1" set="method" line="226">
			<f a="dx:dy:?dz" v="::0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ dz : 0. }</e></m></meta>
		</movePosAxis>
		<moveTargetAxis public="1" set="method" line="234">
			<f a="dx:dy:?dz" v="::0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ dz : 0. }</e></m></meta>
		</moveTargetAxis>
		<forward public="1" set="method" line="242">
			<f a="?speed" v="1.">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ speed : 1. }</e></m></meta>
		</forward>
		<backward public="1" set="method" line="251">
			<f a="?speed" v="1.">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ speed : 1. }</e></m></meta>
		</backward>
		<makeCameraMatrix set="method" line="260"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></makeCameraMatrix>
		<setTransform public="1" set="method" line="293"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></setTransform>
		<makeFrustumMatrix set="method" line="298"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></makeFrustumMatrix>
		<project public="1" set="method" line="356">
			<f a="x:y:z:screenWidth:screenHeight:?snapToPixel" v=":::::true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="h3d.Vector"/>
			</f>
			<meta><m n=":value"><e>{ snapToPixel : true }</e></m></meta>
			<haxe_doc>Project a 3D point into the 2D screen. Make sure to update() the camera if it's been moved before using that.</haxe_doc>
		</project>
		<load public="1" set="method" line="368"><f a="cam">
	<c path="h3d.Camera"/>
	<x path="Void"/>
</f></load>
		<new public="1" set="method" line="51">
			<f a="?fovY:?zoom:?screenRatio:?zNear:?zFar:?rightHanded" v="25.:1.:1.333333:0.02:4000.:false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ rightHanded : false, zFar : 4000., zNear : 0.02, screenRatio : 1.333333, zoom : 1., fovY : 25. }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d._Engine.TargetTmp" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/Engine.hx" private="1" module="h3d.Engine">
		<t public="1"><c path="h3d.mat.Texture"/></t>
		<textures public="1"><c path="Array"><c path="h3d.mat.Texture"/></c></textures>
		<next public="1"><c path="h3d._Engine.TargetTmp"/></next>
		<layer public="1"><x path="Int"/></layer>
		<mipLevel public="1"><x path="Int"/></mipLevel>
		<new public="1" set="method" line="10"><f a="t:n:l:m">
	<c path="h3d.mat.Texture"/>
	<c path="h3d._Engine.TargetTmp"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.Engine" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/Engine.hx">
		<SOFTWARE_DRIVER public="1" expr="false" line="57" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</SOFTWARE_DRIVER>
		<ANTIALIASING public="1" expr="0" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ANTIALIASING>
		<CURRENT expr="null" line="88" static="1">
			<c path="h3d.Engine"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</CURRENT>
		<getCurrent public="1" get="inline" set="null" line="95" static="1"><f a=""><c path="h3d.Engine"/></f></getCurrent>
		<driver public="1" set="null"><c path="h3d.impl.Driver"/></driver>
		<mem public="1" set="null"><c path="h3d.impl.MemoryManager"/></mem>
		<hardware public="1" set="null"><x path="Bool"/></hardware>
		<width public="1" set="null"><x path="Int"/></width>
		<height public="1" set="null"><x path="Int"/></height>
		<debug public="1" set="accessor"><x path="Bool"/></debug>
		<drawTriangles public="1" set="null"><x path="Int"/></drawTriangles>
		<drawCalls public="1" set="null"><x path="Int"/></drawCalls>
		<shaderSwitches public="1" set="null"><x path="Int"/></shaderSwitches>
		<backgroundColor public="1" expr="0xFF000000">
			<x path="Null"><x path="Int"/></x>
			<meta><m n=":value"><e>0xFF000000</e></m></meta>
		</backgroundColor>
		<autoResize public="1"><x path="Bool"/></autoResize>
		<fullScreen public="1" set="accessor"><x path="Bool"/></fullScreen>
		<fps public="1" get="accessor" set="null"><x path="Float"/></fps>
		<realFps><x path="Float"/></realFps>
		<lastTime><x path="Float"/></lastTime>
		<antiAlias><x path="Int"/></antiAlias>
		<tmpVector expr="new h3d.Vector()">
			<c path="h3d.Vector"/>
			<meta><m n=":value"><e>new h3d.Vector()</e></m></meta>
		</tmpVector>
		<window><c path="hxd.Window"/></window>
		<targetTmp><c path="h3d._Engine.TargetTmp"/></targetTmp>
		<targetStack><c path="h3d._Engine.TargetTmp"/></targetStack>
		<currentTargetTex><c path="h3d.mat.Texture"/></currentTargetTex>
		<currentTargetLayer><x path="Int"/></currentTargetLayer>
		<currentTargetMip><x path="Int"/></currentTargetMip>
		<needFlushTarget><x path="Bool"/></needFlushTarget>
		<nullTexture><c path="h3d.mat.Texture"/></nullTexture>
		<textureColorCache expr="new Map&lt;Int,h3d.mat.Texture&gt;()">
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<c path="h3d.mat.Texture"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<Int,h3d.mat.Texture>()]]></e></m></meta>
		</textureColorCache>
		<inRender expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</inRender>
		<ready public="1" set="null" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</ready>
		<resCache expr="new Map&lt;{ },Dynamic&gt;()">
			<x path="haxe.ds.Map">
				<a/>
				<d/>
			</x>
			<meta>
				<m n=":value"><e><![CDATA[new Map<{ },Dynamic>()]]></e></m>
				<m n=":allow"><e>hxd.res</e></m>
			</meta>
		</resCache>
		<setDriver public="1" set="method" line="90"><f a="d">
	<c path="h3d.impl.Driver"/>
	<x path="Void"/>
</f></setDriver>
		<setCurrent public="1" get="inline" set="null" line="99"><f a=""><x path="Void"/></f></setCurrent>
		<init public="1" set="method" line="103"><f a=""><x path="Void"/></f></init>
		<driverName public="1" set="method" line="107">
			<f a="?details" v="false">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ details : false }</e></m></meta>
		</driverName>
		<selectShader public="1" set="method" line="111"><f a="shader">
	<c path="hxsl.RuntimeShader"/>
	<x path="Void"/>
</f></selectShader>
		<selectMaterial public="1" set="method" line="117"><f a="pass">
	<c path="h3d.mat.Pass"/>
	<x path="Void"/>
</f></selectMaterial>
		<uploadShaderBuffers public="1" set="method" line="121"><f a="buffers:which">
	<c path="h3d.shader.Buffers"/>
	<x path="h3d.shader.BufferKind"/>
	<x path="Void"/>
</f></uploadShaderBuffers>
		<selectBuffer set="method" line="125"><f a="buf">
	<c path="h3d.Buffer"/>
	<x path="Bool"/>
</f></selectBuffer>
		<renderTriBuffer public="1" get="inline" set="null" line="133">
			<f a="b:?start:?max" v=":0:-1">
				<c path="h3d.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ max : -1, start : 0 }</e></m></meta>
		</renderTriBuffer>
		<renderQuadBuffer public="1" get="inline" set="null" line="137">
			<f a="b:?start:?max" v=":0:-1">
				<c path="h3d.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ max : -1, start : 0 }</e></m></meta>
		</renderQuadBuffer>
		<renderBuffer set="method" line="142">
			<f a="b:indexes:vertPerTri:?startTri:?drawTri" v=":::0:-1">
				<c path="h3d.Buffer"/>
				<c path="h3d.Indexes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ drawTri : -1, startTri : 0 }</e></m></meta>
		</renderBuffer>
		<renderIndexed public="1" set="method" line="177">
			<f a="b:indexes:?startTri:?drawTri" v="::0:-1">
				<c path="h3d.Buffer"/>
				<c path="h3d.Indexes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ drawTri : -1, startTri : 0 }</e></m></meta>
		</renderIndexed>
		<renderMultiBuffers public="1" set="method" line="192">
			<f a="buffers:indexes:?startTri:?drawTri" v="::0:-1">
				<c path="h3d.BufferOffset"/>
				<c path="h3d.Indexes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ drawTri : -1, startTri : 0 }</e></m></meta>
		</renderMultiBuffers>
		<renderInstanced public="1" set="method" line="208"><f a="buffers:indexes:commands">
	<c path="h3d.BufferOffset"/>
	<c path="h3d.Indexes"/>
	<c path="h3d.impl.InstanceBuffer"/>
	<x path="Void"/>
</f></renderInstanced>
		<set_debug set="method" line="220"><f a="d">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_debug>
		<onCreate set="method" line="226"><f a="disposed">
	<x path="Bool"/>
	<x path="Void"/>
</f></onCreate>
		<onContextLost public="1" set="dynamic" line="251"><f a=""><x path="Void"/></f></onContextLost>
		<onReady public="1" set="dynamic" line="254"><f a=""><x path="Void"/></f></onReady>
		<onWindowResize set="method" line="257"><f a=""><x path="Void"/></f></onWindowResize>
		<set_fullScreen set="method" line="266"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_fullScreen>
		<onResized public="1" set="dynamic" line="274"><f a=""><x path="Void"/></f></onResized>
		<resize public="1" set="method" line="277"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<begin public="1" set="method" line="286"><f a=""><x path="Bool"/></f></begin>
		<hasFeature public="1" set="method" line="304"><f a="f">
	<e path="h3d.impl.Feature"/>
	<x path="Bool"/>
</f></hasFeature>
		<end public="1" set="method" line="308"><f a=""><x path="Void"/></f></end>
		<getCurrentTarget public="1" set="method" line="313"><f a=""><x path="Null"><c path="h3d.mat.Texture"/></x></f></getCurrentTarget>
		<pushTarget public="1" set="method" line="317">
			<f a="tex:?layer:?mipLevel" v=":0:0">
				<c path="h3d.mat.Texture"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mipLevel : 0, layer : 0 }</e></m></meta>
		</pushTarget>
		<updateNeedFlush set="method" line="332"><f a=""><x path="Void"/></f></updateNeedFlush>
		<pushTargets public="1" set="method" line="340"><f a="textures">
	<c path="Array"><c path="h3d.mat.Texture"/></c>
	<x path="Void"/>
</f></pushTargets>
		<popTarget public="1" set="method" line="346"><f a=""><x path="Void"/></f></popTarget>
		<flushTarget get="inline" set="null" line="359"><f a=""><x path="Void"/></f></flushTarget>
		<doFlushTarget set="method" line="363"><f a=""><x path="Void"/></f></doFlushTarget>
		<clearF public="1" set="method" line="380"><f a="color:?depth:?stencil">
	<c path="h3d.Vector"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearF>
		<clear public="1" set="method" line="385"><f a="?color:?depth:?stencil">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<setRenderZone public="1" set="method" line="396">
			<f a="?x:?y:?width:?height" v="0:0:-1:-1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : -1, width : -1, y : 0, x : 0 }</e></m></meta>
			<haxe_doc>* Sets up a scissored zone to eliminate pixels outside the given range.
	 * Call with no parameters to reset to full viewport.</haxe_doc>
		</setRenderZone>
		<render public="1" set="method" line="401"><f a="obj">
	<a><render set="method"><f a="engine">
	<c path="h3d.Engine"/>
	<x path="Void"/>
</f></render></a>
	<x path="Bool"/>
</f></render>
		<dispose public="1" set="method" line="418"><f a=""><x path="Void"/></f></dispose>
		<get_fps set="method" line="423"><f a=""><x path="Float"/></f></get_fps>
		<new set="method" line="61">
			<f a=""><x path="Void"/></f>
			<meta><m n=":access"><e>hxd.Window</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.Indexes" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/Indexes.hx">
		<alloc public="1" set="method" line="46" static="1">
			<f a="i:?startPos:?length" v=":0:-1">
				<x path="hxd.IndexBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="h3d.Indexes"/>
			</f>
			<meta><m n=":value"><e>{ length : -1, startPos : 0 }</e></m></meta>
		</alloc>
		<mem><c path="h3d.impl.MemoryManager"/></mem>
		<ibuf><t path="h3d.impl.IndexBuffer"/></ibuf>
		<is32 public="1" set="null"><x path="Bool"/></is32>
		<count public="1" set="null"><x path="Int"/></count>
		<isDisposed public="1" set="method" line="25"><f a=""><x path="Bool"/></f></isDisposed>
		<upload public="1" set="method" line="29">
			<f a="indexes:pos:count:?bufferPos" v=":::0">
				<x path="hxd.IndexBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ bufferPos : 0 }</e></m></meta>
		</upload>
		<uploadBytes public="1" set="method" line="33"><f a="bytes:dataPos:indices">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadBytes>
		<readBytes public="1" set="method" line="37">
			<f a="bytes:bytesPosition:indices:?startIndice" v=":::0">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ startIndice : 0 }</e></m></meta>
		</readBytes>
		<dispose public="1" set="method" line="41"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="15">
			<f a="count:?is32" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ is32 : false }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>h3d.impl.MemoryManager</e></m>
			<m n=":allow"><e>h3d.Engine</e></m>
		</meta>
	</class>
	<typedef path="h3d.ColorAdjust" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/Matrix.hx" module="h3d.Matrix"><a>
	<saturation>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</saturation>
	<lightness>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</lightness>
	<hue>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</hue>
	<gain>
		<x path="Null"><a>
	<color><x path="Int"/></color>
	<alpha><x path="Float"/></alpha>
</a></x>
		<meta><m n=":optional"/></meta>
	</gain>
	<contrast>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</contrast>
</a></typedef>
	<class path="h3d.Matrix" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/Matrix.hx">
		<tmp expr="new Matrix()" line="15" static="1">
			<c path="h3d.Matrix"/>
			<meta><m n=":value"><e>new Matrix()</e></m></meta>
		</tmp>
		<lumR get="inline" set="null" expr="0.212671" line="613" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.212671</e></m></meta>
		</lumR>
		<lumG get="inline" set="null" expr="0.71516" line="614" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.71516</e></m></meta>
		</lumG>
		<lumB get="inline" set="null" expr="0.072169" line="615" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.072169</e></m></meta>
		</lumB>
		<SQ13 get="inline" set="null" expr="0.57735026918962576450914878050196" line="617" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.57735026918962576450914878050196</e></m></meta>
		</SQ13>
		<I public="1" set="method" line="789" static="1"><f a=""><c path="h3d.Matrix"/></f></I>
		<L public="1" set="method" line="795" static="1"><f a="a">
	<c path="Array"><x path="Float"/></c>
	<c path="h3d.Matrix"/>
</f></L>
		<T public="1" set="method" line="801" static="1">
			<f a="?x:?y:?z" v="0.:0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="h3d.Matrix"/>
			</f>
			<meta><m n=":value"><e>{ z : 0., y : 0., x : 0. }</e></m></meta>
		</T>
		<R public="1" set="method" line="807" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="h3d.Matrix"/>
</f></R>
		<S public="1" set="method" line="813" static="1">
			<f a="?x:?y:?z" v="1.:1.:1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="h3d.Matrix"/>
			</f>
			<meta><m n=":value"><e>{ z : 1.0, y : 1., x : 1. }</e></m></meta>
		</S>
		<lookAtX public="1" set="method" line="822" static="1">
			<f a="dir:?up:?m">
				<c path="h3d.Vector"/>
				<c path="h3d.Vector"/>
				<c path="h3d.Matrix"/>
				<x path="Null"><c path="h3d.Matrix"/></x>
			</f>
			<haxe_doc>Build a rotation Matrix so the X axis will look at the given direction, and the Z axis will be the Up vector ([0,0,1] by default)</haxe_doc>
		</lookAtX>
		<_11 public="1"><x path="Float"/></_11>
		<_12 public="1"><x path="Float"/></_12>
		<_13 public="1"><x path="Float"/></_13>
		<_14 public="1"><x path="Float"/></_14>
		<_21 public="1"><x path="Float"/></_21>
		<_22 public="1"><x path="Float"/></_22>
		<_23 public="1"><x path="Float"/></_23>
		<_24 public="1"><x path="Float"/></_24>
		<_31 public="1"><x path="Float"/></_31>
		<_32 public="1"><x path="Float"/></_32>
		<_33 public="1"><x path="Float"/></_33>
		<_34 public="1"><x path="Float"/></_34>
		<_41 public="1"><x path="Float"/></_41>
		<_42 public="1"><x path="Float"/></_42>
		<_43 public="1"><x path="Float"/></_43>
		<_44 public="1"><x path="Float"/></_44>
		<tx public="1" get="accessor" set="accessor"><x path="Float"/></tx>
		<ty public="1" get="accessor" set="accessor"><x path="Float"/></ty>
		<tz public="1" get="accessor" set="accessor"><x path="Float"/></tz>
		<get_tx get="inline" set="null" line="41"><f a=""><x path="Float"/></f></get_tx>
		<get_ty get="inline" set="null" line="42"><f a=""><x path="Float"/></f></get_ty>
		<get_tz get="inline" set="null" line="43"><f a=""><x path="Float"/></f></get_tz>
		<set_tx get="inline" set="null" line="44"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_tx>
		<set_ty get="inline" set="null" line="45"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_ty>
		<set_tz get="inline" set="null" line="46"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_tz>
		<equal public="1" set="method" line="48"><f a="other">
	<c path="h3d.Matrix"/>
	<x path="Bool"/>
</f></equal>
		<zero public="1" set="method" line="55"><f a=""><x path="Void"/></f></zero>
		<identity public="1" set="method" line="62"><f a=""><x path="Void"/></f></identity>
		<isIdentity public="1" set="method" line="69"><f a=""><x path="Bool"/></f></isIdentity>
		<isIdentityEpsilon public="1" set="method" line="83"><f a="e">
	<x path="Float"/>
	<x path="Bool"/>
</f></isIdentityEpsilon>
		<initRotationX public="1" set="method" line="97"><f a="a">
	<x path="Float"/>
	<x path="Void"/>
</f></initRotationX>
		<initRotationY public="1" set="method" line="106"><f a="a">
	<x path="Float"/>
	<x path="Void"/>
</f></initRotationY>
		<initRotationZ public="1" set="method" line="115"><f a="a">
	<x path="Float"/>
	<x path="Void"/>
</f></initRotationZ>
		<initTranslation public="1" set="method" line="124">
			<f a="?x:?y:?z" v="0.:0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ z : 0., y : 0., x : 0. }</e></m></meta>
		</initTranslation>
		<initScale public="1" set="method" line="131">
			<f a="?x:?y:?z" v="1.:1.:1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ z : 1., y : 1., x : 1. }</e></m></meta>
		</initScale>
		<initRotationAxis public="1" set="method" line="138"><f a="axis:angle">
	<c path="h3d.Vector"/>
	<x path="Float"/>
	<x path="Void"/>
</f></initRotationAxis>
		<initRotation public="1" set="method" line="163"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></initRotation>
		<translate public="1" set="method" line="190">
			<f a="?x:?y:?z" v="0.:0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ z : 0., y : 0., x : 0. }</e></m></meta>
		</translate>
		<scale public="1" set="method" line="205">
			<f a="?x:?y:?z" v="1.:1.:1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ z : 1., y : 1., x : 1. }</e></m></meta>
		</scale>
		<rotate public="1" set="method" line="220"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateAxis public="1" set="method" line="226"><f a="axis:angle">
	<c path="h3d.Vector"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateAxis>
		<getPosition public="1" get="inline" set="null" line="232"><f a="?v">
	<c path="h3d.Vector"/>
	<x path="Null"><c path="h3d.Vector"/></x>
</f></getPosition>
		<setPosition public="1" get="inline" set="null" line="238"><f a="v">
	<c path="h3d.Vector"/>
	<x path="Void"/>
</f></setPosition>
		<prependTranslation public="1" set="method" line="245">
			<f a="?x:?y:?z" v="0.:0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ z : 0., y : 0., x : 0. }</e></m></meta>
		</prependTranslation>
		<getScale public="1" get="inline" set="null" line="256"><f a="?v">
	<c path="h3d.Vector"/>
	<x path="Null"><c path="h3d.Vector"/></x>
</f></getScale>
		<prependRotation public="1" set="method" line="270"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependRotation>
		<prependRotationAxis public="1" set="method" line="276"><f a="axis:angle">
	<c path="h3d.Vector"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependRotationAxis>
		<prependScale public="1" set="method" line="282">
			<f a="?sx:?sy:?sz" v="1.:1.:1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sz : 1., sy : 1., sx : 1. }</e></m></meta>
		</prependScale>
		<multiply3x4 public="1" set="method" line="289">
			<f a="a:b">
				<c path="h3d.Matrix"/>
				<c path="h3d.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noDebug"/></meta>
		</multiply3x4>
		<multiply3x4inline public="1" get="inline" set="null" line="293"><f a="a:b">
	<c path="h3d.Matrix"/>
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></multiply3x4inline>
		<multiply public="1" set="method" line="324"><f a="a:b">
	<c path="h3d.Matrix"/>
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></multiply>
		<multiplyValue public="1" set="method" line="355"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></multiplyValue>
		<invert public="1" get="inline" set="null" line="374"><f a=""><x path="Void"/></f></invert>
		<getInverse public="1" set="method" line="378"><f a="?m">
	<c path="h3d.Matrix"/>
	<x path="Null"><c path="h3d.Matrix"/></x>
</f></getInverse>
		<getDeterminant public="1" get="inline" set="null" line="384"><f a=""><x path="Float"/></f></getDeterminant>
		<inverse3x4 public="1" set="method" line="388"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></inverse3x4>
		<initInverse public="1" set="method" line="422"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></initInverse>
		<initInverse3x3 public="1" set="method" line="471"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></initInverse3x3>
		<front public="1" get="inline" set="null" line="511"><f a=""><c path="h3d.Vector"/></f></front>
		<right public="1" get="inline" set="null" line="517"><f a=""><c path="h3d.Vector"/></f></right>
		<up public="1" get="inline" set="null" line="523"><f a=""><c path="h3d.Vector"/></f></up>
		<transpose public="1" set="method" line="529"><f a=""><x path="Void"/></f></transpose>
		<clone public="1" set="method" line="539"><f a=""><c path="h3d.Matrix"/></f></clone>
		<load public="1" set="method" line="548"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></load>
		<loadValues public="1" set="method" line="555"><f a="a">
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></loadValues>
		<getFloats public="1" set="method" line="562"><f a=""><c path="Array"><x path="Float"/></c></f></getFloats>
		<getDirection public="1" set="method" line="566"><f a=""><c path="h3d.Vector"/></f></getDirection>
		<getEulerAngles public="1" set="method" line="576">
			<f a=""><c path="h3d.Vector"/></f>
			<haxe_doc>Extracts Euler rotation angles from rotation matrix</haxe_doc>
		</getEulerAngles>
		<toString public="1" set="method" line="602"><f a=""><c path="String"/></f></toString>
		<colorHue public="1" set="method" line="618"><f a="hue">
	<x path="Float"/>
	<x path="Void"/>
</f></colorHue>
		<colorSaturate public="1" set="method" line="644"><f a="sat">
	<x path="Float"/>
	<x path="Void"/>
</f></colorSaturate>
		<colorContrast public="1" set="method" line="666"><f a="contrast">
	<x path="Float"/>
	<x path="Void"/>
</f></colorContrast>
		<colorLightness public="1" set="method" line="684"><f a="lightness">
	<x path="Float"/>
	<x path="Void"/>
</f></colorLightness>
		<colorGain public="1" set="method" line="690"><f a="color:alpha">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></colorGain>
		<colorBits public="1" set="method" line="708"><f a="bits:blend">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></colorBits>
		<colorAdd public="1" get="inline" set="null" line="756"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></colorAdd>
		<colorSet public="1" get="inline" set="null" line="762">
			<f a="c:?alpha" v=":1.">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1. }</e></m></meta>
		</colorSet>
		<adjustColor public="1" set="method" line="768"><f a="col">
	<t path="h3d.ColorAdjust"/>
	<x path="Void"/>
</f></adjustColor>
		<toMatrix2D public="1" get="inline" set="null" line="776"><f a="?m">
	<c path="h2d.col.Matrix"/>
	<x path="Null"><c path="h2d.col.Matrix"/></x>
</f></toMatrix2D>
		<new public="1" set="method" line="38"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="h3d.Quat" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/Quat.hx">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<w public="1"><x path="Float"/></w>
		<set public="1" get="inline" set="null" line="19"><f a="x:y:z:w">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></set>
		<identity public="1" get="inline" set="null" line="26"><f a=""><x path="Void"/></f></identity>
		<lengthSq public="1" get="inline" set="null" line="31"><f a=""><x path="Float"/></f></lengthSq>
		<length public="1" get="inline" set="null" line="35"><f a=""><x path="Float"/></f></length>
		<load public="1" get="inline" set="null" line="39"><f a="q">
	<c path="h3d.Quat"/>
	<x path="Void"/>
</f></load>
		<clone public="1" set="method" line="46"><f a=""><c path="h3d.Quat"/></f></clone>
		<initMoveTo public="1" set="method" line="50"><f a="from:to">
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
	<x path="Void"/>
</f></initMoveTo>
		<initDirection public="1" set="method" line="66"><f a="dir">
	<c path="h3d.Vector"/>
	<x path="Void"/>
</f></initDirection>
		<initRotateAxis public="1" set="method" line="108"><f a="x:y:z:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></initRotateAxis>
		<initRotateMatrix public="1" set="method" line="118"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></initRotateMatrix>
		<normalize public="1" set="method" line="151"><f a=""><x path="Void"/></f></normalize>
		<initRotation public="1" set="method" line="165"><f a="ax:ay:az">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></initRotation>
		<multiply public="1" set="method" line="180"><f a="q1:q2">
	<c path="h3d.Quat"/>
	<c path="h3d.Quat"/>
	<x path="Void"/>
</f></multiply>
		<toEuler public="1" set="method" line="191"><f a=""><c path="h3d.Vector"/></f></toEuler>
		<lerp public="1" get="inline" set="null" line="195">
			<f a="q1:q2:v:?nearest" v=":::false">
				<c path="h3d.Quat"/>
				<c path="h3d.Quat"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ nearest : false }</e></m></meta>
		</lerp>
		<slerp public="1" set="method" line="209"><f a="q1:q2:v">
	<c path="h3d.Quat"/>
	<c path="h3d.Quat"/>
	<x path="Float"/>
	<x path="Void"/>
</f></slerp>
		<conjugate public="1" get="inline" set="null" line="232"><f a=""><x path="Void"/></f></conjugate>
		<negate public="1" get="inline" set="null" line="241">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Negate the quaternion: this will not change the actual angle, use `conjugate` for that.</haxe_doc>
		</negate>
		<dot public="1" get="inline" set="null" line="248"><f a="q">
	<c path="h3d.Quat"/>
	<x path="Float"/>
</f></dot>
		<getDirection public="1" get="inline" set="null" line="252"><f a=""><c path="h3d.Vector"/></f></getDirection>
		<toMatrix public="1" set="method" line="259">
			<f a="?m">
				<c path="h3d.Matrix"/>
				<x path="Null"><c path="h3d.Matrix"/></x>
			</f>
			<haxe_doc>Save to a Left-Handed matrix</haxe_doc>
		</toMatrix>
		<toString public="1" set="method" line="289"><f a=""><c path="String"/></f></toString>
		<new public="1" get="inline" set="null" line="12">
			<f a="?x:?y:?z:?w" v="0.:0.:0.:1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1., z : 0., y : 0., x : 0. }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="h3d.Vector" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/Vector.hx">
		<fromColor public="1" get="inline" set="null" line="279" static="1">
			<f a="c:?scale" v=":1.0">
				<x path="Int"/>
				<x path="Float"/>
				<c path="h3d.Vector"/>
			</f>
			<meta><m n=":value"><e>{ scale : 1.0 }</e></m></meta>
		</fromColor>
		<fromArray public="1" get="inline" set="null" line="284" static="1"><f a="a">
	<c path="Array"><x path="Float"/></c>
	<c path="h3d.Vector"/>
</f></fromArray>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<w public="1"><x path="Float"/></w>
		<distance public="1" get="inline" set="null" line="23"><f a="v">
	<c path="h3d.Vector"/>
	<x path="Float"/>
</f></distance>
		<distanceSq public="1" get="inline" set="null" line="27"><f a="v">
	<c path="h3d.Vector"/>
	<x path="Float"/>
</f></distanceSq>
		<sub public="1" get="inline" set="null" line="34"><f a="v">
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
</f></sub>
		<add public="1" get="inline" set="null" line="38"><f a="v">
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
</f></add>
		<multiply public="1" get="inline" set="null" line="42"><f a="v">
	<x path="Float"/>
	<c path="h3d.Vector"/>
</f></multiply>
		<equals public="1" get="inline" set="null" line="47"><f a="v">
	<c path="h3d.Vector"/>
	<x path="Bool"/>
</f></equals>
		<cross public="1" get="inline" set="null" line="51"><f a="v">
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
</f></cross>
		<dot public="1" get="inline" set="null" line="56"><f a="v">
	<c path="h3d.Vector"/>
	<x path="Float"/>
</f></dot>
		<lengthSq public="1" get="inline" set="null" line="60"><f a=""><x path="Float"/></f></lengthSq>
		<length public="1" get="inline" set="null" line="64"><f a=""><x path="Float"/></f></length>
		<normalize public="1" get="inline" set="null" line="68"><f a=""><x path="Void"/></f></normalize>
		<normalized public="1" get="inline" set="null" line="76"><f a=""><c path="h3d.Vector"/></f></normalized>
		<set public="1" get="inline" set="null" line="82">
			<f a="?x:?y:?z:?w" v="0.:0.:0.:1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1., z : 0., y : 0., x : 0. }</e></m></meta>
		</set>
		<load public="1" get="inline" set="null" line="89"><f a="v">
	<c path="h3d.Vector"/>
	<x path="Void"/>
</f></load>
		<scale public="1" get="inline" set="null" line="96"><f a="f">
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<lerp public="1" get="inline" set="null" line="102"><f a="v1:v2:k">
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lerp>
		<transform public="1" get="inline" set="null" line="109"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transform>
		<transformed public="1" get="inline" set="null" line="120"><f a="m">
	<c path="h3d.Matrix"/>
	<c path="h3d.Vector"/>
</f></transformed>
		<transform3x4 public="1" get="inline" set="null" line="128"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transform3x4>
		<transformed3x4 public="1" get="inline" set="null" line="137"><f a="m">
	<c path="h3d.Matrix"/>
	<c path="h3d.Vector"/>
</f></transformed3x4>
		<transform3x3 public="1" get="inline" set="null" line="144"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transform3x3>
		<transformed3x3 public="1" get="inline" set="null" line="153"><f a="m">
	<c path="h3d.Matrix"/>
	<c path="h3d.Vector"/>
</f></transformed3x3>
		<clone public="1" get="inline" set="null" line="160"><f a=""><c path="h3d.Vector"/></f></clone>
		<toPoint public="1" get="inline" set="null" line="164"><f a=""><c path="h3d.col.Point"/></f></toPoint>
		<toString public="1" set="method" line="168"><f a=""><c path="String"/></f></toString>
		<reflect public="1" get="inline" set="null" line="174"><f a="n">
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
</f></reflect>
		<dot4 public="1" get="inline" set="null" line="179"><f a="v">
	<c path="h3d.Vector"/>
	<x path="Float"/>
</f></dot4>
		<project public="1" get="inline" set="null" line="183"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></project>
		<r public="1" get="accessor" set="accessor"><x path="Float"/></r>
		<g public="1" get="accessor" set="accessor"><x path="Float"/></g>
		<b public="1" get="accessor" set="accessor"><x path="Float"/></b>
		<a public="1" get="accessor" set="accessor"><x path="Float"/></a>
		<get_r get="inline" set="null" line="201"><f a=""><x path="Float"/></f></get_r>
		<get_g get="inline" set="null" line="202"><f a=""><x path="Float"/></f></get_g>
		<get_b get="inline" set="null" line="203"><f a=""><x path="Float"/></f></get_b>
		<get_a get="inline" set="null" line="204"><f a=""><x path="Float"/></f></get_a>
		<set_r get="inline" set="null" line="205"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_r>
		<set_g get="inline" set="null" line="206"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_g>
		<set_b get="inline" set="null" line="207"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_b>
		<set_a get="inline" set="null" line="208"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_a>
		<setColor public="1" get="inline" set="null" line="210"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></setColor>
		<makeColor public="1" set="method" line="217">
			<f a="hue:?saturation:?brightness" v=":1.:0.5">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ brightness : 0.5, saturation : 1. }</e></m></meta>
		</makeColor>
		<toColor public="1" get="inline" set="null" line="253"><f a=""><x path="Int"/></f></toColor>
		<toColorHSL public="1" set="method" line="257"><f a=""><c path="h3d.Vector"/></f></toColorHSL>
		<scale3 public="1" get="inline" set="null" line="295">
			<f a="v">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</scale3>
		<dot3 public="1" get="inline" set="null" line="299">
			<f a="v">
				<c path="h3d.Vector"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</dot3>
		<normalizeFast public="1" get="inline" set="null" line="303">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</normalizeFast>
		<new public="1" get="inline" set="null" line="16">
			<f a="?x:?y:?z:?w" v="0.:0.:0.:1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1., z : 0., y : 0., x : 0. }</e></m></meta>
		</new>
		<haxe_doc>A 4 floats vector. Everytime a Vector is returned, it means a copy is created.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.anim.AnimatedObject" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/anim/Animation.hx" module="h3d.anim.Animation">
		<objectName public="1"><c path="String"/></objectName>
		<targetObject public="1"><c path="h3d.scene.Object"/></targetObject>
		<targetSkin public="1"><c path="h3d.scene.Skin"/></targetSkin>
		<targetJoint public="1"><x path="Int"/></targetJoint>
		<clone public="1" set="method" line="16"><f a=""><c path="h3d.anim.AnimatedObject"/></f></clone>
		<new public="1" set="method" line="12"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="h3d.anim.Animation" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/anim/Animation.hx">
		<implements path="hxd.impl._Serializable.NoSerializeSupport"/>
		<EPSILON get="inline" set="null" expr="0.000001" line="24" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.000001</e></m></meta>
		</EPSILON>
		<name public="1">
			<c path="String"/>
			<meta><m n=":s"/></meta>
		</name>
		<resourcePath public="1">
			<c path="String"/>
			<meta><m n=":s"/></meta>
		</resourcePath>
		<frameCount public="1" set="null">
			<x path="Int"/>
			<meta><m n=":s"/></meta>
		</frameCount>
		<sampling public="1" set="null">
			<x path="Float"/>
			<meta><m n=":s"/></meta>
		</sampling>
		<frame public="1" set="null">
			<x path="Float"/>
			<meta><m n=":s"/></meta>
		</frame>
		<speed public="1">
			<x path="Float"/>
			<meta><m n=":s"/></meta>
		</speed>
		<onAnimEnd public="1"><f a=""><x path="Void"/></f></onAnimEnd>
		<onEvent public="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></onEvent>
		<pause public="1">
			<x path="Bool"/>
			<meta><m n=":s"/></meta>
		</pause>
		<loop public="1">
			<x path="Bool"/>
			<meta><m n=":s"/></meta>
		</loop>
		<events public="1" set="null"><c path="Array"><c path="Array"><c path="String"/></c></c></events>
		<isInstance><x path="Bool"/></isInstance>
		<objects><c path="Array"><c path="h3d.anim.AnimatedObject"/></c></objects>
		<isSync><x path="Bool"/></isSync>
		<lastEvent><x path="Int"/></lastEvent>
		<getDuration public="1" set="method" line="58"><f a=""><x path="Float"/></f></getDuration>
		<frameToTime get="inline" set="null" line="62"><f a="f">
	<x path="Int"/>
	<x path="Float"/>
</f></frameToTime>
		<getIFrame get="inline" set="null" line="66"><f a=""><x path="Int"/></f></getIFrame>
		<unbind public="1" set="method" line="73"><f a="objectName">
	<c path="String"/>
	<x path="Void"/>
</f></unbind>
		<setEvents public="1" set="method" line="88">
			<f a="el">
				<t path="Iterable"><a>
	<frame><x path="Int"/></frame>
	<data><c path="String"/></data>
</a></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Register a callback function that will be called once when a frame is reached.</haxe_doc>
		</setEvents>
		<addEvent public="1" set="method" line="96"><f a="frame:data">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></addEvent>
		<getEvents public="1" set="method" line="105"><f a=""><c path="Array"><c path="Array"><c path="String"/></c></c></f></getEvents>
		<getObjects public="1" set="method" line="107"><f a=""><c path="Array"><c path="h3d.anim.AnimatedObject"/></c></f></getObjects>
		<getEventTime public="1" set="method" line="109"><f a="id">
	<c path="String"/>
	<x path="Null"><x path="Float"/></x>
</f></getEventTime>
		<setFrame public="1" set="method" line="119"><f a="f">
	<x path="Float"/>
	<x path="Void"/>
</f></setFrame>
		<clone set="method" line="126"><f a="?a">
	<c path="h3d.anim.Animation"/>
	<c path="h3d.anim.Animation"/>
</f></clone>
		<initInstance set="method" line="138"><f a=""><x path="Void"/></f></initInstance>
		<createInstance public="1" set="method" line="143"><f a="base">
	<c path="h3d.scene.Object"/>
	<c path="h3d.anim.Animation"/>
</f></createInstance>
		<bind public="1" set="method" line="156">
			<f a="base">
				<c path="h3d.scene.Object"/>
				<x path="Void"/>
			</f>
			<meta><m n=":access"><e>h3d.scene.Skin.skinData</e></m></meta>
			<haxe_doc>If one of the animated object has been changed, it is necessary to call bind() so the animation can keep with the change.</haxe_doc>
		</bind>
		<getPropValue public="1" set="method" line="189">
			<f a="objectName:propName">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><x path="Float"/></x>
			</f>
			<haxe_doc>Returns the current value of animation property for the given object, or null if not found.</haxe_doc>
		</getPropValue>
		<sync public="1" set="method" line="197">
			<f a="?decompose" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ decompose : false }</e></m></meta>
			<haxe_doc>Synchronize the target object matrix.
		If decompose is true, then the rotation quaternion is stored in [m12,m13,m21,m23] instead of mixed with the scale.</haxe_doc>
		</sync>
		<isPlaying set="method" line="202"><f a=""><x path="Bool"/></f></isPlaying>
		<endFrame set="method" line="206"><f a=""><x path="Int"/></f></endFrame>
		<update public="1" set="method" line="210"><f a="dt">
	<x path="Float"/>
	<x path="Float"/>
</f></update>
		<initAndBind set="method" line="274"><f a="obj">
	<c path="h3d.scene.Object"/>
	<x path="Void"/>
</f></initAndBind>
		<toString public="1" set="method" line="281"><f a=""><c path="String"/></f></toString>
		<new set="method" line="46"><f a="name:frameCount:sampling">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="h3d.anim.DataLayout" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/anim/BufferAnimation.hx" module="h3d.anim.BufferAnimation">
		<Position/>
		<Rotation/>
		<Scale/>
		<UV/>
		<Alpha/>
		<Property/>
		<SingleFrame/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="h3d.anim.BufferObject" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/anim/BufferAnimation.hx" module="h3d.anim.BufferAnimation">
		<extends path="h3d.anim.AnimatedObject"/>
		<layout public="1"><x path="haxe.EnumFlags"><e path="h3d.anim.DataLayout"/></x></layout>
		<dataOffset public="1"><x path="Int"/></dataOffset>
		<propCurrentValue public="1"><x path="Float"/></propCurrentValue>
		<propName public="1"><c path="String"/></propName>
		<matrix public="1"><c path="h3d.Matrix"/></matrix>
		<getStride public="1" set="method" line="28"><f a=""><x path="Int"/></f></getStride>
		<clone public="1" set="method" line="39" override="1"><f a=""><c path="h3d.anim.AnimatedObject"/></f></clone>
		<new public="1" set="method" line="23"><f a="objectName:dataOffset">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.anim.BufferAnimation" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/anim/BufferAnimation.hx">
		<extends path="h3d.anim.Animation"/>
		<syncFrame><x path="Float"/></syncFrame>
		<data><t path="hxd.impl.Float32Array"/></data>
		<stride><x path="Int"/></stride>
		<setData public="1" set="method" line="58"><f a="data:stride">
	<t path="hxd.impl.Float32Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setData>
		<addObject public="1" set="method" line="63"><f a="objName:offset">
	<c path="String"/>
	<x path="Int"/>
	<c path="h3d.anim.BufferObject"/>
</f></addObject>
		<getPropValue public="1" set="method" line="69" override="1"><f a="objName:propName">
	<c path="String"/>
	<c path="String"/>
	<x path="Null"><x path="Float"/></x>
</f></getPropValue>
		<getFrames get="inline" set="null" line="76"><f a=""><c path="Array"><c path="h3d.anim.BufferObject"/></c></f></getFrames>
		<clone set="method" line="80" override="1"><f a="?a">
	<c path="h3d.anim.Animation"/>
	<x path="Null"><c path="h3d.anim.Animation"/></x>
</f></clone>
		<endFrame set="method" line="89" override="1"><f a=""><x path="Int"/></f></endFrame>
		<initInstance set="method" line="95" override="1"><f a=""><x path="Void"/></f></initInstance>
		<sortByFrameCountDesc set="method" line="119"><f a="o1:o2">
	<c path="h3d.anim.BufferObject"/>
	<c path="h3d.anim.BufferObject"/>
	<x path="Int"/>
</f></sortByFrameCountDesc>
		<uvLerp get="inline" set="null" line="123"><f a="v1:v2:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></uvLerp>
		<sync public="1" set="method" line="135" override="1">
			<f a="?decompose" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ decompose : false }</e></m>
				<m n=":access"><e>h3d.scene.Skin</e></m>
				<m n=":noDebug"/>
			</meta>
		</sync>
		<new public="1" set="method" line="53"><f a="name:frame:sampling">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.anim.LinearFrame" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/anim/LinearAnimation.hx" module="h3d.anim.LinearAnimation">
		<tx public="1"><x path="Float"/></tx>
		<ty public="1"><x path="Float"/></ty>
		<tz public="1"><x path="Float"/></tz>
		<qx public="1"><x path="Float"/></qx>
		<qy public="1"><x path="Float"/></qy>
		<qz public="1"><x path="Float"/></qz>
		<qw public="1"><x path="Float"/></qw>
		<sx public="1"><x path="Float"/></sx>
		<sy public="1"><x path="Float"/></sy>
		<sz public="1"><x path="Float"/></sz>
		<toMatrix public="1" set="method" line="17"><f a=""><c path="h3d.Matrix"/></f></toMatrix>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.anim.LinearObject" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/anim/LinearAnimation.hx" module="h3d.anim.LinearAnimation">
		<extends path="h3d.anim.AnimatedObject"/>
		<hasPosition public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</hasPosition>
		<hasRotation public="1"><x path="Bool"/></hasRotation>
		<hasScale public="1"><x path="Bool"/></hasScale>
		<frames public="1"><x path="haxe.ds.Vector"><c path="h3d.anim.LinearFrame"/></x></frames>
		<alphas public="1"><x path="haxe.ds.Vector"><x path="Float"/></x></alphas>
		<uvs public="1"><x path="haxe.ds.Vector"><x path="Float"/></x></uvs>
		<propName public="1"><c path="String"/></propName>
		<propValues public="1"><x path="haxe.ds.Vector"><x path="Float"/></x></propValues>
		<matrix public="1"><c path="h3d.Matrix"/></matrix>
		<propCurrentValue public="1"><x path="Float"/></propCurrentValue>
		<clone public="1" set="method" line="37" override="1"><f a=""><c path="h3d.anim.AnimatedObject"/></f></clone>
		<new public="1" set="method" line="26"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.anim.LinearAnimation" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/anim/LinearAnimation.hx">
		<extends path="h3d.anim.Animation"/>
		<syncFrame><x path="Float"/></syncFrame>
		<addCurve public="1" set="method" line="60"><f a="objName:frames:hasPos:hasRot:hasScale">
	<c path="String"/>
	<x path="haxe.ds.Vector"><c path="h3d.anim.LinearFrame"/></x>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addCurve>
		<addAlphaCurve public="1" set="method" line="69"><f a="objName:alphas">
	<c path="String"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Void"/>
</f></addAlphaCurve>
		<addUVCurve public="1" set="method" line="75"><f a="objName:uvs">
	<c path="String"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Void"/>
</f></addUVCurve>
		<addPropCurve public="1" set="method" line="81"><f a="objName:propName:values">
	<c path="String"/>
	<c path="String"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Void"/>
</f></addPropCurve>
		<getPropValue public="1" set="method" line="88" override="1"><f a="objName:propName">
	<c path="String"/>
	<c path="String"/>
	<x path="Null"><x path="Float"/></x>
</f></getPropValue>
		<getFrames get="inline" set="null" line="95"><f a=""><c path="Array"><c path="h3d.anim.LinearObject"/></c></f></getFrames>
		<clone set="method" line="99" override="1"><f a="?a">
	<c path="h3d.anim.Animation"/>
	<x path="Null"><c path="h3d.anim.Animation"/></x>
</f></clone>
		<endFrame set="method" line="106" override="1"><f a=""><x path="Int"/></f></endFrame>
		<initInstance set="method" line="112" override="1"><f a=""><x path="Void"/></f></initInstance>
		<sortByFrameCountDesc set="method" line="130"><f a="o1:o2">
	<c path="h3d.anim.LinearObject"/>
	<c path="h3d.anim.LinearObject"/>
	<x path="Int"/>
</f></sortByFrameCountDesc>
		<uvLerp get="inline" set="null" line="134"><f a="v1:v2:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></uvLerp>
		<sync public="1" set="method" line="146" override="1">
			<f a="?decompose" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ decompose : false }</e></m>
				<m n=":access"><e>h3d.scene.Skin</e></m>
				<m n=":noDebug"/>
			</meta>
		</sync>
		<new public="1" set="method" line="55"><f a="name:frame:sampling">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.anim.Joint" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/anim/Skin.hx" module="h3d.anim.Skin">
		<index public="1"><x path="Int"/></index>
		<name public="1"><c path="String"/></name>
		<bindIndex public="1"><x path="Int"/></bindIndex>
		<splitIndex public="1"><x path="Int"/></splitIndex>
		<defMat public="1"><c path="h3d.Matrix"/></defMat>
		<transPos public="1"><c path="h3d.Matrix"/></transPos>
		<parent public="1"><c path="h3d.anim.Joint"/></parent>
		<subs public="1"><c path="Array"><c path="h3d.anim.Joint"/></c></subs>
		<offsets public="1"><c path="h3d.col.Bounds"/></offsets>
		<offsetRay public="1"><x path="Float"/></offsetRay>
		<retargetAnim public="1">
			<x path="Bool"/>
			<haxe_doc>When animated, we will use the default bind pose translation instead of the animated translation,
		enabling retargeting on a skeleton with different proportions</haxe_doc>
		</retargetAnim>
		<new public="1" set="method" line="23"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.anim._Skin.Permut" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/anim/Skin.hx" private="1" module="h3d.anim.Skin">
		<joints public="1"><c path="Array"><c path="h3d.anim.Joint"/></c></joints>
		<triangles public="1"><c path="Array"><x path="Int"/></c></triangles>
		<material public="1"><x path="Int"/></material>
		<indexedJoints public="1"><c path="Array"><c path="h3d.anim.Joint"/></c></indexedJoints>
		<new public="1" set="method" line="36"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.anim._Skin.Influence" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/anim/Skin.hx" private="1" module="h3d.anim.Skin">
		<j public="1"><c path="h3d.anim.Joint"/></j>
		<w public="1"><x path="Float"/></w>
		<new public="1" set="method" line="43"><f a="j:w">
	<c path="h3d.anim.Joint"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.anim.Skin" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/anim/Skin.hx">
		<name public="1"><c path="String"/></name>
		<vertexCount public="1" set="null"><x path="Int"/></vertexCount>
		<bonesPerVertex public="1" set="null"><x path="Int"/></bonesPerVertex>
		<vertexJoints public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></vertexJoints>
		<vertexWeights public="1"><x path="haxe.ds.Vector"><x path="Float"/></x></vertexWeights>
		<rootJoints public="1" set="null"><c path="Array"><c path="h3d.anim.Joint"/></c></rootJoints>
		<namedJoints public="1" set="null"><t path="Map">
	<c path="String"/>
	<c path="h3d.anim.Joint"/>
</t></namedJoints>
		<allJoints public="1" set="null"><c path="Array"><c path="h3d.anim.Joint"/></c></allJoints>
		<boundJoints public="1" set="null"><c path="Array"><c path="h3d.anim.Joint"/></c></boundJoints>
		<primitive public="1"><c path="h3d.prim.Primitive"/></primitive>
		<splitJoints public="1" set="null"><c path="Array"><a>
	<material><x path="Int"/></material>
	<joints><c path="Array"><c path="h3d.anim.Joint"/></c></joints>
</a></c></splitJoints>
		<triangleGroups public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></triangleGroups>
		<envelop><c path="Array"><c path="Array"><c path="h3d.anim._Skin.Influence"/></c></c></envelop>
		<setJoints public="1" set="method" line="81"><f a="joints:roots">
	<c path="Array"><c path="h3d.anim.Joint"/></c>
	<c path="Array"><c path="h3d.anim.Joint"/></c>
	<x path="Void"/>
</f></setJoints>
		<addInfluence public="1" get="inline" set="null" line="90"><f a="vid:j:w">
	<x path="Int"/>
	<c path="h3d.anim.Joint"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addInfluence>
		<sortInfluences set="method" line="97"><f a="i1:i2">
	<c path="h3d.anim._Skin.Influence"/>
	<c path="h3d.anim._Skin.Influence"/>
	<x path="Int"/>
</f></sortInfluences>
		<isSplit public="1" get="inline" set="null" line="101"><f a=""><x path="Bool"/></f></isSplit>
		<initWeights public="1" set="method" line="105"><f a=""><x path="Void"/></f></initWeights>
		<sortByBindIndex set="method" line="137"><f a="j1:j2">
	<c path="h3d.anim.Joint"/>
	<c path="h3d.anim.Joint"/>
	<x path="Int"/>
</f></sortByBindIndex>
		<isSub set="method" line="141"><f a="a:b">
	<c path="Array"><c path="h3d.anim.Joint"/></c>
	<c path="Array"><c path="h3d.anim.Joint"/></c>
	<x path="Bool"/>
</f></isSub>
		<merge set="method" line="153"><f a="permuts">
	<c path="Array"><c path="h3d.anim._Skin.Permut"/></c>
	<x path="Bool"/>
</f></merge>
		<jointsDiff set="method" line="165"><f a="p1:p2">
	<c path="h3d.anim._Skin.Permut"/>
	<c path="h3d.anim._Skin.Permut"/>
	<x path="Int"/>
</f></jointsDiff>
		<split public="1" set="method" line="186"><f a="maxBones:index:triangleMaterials">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Null"><c path="Array"><x path="Int"/></c></x>
	<x path="Bool"/>
</f></split>
		<new public="1" set="method" line="70"><f a="name:vertexCount:bonesPerVertex">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.col.Collider" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/Collider.hx" interface="1">
		<extends path="hxd.impl._Serializable.NoSerializeSupport"/>
		<rayIntersection public="1" set="method">
			<f a="r:bestMatch">
				<c path="h3d.col.Ray"/>
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the distance of intersection between the ray and the collider, or negative if no collision.
		If bestMatch is false, only negative/positive value needs to be returned, with no additional precision.</haxe_doc>
		</rayIntersection>
		<contains public="1" set="method"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Bool"/>
</f></contains>
		<inFrustum public="1" set="method"><f a="f:?localMatrix">
	<c path="h3d.col.Frustum"/>
	<c path="h3d.Matrix"/>
	<x path="Bool"/>
</f></inFrustum>
		<inSphere public="1" set="method"><f a="s">
	<c path="h3d.col.Sphere"/>
	<x path="Bool"/>
</f></inSphere>
	</class>
	<class path="h3d.col.Bounds" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/Bounds.hx">
		<implements path="h3d.col.Collider"/>
		<fromPoints public="1" get="inline" set="null" line="386" static="1"><f a="min:max">
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Bounds"/>
</f></fromPoints>
		<fromValues public="1" get="inline" set="null" line="393" static="1"><f a="x:y:z:dx:dy:dz">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="h3d.col.Bounds"/>
</f></fromValues>
		<xMin public="1"><x path="Float"/></xMin>
		<xMax public="1"><x path="Float"/></xMax>
		<yMin public="1"><x path="Float"/></yMin>
		<yMax public="1"><x path="Float"/></yMax>
		<zMin public="1"><x path="Float"/></zMin>
		<zMax public="1"><x path="Float"/></zMax>
		<xSize public="1" get="accessor" set="accessor"><x path="Float"/></xSize>
		<ySize public="1" get="accessor" set="accessor"><x path="Float"/></ySize>
		<zSize public="1" get="accessor" set="accessor"><x path="Float"/></zSize>
		<inFrustum public="1" get="inline" set="null" line="21"><f a="f:?m">
	<c path="h3d.col.Frustum"/>
	<c path="h3d.Matrix"/>
	<x path="Bool"/>
</f></inFrustum>
		<inSphere public="1" get="inline" set="null" line="27"><f a="s">
	<c path="h3d.col.Sphere"/>
	<x path="Bool"/>
</f></inSphere>
		<testPlane get="inline" set="null" line="33"><f a="p">
	<c path="h3d.col.Plane"/>
	<x path="Float"/>
</f></testPlane>
		<rayIntersection public="1" set="method" line="45"><f a="r:bestMatch">
	<c path="h3d.col.Ray"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></rayIntersection>
		<inFrustumDetails public="1" set="method" line="73">
			<f a="mvp:?checkZ" v=":true">
				<c path="h3d.Matrix"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ checkZ : true }</e></m></meta>
			<haxe_doc>* Check if the camera model-view-projection Matrix intersects with the Bounds. Returns -1 if outside, 0 if interests and 1 if fully inside.
	 * @param	mvp : the model-view-projection matrix to test against
	 * @param	checkZ : tells if we will check against the near/far plane</haxe_doc>
		</inFrustumDetails>
		<transform3x3 public="1" set="method" line="126"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transform3x3>
		<transform public="1" set="method" line="156"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transform>
		<collide public="1" get="inline" set="null" line="189"><f a="b">
	<c path="h3d.col.Bounds"/>
	<x path="Bool"/>
</f></collide>
		<contains public="1" get="inline" set="null" line="193"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Bool"/>
</f></contains>
		<containsBounds public="1" get="inline" set="null" line="197"><f a="b">
	<c path="h3d.col.Bounds"/>
	<x path="Bool"/>
</f></containsBounds>
		<containsSphere public="1" get="inline" set="null" line="201"><f a="s">
	<c path="h3d.col.Sphere"/>
	<x path="Bool"/>
</f></containsSphere>
		<add public="1" get="inline" set="null" line="205"><f a="b">
	<c path="h3d.col.Bounds"/>
	<x path="Void"/>
</f></add>
		<addPoint public="1" get="inline" set="null" line="214"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Void"/>
</f></addPoint>
		<addPos public="1" get="inline" set="null" line="223"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addPos>
		<addSphere public="1" get="inline" set="null" line="232"><f a="s">
	<c path="h3d.col.Sphere"/>
	<x path="Void"/>
</f></addSphere>
		<addSpherePos public="1" get="inline" set="null" line="236"><f a="x:y:z:r">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addSpherePos>
		<intersection public="1" set="method" line="245"><f a="a:b">
	<c path="h3d.col.Bounds"/>
	<c path="h3d.col.Bounds"/>
	<x path="Void"/>
</f></intersection>
		<offset public="1" get="inline" set="null" line="260"><f a="dx:dy:dz">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<setMin public="1" get="inline" set="null" line="269"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Void"/>
</f></setMin>
		<setMax public="1" get="inline" set="null" line="275"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Void"/>
</f></setMax>
		<load public="1" set="method" line="281"><f a="b">
	<c path="h3d.col.Bounds"/>
	<x path="Void"/>
</f></load>
		<scalePivot public="1" get="inline" set="null" line="290"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></scalePivot>
		<scaleCenter public="1" set="method" line="300"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></scaleCenter>
		<getMin public="1" get="inline" set="null" line="315"><f a=""><c path="h3d.col.Point"/></f></getMin>
		<getCenter public="1" get="inline" set="null" line="319"><f a=""><c path="h3d.col.Point"/></f></getCenter>
		<getSize public="1" get="inline" set="null" line="323"><f a=""><c path="h3d.col.Point"/></f></getSize>
		<getMax public="1" get="inline" set="null" line="327"><f a=""><c path="h3d.col.Point"/></f></getMax>
		<getVolume public="1" get="inline" set="null" line="331"><f a=""><x path="Float"/></f></getVolume>
		<get_xSize get="inline" set="null" line="335"><f a=""><x path="Float"/></f></get_xSize>
		<get_ySize get="inline" set="null" line="336"><f a=""><x path="Float"/></f></get_ySize>
		<get_zSize get="inline" set="null" line="337"><f a=""><x path="Float"/></f></get_zSize>
		<set_xSize get="inline" set="null" line="338"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_xSize>
		<set_ySize get="inline" set="null" line="339"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_ySize>
		<set_zSize get="inline" set="null" line="340"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_zSize>
		<isEmpty public="1" get="inline" set="null" line="342"><f a=""><x path="Bool"/></f></isEmpty>
		<empty public="1" get="inline" set="null" line="346"><f a=""><x path="Void"/></f></empty>
		<all public="1" get="inline" set="null" line="355"><f a=""><x path="Void"/></f></all>
		<clone public="1" get="inline" set="null" line="364"><f a=""><c path="h3d.col.Bounds"/></f></clone>
		<toString public="1" set="method" line="375"><f a=""><c path="String"/></f></toString>
		<toSphere public="1" get="inline" set="null" line="379"><f a=""><c path="h3d.col.Sphere"/></f></toSphere>
		<new public="1" get="inline" set="null" line="17"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.col.OptimizedCollider" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/Collider.hx" module="h3d.col.Collider">
		<implements path="h3d.col.Collider"/>
		<implements path="hxd.impl._Serializable.NoSerializeSupport"/>
		<a public="1">
			<c path="h3d.col.Collider"/>
			<meta><m n=":s"/></meta>
		</a>
		<b public="1">
			<c path="h3d.col.Collider"/>
			<meta><m n=":s"/></meta>
		</b>
		<rayIntersection public="1" set="method" line="26"><f a="r:bestMatch">
	<c path="h3d.col.Ray"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></rayIntersection>
		<contains public="1" set="method" line="32"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Bool"/>
</f></contains>
		<inFrustum public="1" set="method" line="36"><f a="f:?m">
	<c path="h3d.col.Frustum"/>
	<c path="h3d.Matrix"/>
	<x path="Bool"/>
</f></inFrustum>
		<inSphere public="1" set="method" line="40"><f a="s">
	<c path="h3d.col.Sphere"/>
	<x path="Bool"/>
</f></inSphere>
		<new public="1" set="method" line="21"><f a="a:b">
	<c path="h3d.col.Collider"/>
	<c path="h3d.col.Collider"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.col.GroupCollider" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/Collider.hx" module="h3d.col.Collider">
		<implements path="h3d.col.Collider"/>
		<colliders public="1"><c path="Array"><c path="h3d.col.Collider"/></c></colliders>
		<rayIntersection public="1" set="method" line="61"><f a="r:bestMatch">
	<c path="h3d.col.Ray"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></rayIntersection>
		<contains public="1" set="method" line="73"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Bool"/>
</f></contains>
		<inFrustum public="1" set="method" line="80"><f a="f:?m">
	<c path="h3d.col.Frustum"/>
	<c path="h3d.Matrix"/>
	<x path="Bool"/>
</f></inFrustum>
		<inSphere public="1" set="method" line="87"><f a="s">
	<c path="h3d.col.Sphere"/>
	<x path="Bool"/>
</f></inSphere>
		<new public="1" set="method" line="57"><f a="colliders">
	<c path="Array"><c path="h3d.col.Collider"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.col.FPoint" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/FPoint.hx">
		<x public="1"><t path="hxd.impl.Float32"/></x>
		<y public="1"><t path="hxd.impl.Float32"/></y>
		<z public="1"><t path="hxd.impl.Float32"/></z>
		<sub public="1" get="inline" set="null" line="16"><f a="p">
	<c path="h3d.col.FPoint"/>
	<c path="h3d.col.FPoint"/>
</f></sub>
		<add public="1" get="inline" set="null" line="20"><f a="p">
	<c path="h3d.col.FPoint"/>
	<c path="h3d.col.FPoint"/>
</f></add>
		<cross public="1" get="inline" set="null" line="24"><f a="p">
	<c path="h3d.col.FPoint"/>
	<c path="h3d.col.FPoint"/>
</f></cross>
		<dot public="1" get="inline" set="null" line="28"><f a="p">
	<c path="h3d.col.FPoint"/>
	<x path="Float"/>
</f></dot>
		<toString public="1" set="method" line="32"><f a=""><c path="String"/></f></toString>
		<new public="1" get="inline" set="null" line="10">
			<f a="?x:?y:?z" v="0.:0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ z : 0., y : 0., x : 0. }</e></m></meta>
		</new>
	</class>
	<class path="h3d.col.Frustum" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/Frustum.hx">
		<pleft public="1"><c path="h3d.col.Plane"/></pleft>
		<pright public="1"><c path="h3d.col.Plane"/></pright>
		<ptop public="1"><c path="h3d.col.Plane"/></ptop>
		<pbottom public="1"><c path="h3d.col.Plane"/></pbottom>
		<pnear public="1"><c path="h3d.col.Plane"/></pnear>
		<pfar public="1"><c path="h3d.col.Plane"/></pfar>
		<checkNearFar public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</checkNearFar>
		<clone public="1" set="method" line="24"><f a=""><c path="h3d.col.Frustum"/></f></clone>
		<loadMatrix public="1" set="method" line="36"><f a="mvp">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></loadMatrix>
		<transform public="1" set="method" line="51"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transform>
		<transform3x3 public="1" set="method" line="71"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transform3x3>
		<hasPoint public="1" set="method" line="91"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Bool"/>
</f></hasPoint>
		<hasSphere public="1" set="method" line="103"><f a="s">
	<c path="h3d.col.Sphere"/>
	<x path="Bool"/>
</f></hasSphere>
		<hasBounds public="1" set="method" line="116"><f a="b">
	<c path="h3d.col.Bounds"/>
	<x path="Bool"/>
</f></hasBounds>
		<new public="1" set="method" line="13"><f a="?mvp">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.col.Ray" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/Ray.hx">
		<fromPoints public="1" get="inline" set="null" line="137" static="1"><f a="p1:p2">
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Ray"/>
</f></fromPoints>
		<fromValues public="1" get="inline" set="null" line="149" static="1"><f a="x:y:z:dx:dy:dz">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="h3d.col.Ray"/>
</f></fromValues>
		<px public="1"><x path="Float"/></px>
		<py public="1"><x path="Float"/></py>
		<pz public="1"><x path="Float"/></pz>
		<lx public="1"><x path="Float"/></lx>
		<ly public="1"><x path="Float"/></ly>
		<lz public="1"><x path="Float"/></lz>
		<clone public="1" get="inline" set="null" line="17"><f a=""><c path="h3d.col.Ray"/></f></clone>
		<load public="1" get="inline" set="null" line="28"><f a="r">
	<c path="h3d.col.Ray"/>
	<x path="Void"/>
</f></load>
		<normalize set="method" line="37"><f a=""><x path="Void"/></f></normalize>
		<transform public="1" get="inline" set="null" line="46"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transform>
		<getPos public="1" get="inline" set="null" line="60"><f a=""><c path="h3d.col.Point"/></f></getPos>
		<getDir public="1" get="inline" set="null" line="64"><f a=""><c path="h3d.col.Point"/></f></getDir>
		<getPoint public="1" get="inline" set="null" line="68"><f a="distance">
	<x path="Float"/>
	<c path="h3d.col.Point"/>
</f></getPoint>
		<toString public="1" set="method" line="72"><f a=""><c path="String"/></f></toString>
		<intersect public="1" get="inline" set="null" line="76"><f a="p">
	<c path="h3d.col.Plane"/>
	<x path="Null"><c path="h3d.col.Point"/></x>
</f></intersect>
		<collideFrustum public="1" get="inline" set="null" line="88"><f a="mvp">
	<c path="h3d.Matrix"/>
	<x path="Bool"/>
</f></collideFrustum>
		<collide public="1" get="inline" set="null" line="113"><f a="b">
	<c path="h3d.col.Bounds"/>
	<x path="Bool"/>
</f></collide>
		<new public="1" get="inline" set="null" line="14"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>h3d.col</e></m>
		</meta>
	</class>
	<class path="h3d.col.ObjectCollider" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/ObjectCollider.hx">
		<implements path="hxd.impl._Serializable.NoSerializeSupport"/>
		<implements path="h3d.col.Collider"/>
		<TMP_RAY expr="new Ray()" line="7" static="1">
			<c path="h3d.col.Ray"/>
			<meta><m n=":value"><e>new Ray()</e></m></meta>
		</TMP_RAY>
		<TMP_MAT expr="new Matrix()" line="8" static="1">
			<c path="h3d.Matrix"/>
			<meta><m n=":value"><e>new Matrix()</e></m></meta>
		</TMP_MAT>
		<obj public="1">
			<c path="h3d.scene.Object"/>
			<meta><m n=":s"/></meta>
		</obj>
		<collider public="1">
			<c path="h3d.col.Collider"/>
			<meta><m n=":s"/></meta>
		</collider>
		<rayIntersection public="1" set="method" line="15"><f a="r:bestMatch">
	<c path="h3d.col.Ray"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></rayIntersection>
		<contains public="1" set="method" line="33"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Bool"/>
</f></contains>
		<inFrustum public="1" set="method" line="41"><f a="f:?m">
	<c path="h3d.col.Frustum"/>
	<c path="h3d.Matrix"/>
	<x path="Bool"/>
</f></inFrustum>
		<inSphere public="1" set="method" line="49"><f a="s">
	<c path="h3d.col.Sphere"/>
	<x path="Bool"/>
</f></inSphere>
		<new public="1" set="method" line="10"><f a="obj:collider">
	<c path="h3d.scene.Object"/>
	<c path="h3d.col.Collider"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.col.Plane" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/Plane.hx">
		<fromPoints public="1" get="inline" set="null" line="99" static="1"><f a="p0:p1:p2">
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Plane"/>
</f></fromPoints>
		<fromNormalPoint public="1" get="inline" set="null" line="106" static="1"><f a="n:p">
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Plane"/>
</f></fromNormalPoint>
		<X public="1" get="inline" set="null" line="110" static="1">
			<f a="?v" v="0.0">
				<x path="Float"/>
				<c path="h3d.col.Plane"/>
			</f>
			<meta><m n=":value"><e>{ v : 0.0 }</e></m></meta>
		</X>
		<Y public="1" get="inline" set="null" line="114" static="1">
			<f a="?v" v="0.0">
				<x path="Float"/>
				<c path="h3d.col.Plane"/>
			</f>
			<meta><m n=":value"><e>{ v : 0.0 }</e></m></meta>
		</Y>
		<Z public="1" get="inline" set="null" line="118" static="1">
			<f a="?v" v="0.0">
				<x path="Float"/>
				<c path="h3d.col.Plane"/>
			</f>
			<meta><m n=":value"><e>{ v : 0.0 }</e></m></meta>
		</Z>
		<frustumLeft public="1" get="inline" set="null" line="122" static="1"><f a="mvp">
	<c path="h3d.Matrix"/>
	<c path="h3d.col.Plane"/>
</f></frustumLeft>
		<frustumRight public="1" get="inline" set="null" line="126" static="1"><f a="mvp">
	<c path="h3d.Matrix"/>
	<c path="h3d.col.Plane"/>
</f></frustumRight>
		<frustumBottom public="1" get="inline" set="null" line="130" static="1"><f a="mvp">
	<c path="h3d.Matrix"/>
	<c path="h3d.col.Plane"/>
</f></frustumBottom>
		<frustumTop public="1" get="inline" set="null" line="134" static="1"><f a="mvp">
	<c path="h3d.Matrix"/>
	<c path="h3d.col.Plane"/>
</f></frustumTop>
		<frustumNear public="1" get="inline" set="null" line="138" static="1"><f a="mvp">
	<c path="h3d.Matrix"/>
	<c path="h3d.col.Plane"/>
</f></frustumNear>
		<frustumFar public="1" get="inline" set="null" line="142" static="1"><f a="mvp">
	<c path="h3d.Matrix"/>
	<c path="h3d.col.Plane"/>
</f></frustumFar>
		<nx><x path="Float"/></nx>
		<ny><x path="Float"/></ny>
		<nz><x path="Float"/></nz>
		<d><x path="Float"/></d>
		<getNormal public="1" get="inline" set="null" line="23">
			<f a=""><c path="h3d.col.Point"/></f>
			<haxe_doc>Returns the plan normal</haxe_doc>
		</getNormal>
		<getNormalDistance public="1" get="inline" set="null" line="27"><f a=""><x path="Float"/></f></getNormalDistance>
		<load public="1" get="inline" set="null" line="31"><f a="p">
	<c path="h3d.col.Plane"/>
	<x path="Void"/>
</f></load>
		<transform public="1" set="method" line="38"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transform>
		<transform3x3 public="1" set="method" line="45"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transform3x3>
		<transformInverseTranspose get="inline" set="null" line="52"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transformInverseTranspose>
		<normalize public="1" get="inline" set="null" line="64">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Normalize the plan, so we can use distance().</haxe_doc>
		</normalize>
		<toString public="1" set="method" line="72"><f a=""><c path="String"/></f></toString>
		<distance public="1" get="inline" set="null" line="79">
			<f a="p">
				<c path="h3d.col.Point"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the signed distance between a point an the plane. This requires the plan to be normalized. If the distance is negative it means that we are "under" the plan.</haxe_doc>
		</distance>
		<side public="1" get="inline" set="null" line="83"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Bool"/>
</f></side>
		<project public="1" get="inline" set="null" line="87"><f a="p">
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Point"/>
</f></project>
		<projectTo public="1" get="inline" set="null" line="92"><f a="p:out">
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Point"/>
	<x path="Void"/>
</f></projectTo>
		<new public="1" get="inline" set="null" line="13"><f a="nx:ny:nz:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>h3d.col</e></m>
		</meta>
	</class>
	<class path="h3d.col.Point" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/Point.hx">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<scale public="1" get="inline" set="null" line="18"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<set public="1" get="inline" set="null" line="24">
			<f a="?x:?y:?z" v="0.:0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ z : 0., y : 0., x : 0. }</e></m></meta>
		</set>
		<sub public="1" get="inline" set="null" line="30"><f a="p">
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Point"/>
</f></sub>
		<add public="1" get="inline" set="null" line="34"><f a="p">
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Point"/>
</f></add>
		<multiply public="1" get="inline" set="null" line="38"><f a="v">
	<x path="Float"/>
	<c path="h3d.col.Point"/>
</f></multiply>
		<cross public="1" get="inline" set="null" line="42"><f a="p">
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Point"/>
</f></cross>
		<equals public="1" get="inline" set="null" line="46"><f a="other">
	<c path="h3d.col.Point"/>
	<x path="Bool"/>
</f></equals>
		<lengthSq public="1" get="inline" set="null" line="50"><f a=""><x path="Float"/></f></lengthSq>
		<length public="1" get="inline" set="null" line="54"><f a=""><x path="Float"/></f></length>
		<dot public="1" get="inline" set="null" line="58"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Float"/>
</f></dot>
		<distanceSq public="1" get="inline" set="null" line="62"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Float"/>
</f></distanceSq>
		<distance public="1" get="inline" set="null" line="69"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Float"/>
</f></distance>
		<normalize public="1" get="inline" set="null" line="73"><f a=""><x path="Void"/></f></normalize>
		<normalized public="1" get="inline" set="null" line="81"><f a=""><c path="h3d.col.Point"/></f></normalized>
		<lerp public="1" get="inline" set="null" line="87"><f a="p1:p2:k">
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Point"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lerp>
		<transform public="1" get="inline" set="null" line="96"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transform>
		<transformed public="1" get="inline" set="null" line="105"><f a="m">
	<c path="h3d.Matrix"/>
	<c path="h3d.col.Point"/>
</f></transformed>
		<transform3x3 public="1" get="inline" set="null" line="112"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transform3x3>
		<transformed3x3 public="1" get="inline" set="null" line="121"><f a="m">
	<c path="h3d.Matrix"/>
	<c path="h3d.col.Point"/>
</f></transformed3x3>
		<clone public="1" get="inline" set="null" line="128"><f a=""><c path="h3d.col.Point"/></f></clone>
		<load public="1" get="inline" set="null" line="132"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Void"/>
</f></load>
		<toString public="1" set="method" line="138"><f a=""><c path="String"/></f></toString>
		<inFrustum public="1" get="inline" set="null" line="144"><f a="f:?m">
	<c path="h3d.col.Frustum"/>
	<c path="h3d.Matrix"/>
	<x path="Bool"/>
</f></inFrustum>
		<toVector public="1" get="inline" set="null" line="148"><f a=""><c path="h3d.Vector"/></f></toVector>
		<new public="1" get="inline" set="null" line="12">
			<f a="?x:?y:?z" v="0.:0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ z : 0., y : 0., x : 0. }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.col.TriPlane" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/Polygon.hx" module="h3d.col.Polygon">
		<implements path="h3d.col.Collider"/>
		<next public="1" expr="null">
			<c path="h3d.col.TriPlane"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</next>
		<p0x><x path="Float"/></p0x>
		<p0y><x path="Float"/></p0y>
		<p0z><x path="Float"/></p0z>
		<d1x><x path="Float"/></d1x>
		<d1y><x path="Float"/></d1y>
		<d1z><x path="Float"/></d1z>
		<d2x><x path="Float"/></d2x>
		<d2y><x path="Float"/></d2y>
		<d2z><x path="Float"/></d2z>
		<dot00><x path="Float"/></dot00>
		<dot01><x path="Float"/></dot01>
		<dot11><x path="Float"/></dot11>
		<invDenom><x path="Float"/></invDenom>
		<nx><x path="Float"/></nx>
		<ny><x path="Float"/></ny>
		<nz><x path="Float"/></nz>
		<d><x path="Float"/></d>
		<init public="1" get="inline" set="null" line="32"><f a="p0:p1:p2">
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Point"/>
	<x path="Void"/>
</f></init>
		<clone public="1" get="inline" set="null" line="57"><f a=""><c path="h3d.col.TriPlane"/></f></clone>
		<load public="1" get="inline" set="null" line="65"><f a="tp">
	<c path="h3d.col.TriPlane"/>
	<x path="Void"/>
</f></load>
		<transform public="1" set="method" line="85"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transform>
		<contains public="1" get="inline" set="null" line="95"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Bool"/>
</f></contains>
		<side public="1" get="inline" set="null" line="99"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Bool"/>
</f></side>
		<inFrustum public="1" set="method" line="103"><f a="f:?m">
	<c path="h3d.col.Frustum"/>
	<c path="h3d.Matrix"/>
	<x path="Bool"/>
</f></inFrustum>
		<inSphere public="1" set="method" line="108"><f a="s">
	<c path="h3d.col.Sphere"/>
	<x path="Bool"/>
</f></inSphere>
		<rayIntersection public="1" get="inline" set="null" line="113"><f a="r:bestMatch">
	<c path="h3d.col.Ray"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></rayIntersection>
		<isPointInTriangle get="inline" set="null" line="129"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isPointInTriangle>
		<getPoints public="1" set="method" line="143"><f a=""><c path="Array"><c path="h3d.col.Point"/></c></f></getPoints>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>h3d.col.Polygon</e></m>
		</meta>
	</class>
	<class path="h3d.col.Polygon" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/Polygon.hx">
		<implements path="h3d.col.Collider"/>
		<fromPolygon2D public="1" set="method" line="273" static="1">
			<f a="p:?z" v=":0.">
				<x path="h2d.col.Polygon"/>
				<x path="Float"/>
				<c path="h3d.col.Polygon"/>
			</f>
			<meta><m n=":value"><e>{ z : 0. }</e></m></meta>
		</fromPolygon2D>
		<triPlanes><c path="h3d.col.TriPlane"/></triPlanes>
		<addBuffers public="1" set="method" line="165">
			<f a="vertexes:indexes:?stride" v="::3">
				<x path="haxe.ds.Vector"><t path="hxd.impl.Float32"/></x>
				<x path="haxe.ds.Vector"><x path="Int"/></x>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ stride : 3 }</e></m></meta>
		</addBuffers>
		<isConvex public="1" set="method" line="186"><f a=""><x path="Bool"/></f></isConvex>
		<clone public="1" set="method" line="191"><f a=""><c path="h3d.col.Polygon"/></f></clone>
		<transform public="1" set="method" line="198"><f a="m">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></transform>
		<getPoints public="1" set="method" line="206"><f a=""><c path="Array"><c path="h3d.col.Point"/></c></f></getPoints>
		<getBounds public="1" set="method" line="216"><f a="?bnds">
	<c path="h3d.col.Bounds"/>
	<c path="h3d.col.Bounds"/>
</f></getBounds>
		<contains public="1" set="method" line="229"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Bool"/>
</f></contains>
		<rayIntersection public="1" set="method" line="241"><f a="r:bestMatch">
	<c path="h3d.col.Ray"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></rayIntersection>
		<inFrustum public="1" set="method" line="255"><f a="f:?m">
	<c path="h3d.col.Frustum"/>
	<c path="h3d.Matrix"/>
	<x path="Bool"/>
</f></inFrustum>
		<inSphere public="1" set="method" line="260"><f a="s">
	<c path="h3d.col.Sphere"/>
	<x path="Bool"/>
</f></inSphere>
		<new public="1" set="method" line="162"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.col.PolygonBuffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/PolygonBuffer.hx">
		<implements path="h3d.col.Collider"/>
		<buffer><x path="haxe.ds.Vector"><t path="hxd.impl.Float32"/></x></buffer>
		<indexes><x path="haxe.ds.Vector"><x path="Int"/></x></indexes>
		<startIndex><x path="Int"/></startIndex>
		<triCount><x path="Int"/></triCount>
		<source public="1"><a>
	<geometryName><c path="String"/></geometryName>
	<entry><c path="hxd.fs.FileEntry"/></entry>
</a></source>
		<setData public="1" set="method" line="14">
			<f a="buffer:indexes:?startIndex:?triCount" v="::0:-1">
				<x path="haxe.ds.Vector"><t path="hxd.impl.Float32"/></x>
				<x path="haxe.ds.Vector"><x path="Int"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ triCount : -1, startIndex : 0 }</e></m></meta>
		</setData>
		<contains public="1" set="method" line="21"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Bool"/>
</f></contains>
		<inFrustum public="1" set="method" line="44"><f a="f:?m">
	<c path="h3d.col.Frustum"/>
	<c path="h3d.Matrix"/>
	<x path="Bool"/>
</f></inFrustum>
		<inSphere public="1" set="method" line="49"><f a="s">
	<c path="h3d.col.Sphere"/>
	<x path="Bool"/>
</f></inSphere>
		<rayIntersection public="1" set="method" line="55"><f a="r:bestMatch">
	<c path="h3d.col.Ray"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></rayIntersection>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.col.SkinCollider" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/SkinCollider.hx">
		<implements path="h3d.col.Collider"/>
		<implements path="hxd.impl._Serializable.NoSerializeSupport"/>
		<obj>
			<c path="h3d.scene.Skin"/>
			<meta><m n=":s"/></meta>
		</obj>
		<col>
			<c path="h3d.col.PolygonBuffer"/>
			<meta><m n=":s"/></meta>
		</col>
		<currentBounds><c path="h3d.col.Bounds"/></currentBounds>
		<transform><c path="h3d.col.PolygonBuffer"/></transform>
		<lastFrame expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</lastFrame>
		<lastBoundsFrame expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</lastBoundsFrame>
		<contains public="1" set="method" line="22"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Bool"/>
</f></contains>
		<inFrustum public="1" set="method" line="30"><f a="p:?m">
	<c path="h3d.col.Frustum"/>
	<c path="h3d.Matrix"/>
	<x path="Bool"/>
</f></inFrustum>
		<inSphere public="1" set="method" line="40"><f a="s">
	<c path="h3d.col.Sphere"/>
	<x path="Bool"/>
</f></inSphere>
		<rayIntersection public="1" set="method" line="49"><f a="r:bestMatch">
	<c path="h3d.col.Ray"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></rayIntersection>
		<checkBounds set="method" line="57"><f a=""><x path="Void"/></f></checkBounds>
		<applyTransform set="method" line="65"><f a=""><x path="Void"/></f></applyTransform>
		<new public="1" set="method" line="14"><f a="obj:col">
	<c path="h3d.scene.Skin"/>
	<c path="h3d.col.PolygonBuffer"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>h3d.col.PolygonBuffer</e></m>
			<m n=":access"><e>h3d.scene.Skin</e></m>
		</meta>
	</class>
	<class path="h3d.col.Sphere" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/col/Sphere.hx">
		<implements path="h3d.col.Collider"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<r public="1"><x path="Float"/></r>
		<load public="1" get="inline" set="null" line="14">
			<f a="?sx:?sy:?sz:?sr" v="0.:0.:0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sr : 0., sz : 0., sy : 0., sx : 0. }</e></m></meta>
		</load>
		<getCenter public="1" get="inline" set="null" line="21"><f a=""><c path="h3d.col.Point"/></f></getCenter>
		<distance public="1" get="inline" set="null" line="25"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Float"/>
</f></distance>
		<distanceSq public="1" get="inline" set="null" line="30"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Float"/>
</f></distanceSq>
		<contains public="1" get="inline" set="null" line="37"><f a="p">
	<c path="h3d.col.Point"/>
	<x path="Bool"/>
</f></contains>
		<rayIntersection public="1" set="method" line="41"><f a="r:bestMatch">
	<c path="h3d.col.Ray"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></rayIntersection>
		<inFrustum public="1" get="inline" set="null" line="59"><f a="f:?m">
	<c path="h3d.col.Frustum"/>
	<c path="h3d.Matrix"/>
	<x path="Bool"/>
</f></inFrustum>
		<inFrustumMatrix set="method" line="64"><f a="f:m">
	<c path="h3d.col.Frustum"/>
	<c path="h3d.Matrix"/>
	<x path="Bool"/>
</f></inFrustumMatrix>
		<inSphere public="1" get="inline" set="null" line="81"><f a="s">
	<c path="h3d.col.Sphere"/>
	<x path="Bool"/>
</f></inSphere>
		<toString public="1" set="method" line="85"><f a=""><c path="String"/></f></toString>
		<new public="1" get="inline" set="null" line="10">
			<f a="?x:?y:?z:?r" v="0.:0.:0.:0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ r : 0., z : 0., y : 0., x : 0. }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="h3d.impl.IndexBuffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/Driver.hx" module="h3d.impl.Driver"><a>
	<is32><x path="Bool"/></is32>
	<b><c path="js.html.webgl.Buffer"/></b>
</a></typedef>
	<typedef path="h3d.impl.VertexBuffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/Driver.hx" module="h3d.impl.Driver"><a>
	<stride><x path="Int"/></stride>
	<b><c path="js.html.webgl.Buffer"/></b>
</a></typedef>
	<typedef path="h3d.impl.Texture" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/Driver.hx" module="h3d.impl.Driver"><a>
	<width><x path="Int"/></width>
	<t><c path="js.html.webgl.Texture"/></t>
	<pixelFmt><x path="Int"/></pixelFmt>
	<internalFmt><x path="Int"/></internalFmt>
	<height><x path="Int"/></height>
	<bits><x path="Int"/></bits>
	<bind><x path="Int"/></bind>
	<bias><x path="Float"/></bias>
</a></typedef>
	<typedef path="h3d.impl.DepthBuffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/Driver.hx" module="h3d.impl.Driver"><a><r><c path="js.html.webgl.Renderbuffer"/></r></a></typedef>
	<typedef path="h3d.impl.Query" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/Driver.hx" module="h3d.impl.Driver"><a/></typedef>
	<enum path="h3d.impl.Feature" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/Driver.hx" module="h3d.impl.Driver">
		<StandardDerivatives/>
		<FloatTextures/>
		<AllocDepthBuffer/>
		<HardwareAccelerated/>
		<MultipleRenderTargets/>
		<Queries/>
		<SRGBTextures/>
		<ShaderModel3/>
		<BottomLeftCoords/>
		<Wireframe/>
		<InstancedRendering/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="h3d.impl.QueryKind" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/Driver.hx" module="h3d.impl.Driver">
		<TimeStamp><haxe_doc>The result will give the GPU Timestamp (in nanoseconds, 1e-9 seconds) at the time the endQuery is performed</haxe_doc></TimeStamp>
		<Samples><haxe_doc>The result will give the number of samples that passes the depth buffer between beginQuery/endQuery range</haxe_doc></Samples>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="h3d.impl.RenderFlag" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/Driver.hx" module="h3d.impl.Driver">
		<CameraHandness><haxe_doc>0 = LeftHanded (default), 1 = RightHanded. Affects the meaning of triangle culling value.</haxe_doc></CameraHandness>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="h3d.impl.InputNames" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/Driver.hx" module="h3d.impl.Driver">
		<UID expr="0" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</UID>
		<CACHE expr="new Map&lt;String,InputNames&gt;()" line="128" static="1">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="h3d.impl.InputNames"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<String,InputNames>()]]></e></m></meta>
		</CACHE>
		<get public="1" set="method" line="129" static="1"><f a="names">
	<c path="Array"><c path="String"/></c>
	<x path="Null"><c path="h3d.impl.InputNames"/></x>
</f></get>
		<id public="1" set="null"><x path="Int"/></id>
		<names public="1" set="null"><c path="Array"><c path="String"/></c></names>
		<new set="method" line="123"><f a="names">
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.impl.Driver" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/Driver.hx">
		<logEnable public="1"><x path="Bool"/></logEnable>
		<hasFeature public="1" set="method" line="144"><f a="f">
	<e path="h3d.impl.Feature"/>
	<x path="Bool"/>
</f></hasFeature>
		<setRenderFlag public="1" set="method" line="148"><f a="r:value">
	<e path="h3d.impl.RenderFlag"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setRenderFlag>
		<isSupportedFormat public="1" set="method" line="151"><f a="fmt">
	<t path="h3d.mat.TextureFormat"/>
	<x path="Bool"/>
</f></isSupportedFormat>
		<isDisposed public="1" set="method" line="155"><f a=""><x path="Bool"/></f></isDisposed>
		<dispose public="1" set="method" line="159"><f a=""><x path="Void"/></f></dispose>
		<begin public="1" set="method" line="162"><f a="frame">
	<x path="Int"/>
	<x path="Void"/>
</f></begin>
		<log public="1" get="inline" set="null" line="165"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></log>
		<generateMipMaps public="1" set="method" line="171"><f a="texture">
	<c path="h3d.mat.Texture"/>
	<x path="Void"/>
</f></generateMipMaps>
		<getNativeShaderCode public="1" set="method" line="175"><f a="shader">
	<c path="hxsl.RuntimeShader"/>
	<c path="String"/>
</f></getNativeShaderCode>
		<logImpl set="method" line="179"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></logImpl>
		<clear public="1" set="method" line="182"><f a="?color:?depth:?stencil">
	<c path="h3d.Vector"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<captureRenderBuffer public="1" set="method" line="185"><f a="pixels">
	<c path="hxd.Pixels"/>
	<x path="Void"/>
</f></captureRenderBuffer>
		<capturePixels public="1" set="method" line="188"><f a="tex:layer:mipLevel:?region">
	<c path="h3d.mat.Texture"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="h2d.col.IBounds"/>
	<c path="hxd.Pixels"/>
</f></capturePixels>
		<getDriverName public="1" set="method" line="193"><f a="details">
	<x path="Bool"/>
	<c path="String"/>
</f></getDriverName>
		<init public="1" set="method" line="197">
			<f a="onCreate:?forceSoftware" v=":false">
				<f a="">
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ forceSoftware : false }</e></m></meta>
		</init>
		<resize public="1" set="method" line="200"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<selectShader public="1" set="method" line="203"><f a="shader">
	<c path="hxsl.RuntimeShader"/>
	<x path="Bool"/>
</f></selectShader>
		<selectMaterial public="1" set="method" line="207"><f a="pass">
	<c path="h3d.mat.Pass"/>
	<x path="Void"/>
</f></selectMaterial>
		<uploadShaderBuffers public="1" set="method" line="210"><f a="buffers:which">
	<c path="h3d.shader.Buffers"/>
	<x path="h3d.shader.BufferKind"/>
	<x path="Void"/>
</f></uploadShaderBuffers>
		<getShaderInputNames public="1" set="method" line="213"><f a=""><c path="h3d.impl.InputNames"/></f></getShaderInputNames>
		<selectBuffer public="1" set="method" line="217"><f a="buffer">
	<c path="h3d.Buffer"/>
	<x path="Void"/>
</f></selectBuffer>
		<selectMultiBuffers public="1" set="method" line="220"><f a="buffers">
	<c path="h3d.BufferOffset"/>
	<x path="Void"/>
</f></selectMultiBuffers>
		<draw public="1" set="method" line="223"><f a="ibuf:startIndex:ntriangles">
	<t path="h3d.impl.IndexBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></draw>
		<drawInstanced public="1" set="method" line="226"><f a="ibuf:commands">
	<t path="h3d.impl.IndexBuffer"/>
	<c path="h3d.impl.InstanceBuffer"/>
	<x path="Void"/>
</f></drawInstanced>
		<setRenderZone public="1" set="method" line="229"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setRenderZone>
		<setRenderTarget public="1" set="method" line="232">
			<f a="tex:?layer:?mipLevel" v=":0:0">
				<x path="Null"><c path="h3d.mat.Texture"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mipLevel : 0, layer : 0 }</e></m></meta>
		</setRenderTarget>
		<setRenderTargets public="1" set="method" line="235"><f a="textures">
	<c path="Array"><c path="h3d.mat.Texture"/></c>
	<x path="Void"/>
</f></setRenderTargets>
		<allocDepthBuffer public="1" set="method" line="238"><f a="b">
	<c path="h3d.mat.DepthBuffer"/>
	<t path="h3d.impl.DepthBuffer"/>
</f></allocDepthBuffer>
		<disposeDepthBuffer public="1" set="method" line="242"><f a="b">
	<c path="h3d.mat.DepthBuffer"/>
	<x path="Void"/>
</f></disposeDepthBuffer>
		<getDefaultDepthBuffer public="1" set="method" line="245"><f a=""><c path="h3d.mat.DepthBuffer"/></f></getDefaultDepthBuffer>
		<present public="1" set="method" line="249"><f a=""><x path="Void"/></f></present>
		<end public="1" set="method" line="252"><f a=""><x path="Void"/></f></end>
		<setDebug public="1" set="method" line="255"><f a="b">
	<x path="Bool"/>
	<x path="Void"/>
</f></setDebug>
		<allocTexture public="1" set="method" line="258"><f a="t">
	<c path="h3d.mat.Texture"/>
	<t path="h3d.impl.Texture"/>
</f></allocTexture>
		<allocIndexes public="1" set="method" line="262"><f a="count:is32">
	<x path="Int"/>
	<x path="Bool"/>
	<t path="h3d.impl.IndexBuffer"/>
</f></allocIndexes>
		<allocVertexes public="1" set="method" line="266"><f a="m">
	<c path="h3d.impl.ManagedBuffer"/>
	<t path="h3d.impl.VertexBuffer"/>
</f></allocVertexes>
		<allocInstanceBuffer public="1" set="method" line="270"><f a="b:bytes">
	<c path="h3d.impl.InstanceBuffer"/>
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></allocInstanceBuffer>
		<disposeTexture public="1" set="method" line="273"><f a="t">
	<c path="h3d.mat.Texture"/>
	<x path="Void"/>
</f></disposeTexture>
		<disposeIndexes public="1" set="method" line="276"><f a="i">
	<t path="h3d.impl.IndexBuffer"/>
	<x path="Void"/>
</f></disposeIndexes>
		<disposeVertexes public="1" set="method" line="279"><f a="v">
	<t path="h3d.impl.VertexBuffer"/>
	<x path="Void"/>
</f></disposeVertexes>
		<disposeInstanceBuffer public="1" set="method" line="282"><f a="b">
	<c path="h3d.impl.InstanceBuffer"/>
	<x path="Void"/>
</f></disposeInstanceBuffer>
		<uploadIndexBuffer public="1" set="method" line="285"><f a="i:startIndice:indiceCount:buf:bufPos">
	<t path="h3d.impl.IndexBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="hxd.IndexBuffer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadIndexBuffer>
		<uploadIndexBytes public="1" set="method" line="288"><f a="i:startIndice:indiceCount:buf:bufPos">
	<t path="h3d.impl.IndexBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadIndexBytes>
		<uploadVertexBuffer public="1" set="method" line="291"><f a="v:startVertex:vertexCount:buf:bufPos">
	<t path="h3d.impl.VertexBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="hxd.FloatBuffer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadVertexBuffer>
		<uploadVertexBytes public="1" set="method" line="294"><f a="v:startVertex:vertexCount:buf:bufPos">
	<t path="h3d.impl.VertexBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadVertexBytes>
		<uploadTextureBitmap public="1" set="method" line="297"><f a="t:bmp:mipLevel:side">
	<c path="h3d.mat.Texture"/>
	<c path="hxd.BitmapData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadTextureBitmap>
		<uploadTexturePixels public="1" set="method" line="300"><f a="t:pixels:mipLevel:side">
	<c path="h3d.mat.Texture"/>
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadTexturePixels>
		<readVertexBytes public="1" set="method" line="303"><f a="v:startVertex:vertexCount:buf:bufPos">
	<t path="h3d.impl.VertexBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readVertexBytes>
		<readIndexBytes public="1" set="method" line="307"><f a="v:startVertex:vertexCount:buf:bufPos">
	<t path="h3d.impl.IndexBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readIndexBytes>
		<copyTexture public="1" set="method" line="314">
			<f a="from:to">
				<c path="h3d.mat.Texture"/>
				<c path="h3d.mat.Texture"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if we could copy the texture, false otherwise (not supported by driver or mismatch in size/format)</haxe_doc>
		</copyTexture>
		<allocQuery public="1" set="method" line="320"><f a="queryKind">
	<e path="h3d.impl.QueryKind"/>
	<t path="h3d.impl.Query"/>
</f></allocQuery>
		<deleteQuery public="1" set="method" line="324"><f a="q">
	<t path="h3d.impl.Query"/>
	<x path="Void"/>
</f></deleteQuery>
		<beginQuery public="1" set="method" line="327"><f a="q">
	<t path="h3d.impl.Query"/>
	<x path="Void"/>
</f></beginQuery>
		<endQuery public="1" set="method" line="330"><f a="q">
	<t path="h3d.impl.Query"/>
	<x path="Void"/>
</f></endQuery>
		<queryResultAvailable public="1" set="method" line="333"><f a="q">
	<t path="h3d.impl.Query"/>
	<x path="Bool"/>
</f></queryResultAvailable>
		<queryResult public="1" set="method" line="337"><f a="q">
	<t path="h3d.impl.Query"/>
	<x path="Float"/>
</f></queryResult>
	</class>
	<typedef path="h3d.impl._GlDriver.GL" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/GlDriver.hx" private="1" module="h3d.impl.GlDriver"><t path="js.html.webgl.GL"/></typedef>
	<class path="js.html.webgl.RenderingContext" params="" file="/usr/local/lib/haxe/std/js/html/webgl/RenderingContext.hx" extern="1">
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" expr="256" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" expr="1024" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" expr="16384" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16384</e></m></meta>
		</COLOR_BUFFER_BIT>
		<POINTS public="1" get="inline" set="null" expr="0" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</POINTS>
		<LINES public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LINES>
		<LINE_LOOP public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" expr="3" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LINE_STRIP>
		<TRIANGLES public="1" get="inline" set="null" expr="4" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</TRIANGLES>
		<TRIANGLE_STRIP public="1" get="inline" set="null" expr="5" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="inline" set="null" expr="6" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</TRIANGLE_FAN>
		<ZERO public="1" get="inline" set="null" expr="0" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ZERO>
		<ONE public="1" get="inline" set="null" expr="1" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ONE>
		<SRC_COLOR public="1" get="inline" set="null" expr="768" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>768</e></m></meta>
		</SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" expr="769" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>769</e></m></meta>
		</ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="inline" set="null" expr="770" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>770</e></m></meta>
		</SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" expr="771" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>771</e></m></meta>
		</ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="inline" set="null" expr="772" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>772</e></m></meta>
		</DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" expr="773" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>773</e></m></meta>
		</ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" expr="774" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>774</e></m></meta>
		</DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" expr="775" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>775</e></m></meta>
		</ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" expr="776" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>776</e></m></meta>
		</SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="inline" set="null" expr="32774" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32774</e></m></meta>
		</FUNC_ADD>
		<BLEND_EQUATION public="1" get="inline" set="null" expr="32777" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" expr="32777" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" expr="34877" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34877</e></m></meta>
		</BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="inline" set="null" expr="32778" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32778</e></m></meta>
		</FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" expr="32779" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32779</e></m></meta>
		</FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="inline" set="null" expr="32968" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32968</e></m></meta>
		</BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="inline" set="null" expr="32969" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32969</e></m></meta>
		</BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" expr="32970" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32970</e></m></meta>
		</BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" expr="32971" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32971</e></m></meta>
		</BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" expr="32769" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32769</e></m></meta>
		</CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" expr="32770" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32770</e></m></meta>
		</ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="inline" set="null" expr="32771" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32771</e></m></meta>
		</CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" expr="32772" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32772</e></m></meta>
		</ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="inline" set="null" expr="32773" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32773</e></m></meta>
		</BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="inline" set="null" expr="34962" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34962</e></m></meta>
		</ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" expr="34963" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34963</e></m></meta>
		</ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34964" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34964</e></m></meta>
		</ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34965" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34965</e></m></meta>
		</ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="inline" set="null" expr="35040" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35040</e></m></meta>
		</STREAM_DRAW>
		<STATIC_DRAW public="1" get="inline" set="null" expr="35044" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35044</e></m></meta>
		</STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="inline" set="null" expr="35048" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35048</e></m></meta>
		</DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="inline" set="null" expr="34660" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34660</e></m></meta>
		</BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" expr="34661" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34661</e></m></meta>
		</BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" expr="34342" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34342</e></m></meta>
		</CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="inline" set="null" expr="1028" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1028</e></m></meta>
		</FRONT>
		<BACK public="1" get="inline" set="null" expr="1029" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1029</e></m></meta>
		</BACK>
		<FRONT_AND_BACK public="1" get="inline" set="null" expr="1032" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1032</e></m></meta>
		</FRONT_AND_BACK>
		<CULL_FACE public="1" get="inline" set="null" expr="2884" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2884</e></m></meta>
		</CULL_FACE>
		<BLEND public="1" get="inline" set="null" expr="3042" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3042</e></m></meta>
		</BLEND>
		<DITHER public="1" get="inline" set="null" expr="3024" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3024</e></m></meta>
		</DITHER>
		<STENCIL_TEST public="1" get="inline" set="null" expr="2960" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2960</e></m></meta>
		</STENCIL_TEST>
		<DEPTH_TEST public="1" get="inline" set="null" expr="2929" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2929</e></m></meta>
		</DEPTH_TEST>
		<SCISSOR_TEST public="1" get="inline" set="null" expr="3089" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3089</e></m></meta>
		</SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" expr="32823" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32823</e></m></meta>
		</POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" expr="32926" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32926</e></m></meta>
		</SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" expr="32928" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32928</e></m></meta>
		</SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="inline" set="null" expr="0" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_ENUM public="1" get="inline" set="null" expr="1280" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1280</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" expr="1281" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1281</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" expr="1282" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1282</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" expr="1285" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1285</e></m></meta>
		</OUT_OF_MEMORY>
		<CW public="1" get="inline" set="null" expr="2304" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2304</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="2305" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2305</e></m></meta>
		</CCW>
		<LINE_WIDTH public="1" get="inline" set="null" expr="2849" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2849</e></m></meta>
		</LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" expr="33901" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33901</e></m></meta>
		</ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" expr="33902" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33902</e></m></meta>
		</ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="inline" set="null" expr="2885" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2885</e></m></meta>
		</CULL_FACE_MODE>
		<FRONT_FACE public="1" get="inline" set="null" expr="2886" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2886</e></m></meta>
		</FRONT_FACE>
		<DEPTH_RANGE public="1" get="inline" set="null" expr="2928" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2928</e></m></meta>
		</DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" expr="2930" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2930</e></m></meta>
		</DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" expr="2931" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2931</e></m></meta>
		</DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="inline" set="null" expr="2932" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2932</e></m></meta>
		</DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" expr="2961" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2961</e></m></meta>
		</STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="inline" set="null" expr="2962" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2962</e></m></meta>
		</STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="inline" set="null" expr="2964" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2964</e></m></meta>
		</STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="2965" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2965</e></m></meta>
		</STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="2966" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2966</e></m></meta>
		</STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" expr="2967" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2967</e></m></meta>
		</STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" expr="2963" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2963</e></m></meta>
		</STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" expr="2968" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2968</e></m></meta>
		</STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" expr="34816" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34816</e></m></meta>
		</STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" expr="34817" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34817</e></m></meta>
		</STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="34818" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34818</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="34819" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34819</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" expr="36003" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36003</e></m></meta>
		</STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" expr="36004" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36004</e></m></meta>
		</STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" expr="36005" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36005</e></m></meta>
		</STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="inline" set="null" expr="2978" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2978</e></m></meta>
		</VIEWPORT>
		<SCISSOR_BOX public="1" get="inline" set="null" expr="3088" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3088</e></m></meta>
		</SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" expr="3106" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3106</e></m></meta>
		</COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" expr="3107" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3107</e></m></meta>
		</COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" expr="3317" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3317</e></m></meta>
		</UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="inline" set="null" expr="3333" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3333</e></m></meta>
		</PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" expr="3379" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3379</e></m></meta>
		</MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" expr="3386" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3386</e></m></meta>
		</MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="inline" set="null" expr="3408" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3408</e></m></meta>
		</SUBPIXEL_BITS>
		<RED_BITS public="1" get="inline" set="null" expr="3410" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3410</e></m></meta>
		</RED_BITS>
		<GREEN_BITS public="1" get="inline" set="null" expr="3411" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3411</e></m></meta>
		</GREEN_BITS>
		<BLUE_BITS public="1" get="inline" set="null" expr="3412" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3412</e></m></meta>
		</BLUE_BITS>
		<ALPHA_BITS public="1" get="inline" set="null" expr="3413" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3413</e></m></meta>
		</ALPHA_BITS>
		<DEPTH_BITS public="1" get="inline" set="null" expr="3414" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3414</e></m></meta>
		</DEPTH_BITS>
		<STENCIL_BITS public="1" get="inline" set="null" expr="3415" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3415</e></m></meta>
		</STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" expr="10752" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10752</e></m></meta>
		</POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" expr="32824" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32824</e></m></meta>
		</POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" expr="32873" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32873</e></m></meta>
		</TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" expr="32936" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32936</e></m></meta>
		</SAMPLE_BUFFERS>
		<SAMPLES public="1" get="inline" set="null" expr="32937" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32937</e></m></meta>
		</SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" expr="32938" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32938</e></m></meta>
		</SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" expr="32939" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32939</e></m></meta>
		</SAMPLE_COVERAGE_INVERT>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" expr="34467" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34467</e></m></meta>
		</COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="inline" set="null" expr="4352" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4352</e></m></meta>
		</DONT_CARE>
		<FASTEST public="1" get="inline" set="null" expr="4353" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4353</e></m></meta>
		</FASTEST>
		<NICEST public="1" get="inline" set="null" expr="4354" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4354</e></m></meta>
		</NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" expr="33170" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33170</e></m></meta>
		</GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="inline" set="null" expr="5120" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5120</e></m></meta>
		</BYTE>
		<UNSIGNED_BYTE public="1" get="inline" set="null" expr="5121" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5121</e></m></meta>
		</UNSIGNED_BYTE>
		<SHORT public="1" get="inline" set="null" expr="5122" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5122</e></m></meta>
		</SHORT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" expr="5123" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5123</e></m></meta>
		</UNSIGNED_SHORT>
		<INT public="1" get="inline" set="null" expr="5124" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5124</e></m></meta>
		</INT>
		<UNSIGNED_INT public="1" get="inline" set="null" expr="5125" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5125</e></m></meta>
		</UNSIGNED_INT>
		<FLOAT public="1" get="inline" set="null" expr="5126" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5126</e></m></meta>
		</FLOAT>
		<DEPTH_COMPONENT public="1" get="inline" set="null" expr="6402" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6402</e></m></meta>
		</DEPTH_COMPONENT>
		<ALPHA public="1" get="inline" set="null" expr="6406" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6406</e></m></meta>
		</ALPHA>
		<RGB public="1" get="inline" set="null" expr="6407" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6407</e></m></meta>
		</RGB>
		<RGBA public="1" get="inline" set="null" expr="6408" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6408</e></m></meta>
		</RGBA>
		<LUMINANCE public="1" get="inline" set="null" expr="6409" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6409</e></m></meta>
		</LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" expr="6410" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6410</e></m></meta>
		</LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" expr="32819" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32819</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" expr="32820" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32820</e></m></meta>
		</UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" expr="33635" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33635</e></m></meta>
		</UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="inline" set="null" expr="35632" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35632</e></m></meta>
		</FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="inline" set="null" expr="35633" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35633</e></m></meta>
		</VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" expr="34921" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34921</e></m></meta>
		</MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36347" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36347</e></m></meta>
		</MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" expr="36348" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36348</e></m></meta>
		</MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35661" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35661</e></m></meta>
		</MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35660" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35660</e></m></meta>
		</MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="34930" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34930</e></m></meta>
		</MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36349" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36349</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="inline" set="null" expr="35663" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35663</e></m></meta>
		</SHADER_TYPE>
		<DELETE_STATUS public="1" get="inline" set="null" expr="35712" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35712</e></m></meta>
		</DELETE_STATUS>
		<LINK_STATUS public="1" get="inline" set="null" expr="35714" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35714</e></m></meta>
		</LINK_STATUS>
		<VALIDATE_STATUS public="1" get="inline" set="null" expr="35715" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35715</e></m></meta>
		</VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="inline" set="null" expr="35717" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35717</e></m></meta>
		</ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35718" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35718</e></m></meta>
		</ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" expr="35721" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35721</e></m></meta>
		</ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" expr="35724" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35724</e></m></meta>
		</SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="inline" set="null" expr="35725" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35725</e></m></meta>
		</CURRENT_PROGRAM>
		<NEVER public="1" get="inline" set="null" expr="512" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</NEVER>
		<LESS public="1" get="inline" set="null" expr="513" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>513</e></m></meta>
		</LESS>
		<EQUAL public="1" get="inline" set="null" expr="514" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>514</e></m></meta>
		</EQUAL>
		<LEQUAL public="1" get="inline" set="null" expr="515" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>515</e></m></meta>
		</LEQUAL>
		<GREATER public="1" get="inline" set="null" expr="516" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>516</e></m></meta>
		</GREATER>
		<NOTEQUAL public="1" get="inline" set="null" expr="517" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>517</e></m></meta>
		</NOTEQUAL>
		<GEQUAL public="1" get="inline" set="null" expr="518" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>518</e></m></meta>
		</GEQUAL>
		<ALWAYS public="1" get="inline" set="null" expr="519" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>519</e></m></meta>
		</ALWAYS>
		<KEEP public="1" get="inline" set="null" expr="7680" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7680</e></m></meta>
		</KEEP>
		<REPLACE public="1" get="inline" set="null" expr="7681" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7681</e></m></meta>
		</REPLACE>
		<INCR public="1" get="inline" set="null" expr="7682" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7682</e></m></meta>
		</INCR>
		<DECR public="1" get="inline" set="null" expr="7683" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7683</e></m></meta>
		</DECR>
		<INVERT public="1" get="inline" set="null" expr="5386" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5386</e></m></meta>
		</INVERT>
		<INCR_WRAP public="1" get="inline" set="null" expr="34055" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34055</e></m></meta>
		</INCR_WRAP>
		<DECR_WRAP public="1" get="inline" set="null" expr="34056" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34056</e></m></meta>
		</DECR_WRAP>
		<VENDOR public="1" get="inline" set="null" expr="7936" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7936</e></m></meta>
		</VENDOR>
		<RENDERER public="1" get="inline" set="null" expr="7937" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7937</e></m></meta>
		</RENDERER>
		<VERSION public="1" get="inline" set="null" expr="7938" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7938</e></m></meta>
		</VERSION>
		<NEAREST public="1" get="inline" set="null" expr="9728" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9728</e></m></meta>
		</NEAREST>
		<LINEAR public="1" get="inline" set="null" expr="9729" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9729</e></m></meta>
		</LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9984" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9984</e></m></meta>
		</NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9985" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9985</e></m></meta>
		</LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9986" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9986</e></m></meta>
		</NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9987" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9987</e></m></meta>
		</LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" expr="10240" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10240</e></m></meta>
		</TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" expr="10241" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10241</e></m></meta>
		</TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" expr="10242" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10242</e></m></meta>
		</TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" expr="10243" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10243</e></m></meta>
		</TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="inline" set="null" expr="3553" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3553</e></m></meta>
		</TEXTURE_2D>
		<TEXTURE public="1" get="inline" set="null" expr="5890" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5890</e></m></meta>
		</TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" expr="34067" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34067</e></m></meta>
		</TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" expr="34068" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34068</e></m></meta>
		</TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" expr="34069" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34069</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" expr="34070" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34070</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" expr="34071" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34071</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" expr="34072" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34072</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" expr="34073" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34073</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" expr="34074" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34074</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" expr="34076" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34076</e></m></meta>
		</MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="inline" set="null" expr="33984" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33984</e></m></meta>
		</TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" expr="33985" line="226" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33985</e></m></meta>
		</TEXTURE1>
		<TEXTURE2 public="1" get="inline" set="null" expr="33986" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33986</e></m></meta>
		</TEXTURE2>
		<TEXTURE3 public="1" get="inline" set="null" expr="33987" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33987</e></m></meta>
		</TEXTURE3>
		<TEXTURE4 public="1" get="inline" set="null" expr="33988" line="229" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33988</e></m></meta>
		</TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" expr="33989" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33989</e></m></meta>
		</TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" expr="33990" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33990</e></m></meta>
		</TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" expr="33991" line="232" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33991</e></m></meta>
		</TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" expr="33992" line="233" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33992</e></m></meta>
		</TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" expr="33993" line="234" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33993</e></m></meta>
		</TEXTURE9>
		<TEXTURE10 public="1" get="inline" set="null" expr="33994" line="235" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33994</e></m></meta>
		</TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" expr="33995" line="236" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33995</e></m></meta>
		</TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" expr="33996" line="237" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33996</e></m></meta>
		</TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" expr="33997" line="238" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33997</e></m></meta>
		</TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" expr="33998" line="239" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33998</e></m></meta>
		</TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" expr="33999" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33999</e></m></meta>
		</TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" expr="34000" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34000</e></m></meta>
		</TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" expr="34001" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34001</e></m></meta>
		</TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" expr="34002" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34002</e></m></meta>
		</TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" expr="34003" line="244" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34003</e></m></meta>
		</TEXTURE19>
		<TEXTURE20 public="1" get="inline" set="null" expr="34004" line="245" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34004</e></m></meta>
		</TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" expr="34005" line="246" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34005</e></m></meta>
		</TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" expr="34006" line="247" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34006</e></m></meta>
		</TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" expr="34007" line="248" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34007</e></m></meta>
		</TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" expr="34008" line="249" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34008</e></m></meta>
		</TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" expr="34009" line="250" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34009</e></m></meta>
		</TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" expr="34010" line="251" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34010</e></m></meta>
		</TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" expr="34011" line="252" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34011</e></m></meta>
		</TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" expr="34012" line="253" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34012</e></m></meta>
		</TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" expr="34013" line="254" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34013</e></m></meta>
		</TEXTURE29>
		<TEXTURE30 public="1" get="inline" set="null" expr="34014" line="255" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34014</e></m></meta>
		</TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" expr="34015" line="256" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34015</e></m></meta>
		</TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" expr="34016" line="257" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34016</e></m></meta>
		</ACTIVE_TEXTURE>
		<REPEAT public="1" get="inline" set="null" expr="10497" line="258" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10497</e></m></meta>
		</REPEAT>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" expr="33071" line="259" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33071</e></m></meta>
		</CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="inline" set="null" expr="33648" line="260" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33648</e></m></meta>
		</MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="inline" set="null" expr="35664" line="261" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35664</e></m></meta>
		</FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" expr="35665" line="262" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35665</e></m></meta>
		</FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" expr="35666" line="263" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35666</e></m></meta>
		</FLOAT_VEC4>
		<INT_VEC2 public="1" get="inline" set="null" expr="35667" line="264" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35667</e></m></meta>
		</INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" expr="35668" line="265" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35668</e></m></meta>
		</INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" expr="35669" line="266" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35669</e></m></meta>
		</INT_VEC4>
		<BOOL public="1" get="inline" set="null" expr="35670" line="267" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35670</e></m></meta>
		</BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" expr="35671" line="268" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35671</e></m></meta>
		</BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" expr="35672" line="269" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35672</e></m></meta>
		</BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" expr="35673" line="270" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35673</e></m></meta>
		</BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="inline" set="null" expr="35674" line="271" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35674</e></m></meta>
		</FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" expr="35675" line="272" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35675</e></m></meta>
		</FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" expr="35676" line="273" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35676</e></m></meta>
		</FLOAT_MAT4>
		<SAMPLER_2D public="1" get="inline" set="null" expr="35678" line="274" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35678</e></m></meta>
		</SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" expr="35680" line="275" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35680</e></m></meta>
		</SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" expr="34338" line="276" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34338</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" expr="34339" line="277" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34339</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" expr="34340" line="278" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34340</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" expr="34341" line="279" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34341</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" expr="34922" line="280" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34922</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" expr="34373" line="281" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34373</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34975" line="282" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34975</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<IMPLEMENTATION_COLOR_READ_TYPE public="1" get="inline" set="null" expr="35738" line="283" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35738</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_TYPE>
		<IMPLEMENTATION_COLOR_READ_FORMAT public="1" get="inline" set="null" expr="35739" line="284" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35739</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_FORMAT>
		<COMPILE_STATUS public="1" get="inline" set="null" expr="35713" line="285" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35713</e></m></meta>
		</COMPILE_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" expr="36336" line="286" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36336</e></m></meta>
		</LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="inline" set="null" expr="36337" line="287" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36337</e></m></meta>
		</MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="inline" set="null" expr="36338" line="288" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36338</e></m></meta>
		</HIGH_FLOAT>
		<LOW_INT public="1" get="inline" set="null" expr="36339" line="289" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36339</e></m></meta>
		</LOW_INT>
		<MEDIUM_INT public="1" get="inline" set="null" expr="36340" line="290" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36340</e></m></meta>
		</MEDIUM_INT>
		<HIGH_INT public="1" get="inline" set="null" expr="36341" line="291" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36341</e></m></meta>
		</HIGH_INT>
		<FRAMEBUFFER public="1" get="inline" set="null" expr="36160" line="292" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36160</e></m></meta>
		</FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" expr="36161" line="293" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36161</e></m></meta>
		</RENDERBUFFER>
		<RGBA4 public="1" get="inline" set="null" expr="32854" line="294" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32854</e></m></meta>
		</RGBA4>
		<RGB5_A1 public="1" get="inline" set="null" expr="32855" line="295" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32855</e></m></meta>
		</RGB5_A1>
		<RGB565 public="1" get="inline" set="null" expr="36194" line="296" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36194</e></m></meta>
		</RGB565>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" expr="33189" line="297" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33189</e></m></meta>
		</DEPTH_COMPONENT16>
		<STENCIL_INDEX8 public="1" get="inline" set="null" expr="36168" line="298" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36168</e></m></meta>
		</STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="inline" set="null" expr="34041" line="299" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34041</e></m></meta>
		</DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" expr="36162" line="300" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36162</e></m></meta>
		</RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" expr="36163" line="301" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36163</e></m></meta>
		</RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" expr="36164" line="302" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36164</e></m></meta>
		</RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" expr="36176" line="303" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36176</e></m></meta>
		</RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" expr="36177" line="304" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36177</e></m></meta>
		</RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" expr="36178" line="305" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36178</e></m></meta>
		</RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" expr="36179" line="306" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36179</e></m></meta>
		</RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" expr="36180" line="307" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36180</e></m></meta>
		</RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" expr="36181" line="308" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36181</e></m></meta>
		</RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" expr="36048" line="309" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36048</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" expr="36049" line="310" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36049</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" expr="36050" line="311" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36050</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" expr="36051" line="312" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36051</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" expr="36064" line="313" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
		</COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" expr="36096" line="314" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36096</e></m></meta>
		</DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="36128" line="315" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36128</e></m></meta>
		</STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="33306" line="316" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33306</e></m></meta>
		</DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="inline" set="null" expr="0" line="317" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" expr="36053" line="318" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36053</e></m></meta>
		</FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" expr="36054" line="319" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36054</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" expr="36055" line="320" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36055</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" expr="36057" line="321" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36057</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" expr="36061" line="322" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36061</e></m></meta>
		</FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="323" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" expr="36007" line="324" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36007</e></m></meta>
		</RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" expr="34024" line="325" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34024</e></m></meta>
		</MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" expr="1286" line="326" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1286</e></m></meta>
		</INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" expr="37440" line="327" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37440</e></m></meta>
		</UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" expr="37441" line="328" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37441</e></m></meta>
		</UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" expr="37442" line="329" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37442</e></m></meta>
		</CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" expr="37443" line="330" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37443</e></m></meta>
		</UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" expr="37444" line="331" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37444</e></m></meta>
		</BROWSER_DEFAULT_WEBGL>
		<canvas public="1" set="null">
			<c path="js.html.CanvasElement"/>
			<haxe_doc>A read-only back-reference to the `HTMLCanvasElement`. Might be `null` if it is not associated with a `canvas` element.</haxe_doc>
		</canvas>
		<drawingBufferWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only width of the current drawing buffer. Should match the width of the canvas element associated with this context.</haxe_doc>
		</drawingBufferWidth>
		<drawingBufferHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only height of the current drawing buffer. Should match the height of the canvas element associated with this context.</haxe_doc>
		</drawingBufferHeight>
		<bufferData public="1" set="method">
			<f a="target:data:usage">
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates buffer data.</haxe_doc>
			<overloads>
				<bufferData public="1" set="method">
					<f a="target:size:usage">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates buffer data.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:data:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates buffer data.</haxe_doc>
				</bufferData>
			</overloads>
		</bufferData>
		<bufferSubData public="1" set="method">
			<f a="target:offset:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates buffer data starting at a passed offset.</haxe_doc>
			<overloads><bufferSubData public="1" set="method">
	<f a="target:offset:data">
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.lib.ArrayBuffer"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Updates buffer data starting at a passed offset.</haxe_doc>
</bufferSubData></overloads>
		</bufferSubData>
		<compressedTexImage2D public="1" set="method">
			<f a="target:level:internalformat:width:height:border:data">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture image in a compressed format.</haxe_doc>
		</compressedTexImage2D>
		<compressedTexSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:width:height:format:data">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture sub-image in a compressed format.</haxe_doc>
		</compressedTexSubImage2D>
		<readPixels public="1" set="method">
			<f a="x:y:width:height:format:type:pixels">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Reads a block of pixels from the `WebGLFrameBuffer`.
		@throws DOMError</haxe_doc>
		</readPixels>
		<texImage2D public="1" set="method">
			<f a="target:level:internalformat:format:type:video">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.VideoElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
			<overloads>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:image">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:canvas">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a 2D texture image.
		@throws DOMError</haxe_doc>
				</texImage2D>
			</overloads>
		</texImage2D>
		<texSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:format:type:video">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.VideoElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:image">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:canvas">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a sub-rectangle of the current `WebGLTexture`.
		@throws DOMError</haxe_doc>
				</texSubImage2D>
			</overloads>
		</texSubImage2D>
		<uniform1fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform1fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform1fv></overloads>
		</uniform1fv>
		<uniform2fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform2fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform2fv></overloads>
		</uniform2fv>
		<uniform3fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform3fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform3fv></overloads>
		</uniform3fv>
		<uniform4fv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform4fv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniform4fv></overloads>
		</uniform4fv>
		<uniform1iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform1iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform1iv></overloads>
		</uniform1iv>
		<uniform2iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform2iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform2iv></overloads>
		</uniform2iv>
		<uniform3iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform3iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform3iv></overloads>
		</uniform3iv>
		<uniform4iv public="1" set="method">
			<f a="location:data">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniform4iv public="1" set="method"><f a="location:data">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></uniform4iv></overloads>
		</uniform4iv>
		<uniformMatrix2fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix2fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix2fv></overloads>
		</uniformMatrix2fv>
		<uniformMatrix3fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix3fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix3fv></overloads>
		</uniformMatrix3fv>
		<uniformMatrix4fv public="1" set="method">
			<f a="location:transpose:data">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix4fv public="1" set="method"><f a="location:transpose:data">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></uniformMatrix4fv></overloads>
		</uniformMatrix4fv>
		<getContextAttributes public="1" set="method">
			<f a=""><t path="js.html.webgl.ContextAttributes"/></f>
			<haxe_doc>Returns a `WebGLContextAttributes` object that contains the actual context parameters. Might return `null`, if the context is lost.</haxe_doc>
		</getContextAttributes>
		<isContextLost public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the context is lost, otherwise returns `false`.</haxe_doc>
		</isContextLost>
		<getSupportedExtensions public="1" set="method">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an `Array` of `DOMString` elements with all the supported WebGL extensions.</haxe_doc>
		</getSupportedExtensions>
		<getExtension public="1" params="T" set="method">
			<f a="name">
				<x path="js.html.webgl.Extension"><c path="getExtension.T"/></x>
				<c path="getExtension.T"/>
			</f>
			<haxe_doc>Returns an extension object.
		@throws DOMError</haxe_doc>
		</getExtension>
		<activeTexture public="1" set="method">
			<f a="texture">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Selects the active texture unit.</haxe_doc>
		</activeTexture>
		<attachShader public="1" set="method">
			<f a="program:shader">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a `WebGLShader` to a `WebGLProgram`.</haxe_doc>
		</attachShader>
		<bindAttribLocation public="1" set="method">
			<f a="program:index:name">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a generic vertex index to a named attribute variable.</haxe_doc>
		</bindAttribLocation>
		<bindBuffer public="1" set="method">
			<f a="target:buffer">
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLBuffer` object to a given target.</haxe_doc>
		</bindBuffer>
		<bindFramebuffer public="1" set="method">
			<f a="target:framebuffer">
				<x path="Int"/>
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLFrameBuffer` object to a given target.</haxe_doc>
		</bindFramebuffer>
		<bindRenderbuffer public="1" set="method">
			<f a="target:renderbuffer">
				<x path="Int"/>
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLRenderBuffer` object to a given target.</haxe_doc>
		</bindRenderbuffer>
		<bindTexture public="1" set="method">
			<f a="target:texture">
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a `WebGLTexture` object to a given target.</haxe_doc>
		</bindTexture>
		<blendColor public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the source and destination blending factors.</haxe_doc>
		</blendColor>
		<blendEquation public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets both the RGB blend equation and alpha blend equation to a single equation.</haxe_doc>
		</blendEquation>
		<blendEquationSeparate public="1" set="method">
			<f a="modeRGB:modeAlpha">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the RGB blend equation and alpha blend equation separately.</haxe_doc>
		</blendEquationSeparate>
		<blendFunc public="1" set="method">
			<f a="sfactor:dfactor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines which function is used for blending pixel arithmetic.</haxe_doc>
		</blendFunc>
		<blendFuncSeparate public="1" set="method">
			<f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines which function is used for blending pixel arithmetic for RGB and alpha components separately.</haxe_doc>
		</blendFuncSeparate>
		<checkFramebufferStatus public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the status of the framebuffer.</haxe_doc>
		</checkFramebufferStatus>
		<clear public="1" set="method">
			<f a="mask">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Clears specified buffers to preset values.</haxe_doc>
		</clear>
		<clearColor public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the color values used when clearing color buffers.</haxe_doc>
		</clearColor>
		<clearDepth public="1" set="method">
			<f a="depth">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the depth value used when clearing the depth buffer.</haxe_doc>
		</clearDepth>
		<clearStencil public="1" set="method">
			<f a="s">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the stencil value used when clearing the stencil buffer.</haxe_doc>
		</clearStencil>
		<colorMask public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets which color components to enable or to disable when drawing or rendering to a `WebGLFramebuffer`.</haxe_doc>
		</colorMask>
		<compileShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Compiles a `WebGLShader`.</haxe_doc>
		</compileShader>
		<copyTexImage2D public="1" set="method">
			<f a="target:level:internalformat:x:y:width:height:border">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies a 2D texture image.</haxe_doc>
		</copyTexImage2D>
		<copyTexSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies a 2D texture sub-image.</haxe_doc>
		</copyTexSubImage2D>
		<createBuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Buffer"/></f>
			<haxe_doc>Creates a `WebGLBuffer` object.</haxe_doc>
		</createBuffer>
		<createFramebuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Framebuffer"/></f>
			<haxe_doc>Creates a `WebGLFrameBuffer` object.</haxe_doc>
		</createFramebuffer>
		<createProgram public="1" set="method">
			<f a=""><c path="js.html.webgl.Program"/></f>
			<haxe_doc>Creates a `WebGLProgram`.</haxe_doc>
		</createProgram>
		<createRenderbuffer public="1" set="method">
			<f a=""><c path="js.html.webgl.Renderbuffer"/></f>
			<haxe_doc>Creates a `WebGLRenderBuffer` object.</haxe_doc>
		</createRenderbuffer>
		<createShader public="1" set="method">
			<f a="type">
				<x path="Int"/>
				<c path="js.html.webgl.Shader"/>
			</f>
			<haxe_doc>Creates a `WebGLShader`.</haxe_doc>
		</createShader>
		<createTexture public="1" set="method">
			<f a=""><c path="js.html.webgl.Texture"/></f>
			<haxe_doc>Creates a `WebGLTexture` object.</haxe_doc>
		</createTexture>
		<cullFace public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies whether or not front- and/or back-facing polygons can be culled.</haxe_doc>
		</cullFace>
		<deleteBuffer public="1" set="method">
			<f a="buffer">
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLBuffer` object.</haxe_doc>
		</deleteBuffer>
		<deleteFramebuffer public="1" set="method">
			<f a="framebuffer">
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLFrameBuffer` object.</haxe_doc>
		</deleteFramebuffer>
		<deleteProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLProgram`.</haxe_doc>
		</deleteProgram>
		<deleteRenderbuffer public="1" set="method">
			<f a="renderbuffer">
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLRenderBuffer` object.</haxe_doc>
		</deleteRenderbuffer>
		<deleteShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLShader`.</haxe_doc>
		</deleteShader>
		<deleteTexture public="1" set="method">
			<f a="texture">
				<c path="js.html.webgl.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a `WebGLTexture` object.</haxe_doc>
		</deleteTexture>
		<depthFunc public="1" set="method">
			<f a="func">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a function that compares incoming pixel depth to the current depth buffer value.</haxe_doc>
		</depthFunc>
		<depthMask public="1" set="method">
			<f a="flag">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets whether writing into the depth buffer is enabled or disabled.</haxe_doc>
		</depthMask>
		<depthRange public="1" set="method">
			<f a="zNear:zFar">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the depth range mapping from normalized device coordinates to window or viewport coordinates.</haxe_doc>
		</depthRange>
		<detachShader public="1" set="method">
			<f a="program:shader">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Detaches a `WebGLShader`.</haxe_doc>
		</detachShader>
		<disable public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Disables specific WebGL capabilities for this context.</haxe_doc>
		</disable>
		<disableVertexAttribArray public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Disables a vertex attribute array at a given position.</haxe_doc>
		</disableVertexAttribArray>
		<drawArrays public="1" set="method">
			<f a="mode:first:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data.</haxe_doc>
		</drawArrays>
		<drawElements public="1" set="method">
			<f a="mode:count:type:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from element array data.</haxe_doc>
		</drawElements>
		<enable public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables specific WebGL capabilities for this context.</haxe_doc>
		</enable>
		<enableVertexAttribArray public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables a vertex attribute array at a given position.</haxe_doc>
		</enableVertexAttribArray>
		<finish public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Blocks execution until all previously called commands are finished.</haxe_doc>
		</finish>
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties different buffer commands, causing all commands to be executed as quickly as possible.</haxe_doc>
		</flush>
		<framebufferRenderbuffer public="1" set="method">
			<f a="target:attachment:renderbuffertarget:renderbuffer">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a `WebGLRenderingBuffer` object to a `WebGLFrameBuffer` object.</haxe_doc>
		</framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method">
			<f a="target:attachment:textarget:texture:level">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a textures image to a `WebGLFrameBuffer` object.</haxe_doc>
		</framebufferTexture2D>
		<frontFace public="1" set="method">
			<f a="mode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies whether polygons are front- or back-facing by setting a winding orientation.</haxe_doc>
		</frontFace>
		<generateMipmap public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Generates a set of mipmaps for a `WebGLTexture` object.</haxe_doc>
		</generateMipmap>
		<getActiveAttrib public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about an active attribute variable.</haxe_doc>
		</getActiveAttrib>
		<getActiveUniform public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about an active uniform variable.</haxe_doc>
		</getActiveUniform>
		<getAttachedShaders public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="js.html.webgl.Shader"/></c>
			</f>
			<haxe_doc>Returns a list of `WebGLShader` objects attached to a `WebGLProgram`.</haxe_doc>
		</getAttachedShaders>
		<getAttribLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the location of an attribute variable.</haxe_doc>
		</getAttribLocation>
		<getBufferParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the buffer.</haxe_doc>
		</getBufferParameter>
		<getParameter public="1" set="method">
			<f a="pname">
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns a value for the passed parameter name.
		@throws DOMError</haxe_doc>
		</getParameter>
		<getError public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns error information.</haxe_doc>
		</getError>
		<getFramebufferAttachmentParameter public="1" set="method">
			<f a="target:attachment:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the framebuffer.
		@throws DOMError</haxe_doc>
		</getFramebufferAttachmentParameter>
		<getProgramParameter public="1" set="method">
			<f a="program:pname">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the program.</haxe_doc>
		</getProgramParameter>
		<getProgramInfoLog public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the information log for a `WebGLProgram` object.</haxe_doc>
		</getProgramInfoLog>
		<getRenderbufferParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the renderbuffer.</haxe_doc>
		</getRenderbufferParameter>
		<getShaderParameter public="1" set="method">
			<f a="shader:pname">
				<c path="js.html.webgl.Shader"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the shader.</haxe_doc>
		</getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method">
			<f a="shadertype:precisiontype">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.ShaderPrecisionFormat"/>
			</f>
			<haxe_doc>Returns a `WebGLShaderPrecisionFormat` object describing the precision for the numeric format of the shader.</haxe_doc>
		</getShaderPrecisionFormat>
		<getShaderInfoLog public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the information log for a `WebGLShader` object.</haxe_doc>
		</getShaderInfoLog>
		<getShaderSource public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the source code of a `WebGLShader` as a string.</haxe_doc>
		</getShaderSource>
		<getTexParameter public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about the texture.</haxe_doc>
		</getTexParameter>
		<getUniform public="1" set="method">
			<f a="program:location">
				<c path="js.html.webgl.Program"/>
				<c path="js.html.webgl.UniformLocation"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of a uniform variable at a given location.</haxe_doc>
		</getUniform>
		<getUniformLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<c path="js.html.webgl.UniformLocation"/>
			</f>
			<haxe_doc>Returns the location of a uniform variable.</haxe_doc>
		</getUniformLocation>
		<getVertexAttrib public="1" set="method">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a vertex attribute at a given position.
		@throws DOMError</haxe_doc>
		</getVertexAttrib>
		<getVertexAttribOffset public="1" set="method">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the address of a given vertex attribute.</haxe_doc>
		</getVertexAttribOffset>
		<hint public="1" set="method">
			<f a="target:mode">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies hints for certain behaviors. The interpretation of these hints depend on the implementation.</haxe_doc>
		</hint>
		<isBuffer public="1" set="method">
			<f a="buffer">
				<c path="js.html.webgl.Buffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed buffer is valid.</haxe_doc>
		</isBuffer>
		<isEnabled public="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether a specific WebGL capability is enabled or not for this context.</haxe_doc>
		</isEnabled>
		<isFramebuffer public="1" set="method">
			<f a="framebuffer">
				<c path="js.html.webgl.Framebuffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLFrameBuffer` object is valid.</haxe_doc>
		</isFramebuffer>
		<isProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLProgram` is valid.</haxe_doc>
		</isProgram>
		<isRenderbuffer public="1" set="method">
			<f a="renderbuffer">
				<c path="js.html.webgl.Renderbuffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLRenderingBuffer` is valid.</haxe_doc>
		</isRenderbuffer>
		<isShader public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLShader` is valid.</haxe_doc>
		</isShader>
		<isTexture public="1" set="method">
			<f a="texture">
				<c path="js.html.webgl.Texture"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean indicating if the passed `WebGLTexture` is valid.</haxe_doc>
		</isTexture>
		<lineWidth public="1" set="method">
			<f a="width">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the line width of rasterized lines.</haxe_doc>
		</lineWidth>
		<linkProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Links the passed `WebGLProgram` object.</haxe_doc>
		</linkProgram>
		<pixelStorei public="1" set="method">
			<f a="pname:param">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the pixel storage modes</haxe_doc>
		</pixelStorei>
		<polygonOffset public="1" set="method">
			<f a="factor:units">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the scale factors and units to calculate depth values.</haxe_doc>
		</polygonOffset>
		<renderbufferStorage public="1" set="method">
			<f a="target:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a renderbuffer data store.</haxe_doc>
		</renderbufferStorage>
		<sampleCoverage public="1" set="method">
			<f a="value:invert">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies multi-sample coverage parameters for anti-aliasing effects.</haxe_doc>
		</sampleCoverage>
		<scissor public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the scissor box.</haxe_doc>
		</scissor>
		<shaderSource public="1" set="method">
			<f a="shader:source">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the source code in a `WebGLShader`.</haxe_doc>
		</shaderSource>
		<stencilFunc public="1" set="method">
			<f a="func:ref:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the both front and back function and reference value for stencil testing.</haxe_doc>
		</stencilFunc>
		<stencilFuncSeparate public="1" set="method">
			<f a="face:func:ref:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the front and/or back function and reference value for stencil testing.</haxe_doc>
		</stencilFuncSeparate>
		<stencilMask public="1" set="method">
			<f a="mask">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Controls enabling and disabling of both the front and back writing of individual bits in the stencil planes.</haxe_doc>
		</stencilMask>
		<stencilMaskSeparate public="1" set="method">
			<f a="face:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Controls enabling and disabling of front and/or back writing of individual bits in the stencil planes.</haxe_doc>
		</stencilMaskSeparate>
		<stencilOp public="1" set="method">
			<f a="fail:zfail:zpass">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets both the front and back-facing stencil test actions.</haxe_doc>
		</stencilOp>
		<stencilOpSeparate public="1" set="method">
			<f a="face:fail:zfail:zpass">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the front and/or back-facing stencil test actions.</haxe_doc>
		</stencilOpSeparate>
		<texParameterf public="1" set="method"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<uniform1f public="1" set="method"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform2f public="1" set="method"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform3f public="1" set="method"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform4f public="1" set="method"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform1i public="1" set="method"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform2i public="1" set="method"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform3i public="1" set="method"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform4i public="1" set="method"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<useProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Uses the specified `WebGLProgram` as part the current rendering state.</haxe_doc>
		</useProgram>
		<validateProgram public="1" set="method">
			<f a="program">
				<c path="js.html.webgl.Program"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Validates a `WebGLProgram`.</haxe_doc>
		</validateProgram>
		<vertexAttrib1f public="1" set="method"><f a="indx:x">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib1fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib1fv></overloads>
		</vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method"><f a="indx:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib2fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib2fv></overloads>
		</vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method"><f a="indx:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib3fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib3fv></overloads>
		</vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method"><f a="indx:x:y:z:w">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib4fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib4fv></overloads>
		</vertexAttrib4fv>
		<vertexAttribPointer public="1" set="method">
			<f a="indx:size:type:normalized:stride:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies the data formats and locations of vertex attributes in a vertex attributes array.</haxe_doc>
		</vertexAttribPointer>
		<viewport public="1" set="method">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the viewport.</haxe_doc>
		</viewport>
		<haxe_doc><![CDATA[The `WebGLRenderingContext` interface provides the OpenGL ES 2.0 rendering context for the drawing surface of an HTML `canvas` element.

	Documentation [WebGLRenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLRenderingContext"</e></m></meta>
	</class>
	<class path="h3d.impl._GlDriver.GL2" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/GlDriver.hx" private="1" module="h3d.impl.GlDriver" extern="1">
		<extends path="js.html.webgl.RenderingContext"/>
		<RGBA16F public="1" get="inline" set="null" expr="0x881A" line="25" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x881A</e></m></meta>
		</RGBA16F>
		<RGBA32F public="1" get="inline" set="null" expr="0x8814" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8814</e></m></meta>
		</RGBA32F>
		<RED public="1" get="inline" set="null" expr="0x1903" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1903</e></m></meta>
		</RED>
		<RG public="1" get="inline" set="null" expr="0x8227" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8227</e></m></meta>
		</RG>
		<RGBA8 public="1" get="inline" set="null" expr="0x8058" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8058</e></m></meta>
		</RGBA8>
		<BGRA public="1" get="inline" set="null" expr="0x80E1" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x80E1</e></m></meta>
		</BGRA>
		<HALF_FLOAT public="1" get="inline" set="null" expr="0x140B" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x140B</e></m></meta>
		</HALF_FLOAT>
		<SRGB public="1" get="inline" set="null" expr="0x8C40" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C40</e></m></meta>
		</SRGB>
		<SRGB8 public="1" get="inline" set="null" expr="0x8C41" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C41</e></m></meta>
		</SRGB8>
		<SRGB_ALPHA public="1" get="inline" set="null" expr="0x8C42" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C42</e></m></meta>
		</SRGB_ALPHA>
		<SRGB8_ALPHA public="1" get="inline" set="null" expr="0x8C43" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C43</e></m></meta>
		</SRGB8_ALPHA>
		<R8 public="1" get="inline" set="null" expr="0x8229" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8229</e></m></meta>
		</R8>
		<RG8 public="1" get="inline" set="null" expr="0x822B" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822B</e></m></meta>
		</RG8>
		<R16F public="1" get="inline" set="null" expr="0x822D" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822D</e></m></meta>
		</R16F>
		<R32F public="1" get="inline" set="null" expr="0x822E" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822E</e></m></meta>
		</R32F>
		<RG16F public="1" get="inline" set="null" expr="0x822F" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x822F</e></m></meta>
		</RG16F>
		<RG32F public="1" get="inline" set="null" expr="0x8230" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8230</e></m></meta>
		</RG32F>
		<RGB16F public="1" get="inline" set="null" expr="0x881B" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x881B</e></m></meta>
		</RGB16F>
		<RGB32F public="1" get="inline" set="null" expr="0x8815" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8815</e></m></meta>
		</RGB32F>
		<R11F_G11F_B10F public="1" get="inline" set="null" expr="0x8C3A" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C3A</e></m></meta>
		</R11F_G11F_B10F>
		<RGB10_A2 public="1" get="inline" set="null" expr="0x8059" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8059</e></m></meta>
		</RGB10_A2>
		<DEPTH_COMPONENT24 public="1" get="inline" set="null" expr="0x81A6" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x81A6</e></m></meta>
		</DEPTH_COMPONENT24>
		<UNIFORM_BUFFER public="1" get="inline" set="null" expr="0x8A11" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8A11</e></m></meta>
		</UNIFORM_BUFFER>
		<TEXTURE_2D_ARRAY public="1" get="inline" set="null" expr="0x8C1A" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C1A</e></m></meta>
		</TEXTURE_2D_ARRAY>
		<UNSIGNED_INT_2_10_10_10_REV public="1" get="inline" set="null" expr="0x8368" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8368</e></m></meta>
		</UNSIGNED_INT_2_10_10_10_REV>
		<UNSIGNED_INT_10F_11F_11F_REV public="1" get="inline" set="null" expr="0x8C3B" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8C3B</e></m></meta>
		</UNSIGNED_INT_10F_11F_11F_REV>
		<FUNC_MIN public="1" get="inline" set="null" expr="0x8007" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8007</e></m></meta>
		</FUNC_MIN>
		<FUNC_MAX public="1" get="inline" set="null" expr="0x8008" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8008</e></m></meta>
		</FUNC_MAX>
		<TEXTURE_LOD_BIAS public="1" get="inline" set="null" expr="0x84FD" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x84FD</e></m></meta>
		</TEXTURE_LOD_BIAS>
		<TEXTURE_BASE_LEVEL public="1" get="inline" set="null" expr="0x813C" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x813C</e></m></meta>
		</TEXTURE_BASE_LEVEL>
		<TEXTURE_MAX_LEVEL public="1" get="inline" set="null" expr="0x813D" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x813D</e></m></meta>
		</TEXTURE_MAX_LEVEL>
		<drawBuffers public="1" set="method"><f a="buffers">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></drawBuffers>
		<vertexAttribDivisor public="1" set="method"><f a="index:divisor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribDivisor>
		<drawElementsInstanced public="1" set="method"><f a="mode:count:type:offset:instanceCount">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElementsInstanced>
		<getUniformBlockIndex public="1" set="method"><f a="p:name">
	<t path="h3d.impl._GlDriver.Program"/>
	<c path="String"/>
	<x path="Int"/>
</f></getUniformBlockIndex>
		<bindBufferBase public="1" set="method"><f a="target:index:buffer">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></bindBufferBase>
		<uniformBlockBinding public="1" set="method"><f a="p:blockIndex:blockBinding">
	<t path="h3d.impl._GlDriver.Program"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniformBlockBinding>
		<framebufferTextureLayer public="1" set="method"><f a="target:attach:t:level:layer">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTextureLayer>
		<texImage3D public="1" set="method"><f a="target:level:internalformat:width:height:depth:border:format:type:source">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></texImage3D>
		<compressedTexImage3D public="1" set="method"><f a="target:level:internalformat:width:height:depth:border:source">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></compressedTexImage3D>
		<texSubImage3D public="1" set="method"><f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:image">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></texSubImage3D>
		<compressedTexSubImage3D public="1" set="method"><f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:image">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></compressedTexSubImage3D>
	</class>
	<typedef path="h3d.impl._GlDriver.Uniform" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/GlDriver.hx" private="1" module="h3d.impl.GlDriver"><c path="js.html.webgl.UniformLocation"/></typedef>
	<typedef path="h3d.impl._GlDriver.Program" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/GlDriver.hx" private="1" module="h3d.impl.GlDriver"><c path="js.html.webgl.Program"/></typedef>
	<typedef path="h3d.impl._GlDriver.GLShader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/GlDriver.hx" private="1" module="h3d.impl.GlDriver"><c path="js.html.webgl.Shader"/></typedef>
	<typedef path="h3d.impl._GlDriver.Framebuffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/GlDriver.hx" private="1" module="h3d.impl.GlDriver"><c path="js.html.webgl.Framebuffer"/></typedef>
	<typedef path="h3d.impl._GlDriver.ShaderCompiler" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/GlDriver.hx" private="1" module="h3d.impl.GlDriver"><c path="hxsl.GlslOut"/></typedef>
	<class path="h3d.impl._GlDriver.CompiledShader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/GlDriver.hx" private="1" module="h3d.impl.GlDriver">
		<s public="1"><t path="h3d.impl._GlDriver.GLShader"/></s>
		<vertex public="1"><x path="Bool"/></vertex>
		<globals public="1"><t path="h3d.impl._GlDriver.Uniform"/></globals>
		<params public="1"><t path="h3d.impl._GlDriver.Uniform"/></params>
		<textures public="1"><c path="Array"><a>
	<u><t path="h3d.impl._GlDriver.Uniform"/></u>
	<t><e path="hxsl.Type"/></t>
	<mode><x path="Int"/></mode>
</a></c></textures>
		<buffers public="1"><c path="Array"><x path="Int"/></c></buffers>
		<shader public="1"><c path="hxsl.RuntimeShaderData"/></shader>
		<new public="1" set="method" line="95"><f a="s:vertex:shader">
	<t path="h3d.impl._GlDriver.GLShader"/>
	<x path="Bool"/>
	<c path="hxsl.RuntimeShaderData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.impl._GlDriver.CompiledAttribute" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/GlDriver.hx" private="1" module="h3d.impl.GlDriver">
		<index public="1"><x path="Int"/></index>
		<type public="1"><x path="Int"/></type>
		<size public="1"><x path="Int"/></size>
		<offset public="1"><x path="Int"/></offset>
		<divisor public="1"><x path="Int"/></divisor>
		<new public="1" set="method" line="108"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.impl._GlDriver.CompiledProgram" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/GlDriver.hx" private="1" module="h3d.impl.GlDriver">
		<p public="1"><t path="h3d.impl._GlDriver.Program"/></p>
		<vertex public="1"><c path="h3d.impl._GlDriver.CompiledShader"/></vertex>
		<fragment public="1"><c path="h3d.impl._GlDriver.CompiledShader"/></fragment>
		<stride public="1"><x path="Int"/></stride>
		<inputs public="1"><c path="h3d.impl.InputNames"/></inputs>
		<attribs public="1"><c path="Array"><c path="h3d.impl._GlDriver.CompiledAttribute"/></c></attribs>
		<hasAttribIndex public="1"><c path="Array"><x path="Bool"/></c></hasAttribIndex>
		<new public="1" set="method" line="120"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.impl.GlDriver" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/GlDriver.hx">
		<extends path="h3d.impl.Driver"/>
		<UID expr="0" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</UID>
		<ALLOW_WEBGL2 public="1" expr="true" line="135" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</ALLOW_WEBGL2>
		<BLACK expr="new h3d.Vector(0, 0, 0, 0)" line="180" static="1">
			<c path="h3d.Vector"/>
			<meta><m n=":value"><e>new h3d.Vector(0, 0, 0, 0)</e></m></meta>
		</BLACK>
		<outOfMemoryCheck public="1" expr="false" line="186" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Perform OUT_OF_MEMORY checks when allocating textures/buffers.
		Default true, except in WebGL (false)</haxe_doc>
		</outOfMemoryCheck>
		<STREAM_POS get="inline" set="null" expr="1" line="1133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</STREAM_POS>
		<TFILTERS expr="[[[GL.NEAREST, GL.NEAREST], [GL.LINEAR, GL.LINEAR]], [[GL.NEAREST, GL.NEAREST_MIPMAP_NEAREST], [GL.LINEAR, GL.LINEAR_MIPMAP_NEAREST]], [[GL.NEAREST, GL.NEAREST_MIPMAP_LINEAR], [GL.LINEAR, GL.LINEAR_MIPMAP_LINEAR]]]" line="1799" static="1">
			<c path="Array"><c path="Array"><c path="Array"><x path="Int"/></c></c></c>
			<meta><m n=":value"><e>[[[GL.NEAREST, GL.NEAREST], [GL.LINEAR, GL.LINEAR]], [[GL.NEAREST, GL.NEAREST_MIPMAP_NEAREST], [GL.LINEAR, GL.LINEAR_MIPMAP_NEAREST]], [[GL.NEAREST, GL.NEAREST_MIPMAP_LINEAR], [GL.LINEAR, GL.LINEAR_MIPMAP_LINEAR]]]</e></m></meta>
		</TFILTERS>
		<TWRAP expr="[GL.CLAMP_TO_EDGE, GL.REPEAT]" line="1805" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[GL.CLAMP_TO_EDGE, GL.REPEAT]</e></m></meta>
		</TWRAP>
		<FACES expr="[0, GL.FRONT, GL.BACK, GL.FRONT_AND_BACK]" line="1810" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, GL.FRONT, GL.BACK, GL.FRONT_AND_BACK]</e></m></meta>
		</FACES>
		<BLEND expr="[GL.ONE, GL.ZERO, GL.SRC_ALPHA, GL.SRC_COLOR, GL.DST_ALPHA, GL.DST_COLOR, GL.ONE_MINUS_SRC_ALPHA, GL.ONE_MINUS_SRC_COLOR, GL.ONE_MINUS_DST_ALPHA, GL.ONE_MINUS_DST_COLOR, GL.CONSTANT_COLOR, GL.CONSTANT_ALPHA, GL.ONE_MINUS_CONSTANT_COLOR, GL.ONE_MINUS_CONSTANT_ALPHA, GL.SRC_ALPHA_SATURATE]" line="1817" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[GL.ONE, GL.ZERO, GL.SRC_ALPHA, GL.SRC_COLOR, GL.DST_ALPHA, GL.DST_COLOR, GL.ONE_MINUS_SRC_ALPHA, GL.ONE_MINUS_SRC_COLOR, GL.ONE_MINUS_DST_ALPHA, GL.ONE_MINUS_DST_COLOR, GL.CONSTANT_COLOR, GL.CONSTANT_ALPHA, GL.ONE_MINUS_CONSTANT_COLOR, GL.ONE_MINUS_CONSTANT_ALPHA, GL.SRC_ALPHA_SATURATE]</e></m></meta>
		</BLEND>
		<COMPARE expr="[GL.ALWAYS, GL.NEVER, GL.EQUAL, GL.NOTEQUAL, GL.GREATER, GL.GEQUAL, GL.LESS, GL.LEQUAL]" line="1835" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[GL.ALWAYS, GL.NEVER, GL.EQUAL, GL.NOTEQUAL, GL.GREATER, GL.GEQUAL, GL.LESS, GL.LEQUAL]</e></m></meta>
		</COMPARE>
		<STENCIL_OP expr="[GL.KEEP, GL.ZERO, GL.REPLACE, GL.INCR, GL.INCR_WRAP, GL.DECR, GL.DECR_WRAP, GL.INVERT]" line="1846" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[GL.KEEP, GL.ZERO, GL.REPLACE, GL.INCR, GL.INCR_WRAP, GL.DECR, GL.DECR_WRAP, GL.INVERT]</e></m></meta>
		</STENCIL_OP>
		<OP expr="[GL.FUNC_ADD, GL.FUNC_SUBTRACT, GL.FUNC_REVERSE_SUBTRACT, GL2.FUNC_MIN, GL2.FUNC_MAX]" line="1857" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[GL.FUNC_ADD, GL.FUNC_SUBTRACT, GL.FUNC_REVERSE_SUBTRACT, GL2.FUNC_MIN, GL2.FUNC_MAX]</e></m></meta>
		</OP>
		<CUBE_FACES expr="[GL.TEXTURE_CUBE_MAP_POSITIVE_X, GL.TEXTURE_CUBE_MAP_NEGATIVE_X, GL.TEXTURE_CUBE_MAP_POSITIVE_Y, GL.TEXTURE_CUBE_MAP_NEGATIVE_Y, GL.TEXTURE_CUBE_MAP_POSITIVE_Z, GL.TEXTURE_CUBE_MAP_NEGATIVE_Z]" line="1865" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[GL.TEXTURE_CUBE_MAP_POSITIVE_X, GL.TEXTURE_CUBE_MAP_NEGATIVE_X, GL.TEXTURE_CUBE_MAP_POSITIVE_Y, GL.TEXTURE_CUBE_MAP_NEGATIVE_Y, GL.TEXTURE_CUBE_MAP_POSITIVE_Z, GL.TEXTURE_CUBE_MAP_NEGATIVE_Z]</e></m></meta>
		</CUBE_FACES>
		<CBUFFERS expr="[for (i  in  0 ... 32) [for (k  in  0 ... i) GL.COLOR_ATTACHMENT0 + k]]" line="1878" static="1">
			<c path="Array"><c path="Array"><x path="Int"/></c></c>
			<meta><m n=":value"><e>[for (i  in  0 ... 32) [for (k  in  0 ... i) GL.COLOR_ATTACHMENT0 + k]]</e></m></meta>
		</CBUFFERS>
		<canvas><c path="js.html.CanvasElement"/></canvas>
		<mrtExt><a><drawBuffersWEBGL set="method"><f a="colors">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></drawBuffersWEBGL></a></mrtExt>
		<gl public="1"><c path="h3d.impl._GlDriver.GL2"/></gl>
		<commonFB><t path="h3d.impl._GlDriver.Framebuffer"/></commonFB>
		<curAttribs expr="new Array&lt;Bool&gt;()">
			<c path="Array"><x path="Bool"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Bool>()]]></e></m></meta>
		</curAttribs>
		<maxIdxCurAttribs expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</maxIdxCurAttribs>
		<curShader><c path="h3d.impl._GlDriver.CompiledProgram"/></curShader>
		<curBuffer><c path="h3d.Buffer"/></curBuffer>
		<curIndexBuffer><t path="h3d.impl.IndexBuffer"/></curIndexBuffer>
		<curMatBits expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</curMatBits>
		<curStOpBits expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</curStOpBits>
		<curStMaskBits expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</curStMaskBits>
		<curStEnabled expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</curStEnabled>
		<defStencil><c path="h3d.mat.Stencil"/></defStencil>
		<programs><t path="Map">
	<x path="Int"/>
	<c path="h3d.impl._GlDriver.CompiledProgram"/>
</t></programs>
		<frame><x path="Int"/></frame>
		<lastActiveIndex expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</lastActiveIndex>
		<curColorMask expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</curColorMask>
		<currentDivisor expr="[for (i  in  0 ... 32) 0]">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[for (i  in  0 ... 32) 0]</e></m></meta>
		</currentDivisor>
		<bufferWidth><x path="Int"/></bufferWidth>
		<bufferHeight><x path="Int"/></bufferHeight>
		<curTarget><c path="h3d.mat.Texture"/></curTarget>
		<curTargets expr="[]">
			<c path="Array"><c path="h3d.mat.Texture"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</curTargets>
		<numTargets><x path="Int"/></numTargets>
		<curTargetLayer><x path="Int"/></curTargetLayer>
		<curTargetMip><x path="Int"/></curTargetMip>
		<debug><x path="Bool"/></debug>
		<glDebug><x path="Bool"/></glDebug>
		<boundTextures expr="[]">
			<c path="Array"><t path="h3d.impl.Texture"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</boundTextures>
		<glES><x path="Null"><x path="Float"/></x></glES>
		<shaderVersion><x path="Null"><x path="Int"/></x></shaderVersion>
		<firstShader expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</firstShader>
		<rightHanded expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</rightHanded>
		<hasMultiIndirect expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</hasMultiIndirect>
		<maxCompressedTexturesSupport expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</maxCompressedTexturesSupport>
		<drawMode><x path="Int"/></drawMode>
		<isIntelGpu><x path="Bool"/></isIntelGpu>
		<setRenderFlag public="1" set="method" line="266" override="1"><f a="r:value">
	<e path="h3d.impl.RenderFlag"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setRenderFlag>
		<logImpl set="method" line="274" override="1">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</logImpl>
		<setDebug public="1" set="method" line="282" override="1"><f a="d">
	<x path="Bool"/>
	<x path="Void"/>
</f></setDebug>
		<begin public="1" set="method" line="286" override="1"><f a="frame">
	<x path="Int"/>
	<x path="Void"/>
</f></begin>
		<getShaderInputNames public="1" set="method" line="294" override="1"><f a=""><c path="h3d.impl.InputNames"/></f></getShaderInputNames>
		<makeCompiler set="method" line="298"><f a=""><c path="hxsl.GlslOut"/></f></makeCompiler>
		<getNativeShaderCode public="1" set="method" line="308" override="1"><f a="shader">
	<c path="hxsl.RuntimeShader"/>
	<c path="String"/>
</f></getNativeShaderCode>
		<getDriverName public="1" set="method" line="315" override="1"><f a="details">
	<x path="Bool"/>
	<c path="String"/>
</f></getDriverName>
		<compileShader set="method" line="327"><f a="glout:shader">
	<t path="h3d.impl._GlDriver.ShaderCompiler"/>
	<c path="hxsl.RuntimeShaderData"/>
	<c path="h3d.impl._GlDriver.CompiledShader"/>
</f></compileShader>
		<initShader set="method" line="350"><f a="p:s:shader:rt">
	<c path="h3d.impl._GlDriver.CompiledProgram"/>
	<c path="h3d.impl._GlDriver.CompiledShader"/>
	<c path="hxsl.RuntimeShaderData"/>
	<c path="hxsl.RuntimeShader"/>
	<x path="Void"/>
</f></initShader>
		<selectShader public="1" set="method" line="405" override="1"><f a="shader">
	<c path="hxsl.RuntimeShader"/>
	<x path="Bool"/>
</f></selectShader>
		<setProgram set="method" line="501"><f a="p">
	<c path="h3d.impl._GlDriver.CompiledProgram"/>
	<x path="Void"/>
</f></setProgram>
		<uploadShaderBuffers public="1" set="method" line="530" override="1"><f a="buf:which">
	<c path="h3d.shader.Buffers"/>
	<x path="h3d.shader.BufferKind"/>
	<x path="Void"/>
</f></uploadShaderBuffers>
		<uploadBuffer set="method" line="535"><f a="buffer:s:buf:which">
	<c path="h3d.shader.Buffers"/>
	<c path="h3d.impl._GlDriver.CompiledShader"/>
	<c path="h3d.shader.ShaderBuffers"/>
	<x path="h3d.shader.BufferKind"/>
	<x path="Void"/>
</f></uploadBuffer>
		<selectMaterial public="1" set="method" line="637" override="1"><f a="pass">
	<c path="h3d.mat.Pass"/>
	<x path="Void"/>
</f></selectMaterial>
		<selectMaterialBits set="method" line="676"><f a="bits">
	<x path="Int"/>
	<x path="Void"/>
</f></selectMaterialBits>
		<selectStencilBits set="method" line="747"><f a="opBits:maskBits">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></selectStencilBits>
		<clear public="1" set="method" line="795" override="1"><f a="?color:?depth:?stencil">
	<c path="h3d.Vector"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<resize public="1" set="method" line="825" override="1"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<getChannels set="method" line="847"><f a="t">
	<t path="h3d.impl.Texture"/>
	<x path="Int"/>
</f></getChannels>
		<isSupportedFormat public="1" set="method" line="864" override="1"><f a="fmt">
	<t path="h3d.mat.TextureFormat"/>
	<x path="Bool"/>
</f></isSupportedFormat>
		<getBindType set="method" line="875"><f a="t">
	<c path="h3d.mat.Texture"/>
	<x path="Int"/>
</f></getBindType>
		<allocTexture public="1" set="method" line="881" override="1"><f a="t">
	<c path="h3d.mat.Texture"/>
	<t path="h3d.impl.Texture"/>
</f></allocTexture>
		<restoreBind set="method" line="992"><f a=""><x path="Void"/></f></restoreBind>
		<allocDepthBuffer public="1" set="method" line="1000" override="1"><f a="b">
	<c path="h3d.mat.DepthBuffer"/>
	<t path="h3d.impl.DepthBuffer"/>
</f></allocDepthBuffer>
		<disposeDepthBuffer public="1" set="method" line="1017" override="1"><f a="b">
	<c path="h3d.mat.DepthBuffer"/>
	<x path="Void"/>
</f></disposeDepthBuffer>
		<defaultDepth><c path="h3d.mat.DepthBuffer"/></defaultDepth>
		<getDefaultDepthBuffer public="1" set="method" line="1026" override="1"><f a=""><c path="h3d.mat.DepthBuffer"/></f></getDefaultDepthBuffer>
		<discardError get="inline" set="null" line="1038"><f a=""><x path="Void"/></f></discardError>
		<allocVertexes public="1" set="method" line="1042" override="1"><f a="m">
	<c path="h3d.impl.ManagedBuffer"/>
	<t path="h3d.impl.VertexBuffer"/>
</f></allocVertexes>
		<allocIndexes public="1" set="method" line="1064" override="1"><f a="count:is32">
	<x path="Int"/>
	<x path="Bool"/>
	<t path="h3d.impl.IndexBuffer"/>
</f></allocIndexes>
		<disposeTexture public="1" set="method" line="1084" override="1"><f a="t">
	<c path="h3d.mat.Texture"/>
	<x path="Void"/>
</f></disposeTexture>
		<disposeIndexes public="1" set="method" line="1094" override="1"><f a="i">
	<t path="h3d.impl.IndexBuffer"/>
	<x path="Void"/>
</f></disposeIndexes>
		<disposeVertexes public="1" set="method" line="1098" override="1"><f a="v">
	<t path="h3d.impl.VertexBuffer"/>
	<x path="Void"/>
</f></disposeVertexes>
		<generateMipMaps public="1" set="method" line="1102" override="1"><f a="t">
	<c path="h3d.mat.Texture"/>
	<x path="Void"/>
</f></generateMipMaps>
		<uploadTextureBitmap public="1" set="method" line="1109" override="1"><f a="t:bmp:mipLevel:side">
	<c path="h3d.mat.Texture"/>
	<c path="hxd.BitmapData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadTextureBitmap>
		<resetStream set="method" line="1165"><f a=""><x path="Void"/></f></resetStream>
		<streamData get="inline" set="null" line="1173"><f a="data:pos:length">
	<unknown/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></streamData>
		<uploadTexturePixels public="1" set="method" line="1186" override="1"><f a="t:pixels:mipLevel:side">
	<c path="h3d.mat.Texture"/>
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadTexturePixels>
		<uploadVertexBuffer public="1" set="method" line="1244" override="1"><f a="v:startVertex:vertexCount:buf:bufPos">
	<t path="h3d.impl.VertexBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="hxd.FloatBuffer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadVertexBuffer>
		<uploadVertexBytes public="1" set="method" line="1258" override="1"><f a="v:startVertex:vertexCount:buf:bufPos">
	<t path="h3d.impl.VertexBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadVertexBytes>
		<uploadIndexBuffer public="1" set="method" line="1270" override="1"><f a="i:startIndice:indiceCount:buf:bufPos">
	<t path="h3d.impl.IndexBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="hxd.IndexBuffer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadIndexBuffer>
		<uploadIndexBytes public="1" set="method" line="1285" override="1"><f a="i:startIndice:indiceCount:buf:bufPos">
	<t path="h3d.impl.IndexBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadIndexBytes>
		<updateDivisor get="inline" set="null" line="1298"><f a="a">
	<c path="h3d.impl._GlDriver.CompiledAttribute"/>
	<x path="Void"/>
</f></updateDivisor>
		<selectBuffer public="1" set="method" line="1305" override="1"><f a="v">
	<c path="h3d.Buffer"/>
	<x path="Void"/>
</f></selectBuffer>
		<selectMultiBuffers public="1" set="method" line="1359" override="1"><f a="buffers">
	<c path="h3d.BufferOffset"/>
	<x path="Void"/>
</f></selectMultiBuffers>
		<draw public="1" set="method" line="1369" override="1"><f a="ibuf:startIndex:ntriangles">
	<t path="h3d.impl.IndexBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></draw>
		<allocInstanceBuffer public="1" set="method" line="1380" override="1"><f a="b:bytes">
	<c path="h3d.impl.InstanceBuffer"/>
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></allocInstanceBuffer>
		<disposeInstanceBuffer public="1" set="method" line="1408" override="1"><f a="b">
	<c path="h3d.impl.InstanceBuffer"/>
	<x path="Void"/>
</f></disposeInstanceBuffer>
		<drawInstanced public="1" set="method" line="1412" override="1"><f a="ibuf:commands">
	<t path="h3d.impl.IndexBuffer"/>
	<c path="h3d.impl.InstanceBuffer"/>
	<x path="Void"/>
</f></drawInstanced>
		<end public="1" set="method" line="1434" override="1"><f a=""><x path="Void"/></f></end>
		<present public="1" set="method" line="1438" override="1"><f a=""><x path="Void"/></f></present>
		<isDisposed public="1" set="method" line="1446" override="1"><f a=""><x path="Bool"/></f></isDisposed>
		<setRenderZone public="1" set="method" line="1450" override="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setRenderZone>
		<setDrawBuffers set="method" line="1461"><f a="k">
	<x path="Int"/>
	<x path="Void"/>
</f></setDrawBuffers>
		<unbindTargets set="method" line="1472"><f a=""><x path="Void"/></f></unbindTargets>
		<capturePixels public="1" set="method" line="1482" override="1"><f a="tex:layer:mipLevel:?region">
	<c path="h3d.mat.Texture"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="h2d.col.IBounds"/>
	<c path="hxd.Pixels"/>
</f></capturePixels>
		<setRenderTarget public="1" set="method" line="1531" override="1">
			<f a="tex:?layer:?mipLevel" v=":0:0">
				<c path="h3d.mat.Texture"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mipLevel : 0, layer : 0 }</e></m></meta>
		</setRenderTarget>
		<setRenderTargets public="1" set="method" line="1604" override="1"><f a="textures">
	<c path="Array"><c path="h3d.mat.Texture"/></c>
	<x path="Void"/>
</f></setRenderTargets>
		<init public="1" set="method" line="1631" override="1">
			<f a="onCreate:?forceSoftware" v=":false">
				<f a="">
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ forceSoftware : false }</e></m></meta>
		</init>
		<hasFeature public="1" set="method" line="1649" override="1"><f a="f">
	<e path="h3d.impl.Feature"/>
	<x path="Bool"/>
</f></hasFeature>
		<features expr="new Map()">
			<t path="Map">
				<e path="h3d.impl.Feature"/>
				<x path="Bool"/>
			</t>
			<meta><m n=":value"><e>new Map()</e></m></meta>
		</features>
		<makeFeatures set="method" line="1659"><f a=""><x path="Void"/></f></makeFeatures>
		<checkFeature set="method" line="1665"><f a="f">
	<e path="h3d.impl.Feature"/>
	<x path="Bool"/>
</f></checkFeature>
		<uploadTextureVideoElement set="method" line="1702">
			<f a="t:v:mipLevel:side">
				<c path="h3d.mat.Texture"/>
				<c path="js.html.VideoElement"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</uploadTextureVideoElement>
		<captureRenderBuffer public="1" set="method" line="1719" override="1"><f a="pixels">
	<c path="hxd.Pixels"/>
	<x path="Void"/>
</f></captureRenderBuffer>
		<captureSubRenderBuffer set="method" line="1723"><f a="pixels:x:y">
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></captureSubRenderBuffer>
		<new public="1" set="method" line="188">
			<f a="?antiAlias" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ antiAlias : 0 }</e></m>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>h3d.impl.Shader</e></m>
		</meta>
	</class>
	<class path="h3d.impl.InstanceBuffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/InstanceBuffer.hx">
		<data><d/></data>
		<driver><c path="h3d.impl.Driver"/></driver>
		<indexCount public="1" set="null" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</indexCount>
		<triCount public="1" set="null" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</triCount>
		<commandCount public="1" set="null"><x path="Int"/></commandCount>
		<setCommand public="1" set="method" line="15"><f a="commandCount:indexCount">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setCommand>
		<setBuffer public="1" set="method" line="29">
			<f a="commandCount:bytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Bytes are structures of 5 i32 with the following values:
		- indexCount : number of indexes per instance
		- instanceCount : number of indexed draws
		- startIndexLocation : offset in indexes
		- baseVertexLocation : offset in buffer
		- startInstanceLocation : offset in per instance buffer</haxe_doc>
		</setBuffer>
		<dispose public="1" set="method" line="45"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<meta><m n=":allow"><e>h3d.impl.Driver</e></m></meta>
	</class>
	<class path="h3d.impl._ManagedBuffer.FreeCell" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/ManagedBuffer.hx" private="1" module="h3d.impl.ManagedBuffer">
		<pos><x path="Int"/></pos>
		<count><x path="Int"/></count>
		<next><c path="h3d.impl._ManagedBuffer.FreeCell"/></next>
		<new set="method" line="8"><f a="pos:count:next">
	<x path="Int"/>
	<x path="Int"/>
	<c path="h3d.impl._ManagedBuffer.FreeCell"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>h3d</e></m>
		</meta>
	</class>
	<class path="h3d.impl.ManagedBuffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/ManagedBuffer.hx">
		<mem><c path="h3d.impl.MemoryManager"/></mem>
		<stride public="1" set="null"><x path="Int"/></stride>
		<size public="1" set="null"><x path="Int"/></size>
		<flags public="1" set="null"><x path="haxe.EnumFlags"><e path="h3d.BufferFlag"/></x></flags>
		<vbuf><t path="h3d.impl.VertexBuffer"/></vbuf>
		<freeList><c path="h3d.impl._ManagedBuffer.FreeCell"/></freeList>
		<next><c path="h3d.impl.ManagedBuffer"/></next>
		<uploadVertexBuffer public="1" set="method" line="44">
			<f a="start:vertices:buf:?bufPos" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="hxd.FloatBuffer"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ bufPos : 0 }</e></m></meta>
		</uploadVertexBuffer>
		<uploadVertexBytes public="1" set="method" line="48">
			<f a="start:vertices:data:?dataPos" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ dataPos : 0 }</e></m></meta>
		</uploadVertexBytes>
		<readVertexBytes public="1" set="method" line="52">
			<f a="start:vertices:data:?dataPos" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ dataPos : 0 }</e></m></meta>
		</readVertexBytes>
		<alloc public="1" set="method" line="56"><f a="vertices:align">
	<x path="Int"/>
	<x path="Int"/>
	<c path="h3d.Buffer"/>
</f></alloc>
		<getFreeVertices public="1" set="method" line="72"><f a=""><x path="Int"/></f></getFreeVertices>
		<allocPosition set="method" line="82"><f a="nvert:align">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></allocPosition>
		<allocBuffer set="method" line="107"><f a="b">
	<c path="h3d.Buffer"/>
	<x path="Bool"/>
</f></allocBuffer>
		<freeBuffer set="method" line="123">
			<f a="b">
				<c path="h3d.Buffer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>h3d.Buffer.dispose</e></m></meta>
		</freeBuffer>
		<dispose public="1" set="method" line="174"><f a=""><x path="Void"/></f></dispose>
		<isDisposed public="1" get="inline" set="null" line="178"><f a=""><x path="Bool"/></f></isDisposed>
		<new public="1" set="method" line="30"><f a="stride:size:?flags">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><e path="h3d.BufferFlag"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>h3d.impl.MemoryManager</e></m>
		</meta>
	</class>
	<class path="h3d.impl.MemoryManager" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/MemoryManager.hx">
		<MAX_MEMORY get="inline" set="null" expr="4096 * (1024. * 1024.)" line="5" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>4096 * (1024. * 1024.)</e></m></meta>
		</MAX_MEMORY>
		<MAX_BUFFERS get="inline" set="null" expr="1 &lt;&lt; 16" line="6" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 16]]></e></m></meta>
		</MAX_BUFFERS>
		<SIZE get="inline" set="null" expr="65533" line="7" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65533</e></m></meta>
		</SIZE>
		<ALL_FLAGS expr="Type.allEnums(Buffer.BufferFlag)" line="8" static="1">
			<c path="Array"><e path="h3d.BufferFlag"/></c>
			<meta><m n=":value"><e>Type.allEnums(Buffer.BufferFlag)</e></m></meta>
		</ALL_FLAGS>
		<driver>
			<c path="h3d.impl.Driver"/>
			<meta><m n=":allow"><e>h3d</e></m></meta>
		</driver>
		<buffers><c path="Array"><c path="h3d.impl.ManagedBuffer"/></c></buffers>
		<indexes><c path="Array"><c path="h3d.Indexes"/></c></indexes>
		<textures><c path="Array"><c path="h3d.mat.Texture"/></c></textures>
		<depths><c path="Array"><c path="h3d.mat.DepthBuffer"/></c></depths>
		<triIndexes public="1" set="null"><c path="h3d.Indexes"/></triIndexes>
		<quadIndexes public="1" set="null"><c path="h3d.Indexes"/></quadIndexes>
		<usedMemory public="1" set="null" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</usedMemory>
		<texMemory public="1" set="null" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</texMemory>
		<bufferCount public="1" set="null" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</bufferCount>
		<init public="1" set="method" line="27"><f a=""><x path="Void"/></f></init>
		<initIndexes set="method" line="35"><f a=""><x path="Void"/></f></initIndexes>
		<garbage public="1" set="dynamic" line="59">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Call user-defined garbage function that will cleanup some unused allocated objects.
		Might be called several times if we need to allocate a lot of memory</haxe_doc>
		</garbage>
		<cleanManagedBuffers public="1" set="method" line="67">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clean empty (unused) buffers</haxe_doc>
		</cleanManagedBuffers>
		<allocManaged set="method" line="85">
			<f a="m">
				<c path="h3d.impl.ManagedBuffer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>h3d.impl.ManagedBuffer</e></m></meta>
		</allocManaged>
		<freeManaged set="method" line="110">
			<f a="m">
				<c path="h3d.impl.ManagedBuffer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>h3d.impl.ManagedBuffer</e></m></meta>
		</freeManaged>
		<allocBuffer set="method" line="131">
			<f a="b:stride">
				<c path="h3d.Buffer"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":allow"><e>h3d.Buffer</e></m>
				<m n=":access"><e>h3d.Buffer</e></m>
			</meta>
		</allocBuffer>
		<deleteIndexes set="method" line="211">
			<f a="i">
				<c path="h3d.Indexes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>h3d.Indexes</e></m></meta>
		</deleteIndexes>
		<allocIndexes set="method" line="219">
			<f a="i">
				<c path="h3d.Indexes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>h3d.Indexes</e></m></meta>
		</allocIndexes>
		<bpp set="method" line="228"><f a="t">
	<c path="h3d.mat.Texture"/>
	<x path="Int"/>
</f></bpp>
		<cleanTextures public="1" set="method" line="232">
			<f a="?force" v="true">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ force : true }</e></m></meta>
		</cleanTextures>
		<sortByLRU set="method" line="244"><f a="t1:t2">
	<c path="h3d.mat.Texture"/>
	<c path="h3d.mat.Texture"/>
	<x path="Int"/>
</f></sortByLRU>
		<deleteTexture set="method" line="249">
			<f a="t">
				<c path="h3d.mat.Texture"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>h3d.mat.Texture.dispose</e></m></meta>
		</deleteTexture>
		<allocTexture set="method" line="256">
			<f a="t">
				<c path="h3d.mat.Texture"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>h3d.mat.Texture.alloc</e></m></meta>
		</allocTexture>
		<allocDepth set="method" line="270">
			<f a="b">
				<c path="h3d.mat.DepthBuffer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>h3d.mat.DepthBuffer.alloc</e></m></meta>
		</allocDepth>
		<deleteDepth set="method" line="284">
			<f a="b">
				<c path="h3d.mat.DepthBuffer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>h3d.mat.DepthBuffer.dispose</e></m></meta>
		</deleteDepth>
		<onContextLost public="1" set="method" line="292"><f a=""><x path="Void"/></f></onContextLost>
		<dispose public="1" set="method" line="297"><f a=""><x path="Void"/></f></dispose>
		<freeMemorySize set="method" line="325"><f a=""><x path="Int"/></f></freeMemorySize>
		<stats public="1" set="method" line="341"><f a=""><a>
	<totalMemory><x path="Float"/></totalMemory>
	<textureMemory><x path="Float"/></textureMemory>
	<textureCount><x path="Int"/></textureCount>
	<managedMemory><x path="Int"/></managedMemory>
	<freeManagedMemory><x path="Int"/></freeManagedMemory>
	<bufferCount><x path="Int"/></bufferCount>
</a></f></stats>
		<allocStats public="1" set="method" line="370">
			<f a=""><c path="Array"><a>
	<tex><x path="Bool"/></tex>
	<stacks><c path="Array"><a>
	<stack><c path="String"/></stack>
	<size><x path="Int"/></size>
	<count><x path="Int"/></count>
</a></c></stacks>
	<size><x path="Int"/></size>
	<position><c path="String"/></position>
	<count><x path="Int"/></count>
</a></c></f>
			<meta><m n=":access"><e>h3d.Buffer</e></m></meta>
			<haxe_doc>* Return statistics for currently allocated buffers and textures. Requires -D track-alloc compilation flag</haxe_doc>
		</allocStats>
		<new public="1" set="method" line="23"><f a="driver">
	<c path="h3d.impl.Driver"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="h3d.impl.Step" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/RendererFX.hx" module="h3d.impl.RendererFX">
		<MainDraw/>
		<Decals/>
		<Shadows/>
		<Lighting/>
		<Forward/>
		<BeforeTonemapping/>
		<AfterTonemapping/>
		<Overlay/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="h3d.impl.RendererFX" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/RendererFX.hx" interface="1">
		<enabled public="1"><x path="Bool"/></enabled>
		<begin public="1" set="method"><f a="r:step">
	<c path="h3d.scene.Renderer"/>
	<e path="h3d.impl.Step"/>
	<x path="Void"/>
</f></begin>
		<end public="1" set="method"><f a="r:step">
	<c path="h3d.scene.Renderer"/>
	<e path="h3d.impl.Step"/>
	<x path="Void"/>
</f></end>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
	</class>
	<class path="h3d.impl.TextureCache" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/impl/TextureCache.hx">
		<cache><c path="Array"><c path="h3d.mat.Texture"/></c></cache>
		<position expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</position>
		<defaultDepthBuffer><c path="h3d.mat.DepthBuffer"/></defaultDepthBuffer>
		<ctx><c path="h3d.impl.RenderContext"/></ctx>
		<defaultFormat public="1"><e path="hxd.PixelFormat"/></defaultFormat>
		<get public="1" get="inline" set="null" line="19">
			<f a="?index" v="0">
				<x path="Int"/>
				<c path="h3d.mat.Texture"/>
			</f>
			<meta><m n=":value"><e>{ index : 0 }</e></m></meta>
		</get>
		<getNamed public="1" set="method" line="23"><f a="name">
	<c path="String"/>
	<c path="h3d.mat.Texture"/>
</f></getNamed>
		<set public="1" set="method" line="30"><f a="t:index">
	<c path="h3d.mat.Texture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<begin public="1" set="method" line="34"><f a=""><x path="Void"/></f></begin>
		<lookupTarget set="method" line="43"><f a="name:width:height:format:isCube">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="h3d.mat.TextureFormat"/>
	<x path="Bool"/>
	<c path="h3d.mat.Texture"/>
</f></lookupTarget>
		<allocTarget public="1" set="method" line="70">
			<f a="name:width:height:?defaultDepth:?format:?isCube" v=":::true::false">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="hxd.PixelFormat"/>
				<x path="Bool"/>
				<c path="h3d.mat.Texture"/>
			</f>
			<meta><m n=":value"><e>{ isCube : false, defaultDepth : true }</e></m></meta>
		</allocTarget>
		<allocTargetScale public="1" set="method" line="81">
			<f a="name:scale:?defaultDepth:?format" v="::true:">
				<c path="String"/>
				<x path="Float"/>
				<x path="Bool"/>
				<e path="hxd.PixelFormat"/>
				<c path="h3d.mat.Texture"/>
			</f>
			<meta><m n=":value"><e>{ defaultDepth : true }</e></m></meta>
		</allocTargetScale>
		<allocTileTarget public="1" set="method" line="86">
			<f a="name:tile:?defaultDepth:?format" v="::false:">
				<c path="String"/>
				<c path="h2d.Tile"/>
				<x path="Bool"/>
				<e path="hxd.PixelFormat"/>
				<c path="h3d.mat.Texture"/>
			</f>
			<meta><m n=":value"><e>{ defaultDepth : false }</e></m></meta>
		</allocTileTarget>
		<dispose public="1" set="method" line="90"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="11"><f a="ctx">
	<c path="h3d.impl.RenderContext"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.impl.AnyProps" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/AnyProps.hx">
		<props public="1" set="accessor"><x path="Any"/></props>
		<set_props set="method" line="7"><f a="p">
	<x path="Any"/>
	<x path="Any"/>
</f></set_props>
		<setDefaultProps public="1" set="method" line="13"><f a="kind">
	<c path="String"/>
	<x path="Void"/>
</f></setDefaultProps>
		<getDefaultProps public="1" set="method" line="17"><f a="?kind">
	<c path="String"/>
	<x path="Any"/>
</f></getDefaultProps>
		<refreshProps public="1" set="method" line="21"><f a=""><x path="Void"/></f></refreshProps>
	</class>
	<class path="h3d.mat.BaseMaterial" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/BaseMaterial.hx">
		<extends path="hxd.impl.AnyProps"/>
		<implements path="hxd.impl._Serializable.NoSerializeSupport"/>
		<passes>
			<c path="h3d.mat.Pass"/>
			<meta><m n=":s"/></meta>
		</passes>
		<name public="1">
			<c path="String"/>
			<meta><m n=":s"/></meta>
		</name>
		<mainPass public="1" get="accessor" set="null"><c path="h3d.mat.Pass"/></mainPass>
		<addPass public="1" params="T" set="method" line="16"><f a="p">
	<c path="addPass.T"/>
	<c path="addPass.T"/>
</f></addPass>
		<removePass public="1" set="method" line="30"><f a="p">
	<c path="h3d.mat.Pass"/>
	<x path="Bool"/>
</f></removePass>
		<get_mainPass get="inline" set="null" line="47"><f a=""><c path="h3d.mat.Pass"/></f></get_mainPass>
		<getPasses public="1" set="method" line="51"><f a=""><c path="Array"><c path="h3d.mat.Pass"/></c></f></getPasses>
		<getPass public="1" set="method" line="61"><f a="name">
	<c path="String"/>
	<c path="h3d.mat.Pass"/>
</f></getPass>
		<allocPass public="1" set="method" line="71">
			<f a="name:?inheritMain" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="h3d.mat.Pass"/>
			</f>
			<meta><m n=":value"><e>{ inheritMain : true }</e></m></meta>
		</allocPass>
		<clone public="1" set="method" line="80"><f a="?m">
	<c path="h3d.mat.BaseMaterial"/>
	<c path="h3d.mat.BaseMaterial"/>
</f></clone>
		<new set="method" line="11"><f a="?shader">
	<c path="hxsl.Shader"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="h3d.mat.BlendMode" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/BlendMode.hx"><e path="h2d.BlendMode"/></typedef>
	<enum path="h3d.mat.Face" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Data.hx" module="h3d.mat.Data">
		<None/>
		<Back/>
		<Front/>
		<Both/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="h3d.mat.Blend" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Data.hx" module="h3d.mat.Data">
		<One/>
		<Zero/>
		<SrcAlpha/>
		<SrcColor/>
		<DstAlpha/>
		<DstColor/>
		<OneMinusSrcAlpha/>
		<OneMinusSrcColor/>
		<OneMinusDstAlpha/>
		<OneMinusDstColor/>
		<ConstantColor/>
		<ConstantAlpha/>
		<OneMinusConstantColor/>
		<OneMinusConstantAlpha/>
		<SrcAlphaSaturate/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="h3d.mat.Compare" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Data.hx" module="h3d.mat.Data">
		<Always/>
		<Never/>
		<Equal/>
		<NotEqual/>
		<Greater/>
		<GreaterEqual/>
		<Less/>
		<LessEqual/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="h3d.mat.StencilOp" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Data.hx" module="h3d.mat.Data">
		<Keep/>
		<Zero/>
		<Replace/>
		<Increment/>
		<IncrementWrap/>
		<Decrement/>
		<DecrementWrap/>
		<Invert/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="h3d.mat.MipMap" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Data.hx" module="h3d.mat.Data">
		<None/>
		<Nearest/>
		<Linear/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="h3d.mat.Filter" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Data.hx" module="h3d.mat.Data">
		<Nearest/>
		<Linear/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="h3d.mat.Wrap" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Data.hx" module="h3d.mat.Data">
		<Clamp/>
		<Repeat/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="h3d.mat.Operation" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Data.hx" module="h3d.mat.Data">
		<Add/>
		<Sub/>
		<ReverseSub/>
		<Min/>
		<Max/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="h3d.mat.TextureFlags" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Data.hx" module="h3d.mat.Data">
		<Target><haxe_doc>Allocate a texture that will be used as render target.</haxe_doc></Target>
		<Cube><haxe_doc>Allocate a cube texture. Might be restricted to power of two textures only.</haxe_doc></Cube>
		<MipMapped><haxe_doc>Activates Mip Mapping for this texture. Might not be available for target textures.</haxe_doc></MipMapped>
		<ManualMipMapGen><haxe_doc>By default, textures created with MipMapped will have their mipmaps generated when you upload the mipmap level 0. This flag disables this and manually upload mipmaps instead.</haxe_doc></ManualMipMapGen>
		<IsNPOT><haxe_doc>This is a not power of two texture. Automatically set when having width or height being not power of two.</haxe_doc></IsNPOT>
		<NoAlloc><haxe_doc>Don't initialy allocate the texture memory.</haxe_doc></NoAlloc>
		<Dynamic><haxe_doc>Inform that we will often perform upload operations on this texture</haxe_doc></Dynamic>
		<AlphaPremultiplied><haxe_doc>Assumes that the color value of the texture is premultiplied by the alpha component.</haxe_doc></AlphaPremultiplied>
		<WasCleared><haxe_doc>Tells if the target texture has been cleared (reserved for internal engine usage).</haxe_doc></WasCleared>
		<Loading><haxe_doc>The texture is being currently loaded. Set onLoaded to get event when loading is complete.</haxe_doc></Loading>
		<Serialize><haxe_doc>Allow texture data serialization when found in a scene (for user generated textures)</haxe_doc></Serialize>
		<IsArray><haxe_doc>Tells if it's a texture array</haxe_doc></IsArray>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<typedef path="h3d.mat.TextureFormat" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Data.hx" module="h3d.mat.Data"><e path="hxd.PixelFormat"/></typedef>
	<class path="h3d.mat.Defaults" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Defaults.hx">
		<defaultKillAlphaThreshold public="1" expr="0.5" line="5" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.5</e></m></meta>
		</defaultKillAlphaThreshold>
		<loadingTextureColor public="1" expr="0xFFFF00FF" line="6" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xFFFF00FF</e></m></meta>
		</loadingTextureColor>
		<shadowShader public="1" get="accessor" set="accessor" static="1">
			<c path="hxsl.Shader"/>
			<meta><m n=":isVar"/></meta>
		</shadowShader>
		<get_shadowShader set="method" line="11" static="1"><f a=""><c path="hxsl.Shader"/></f></get_shadowShader>
		<set_shadowShader set="method" line="20" static="1"><f a="s">
	<c path="hxsl.Shader"/>
	<c path="hxsl.Shader"/>
</f></set_shadowShader>
		<makeVolumeDecal public="1" set="dynamic" line="24" static="1"><f a="bounds">
	<c path="h3d.col.Bounds"/>
	<c path="hxsl.Shader"/>
</f></makeVolumeDecal>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="h3d.mat.DepthFormat" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/DepthBuffer.hx" module="h3d.mat.DepthBuffer">
		<Depth16/>
		<Depth24/>
		<Depth24Stencil8/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="h3d.mat.DepthBuffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/DepthBuffer.hx">
		<getDefault public="1" set="method" line="55" static="1">
			<f a=""><c path="h3d.mat.DepthBuffer"/></f>
			<haxe_doc>This will return the default depth buffer, which is automatically resized to the screen size.</haxe_doc>
		</getDefault>
		<b>
			<t path="h3d.impl.DepthBuffer"/>
			<meta><m n=":allow"><e>h3d.impl.MemoryManager</e></m></meta>
		</b>
		<width public="1" set="null"><x path="Int"/></width>
		<height public="1" set="null"><x path="Int"/></height>
		<format public="1" set="null"><e path="h3d.mat.DepthFormat"/></format>
		<hasStencil public="1" set="method" line="30"><f a=""><x path="Bool"/></f></hasStencil>
		<alloc set="method" line="37"><f a=""><x path="Void"/></f></alloc>
		<dispose public="1" set="method" line="41"><f a=""><x path="Void"/></f></dispose>
		<isDisposed public="1" set="method" line="48"><f a=""><x path="Bool"/></f></isDisposed>
		<new public="1" set="method" line="23">
			<f a="width:height:?format">
				<x path="Int"/>
				<x path="Int"/>
				<e path="h3d.mat.DepthFormat"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new depth buffer, it can be attached to one or several render target Texture by setting their `depthBuffer` property.</haxe_doc>
		</new>
		<haxe_doc>Depth buffer are used to store per pixel depth information when rendering a scene (also called Z-buffer)</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="h3d.mat._Material.DefaultKind" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Material.hx" private="1" module="h3d.mat.Material">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="h3d.mat._Material.DefaultKind_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Material.hx" private="1" module="h3d.mat.Material" extern="1" final="1">
	<Opaque public="1" get="inline" set="null" expr="cast &quot;Opaque&quot;" line="4" static="1">
		<x path="h3d.mat._Material.DefaultKind"/>
		<meta>
			<m n=":value"><e>cast "Opaque"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Opaque>
	<Alpha public="1" get="inline" set="null" expr="cast &quot;Alpha&quot;" line="5" static="1">
		<x path="h3d.mat._Material.DefaultKind"/>
		<meta>
			<m n=":value"><e>cast "Alpha"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Alpha>
	<AlphaKill public="1" get="inline" set="null" expr="cast &quot;AlphaKill&quot;" line="6" static="1">
		<x path="h3d.mat._Material.DefaultKind"/>
		<meta>
			<m n=":value"><e>cast "AlphaKill"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AlphaKill>
	<Add public="1" get="inline" set="null" expr="cast &quot;Add&quot;" line="7" static="1">
		<x path="h3d.mat._Material.DefaultKind"/>
		<meta>
			<m n=":value"><e>cast "Add"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Add>
	<SoftAdd public="1" get="inline" set="null" expr="cast &quot;SoftAdd&quot;" line="8" static="1">
		<x path="h3d.mat._Material.DefaultKind"/>
		<meta>
			<m n=":value"><e>cast "SoftAdd"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SoftAdd>
	<Hidden public="1" get="inline" set="null" expr="cast &quot;Hidden&quot;" line="9" static="1">
		<x path="h3d.mat._Material.DefaultKind"/>
		<meta>
			<m n=":value"><e>cast "Hidden"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Hidden>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="h3d.mat._Material.DefaultKind_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Material.hx" private="1" module="h3d.mat.Material" extern="1" final="1">
		<Opaque public="1" get="inline" set="null" expr="cast &quot;Opaque&quot;" line="4" static="1">
			<x path="h3d.mat._Material.DefaultKind"/>
			<meta>
				<m n=":value"><e>cast "Opaque"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Opaque>
		<Alpha public="1" get="inline" set="null" expr="cast &quot;Alpha&quot;" line="5" static="1">
			<x path="h3d.mat._Material.DefaultKind"/>
			<meta>
				<m n=":value"><e>cast "Alpha"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Alpha>
		<AlphaKill public="1" get="inline" set="null" expr="cast &quot;AlphaKill&quot;" line="6" static="1">
			<x path="h3d.mat._Material.DefaultKind"/>
			<meta>
				<m n=":value"><e>cast "AlphaKill"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AlphaKill>
		<Add public="1" get="inline" set="null" expr="cast &quot;Add&quot;" line="7" static="1">
			<x path="h3d.mat._Material.DefaultKind"/>
			<meta>
				<m n=":value"><e>cast "Add"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Add>
		<SoftAdd public="1" get="inline" set="null" expr="cast &quot;SoftAdd&quot;" line="8" static="1">
			<x path="h3d.mat._Material.DefaultKind"/>
			<meta>
				<m n=":value"><e>cast "SoftAdd"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SoftAdd>
		<Hidden public="1" get="inline" set="null" expr="cast &quot;Hidden&quot;" line="9" static="1">
			<x path="h3d.mat._Material.DefaultKind"/>
			<meta>
				<m n=":value"><e>cast "Hidden"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Hidden>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="h3d.mat._Material.DefaultProps" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Material.hx" private="1" module="h3d.mat.Material"><a>
	<shadows><x path="Bool"/></shadows>
	<light><x path="Bool"/></light>
	<kind><x path="h3d.mat._Material.DefaultKind"/></kind>
	<culling><x path="Bool"/></culling>
</a></typedef>
	<class path="h3d.mat.Material" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Material.hx">
		<extends path="h3d.mat.BaseMaterial"/>
		<create public="1" set="method" line="339" static="1"><f a="?tex">
	<c path="h3d.mat.Texture"/>
	<c path="h3d.mat.Material"/>
</f></create>
		<mshader><c path="h3d.shader.BaseMesh"/></mshader>
		<normalShader><c path="h3d.shader.NormalMap"/></normalShader>
		<model public="1"><c path="hxd.res.Resource"/></model>
		<shadows public="1" get="accessor" set="accessor"><x path="Bool"/></shadows>
		<castShadows public="1" set="accessor"><x path="Bool"/></castShadows>
		<receiveShadows public="1" set="accessor"><x path="Bool"/></receiveShadows>
		<staticShadows public="1" set="accessor"><x path="Bool"/></staticShadows>
		<textureShader public="1" set="null"><c path="h3d.shader.Texture"/></textureShader>
		<specularShader public="1" set="null"><c path="h3d.shader.SpecularTexture"/></specularShader>
		<texture public="1" get="accessor" set="accessor"><c path="h3d.mat.Texture"/></texture>
		<specularTexture public="1" get="accessor" set="accessor"><c path="h3d.mat.Texture"/></specularTexture>
		<normalMap public="1" get="accessor" set="accessor"><c path="h3d.mat.Texture"/></normalMap>
		<color public="1" get="accessor" set="accessor"><c path="h3d.Vector"/></color>
		<specularAmount public="1" get="accessor" set="accessor"><x path="Float"/></specularAmount>
		<specularPower public="1" get="accessor" set="accessor"><x path="Float"/></specularPower>
		<blendMode public="1" set="accessor"><t path="h3d.mat.BlendMode"/></blendMode>
		<get_specularPower get="inline" set="null" line="49"><f a=""><x path="Float"/></f></get_specularPower>
		<set_specularPower get="inline" set="null" line="53"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_specularPower>
		<get_specularAmount get="inline" set="null" line="57"><f a=""><x path="Float"/></f></get_specularAmount>
		<set_specularAmount get="inline" set="null" line="61"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_specularAmount>
		<get_color get="inline" set="null" line="65"><f a=""><t path="hxsl.Vec"/></f></get_color>
		<set_color get="inline" set="null" line="69"><f a="v">
	<t path="hxsl.Vec"/>
	<t path="hxsl.Vec"/>
</f></set_color>
		<get_shadows get="inline" set="null" line="73"><f a=""><x path="Bool"/></f></get_shadows>
		<set_shadows get="inline" set="null" line="77"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_shadows>
		<set_castShadows set="method" line="83"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_castShadows>
		<set_receiveShadows set="method" line="95"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_receiveShadows>
		<set_staticShadows set="method" line="108"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_staticShadows>
		<clone public="1" set="method" line="114" override="1"><f a="?m">
	<c path="h3d.mat.BaseMaterial"/>
	<c path="h3d.mat.BaseMaterial"/>
</f></clone>
		<set_blendMode set="method" line="132"><f a="v">
	<t path="h3d.mat.BlendMode"/>
	<t path="h3d.mat.BlendMode"/>
</f></set_blendMode>
		<get_specularTexture set="method" line="150"><f a=""><x path="Null"><c path="h3d.mat.Texture"/></x></f></get_specularTexture>
		<get_texture set="method" line="154"><f a=""><x path="Null"><c path="h3d.mat.Texture"/></x></f></get_texture>
		<set_texture set="method" line="158"><f a="t">
	<t path="hxsl.Sampler2D"/>
	<t path="hxsl.Sampler2D"/>
</f></set_texture>
		<get_normalMap set="method" line="174"><f a=""><x path="Null"><c path="h3d.mat.Texture"/></x></f></get_normalMap>
		<set_normalMap set="method" line="178"><f a="t">
	<t path="hxsl.Sampler2D"/>
	<t path="hxsl.Sampler2D"/>
</f></set_normalMap>
		<set_specularTexture set="method" line="197"><f a="t">
	<t path="hxsl.Sampler2D"/>
	<t path="hxsl.Sampler2D"/>
</f></set_specularTexture>
		<getDefaultModelProps public="1" set="method" line="219"><f a=""><x path="Any"/></f></getDefaultModelProps>
		<getDefaultProps public="1" set="method" line="237" override="1"><f a="?type">
	<c path="String"/>
	<x path="Any"/>
</f></getDefaultProps>
		<refreshProps public="1" set="method" line="265" override="1"><f a=""><x path="Void"/></f></refreshProps>
		<new set="method" line="42"><f a="?texture">
	<t path="hxsl.Sampler2D"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.mat.MaterialDatabase" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/MaterialDatabase.hx">
		<db expr="new Map()">
			<t path="Map">
				<c path="String"/>
				<a><v><d/></v></a>
			</t>
			<meta><m n=":value"><e>new Map()</e></m></meta>
		</db>
		<getFilePath set="method" line="10"><f a="model">
	<c path="hxd.res.Resource"/>
	<c path="String"/>
</f></getFilePath>
		<getModelData public="1" set="method" line="14"><f a="model">
	<c path="hxd.res.Resource"/>
	<a/>
</f></getModelData>
		<saveData set="method" line="26"><f a="model:data">
	<c path="hxd.res.Resource"/>
	<d/>
	<x path="Void"/>
</f></saveData>
		<loadMatProps public="1" set="method" line="41"><f a="material:setup">
	<c path="h3d.mat.Material"/>
	<c path="h3d.mat.MaterialSetup"/>
	<x path="Any"/>
</f></loadMatProps>
		<saveMatProps public="1" set="method" line="51"><f a="material:setup">
	<c path="h3d.mat.Material"/>
	<c path="h3d.mat.MaterialSetup"/>
	<x path="Void"/>
</f></saveMatProps>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.mat.MaterialSetup" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/MaterialSetup.hx">
		<current public="1" expr="new MaterialSetup(&quot;Default&quot;)" line="48" static="1">
			<c path="h3d.mat.MaterialSetup"/>
			<meta><m n=":value"><e>new MaterialSetup("Default")</e></m></meta>
		</current>
		<name public="1" set="null"><c path="String"/></name>
		<displayName public="1" set="null"><c path="String"/></displayName>
		<database><c path="h3d.mat.MaterialDatabase"/></database>
		<emptyMat><c path="h3d.mat.Material"/></emptyMat>
		<createRenderer public="1" set="method" line="16"><f a=""><c path="h3d.scene.Renderer"/></f></createRenderer>
		<createLightSystem public="1" set="method" line="20"><f a=""><c path="h3d.scene.LightSystem"/></f></createLightSystem>
		<createMaterial public="1" set="method" line="24"><f a=""><c path="h3d.mat.Material"/></f></createMaterial>
		<getDefaults public="1" set="method" line="28"><f a="?kind">
	<c path="String"/>
	<x path="Any"/>
</f></getDefaults>
		<loadMaterialProps public="1" set="method" line="33"><f a="material">
	<c path="h3d.mat.Material"/>
	<x path="Any"/>
</f></loadMaterialProps>
		<saveMaterialProps public="1" set="method" line="37"><f a="material">
	<c path="h3d.mat.Material"/>
	<x path="Void"/>
</f></saveMaterialProps>
		<customMeshInit public="1" set="method" line="45"><f a="mesh">
	<c path="h3d.scene.Mesh"/>
	<x path="Void"/>
</f></customMeshInit>
		<new public="1" set="method" line="10"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.mat.Pass" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Pass.hx">
		<implements path="hxd.impl._Serializable.NoSerializeSupport"/>
		<getEnableLights public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getEnableLights>
		<enableLights_bits public="1" get="inline" set="null" expr="1" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</enableLights_bits>
		<enableLights_offset public="1" get="inline" set="null" expr="0" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</enableLights_offset>
		<enableLights_mask public="1" get="inline" set="null" expr="1" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</enableLights_mask>
		<getDynamicParameters public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getDynamicParameters>
		<dynamicParameters_bits public="1" get="inline" set="null" expr="1" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</dynamicParameters_bits>
		<dynamicParameters_offset public="1" get="inline" set="null" expr="1" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</dynamicParameters_offset>
		<dynamicParameters_mask public="1" get="inline" set="null" expr="2" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</dynamicParameters_mask>
		<getIsStatic public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getIsStatic>
		<isStatic_bits public="1" get="inline" set="null" expr="1" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</isStatic_bits>
		<isStatic_offset public="1" get="inline" set="null" expr="2" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</isStatic_offset>
		<isStatic_mask public="1" get="inline" set="null" expr="4" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</isStatic_mask>
		<getBatchMode public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getBatchMode>
		<batchMode_bits public="1" get="inline" set="null" expr="1" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</batchMode_bits>
		<batchMode_offset public="1" get="inline" set="null" expr="3" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</batchMode_offset>
		<batchMode_mask public="1" get="inline" set="null" expr="8" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</batchMode_mask>
		<getCulling public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getCulling>
		<culling_bits public="1" get="inline" set="null" expr="2" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</culling_bits>
		<culling_offset public="1" get="inline" set="null" expr="0" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</culling_offset>
		<culling_mask public="1" get="inline" set="null" expr="3" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</culling_mask>
		<getDepthWrite public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getDepthWrite>
		<depthWrite_bits public="1" get="inline" set="null" expr="1" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</depthWrite_bits>
		<depthWrite_offset public="1" get="inline" set="null" expr="2" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</depthWrite_offset>
		<depthWrite_mask public="1" get="inline" set="null" expr="4" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</depthWrite_mask>
		<getDepthTest public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getDepthTest>
		<depthTest_bits public="1" get="inline" set="null" expr="3" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</depthTest_bits>
		<depthTest_offset public="1" get="inline" set="null" expr="3" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</depthTest_offset>
		<depthTest_mask public="1" get="inline" set="null" expr="56" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>56</e></m></meta>
		</depthTest_mask>
		<getBlendSrc public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getBlendSrc>
		<blendSrc_bits public="1" get="inline" set="null" expr="4" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</blendSrc_bits>
		<blendSrc_offset public="1" get="inline" set="null" expr="6" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</blendSrc_offset>
		<blendSrc_mask public="1" get="inline" set="null" expr="960" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>960</e></m></meta>
		</blendSrc_mask>
		<getBlendDst public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getBlendDst>
		<blendDst_bits public="1" get="inline" set="null" expr="4" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</blendDst_bits>
		<blendDst_offset public="1" get="inline" set="null" expr="10" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</blendDst_offset>
		<blendDst_mask public="1" get="inline" set="null" expr="15360" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15360</e></m></meta>
		</blendDst_mask>
		<getBlendAlphaSrc public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getBlendAlphaSrc>
		<blendAlphaSrc_bits public="1" get="inline" set="null" expr="4" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</blendAlphaSrc_bits>
		<blendAlphaSrc_offset public="1" get="inline" set="null" expr="14" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</blendAlphaSrc_offset>
		<blendAlphaSrc_mask public="1" get="inline" set="null" expr="245760" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>245760</e></m></meta>
		</blendAlphaSrc_mask>
		<getBlendAlphaDst public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getBlendAlphaDst>
		<blendAlphaDst_bits public="1" get="inline" set="null" expr="4" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</blendAlphaDst_bits>
		<blendAlphaDst_offset public="1" get="inline" set="null" expr="18" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</blendAlphaDst_offset>
		<blendAlphaDst_mask public="1" get="inline" set="null" expr="3932160" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3932160</e></m></meta>
		</blendAlphaDst_mask>
		<getBlendOp public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getBlendOp>
		<blendOp_bits public="1" get="inline" set="null" expr="3" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</blendOp_bits>
		<blendOp_offset public="1" get="inline" set="null" expr="22" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</blendOp_offset>
		<blendOp_mask public="1" get="inline" set="null" expr="29360128" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>29360128</e></m></meta>
		</blendOp_mask>
		<getBlendAlphaOp public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getBlendAlphaOp>
		<blendAlphaOp_bits public="1" get="inline" set="null" expr="3" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</blendAlphaOp_bits>
		<blendAlphaOp_offset public="1" get="inline" set="null" expr="25" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</blendAlphaOp_offset>
		<blendAlphaOp_mask public="1" get="inline" set="null" expr="234881024" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>234881024</e></m></meta>
		</blendAlphaOp_mask>
		<getWireframe public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getWireframe>
		<wireframe_bits public="1" get="inline" set="null" expr="1" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</wireframe_bits>
		<wireframe_offset public="1" get="inline" set="null" expr="28" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>28</e></m></meta>
		</wireframe_offset>
		<wireframe_mask public="1" get="inline" set="null" expr="268435456" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>268435456</e></m></meta>
		</wireframe_mask>
		<getReserved public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getReserved>
		<reserved_bits public="1" get="inline" set="null" expr="1" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</reserved_bits>
		<reserved_offset public="1" get="inline" set="null" expr="29" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>29</e></m></meta>
		</reserved_offset>
		<reserved_mask public="1" get="inline" set="null" expr="536870912" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>536870912</e></m></meta>
		</reserved_mask>
		<name public="1" set="null">
			<c path="String"/>
			<meta><m n=":s"/></meta>
		</name>
		<flags><x path="Int"/></flags>
		<passId><x path="Int"/></passId>
		<bits expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":s"/>
			</meta>
		</bits>
		<parentPass>
			<c path="h3d.mat.Pass"/>
			<meta><m n=":s"/></meta>
		</parentPass>
		<parentShaders><c path="hxsl.ShaderList"/></parentShaders>
		<shaders><c path="hxsl.ShaderList"/></shaders>
		<nextPass>
			<c path="h3d.mat.Pass"/>
			<meta><m n=":s"/></meta>
		</nextPass>
		<enableLights public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":bits"><e>flags</e></m></meta>
		</enableLights>
		<dynamicParameters public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":bits"><e>flags</e></m></meta>
			<haxe_doc>Inform the pass system that the parameters will be modified in object draw() command,
		so they will be manually uploaded by calling RenderContext.uploadParams.</haxe_doc>
		</dynamicParameters>
		<isStatic public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":bits"><e>flags</e></m></meta>
			<haxe_doc>Mark the pass as static, this will allow some renderers or shadows to filter it
		when rendering static/dynamic parts.</haxe_doc>
		</isStatic>
		<batchMode set="accessor">
			<x path="Bool"/>
			<meta><m n=":bits"><e>flags</e></m></meta>
		</batchMode>
		<culling public="1" set="accessor">
			<e path="h3d.mat.Face"/>
			<meta><m n=":bits"><e>bits</e></m></meta>
		</culling>
		<depthWrite public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":bits"><e>bits</e></m></meta>
		</depthWrite>
		<depthTest public="1" set="accessor">
			<e path="h3d.mat.Compare"/>
			<meta><m n=":bits"><e>bits</e></m></meta>
		</depthTest>
		<blendSrc public="1" set="accessor">
			<e path="h3d.mat.Blend"/>
			<meta><m n=":bits"><e>bits</e></m></meta>
		</blendSrc>
		<blendDst public="1" set="accessor">
			<e path="h3d.mat.Blend"/>
			<meta><m n=":bits"><e>bits</e></m></meta>
		</blendDst>
		<blendAlphaSrc public="1" set="accessor">
			<e path="h3d.mat.Blend"/>
			<meta><m n=":bits"><e>bits</e></m></meta>
		</blendAlphaSrc>
		<blendAlphaDst public="1" set="accessor">
			<e path="h3d.mat.Blend"/>
			<meta><m n=":bits"><e>bits</e></m></meta>
		</blendAlphaDst>
		<blendOp public="1" set="accessor">
			<e path="h3d.mat.Operation"/>
			<meta><m n=":bits"><e>bits</e></m></meta>
		</blendOp>
		<blendAlphaOp public="1" set="accessor">
			<e path="h3d.mat.Operation"/>
			<meta><m n=":bits"><e>bits</e></m></meta>
		</blendAlphaOp>
		<wireframe public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":bits"><e>bits</e></m></meta>
		</wireframe>
		<colorMask public="1"><x path="Int"/></colorMask>
		<layer public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</layer>
		<stencil public="1">
			<c path="h3d.mat.Stencil"/>
			<meta><m n=":s"/></meta>
		</stencil>
		<reserved set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":bits"><e>bits</e></m>
				<m n=":noCompletion"/>
			</meta>
		</reserved>
		<load public="1" set="method" line="63"><f a="p">
	<c path="h3d.mat.Pass"/>
	<x path="Void"/>
</f></load>
		<setPassName public="1" set="method" line="85"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></setPassName>
		<blend public="1" get="inline" set="null" line="90"><f a="src:dst">
	<e path="h3d.mat.Blend"/>
	<e path="h3d.mat.Blend"/>
	<x path="Void"/>
</f></blend>
		<setBlendMode public="1" set="method" line="97"><f a="b">
	<t path="h3d.mat.BlendMode"/>
	<x path="Void"/>
</f></setBlendMode>
		<depth public="1" set="method" line="163"><f a="write:test">
	<x path="Bool"/>
	<e path="h3d.mat.Compare"/>
	<x path="Void"/>
</f></depth>
		<setColorMask public="1" set="method" line="168"><f a="r:g:b:a">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setColorMask>
		<setColorChannel public="1" set="method" line="172"><f a="c">
	<e path="hxsl.Channel"/>
	<x path="Void"/>
</f></setColorChannel>
		<addShader public="1" params="T" set="method" line="182"><f a="s">
	<c path="addShader.T"/>
	<c path="addShader.T"/>
</f></addShader>
		<addShaderAtIndex params="T" set="method" line="192">
			<f a="s:index">
				<c path="addShaderAtIndex.T"/>
				<x path="Int"/>
				<c path="addShaderAtIndex.T"/>
			</f>
			<haxe_doc>Can be used for internal usage</haxe_doc>
		</addShaderAtIndex>
		<getShaderIndex set="method" line="207"><f a="s">
	<c path="hxsl.Shader"/>
	<x path="Int"/>
</f></getShaderIndex>
		<removeShader public="1" set="method" line="218"><f a="s">
	<c path="hxsl.Shader"/>
	<x path="Bool"/>
</f></removeShader>
		<getShader public="1" params="T" set="method" line="234"><f a="t">
	<x path="Class"><c path="getShader.T"/></x>
	<c path="getShader.T"/>
</f></getShader>
		<getShaderByName public="1" set="method" line="245"><f a="name">
	<c path="String"/>
	<c path="hxsl.Shader"/>
</f></getShaderByName>
		<getShaders public="1" get="inline" set="null" line="255"><f a=""><c path="hxsl._ShaderList.ShaderIterator"/></f></getShaders>
		<getShadersRec set="method" line="259"><f a=""><c path="hxsl.ShaderList"/></f></getShadersRec>
		<clone public="1" set="method" line="276"><f a=""><c path="h3d.mat.Pass"/></f></clone>
		<getDebugShaderCode public="1" set="method" line="285">
			<f a="scene:?toHxsl" v=":true">
				<c path="h3d.scene.Scene"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ toHxsl : true }</e></m></meta>
		</getDebugShaderCode>
		<set_enableLights set="method" line="87"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enableLights>
		<set_dynamicParameters set="method" line="87"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_dynamicParameters>
		<set_isStatic set="method" line="87"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_isStatic>
		<set_batchMode set="method" line="87"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_batchMode>
		<set_culling set="method" line="87"><f a="v">
	<e path="h3d.mat.Face"/>
	<e path="h3d.mat.Face"/>
</f></set_culling>
		<set_depthWrite set="method" line="87"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_depthWrite>
		<set_depthTest set="method" line="87"><f a="v">
	<e path="h3d.mat.Compare"/>
	<e path="h3d.mat.Compare"/>
</f></set_depthTest>
		<set_blendSrc set="method" line="87"><f a="v">
	<e path="h3d.mat.Blend"/>
	<e path="h3d.mat.Blend"/>
</f></set_blendSrc>
		<set_blendDst set="method" line="87"><f a="v">
	<e path="h3d.mat.Blend"/>
	<e path="h3d.mat.Blend"/>
</f></set_blendDst>
		<set_blendAlphaSrc set="method" line="87"><f a="v">
	<e path="h3d.mat.Blend"/>
	<e path="h3d.mat.Blend"/>
</f></set_blendAlphaSrc>
		<set_blendAlphaDst set="method" line="87"><f a="v">
	<e path="h3d.mat.Blend"/>
	<e path="h3d.mat.Blend"/>
</f></set_blendAlphaDst>
		<set_blendOp set="method" line="87"><f a="v">
	<e path="h3d.mat.Operation"/>
	<e path="h3d.mat.Operation"/>
</f></set_blendOp>
		<set_blendAlphaOp set="method" line="87"><f a="v">
	<e path="h3d.mat.Operation"/>
	<e path="h3d.mat.Operation"/>
</f></set_blendAlphaOp>
		<set_wireframe set="method" line="87"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_wireframe>
		<set_reserved set="method" line="87"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_reserved>
		<loadFlags set="method" line="140"><f a="bits">
	<x path="Int"/>
	<x path="Void"/>
</f></loadFlags>
		<loadBits set="method" line="140"><f a="bits">
	<x path="Int"/>
	<x path="Void"/>
</f></loadBits>
		<new public="1" set="method" line="52"><f a="name:?shaders:?parent">
	<c path="String"/>
	<c path="hxsl.ShaderList"/>
	<c path="h3d.mat.Pass"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>h3d.mat.BaseMaterial</e></m>
			<m n=":build"><e>hxd.impl.BitsBuilder.build()</e></m>
		</meta>
	</class>
	<class path="h3d.mat.Stencil" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Stencil.hx">
		<implements path="hxd.impl._Serializable.NoSerializeSupport"/>
		<getReadMask public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getReadMask>
		<readMask_bits public="1" get="inline" set="null" expr="8" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</readMask_bits>
		<readMask_offset public="1" get="inline" set="null" expr="0" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</readMask_offset>
		<readMask_mask public="1" get="inline" set="null" expr="255" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>255</e></m></meta>
		</readMask_mask>
		<getWriteMask public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getWriteMask>
		<writeMask_bits public="1" get="inline" set="null" expr="8" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</writeMask_bits>
		<writeMask_offset public="1" get="inline" set="null" expr="8" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</writeMask_offset>
		<writeMask_mask public="1" get="inline" set="null" expr="65280" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65280</e></m></meta>
		</writeMask_mask>
		<getReference public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getReference>
		<reference_bits public="1" get="inline" set="null" expr="8" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</reference_bits>
		<reference_offset public="1" get="inline" set="null" expr="16" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</reference_offset>
		<reference_mask public="1" get="inline" set="null" expr="16711680" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16711680</e></m></meta>
		</reference_mask>
		<getFrontTest public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getFrontTest>
		<frontTest_bits public="1" get="inline" set="null" expr="3" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</frontTest_bits>
		<frontTest_offset public="1" get="inline" set="null" expr="0" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</frontTest_offset>
		<frontTest_mask public="1" get="inline" set="null" expr="7" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</frontTest_mask>
		<getFrontPass public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getFrontPass>
		<frontPass_bits public="1" get="inline" set="null" expr="3" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</frontPass_bits>
		<frontPass_offset public="1" get="inline" set="null" expr="3" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</frontPass_offset>
		<frontPass_mask public="1" get="inline" set="null" expr="56" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>56</e></m></meta>
		</frontPass_mask>
		<getFrontSTfail public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getFrontSTfail>
		<frontSTfail_bits public="1" get="inline" set="null" expr="3" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</frontSTfail_bits>
		<frontSTfail_offset public="1" get="inline" set="null" expr="6" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</frontSTfail_offset>
		<frontSTfail_mask public="1" get="inline" set="null" expr="448" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>448</e></m></meta>
		</frontSTfail_mask>
		<getFrontDPfail public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getFrontDPfail>
		<frontDPfail_bits public="1" get="inline" set="null" expr="3" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</frontDPfail_bits>
		<frontDPfail_offset public="1" get="inline" set="null" expr="9" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</frontDPfail_offset>
		<frontDPfail_mask public="1" get="inline" set="null" expr="3584" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3584</e></m></meta>
		</frontDPfail_mask>
		<getBackTest public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getBackTest>
		<backTest_bits public="1" get="inline" set="null" expr="3" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</backTest_bits>
		<backTest_offset public="1" get="inline" set="null" expr="12" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</backTest_offset>
		<backTest_mask public="1" get="inline" set="null" expr="28672" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>28672</e></m></meta>
		</backTest_mask>
		<getBackPass public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getBackPass>
		<backPass_bits public="1" get="inline" set="null" expr="3" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</backPass_bits>
		<backPass_offset public="1" get="inline" set="null" expr="15" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</backPass_offset>
		<backPass_mask public="1" get="inline" set="null" expr="229376" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>229376</e></m></meta>
		</backPass_mask>
		<getBackSTfail public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getBackSTfail>
		<backSTfail_bits public="1" get="inline" set="null" expr="3" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</backSTfail_bits>
		<backSTfail_offset public="1" get="inline" set="null" expr="18" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</backSTfail_offset>
		<backSTfail_mask public="1" get="inline" set="null" expr="1835008" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1835008</e></m></meta>
		</backSTfail_mask>
		<getBackDPfail public="1" get="inline" set="null" line="101" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></getBackDPfail>
		<backDPfail_bits public="1" get="inline" set="null" expr="3" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</backDPfail_bits>
		<backDPfail_offset public="1" get="inline" set="null" expr="21" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</backDPfail_offset>
		<backDPfail_mask public="1" get="inline" set="null" expr="14680064" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14680064</e></m></meta>
		</backDPfail_mask>
		<maskBits expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":s"/>
			</meta>
		</maskBits>
		<opBits expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":s"/>
			</meta>
		</opBits>
		<readMask public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":bits">
	<e>maskBits</e>
	<e>8</e>
</m></meta>
		</readMask>
		<writeMask public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":bits">
	<e>maskBits</e>
	<e>8</e>
</m></meta>
		</writeMask>
		<reference public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":bits">
	<e>maskBits</e>
	<e>8</e>
</m></meta>
		</reference>
		<frontTest public="1" set="accessor">
			<e path="h3d.mat.Compare"/>
			<meta><m n=":bits"><e>opBits</e></m></meta>
		</frontTest>
		<frontPass public="1" set="accessor">
			<e path="h3d.mat.StencilOp"/>
			<meta><m n=":bits"><e>opBits</e></m></meta>
		</frontPass>
		<frontSTfail public="1" set="accessor">
			<e path="h3d.mat.StencilOp"/>
			<meta><m n=":bits"><e>opBits</e></m></meta>
		</frontSTfail>
		<frontDPfail public="1" set="accessor">
			<e path="h3d.mat.StencilOp"/>
			<meta><m n=":bits"><e>opBits</e></m></meta>
		</frontDPfail>
		<backTest public="1" set="accessor">
			<e path="h3d.mat.Compare"/>
			<meta><m n=":bits"><e>opBits</e></m></meta>
		</backTest>
		<backPass public="1" set="accessor">
			<e path="h3d.mat.StencilOp"/>
			<meta><m n=":bits"><e>opBits</e></m></meta>
		</backPass>
		<backSTfail public="1" set="accessor">
			<e path="h3d.mat.StencilOp"/>
			<meta><m n=":bits"><e>opBits</e></m></meta>
		</backSTfail>
		<backDPfail public="1" set="accessor">
			<e path="h3d.mat.StencilOp"/>
			<meta><m n=":bits"><e>opBits</e></m></meta>
		</backDPfail>
		<setFront public="1" set="method" line="32"><f a="stfail:dpfail:pass">
	<e path="h3d.mat.StencilOp"/>
	<e path="h3d.mat.StencilOp"/>
	<e path="h3d.mat.StencilOp"/>
	<x path="Void"/>
</f></setFront>
		<setBack public="1" set="method" line="38"><f a="stfail:dpfail:pass">
	<e path="h3d.mat.StencilOp"/>
	<e path="h3d.mat.StencilOp"/>
	<e path="h3d.mat.StencilOp"/>
	<x path="Void"/>
</f></setBack>
		<setOp public="1" set="method" line="44"><f a="stfail:dpfail:pass">
	<e path="h3d.mat.StencilOp"/>
	<e path="h3d.mat.StencilOp"/>
	<e path="h3d.mat.StencilOp"/>
	<x path="Void"/>
</f></setOp>
		<setFunc public="1" set="method" line="49">
			<f a="f:?reference:?readMask:?writeMask" v=":0:0xFF:0xFF">
				<e path="h3d.mat.Compare"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ writeMask : 0xFF, readMask : 0xFF, reference : 0 }</e></m></meta>
		</setFunc>
		<clone public="1" set="method" line="56"><f a=""><c path="h3d.mat.Stencil"/></f></clone>
		<load public="1" set="method" line="63"><f a="s">
	<c path="h3d.mat.Stencil"/>
	<x path="Void"/>
</f></load>
		<set_readMask set="method" line="87"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></set_readMask>
		<set_writeMask set="method" line="87"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></set_writeMask>
		<set_reference set="method" line="87"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></set_reference>
		<set_frontTest set="method" line="87"><f a="v">
	<e path="h3d.mat.Compare"/>
	<e path="h3d.mat.Compare"/>
</f></set_frontTest>
		<set_frontPass set="method" line="87"><f a="v">
	<e path="h3d.mat.StencilOp"/>
	<e path="h3d.mat.StencilOp"/>
</f></set_frontPass>
		<set_frontSTfail set="method" line="87"><f a="v">
	<e path="h3d.mat.StencilOp"/>
	<e path="h3d.mat.StencilOp"/>
</f></set_frontSTfail>
		<set_frontDPfail set="method" line="87"><f a="v">
	<e path="h3d.mat.StencilOp"/>
	<e path="h3d.mat.StencilOp"/>
</f></set_frontDPfail>
		<set_backTest set="method" line="87"><f a="v">
	<e path="h3d.mat.Compare"/>
	<e path="h3d.mat.Compare"/>
</f></set_backTest>
		<set_backPass set="method" line="87"><f a="v">
	<e path="h3d.mat.StencilOp"/>
	<e path="h3d.mat.StencilOp"/>
</f></set_backPass>
		<set_backSTfail set="method" line="87"><f a="v">
	<e path="h3d.mat.StencilOp"/>
	<e path="h3d.mat.StencilOp"/>
</f></set_backSTfail>
		<set_backDPfail set="method" line="87"><f a="v">
	<e path="h3d.mat.StencilOp"/>
	<e path="h3d.mat.StencilOp"/>
</f></set_backDPfail>
		<loadOpBits set="method" line="140"><f a="bits">
	<x path="Int"/>
	<x path="Void"/>
</f></loadOpBits>
		<loadMaskBits set="method" line="140"><f a="bits">
	<x path="Int"/>
	<x path="Void"/>
</f></loadMaskBits>
		<new public="1" set="method" line="27"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>h3d.mat.Material</e></m>
			<m n=":build"><e>hxd.impl.BitsBuilder.build()</e></m>
		</meta>
	</class>
	<enum path="hxd.PixelFormat" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/PixelFormat.hx">
		<ARGB/>
		<BGRA/>
		<RGBA/>
		<RGBA16F/>
		<RGBA32F/>
		<R8/>
		<R16F/>
		<R32F/>
		<RG8/>
		<RG16F/>
		<RG32F/>
		<RGB8/>
		<RGB16F/>
		<RGB32F/>
		<SRGB/>
		<SRGB_ALPHA/>
		<RGB10A2/>
		<RG11B10UF/>
		<R16U/>
		<RGB16U/>
		<RGBA16U/>
		<S3TC a="v"><x path="Int"/></S3TC>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="h3d.mat.Texture" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/Texture.hx">
		<UID expr="0" line="7" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</UID>
		<PREVENT_AUTO_DISPOSE final="1" set="null" expr="0x7FFFFFFF" line="8" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x7FFFFFFF</e></m></meta>
		</PREVENT_AUTO_DISPOSE>
		<nativeFormat public="1" set="null" expr="RGBA" line="19" static="1">
			<t path="h3d.mat.TextureFormat"/>
			<meta><m n=":value"><e>RGBA</e></m></meta>
			<haxe_doc>The default texture color format</haxe_doc>
		</nativeFormat>
		<fromBitmap public="1" set="method" line="412" static="1"><f a="bmp">
	<c path="hxd.BitmapData"/>
	<c path="h3d.mat.Texture"/>
</f></fromBitmap>
		<fromPixels public="1" set="method" line="418" static="1"><f a="pixels">
	<c path="hxd.Pixels"/>
	<c path="h3d.mat.Texture"/>
</f></fromPixels>
		<fromColor public="1" set="method" line="427" static="1">
			<f a="color:?alpha" v=":1.">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Null"><c path="h3d.mat.Texture"/></x>
			</f>
			<meta><m n=":value"><e>{ alpha : 1. }</e></m></meta>
			<haxe_doc>Creates a 1x1 texture using the RGB color passed as parameter.</haxe_doc>
		</fromColor>
		<genDisc public="1" set="method" line="444" static="1">
			<f a="size:color:?alpha" v="::1.">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="h3d.mat.Texture"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1. }</e></m></meta>
		</genDisc>
		<genTexture set="method" line="448" static="1"><f a="mode:size:color:alpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="h3d.mat.Texture"/>
</f></genTexture>
		<drawGenTexture set="method" line="469" static="1"><f a="t:color:mode">
	<c path="h3d.mat.Texture"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawGenTexture>
		<defaultCubeTexture public="1" set="method" line="484" static="1">
			<f a=""><c path="h3d.mat.Texture"/></f>
			<haxe_doc>Returns a default dummy 1x1 black cube texture</haxe_doc>
		</defaultCubeTexture>
		<genChecker public="1" set="method" line="499" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="h3d.mat.Texture"/>
			</f>
			<haxe_doc>Returns a checker texture of size x size, than can be repeated</haxe_doc>
		</genChecker>
		<checkerTextureKeys expr="new Map&lt;Int,{ }&gt;()" line="515" static="1">
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<a/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<Int,{ }>()]]></e></m></meta>
		</checkerTextureKeys>
		<noiseTextureKeys expr="new Map&lt;Int,{ }&gt;()" line="516" static="1">
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<a/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<Int,{ }>()]]></e></m></meta>
		</noiseTextureKeys>
		<genTextureKeys expr="new Map&lt;String,{ }&gt;()" line="517" static="1">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<a/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<String,{ }>()]]></e></m></meta>
		</genTextureKeys>
		<genNoise public="1" set="method" line="519" static="1"><f a="size">
	<x path="Int"/>
	<c path="h3d.mat.Texture"/>
</f></genNoise>
		<allocNoise set="method" line="535" static="1"><f a="t:size">
	<c path="h3d.mat.Texture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></allocNoise>
		<allocChecker set="method" line="546" static="1"><f a="t:size">
	<c path="h3d.mat.Texture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></allocChecker>
		<t><t path="h3d.impl.Texture"/></t>
		<mem><c path="h3d.impl.MemoryManager"/></mem>
		<id public="1" set="null"><x path="Int"/></id>
		<name public="1" set="null"><c path="String"/></name>
		<width public="1" set="null"><x path="Int"/></width>
		<height public="1" set="null"><x path="Int"/></height>
		<flags public="1" set="null"><x path="haxe.EnumFlags"><e path="h3d.mat.TextureFlags"/></x></flags>
		<format public="1" set="null"><t path="h3d.mat.TextureFormat"/></format>
		<lastFrame get="accessor" set="accessor"><x path="Int"/></lastFrame>
		<bits><x path="Int"/></bits>
		<waitLoads><c path="Array"><f a=""><x path="Void"/></f></c></waitLoads>
		<mipMap public="1" set="accessor"><e path="h3d.mat.MipMap"/></mipMap>
		<filter public="1" set="accessor"><e path="h3d.mat.Filter"/></filter>
		<wrap public="1" set="accessor"><e path="h3d.mat.Wrap"/></wrap>
		<layerCount public="1" get="accessor" set="null"><x path="Int"/></layerCount>
		<lodBias public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</lodBias>
		<mipLevels public="1" get="accessor" set="null"><x path="Int"/></mipLevels>
		<realloc public="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>If this callback is set, the texture can be re-allocated when the 3D context has been lost or when
		it's been free because of lack of memory.</haxe_doc>
		</realloc>
		<depthBuffer public="1">
			<c path="h3d.mat.DepthBuffer"/>
			<haxe_doc>When the texture is used as render target, tells which depth buffer will be used.
		If set to null, depth testing is disabled.</haxe_doc>
		</depthBuffer>
		<_lastFrame><x path="Int"/></_lastFrame>
		<set_lastFrame set="method" line="58"><f a="lf">
	<x path="Int"/>
	<x path="Int"/>
</f></set_lastFrame>
		<get_lastFrame set="method" line="67"><f a=""><x path="Int"/></f></get_lastFrame>
		<get_mipLevels set="method" line="71"><f a=""><x path="Int"/></f></get_mipLevels>
		<get_layerCount set="method" line="116"><f a=""><x path="Int"/></f></get_layerCount>
		<alloc public="1" set="method" line="120"><f a=""><x path="Void"/></f></alloc>
		<isSRGB public="1" set="method" line="125"><f a=""><x path="Bool"/></f></isSRGB>
		<checkAlloc set="method" line="129"><f a=""><x path="Void"/></f></checkAlloc>
		<clone public="1" set="method" line="136"><f a=""><c path="h3d.mat.Texture"/></f></clone>
		<preventAutoDispose public="1" set="method" line="161">
			<f a=""><x path="Void"/></f>
			<haxe_doc>In case of out of GPU memory, textures that hasn't been used for a long time will be disposed.
		Calling this will make this texture not considered for auto disposal.</haxe_doc>
		</preventAutoDispose>
		<waitLoad public="1" set="method" line="170">
			<f a="f">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Some textures might take some time to load. You can check flags.has(Loading)
		or add a waitLoad callback which will get called either immediately if the texture is already loaded
		or when loading is complete.</haxe_doc>
		</waitLoad>
		<toString set="method" line="179"><f a=""><c path="String"/></f></toString>
		<setName public="1" set="method" line="190"><f a="n">
	<c path="String"/>
	<x path="Void"/>
</f></setName>
		<set_mipMap set="method" line="194"><f a="m">
	<e path="h3d.mat.MipMap"/>
	<e path="h3d.mat.MipMap"/>
</f></set_mipMap>
		<set_filter set="method" line="199"><f a="f">
	<e path="h3d.mat.Filter"/>
	<e path="h3d.mat.Filter"/>
</f></set_filter>
		<set_wrap set="method" line="204"><f a="w">
	<e path="h3d.mat.Wrap"/>
	<e path="h3d.mat.Wrap"/>
</f></set_wrap>
		<isDisposed public="1" get="inline" set="null" line="209"><f a=""><x path="Bool"/></f></isDisposed>
		<resize public="1" set="method" line="213"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<clearF public="1" set="method" line="231">
			<f a="?r:?g:?b:?a:?layer" v="0.:0.:0.:0.:-1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ layer : -1, a : 0., b : 0., g : 0., r : 0. }</e></m></meta>
		</clearF>
		<clear public="1" set="method" line="249">
			<f a="color:?alpha:?layer" v=":1.:-1">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ layer : -1, alpha : 1. }</e></m></meta>
		</clear>
		<checkSize set="method" line="296"><f a="width:height:mip">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></checkSize>
		<checkMipMapGen set="method" line="303"><f a="mipLevel:layer">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></checkMipMapGen>
		<uploadBitmap public="1" set="method" line="308">
			<f a="bmp:?mipLevel:?layer" v=":0:0">
				<c path="hxd.BitmapData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ layer : 0, mipLevel : 0 }</e></m></meta>
		</uploadBitmap>
		<uploadPixels public="1" set="method" line="316">
			<f a="pixels:?mipLevel:?layer" v=":0:0">
				<c path="hxd.Pixels"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ layer : 0, mipLevel : 0 }</e></m></meta>
		</uploadPixels>
		<dispose public="1" set="method" line="324"><f a=""><x path="Void"/></f></dispose>
		<swapTexture public="1" set="method" line="333">
			<f a="t">
				<c path="h3d.mat.Texture"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Swap two textures, this is an immediate operation.
		BEWARE : if the texture is a cached image (hxd.res.Image), the swap will affect the cache!</haxe_doc>
		</swapTexture>
		<capturePixels public="1" set="method" line="347">
			<f a="?face:?mipLevel:?region" v="0:0:">
				<x path="Int"/>
				<x path="Int"/>
				<c path="h2d.col.IBounds"/>
				<c path="hxd.Pixels"/>
			</f>
			<meta><m n=":value"><e>{ mipLevel : 0, face : 0 }</e></m></meta>
			<haxe_doc>Downloads the current texture data from the GPU.
		Beware, this is a very slow operation that shouldn't be done during rendering.</haxe_doc>
		</capturePixels>
		<new public="1" set="method" line="81"><f a="w:h:?flags:?format">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><e path="h3d.mat.TextureFlags"/></c>
	<x path="Null"><t path="h3d.mat.TextureFormat"/></x>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>h3d</e></m>
		</meta>
	</class>
	<class path="h3d.mat.TextureArray" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/mat/TextureArray.hx">
		<extends path="h3d.mat.Texture"/>
		<layers><x path="Int"/></layers>
		<get_layerCount set="method" line="15" override="1"><f a=""><x path="Int"/></f></get_layerCount>
		<clone public="1" set="method" line="19" override="1"><f a=""><c path="h3d.mat.TextureArray"/></f></clone>
		<toString set="method" line="28" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="8"><f a="w:h:layers:?flags:?format">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><e path="h3d.mat.TextureFlags"/></c>
	<x path="Null"><t path="h3d.mat.TextureFormat"/></x>
	<x path="Void"/>
</f></new>
	</class>
	<class path="h3d.pass.Base" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/Base.hx">
		<ctx><c path="h3d.scene.RenderContext"/></ctx>
		<name public="1" set="null"><c path="String"/></name>
		<compileShader public="1" set="method" line="12"><f a="p">
	<c path="h3d.mat.Pass"/>
	<c path="hxsl.RuntimeShader"/>
</f></compileShader>
		<setContext public="1" set="method" line="17"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></setContext>
		<dispose public="1" set="method" line="21"><f a=""><x path="Void"/></f></dispose>
		<draw public="1" set="method" line="24"><f a="passes:?sort">
	<c path="h3d.pass.PassList"/>
	<f a="">
		<c path="h3d.pass.PassList"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></draw>
		<new public="1" set="method" line="8"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="h3d.pass.ScreenFx" params="T" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/ScreenFx.hx">
		<run public="1" set="method" line="86" static="1"><f a="shader:output:?layer">
	<c path="h3d.shader.ScreenShader"/>
	<c path="h3d.mat.Texture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></run>
		<shader public="1"><c path="h3d.pass.ScreenFx.T"/></shader>
		<pass public="1"><c path="h3d.mat.Pass"/></pass>
		<primitive public="1"><c path="h3d.prim.Primitive"/></primitive>
		<manager><c path="h3d.pass.ShaderManager"/></manager>
		<_engine><c path="h3d.Engine"/></_engine>
		<engine get="accessor" set="null"><c path="h3d.Engine"/></engine>
		<shaders><c path="hxsl.ShaderList"/></shaders>
		<buffers><c path="h3d.shader.Buffers"/></buffers>
		<get_engine set="method" line="23"><f a=""><c path="h3d.Engine"/></f></get_engine>
		<copy set="method" line="28"><f a="src:dst">
	<c path="h3d.mat.Texture"/>
	<c path="h3d.mat.Texture"/>
	<x path="Void"/>
</f></copy>
		<setGlobals public="1" set="method" line="32"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></setGlobals>
		<addShader public="1" params="T" set="method" line="37"><f a="s">
	<c path="addShader.T"/>
	<c path="addShader.T"/>
</f></addShader>
		<removeShader public="1" set="method" line="42"><f a="s">
	<c path="hxsl.Shader"/>
	<x path="Bool"/>
</f></removeShader>
		<getShader public="1" params="T" set="method" line="56"><f a="cl">
	<x path="Class"><c path="getShader.T"/></x>
	<c path="getShader.T"/>
</f></getShader>
		<render public="1" set="method" line="64"><f a=""><x path="Void"/></f></render>
		<dispose public="1" set="method" line="83"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="14"><f a="shader:?output">
	<c path="h3d.pass.ScreenFx.T"/>
	<c path="Array"><e path="hxsl.Output"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.pass.Blur" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/Blur.hx">
		<extends path="h3d.pass.ScreenFx"><c path="h3d.shader.Blur"/></extends>
		<cubeDir expr="[h3d.Matrix.L([0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 0]), h3d.Matrix.L([0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, 0]), h3d.Matrix.L([1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0]), h3d.Matrix.L([1, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0]), h3d.Matrix.L([1, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0]), h3d.Matrix.L([-1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0])]">
			<c path="Array"><c path="h3d.Matrix"/></c>
			<meta><m n=":value"><e>[h3d.Matrix.L([0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 0]), h3d.Matrix.L([0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, 0]), h3d.Matrix.L([1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0]), h3d.Matrix.L([1, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0]), h3d.Matrix.L([1, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0]), h3d.Matrix.L([-1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0])]</e></m></meta>
		</cubeDir>
		<radius public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>How far in pixels the blur will go.</haxe_doc>
		</radius>
		<gain public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>How much the blur increases or decreases the color amount (default = 1)</haxe_doc>
		</gain>
		<linear public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>Set linear blur instead of gaussian (default = 0).</haxe_doc>
		</linear>
		<quality public="1" set="accessor">
			<x path="Float"/>
			<haxe_doc>Adjust how much quality/speed tradeoff we want (default = 1)</haxe_doc>
		</quality>
		<values><c path="Array"><x path="Float"/></c></values>
		<offsets><c path="Array"><x path="Float"/></c></offsets>
		<set_radius set="method" line="44"><f a="r">
	<x path="Float"/>
	<x path="Float"/>
</f></set_radius>
		<set_quality set="method" line="51"><f a="q">
	<x path="Float"/>
	<x path="Float"/>
</f></set_quality>
		<set_gain set="method" line="58"><f a="s">
	<x path="Float"/>
	<x path="Float"/>
</f></set_gain>
		<set_linear set="method" line="65"><f a="b">
	<x path="Float"/>
	<x path="Float"/>
</f></set_linear>
		<gauss set="method" line="72"><f a="x:s">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></gauss>
		<calcValues set="method" line="79"><f a=""><x path="Void"/></f></calcValues>
		<getKernelSize public="1" set="method" line="121"><f a=""><x path="Int"/></f></getKernelSize>
		<apply public="1" set="method" line="126"><f a="ctx:src:?output">
	<c path="h3d.impl.RenderContext"/>
	<c path="h3d.mat.Texture"/>
	<c path="h3d.mat.Texture"/>
	<x path="Void"/>
</f></apply>
		<new public="1" set="method" line="36">
			<f a="?radius:?gain:?linear:?quality" v="1.:1.:0.:1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ quality : 1., linear : 0., gain : 1., radius : 1. }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n="ignore"><e>"shader"</e></m>
		</meta>
	</class>
	<class path="hxsl.Shader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Shader.hx">
		<priority public="1" set="null" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</priority>
		<shader><c path="hxsl.SharedShader"/></shader>
		<instance><c path="hxsl.ShaderInstance"/></instance>
		<constBits><x path="Int"/></constBits>
		<constModified><x path="Bool"/></constModified>
		<initialize set="method" line="17"><f a=""><x path="Void"/></f></initialize>
		<setPriority public="1" set="method" line="40">
			<f a="v">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Shader priority should only be changed *before* the shader is added to a material.</haxe_doc>
		</setPriority>
		<getParamValue public="1" set="method" line="44"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="49"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<updateConstants public="1" set="method" line="54"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<updateConstantsFinal set="method" line="58"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstantsFinal>
		<clone public="1" set="method" line="100"><f a=""><c path="hxsl.Shader"/></f></clone>
		<toString public="1" set="method" line="104"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.ScreenShader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/ScreenShader.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLF2gzZC5zaGFkZXIuU2NyZWVuU2hhZGVyBwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghfX2luaXRfXw4GAAALBnZlcnRleA4GAAACAgoAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAALAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLF2gzZC5zaGFkZXIuU2NyZWVuU2hhZGVyBwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghfX2luaXRfXw4GAAALBnZlcnRleA4GAAACAgoAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAALAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<flipY public="1" get="accessor" set="accessor"><x path="Float"/></flipY>
		<flipY__ expr="0">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</flipY__>
		<get_flipY get="inline" set="null" line="174">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_flipY>
		<set_flipY get="inline" set="null" line="191">
			<f a="_v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_flipY>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="3"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":src"><e>{
	@input var input:{ var position : Vec2; var uv : Vec2};
	@param var flipY:Float;
	var output:{ var position : Vec4; var color : Vec4};
	var pixelColor:Vec4;
	var calculatedUV:Vec2;
	function __init__() {
		output.color = pixelColor;
		calculatedUV = input.uv;
	};
	function vertex() {
		output.position = vec4(input.position.x, input.position.y * flipY, 0, 1);
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.pass._Border.BorderShader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/Border.hx" private="1" module="h3d.pass.Border">
		<extends path="h3d.shader.ScreenShader"/>
		<SRC expr="&quot;HXSLHWgzZC5wYXNzLl9Cb3JkZXIuQm9yZGVyU2hhZGVyCQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgVjb2xvcgUMAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMAgoFDAUMAA&quot;" line="4" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLHWgzZC5wYXNzLl9Cb3JkZXIuQm9yZGVyU2hhZGVyCQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgVjb2xvcgUMAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMAgoFDAUMAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<color public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></color>
		<color__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</color__>
		<get_color get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_color>
		<set_color get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_color>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="4" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="4" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="4" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="3"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@param var color:Vec4;
	function fragment() {
		pixelColor = color;
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.pass.Border" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/Border.hx">
		<extends path="h3d.pass.ScreenFx"><c path="h3d.pass._Border.BorderShader"/></extends>
		<dispose public="1" set="method" line="49" override="1"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="17">
			<f a="width:height:?size" v="::1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ size : 1 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.pass._Copy.ArrayCopyShader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/Copy.hx" private="1" module="h3d.pass.Copy">
		<extends path="h3d.shader.ScreenShader"/>
		<SRC expr="&quot;HXSLHmgzZC5wYXNzLl9Db3B5LkFycmF5Q29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQsCAAALBWxheWVyAQIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFAQYEAggFDAkDIQ4CAgoLCQMpDgICCQUKCQMmDgECCwEDBQsFDAUMAA&quot;" line="17" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLHmgzZC5wYXNzLl9Db3B5LkFycmF5Q29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQsCAAALBWxheWVyAQIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFAQYEAggFDAkDIQ4CAgoLCQMpDgICCQUKCQMmDgECCwEDBQsFDAUMAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<texture public="1" get="accessor" set="accessor"><t path="hxsl.Sampler2DArray"/></texture>
		<texture__>
			<t path="hxsl.Sampler2DArray"/>
			<meta><m n=":noCompletion"/></meta>
		</texture__>
		<get_texture get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Sampler2DArray"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_texture>
		<set_texture get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Sampler2DArray"/>
				<t path="hxsl.Sampler2DArray"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_texture>
		<layer public="1" get="accessor" set="accessor"><x path="Int"/></layer>
		<layer__ expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</layer__>
		<get_layer get="inline" set="null" line="174">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_layer>
		<set_layer get="inline" set="null" line="191">
			<f a="_v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_layer>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="17" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="17" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="17" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@param var texture:Sampler2DArray;
	@param var layer:Int;
	function fragment() {
		pixelColor = texture.get(vec3(calculatedUV, layer));
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.pass.ArrayCopy" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/Copy.hx" module="h3d.pass.Copy">
		<extends path="h3d.pass.ScreenFx"><c path="h3d.pass._Copy.ArrayCopyShader"/></extends>
		<run public="1" set="method" line="58" static="1"><f a="from:fromLayer:to:?blend:?pass:?layer">
	<c path="h3d.mat.TextureArray"/>
	<x path="Int"/>
	<c path="h3d.mat.Texture"/>
	<t path="h3d.mat.BlendMode"/>
	<c path="h3d.mat.Pass"/>
	<x path="Int"/>
	<x path="Void"/>
</f></run>
		<apply public="1" set="method" line="32"><f a="from:fromLayer:to:?blend:?customPass:?layer">
	<c path="h3d.mat.TextureArray"/>
	<x path="Int"/>
	<c path="h3d.mat.Texture"/>
	<t path="h3d.mat.BlendMode"/>
	<c path="h3d.mat.Pass"/>
	<x path="Int"/>
	<x path="Void"/>
</f></apply>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="h3d.pass._Copy.CopyShader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/Copy.hx" private="1" module="h3d.pass.Copy">
		<extends path="h3d.shader.ScreenShader"/>
		<SRC expr="&quot;HXSLGWgzZC5wYXNzLl9Db3B5LkNvcHlTaGFkZXIJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMCQMhDgICCgoCCQUKBQwFDAA&quot;" line="73" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLGWgzZC5wYXNzLl9Db3B5LkNvcHlTaGFkZXIJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMCQMhDgICCgoCCQUKBQwFDAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<texture public="1" get="accessor" set="accessor"><t path="hxsl.Sampler2D"/></texture>
		<texture__>
			<t path="hxsl.Sampler2D"/>
			<meta><m n=":noCompletion"/></meta>
		</texture__>
		<get_texture get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Sampler2D"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_texture>
		<set_texture get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Sampler2D"/>
				<t path="hxsl.Sampler2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_texture>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="73" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="73" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="73" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="71"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@param var texture:Sampler2D;
	function fragment() {
		pixelColor = texture.get(calculatedUV);
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.pass.Copy" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/Copy.hx">
		<extends path="h3d.pass.ScreenFx"><c path="h3d.pass._Copy.CopyShader"/></extends>
		<run public="1" set="method" line="111" static="1"><f a="from:to:?blend:?pass:?layer">
	<c path="h3d.mat.Texture"/>
	<c path="h3d.mat.Texture"/>
	<t path="h3d.mat.BlendMode"/>
	<c path="h3d.mat.Pass"/>
	<x path="Int"/>
	<x path="Void"/>
</f></run>
		<apply public="1" set="method" line="87"><f a="from:to:?blend:?customPass:?layer">
	<t path="hxsl.Sampler2D"/>
	<c path="h3d.mat.Texture"/>
	<t path="h3d.mat.BlendMode"/>
	<c path="h3d.mat.Pass"/>
	<x path="Int"/>
	<x path="Void"/>
</f></apply>
		<new public="1" set="method" line="83"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.pass._CubeCopy.CubeCopyShader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/CubeCopy.hx" private="1" module="h3d.pass.CubeCopy">
		<extends path="h3d.shader.ScreenShader"/>
		<SRC expr="&quot;HXSLIWgzZC5wYXNzLl9DdWJlQ29weS5DdWJlQ29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQwCAAALA21hdAYCAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQIIDwJ1dgUKBAAABgMGAQIJBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgAGBAIIBQwJAyEOAgIKDAkDHw4BBgEJAykOAgIPBQoBAwAAAAAAAPA/AwULAgsGBQsFCwUMBQwA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLIWgzZC5wYXNzLl9DdWJlQ29weS5DdWJlQ29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQwCAAALA21hdAYCAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQIIDwJ1dgUKBAAABgMGAQIJBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgAGBAIIBQwJAyEOAgIKDAkDHw4BBgEJAykOAgIPBQoBAwAAAAAAAPA/AwULAgsGBQsFCwUMBQwA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<texture public="1" get="accessor" set="accessor"><t path="hxsl.SamplerCube"/></texture>
		<texture__>
			<t path="hxsl.SamplerCube"/>
			<meta><m n=":noCompletion"/></meta>
		</texture__>
		<get_texture get="inline" set="null" line="174">
			<f a=""><t path="hxsl.SamplerCube"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_texture>
		<set_texture get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.SamplerCube"/>
				<t path="hxsl.SamplerCube"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_texture>
		<mat public="1" get="accessor" set="accessor"><t path="hxsl.Matrix"/></mat>
		<mat__ expr="new hxsl.Types.Matrix()">
			<t path="hxsl.Matrix"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Matrix()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</mat__>
		<get_mat get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Matrix"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_mat>
		<set_mat get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Matrix"/>
				<t path="hxsl.Matrix"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_mat>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="3"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@param var texture:SamplerCube;
	@param var mat:Mat3;
	function fragment() {
		var uv = calculatedUV * 2.0 - 1.0;
		pixelColor = texture.get(normalize(vec3(uv, 1) * mat));
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.pass.CubeCopy" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/CubeCopy.hx">
		<extends path="h3d.pass.ScreenFx"><c path="h3d.pass._CubeCopy.CubeCopyShader"/></extends>
		<run public="1" set="method" line="55" static="1"><f a="from:to:?blend:?pass">
	<c path="h3d.mat.Texture"/>
	<c path="h3d.mat.Texture"/>
	<t path="h3d.mat.BlendMode"/>
	<c path="h3d.mat.Pass"/>
	<x path="Void"/>
</f></run>
		<cubeDir expr="[h3d.Matrix.L([0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 0]), h3d.Matrix.L([0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, 0]), h3d.Matrix.L([1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0]), h3d.Matrix.L([1, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0]), h3d.Matrix.L([1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0]), h3d.Matrix.L([-1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0])]">
			<c path="Array"><c path="h3d.Matrix"/></c>
			<meta><m n=":value"><e>[h3d.Matrix.L([0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 0]), h3d.Matrix.L([0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, 0]), h3d.Matrix.L([1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0]), h3d.Matrix.L([1, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0]), h3d.Matrix.L([1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0]), h3d.Matrix.L([-1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0])]</e></m></meta>
		</cubeDir>
		<apply public="1" set="method" line="28"><f a="from:to:?blend:?customPass">
	<t path="hxsl.SamplerCube"/>
	<c path="h3d.mat.Texture"/>
	<t path="h3d.mat.BlendMode"/>
	<c path="h3d.mat.Pass"/>
	<x path="Void"/>
</f></apply>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.pass.Default" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/Default.hx">
		<extends path="h3d.pass.Base"/>
		<manager><c path="h3d.pass.ShaderManager"/></manager>
		<globals get="accessor" set="null"><c path="hxsl.Globals"/></globals>
		<defaultSort expr="new SortByMaterial().sort">
			<f a="passes">
				<c path="h3d.pass.PassList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>new SortByMaterial().sort</e></m></meta>
		</defaultSort>
		<get_globals get="inline" set="null" line="11"><f a=""><c path="hxsl.Globals"/></f></get_globals>
		<cameraView get="accessor" set="accessor">
			<c path="h3d.Matrix"/>
			<meta><m n="global"><e>"camera.view"</e></m></meta>
		</cameraView>
		<cameraNear get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="global"><e>"camera.zNear"</e></m></meta>
		</cameraNear>
		<cameraFar get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="global"><e>"camera.zFar"</e></m></meta>
		</cameraFar>
		<cameraProj get="accessor" set="accessor">
			<c path="h3d.Matrix"/>
			<meta><m n="global"><e>"camera.proj"</e></m></meta>
		</cameraProj>
		<cameraPos get="accessor" set="accessor">
			<c path="h3d.Vector"/>
			<meta><m n="global"><e>"camera.position"</e></m></meta>
		</cameraPos>
		<cameraProjDiag get="accessor" set="accessor">
			<c path="h3d.Vector"/>
			<meta><m n="global"><e>"camera.projDiag"</e></m></meta>
		</cameraProjDiag>
		<cameraProjFlip get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="global"><e>"camera.projFlip"</e></m></meta>
		</cameraProjFlip>
		<cameraViewProj get="accessor" set="accessor">
			<c path="h3d.Matrix"/>
			<meta><m n="global"><e>"camera.viewProj"</e></m></meta>
		</cameraViewProj>
		<cameraInverseViewProj get="accessor" set="accessor">
			<c path="h3d.Matrix"/>
			<meta><m n="global"><e>"camera.inverseViewProj"</e></m></meta>
		</cameraInverseViewProj>
		<globalTime get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n="global"><e>"global.time"</e></m></meta>
		</globalTime>
		<pixelSize get="accessor" set="accessor">
			<c path="h3d.Vector"/>
			<meta><m n="global"><e>"global.pixelSize"</e></m></meta>
		</pixelSize>
		<globalModelView get="accessor" set="accessor">
			<c path="h3d.Matrix"/>
			<meta><m n="global"><e>"global.modelView"</e></m></meta>
		</globalModelView>
		<globalModelViewInverse get="accessor" set="accessor">
			<c path="h3d.Matrix"/>
			<meta><m n="global"><e>"global.modelViewInverse"</e></m></meta>
		</globalModelViewInverse>
		<getCurrentPixelSize set="method" line="33"><f a=""><c path="h3d.Vector"/></f></getCurrentPixelSize>
		<getOutputs set="method" line="38"><f a=""><c path="Array"><e path="hxsl.Output"/></c></f></getOutputs>
		<compileShader public="1" set="method" line="42" override="1"><f a="p">
	<c path="h3d.mat.Pass"/>
	<c path="hxsl.RuntimeShader"/>
</f></compileShader>
		<processShaders set="method" line="49"><f a="p:shaders">
	<c path="h3d.pass.PassObject"/>
	<c path="hxsl.ShaderList"/>
	<c path="hxsl.ShaderList"/>
</f></processShaders>
		<setupShaders set="method" line="59">
			<f a="passes">
				<c path="h3d.pass.PassList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":access"><e>h3d.scene</e></m></meta>
		</setupShaders>
		<log get="inline" set="null" line="83"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></log>
		<drawObject set="method" line="87"><f a="p">
	<c path="h3d.pass.PassObject"/>
	<x path="Void"/>
</f></drawObject>
		<draw public="1" set="method" line="94" override="1">
			<f a="passes:?sort">
				<c path="h3d.pass.PassList"/>
				<f a="">
					<c path="h3d.pass.PassList"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":access"><e>h3d.scene</e></m></meta>
		</draw>
		<cameraView_id>
			<x path="hxsl.GlobalSlot"><c path="h3d.Matrix"/></x>
			<meta><m n=":noCompletion"/></meta>
		</cameraView_id>
		<get_cameraView get="inline" set="null" line="440"><f a=""><c path="h3d.Matrix"/></f></get_cameraView>
		<set_cameraView get="inline" set="null" line="450"><f a="v">
	<c path="h3d.Matrix"/>
	<c path="h3d.Matrix"/>
</f></set_cameraView>
		<cameraNear_id>
			<x path="hxsl.GlobalSlot"><x path="Float"/></x>
			<meta><m n=":noCompletion"/></meta>
		</cameraNear_id>
		<get_cameraNear get="inline" set="null" line="440"><f a=""><x path="Float"/></f></get_cameraNear>
		<set_cameraNear get="inline" set="null" line="450"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_cameraNear>
		<cameraFar_id>
			<x path="hxsl.GlobalSlot"><x path="Float"/></x>
			<meta><m n=":noCompletion"/></meta>
		</cameraFar_id>
		<get_cameraFar get="inline" set="null" line="440"><f a=""><x path="Float"/></f></get_cameraFar>
		<set_cameraFar get="inline" set="null" line="450"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_cameraFar>
		<cameraProj_id>
			<x path="hxsl.GlobalSlot"><c path="h3d.Matrix"/></x>
			<meta><m n=":noCompletion"/></meta>
		</cameraProj_id>
		<get_cameraProj get="inline" set="null" line="440"><f a=""><c path="h3d.Matrix"/></f></get_cameraProj>
		<set_cameraProj get="inline" set="null" line="450"><f a="v">
	<c path="h3d.Matrix"/>
	<c path="h3d.Matrix"/>
</f></set_cameraProj>
		<cameraPos_id>
			<x path="hxsl.GlobalSlot"><c path="h3d.Vector"/></x>
			<meta><m n=":noCompletion"/></meta>
		</cameraPos_id>
		<get_cameraPos get="inline" set="null" line="440"><f a=""><c path="h3d.Vector"/></f></get_cameraPos>
		<set_cameraPos get="inline" set="null" line="450"><f a="v">
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
</f></set_cameraPos>
		<cameraProjDiag_id>
			<x path="hxsl.GlobalSlot"><c path="h3d.Vector"/></x>
			<meta><m n=":noCompletion"/></meta>
		</cameraProjDiag_id>
		<get_cameraProjDiag get="inline" set="null" line="440"><f a=""><c path="h3d.Vector"/></f></get_cameraProjDiag>
		<set_cameraProjDiag get="inline" set="null" line="450"><f a="v">
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
</f></set_cameraProjDiag>
		<cameraProjFlip_id>
			<x path="hxsl.GlobalSlot"><x path="Float"/></x>
			<meta><m n=":noCompletion"/></meta>
		</cameraProjFlip_id>
		<get_cameraProjFlip get="inline" set="null" line="440"><f a=""><x path="Float"/></f></get_cameraProjFlip>
		<set_cameraProjFlip get="inline" set="null" line="450"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_cameraProjFlip>
		<cameraViewProj_id>
			<x path="hxsl.GlobalSlot"><c path="h3d.Matrix"/></x>
			<meta><m n=":noCompletion"/></meta>
		</cameraViewProj_id>
		<get_cameraViewProj get="inline" set="null" line="440"><f a=""><c path="h3d.Matrix"/></f></get_cameraViewProj>
		<set_cameraViewProj get="inline" set="null" line="450"><f a="v">
	<c path="h3d.Matrix"/>
	<c path="h3d.Matrix"/>
</f></set_cameraViewProj>
		<cameraInverseViewProj_id>
			<x path="hxsl.GlobalSlot"><c path="h3d.Matrix"/></x>
			<meta><m n=":noCompletion"/></meta>
		</cameraInverseViewProj_id>
		<get_cameraInverseViewProj get="inline" set="null" line="440"><f a=""><c path="h3d.Matrix"/></f></get_cameraInverseViewProj>
		<set_cameraInverseViewProj get="inline" set="null" line="450"><f a="v">
	<c path="h3d.Matrix"/>
	<c path="h3d.Matrix"/>
</f></set_cameraInverseViewProj>
		<globalTime_id>
			<x path="hxsl.GlobalSlot"><x path="Float"/></x>
			<meta><m n=":noCompletion"/></meta>
		</globalTime_id>
		<get_globalTime get="inline" set="null" line="440"><f a=""><x path="Float"/></f></get_globalTime>
		<set_globalTime get="inline" set="null" line="450"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_globalTime>
		<pixelSize_id>
			<x path="hxsl.GlobalSlot"><c path="h3d.Vector"/></x>
			<meta><m n=":noCompletion"/></meta>
		</pixelSize_id>
		<get_pixelSize get="inline" set="null" line="440"><f a=""><c path="h3d.Vector"/></f></get_pixelSize>
		<set_pixelSize get="inline" set="null" line="450"><f a="v">
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
</f></set_pixelSize>
		<globalModelView_id>
			<x path="hxsl.GlobalSlot"><c path="h3d.Matrix"/></x>
			<meta><m n=":noCompletion"/></meta>
		</globalModelView_id>
		<get_globalModelView get="inline" set="null" line="440"><f a=""><c path="h3d.Matrix"/></f></get_globalModelView>
		<set_globalModelView get="inline" set="null" line="450"><f a="v">
	<c path="h3d.Matrix"/>
	<c path="h3d.Matrix"/>
</f></set_globalModelView>
		<globalModelViewInverse_id>
			<x path="hxsl.GlobalSlot"><c path="h3d.Matrix"/></x>
			<meta><m n=":noCompletion"/></meta>
		</globalModelViewInverse_id>
		<get_globalModelViewInverse get="inline" set="null" line="440"><f a=""><c path="h3d.Matrix"/></f></get_globalModelViewInverse>
		<set_globalModelViewInverse get="inline" set="null" line="450"><f a="v">
	<c path="h3d.Matrix"/>
	<c path="h3d.Matrix"/>
</f></set_globalModelViewInverse>
		<initGlobals set="method" line="3"><f a=""><x path="Void"/></f></initGlobals>
		<setGlobals set="method" line="3"><f a=""><x path="Void"/></f></setGlobals>
		<new public="1" set="method" line="27"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":build"><e>hxsl.Macros.buildGlobals()</e></m>
			<m n=":access"><e>h3d.mat.Pass</e></m>
		</meta>
	</class>
	<class path="h3d.pass.Shadows" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/Shadows.hx">
		<extends path="h3d.pass.Default"/>
		<lightCamera><c path="h3d.Camera"/></lightCamera>
		<format><e path="hxd.PixelFormat"/></format>
		<staticTexture><c path="h3d.mat.Texture"/></staticTexture>
		<light><c path="h3d.scene.Light"/></light>
		<enabled public="1" set="accessor" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</enabled>
		<mode public="1" set="accessor" expr="None">
			<e path="h3d.pass.RenderMode"/>
			<meta><m n=":value"><e>None</e></m></meta>
		</mode>
		<size public="1" set="accessor" expr="1024">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</size>
		<shader public="1" set="null"><c path="hxsl.Shader"/></shader>
		<blur public="1"><c path="h3d.pass.Blur"/></blur>
		<samplingKind public="1" expr="None">
			<e path="h3d.pass.ShadowSamplingKind"/>
			<meta><m n=":value"><e>None</e></m></meta>
		</samplingKind>
		<power public="1" expr="30.0">
			<x path="Float"/>
			<meta><m n=":value"><e>30.0</e></m></meta>
		</power>
		<bias public="1" expr="0.01">
			<x path="Float"/>
			<meta><m n=":value"><e>0.01</e></m></meta>
		</bias>
		<pcfQuality public="1" expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</pcfQuality>
		<pcfScale public="1" expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</pcfScale>
		<set_mode set="method" line="44"><f a="m">
	<e path="h3d.pass.RenderMode"/>
	<e path="h3d.pass.RenderMode"/>
</f></set_mode>
		<set_enabled set="method" line="49"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enabled>
		<set_size set="method" line="53"><f a="s">
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
		<dispose public="1" set="method" line="61" override="1"><f a=""><x path="Void"/></f></dispose>
		<getShadowProj public="1" set="method" line="68"><f a=""><c path="h3d.Matrix"/></f></getShadowProj>
		<getShadowTex public="1" set="method" line="72"><f a=""><t path="hxsl.ChannelTextureType"/></f></getShadowTex>
		<isUsingWorldDist set="method" line="76"><f a=""><x path="Bool"/></f></isUsingWorldDist>
		<getOutputs set="method" line="80" override="1"><f a=""><c path="Array"><e path="hxsl.Output"/></c></f></getOutputs>
		<loadStaticData public="1" set="method" line="89"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
</f></loadStaticData>
		<saveStaticData public="1" set="method" line="93"><f a=""><c path="haxe.io.Bytes"/></f></saveStaticData>
		<computeStatic public="1" set="method" line="97"><f a="passes">
	<c path="h3d.pass.PassList"/>
	<x path="Void"/>
</f></computeStatic>
		<createDefaultShadowMap set="method" line="101"><f a=""><x path="Null"><c path="h3d.mat.Texture"/></x></f></createDefaultShadowMap>
		<syncShader set="method" line="107"><f a="texture">
	<c path="h3d.mat.Texture"/>
	<x path="Void"/>
</f></syncShader>
		<filterPasses set="method" line="110"><f a="passes">
	<c path="h3d.pass.PassList"/>
	<x path="Bool"/>
</f></filterPasses>
		<cullPasses get="inline" set="null" line="144"><f a="passes:f">
	<c path="h3d.pass.PassList"/>
	<f a="">
		<c path="h3d.col.Collider"/>
		<x path="Bool"/>
	</f>
	<x path="Void"/>
</f></cullPasses>
		<new public="1" set="method" line="34"><f a="light">
	<c path="h3d.scene.Light"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="h3d.pass.DirShadowMap" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/DirShadowMap.hx">
		<extends path="h3d.pass.Shadows"/>
		<customDepth><x path="Bool"/></customDepth>
		<depth><c path="h3d.mat.DepthBuffer"/></depth>
		<dshader><c path="h3d.shader.DirShadow"/></dshader>
		<border><c path="h3d.pass.Border"/></border>
		<mergePass expr="new h3d.pass.ScreenFx(new h3d.shader.MinMaxShader())">
			<c path="h3d.pass.ScreenFx"><c path="h3d.shader.MinMaxShader"/></c>
			<meta><m n=":value"><e>new h3d.pass.ScreenFx(new h3d.shader.MinMaxShader())</e></m></meta>
		</mergePass>
		<autoShrink public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</autoShrink>
		<maxDist public="1" expr="-1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>-1.0</e></m></meta>
		</maxDist>
		<minDist public="1" expr="-1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>-1.0</e></m></meta>
		</minDist>
		<set_mode set="method" line="28" override="1"><f a="m">
	<e path="h3d.pass.RenderMode"/>
	<e path="h3d.pass.RenderMode"/>
</f></set_mode>
		<set_enabled set="method" line="33" override="1"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enabled>
		<set_size set="method" line="38" override="1"><f a="s">
	<x path="Int"/>
	<x path="Int"/>
</f></set_size>
		<dispose public="1" set="method" line="46" override="1"><f a=""><x path="Void"/></f></dispose>
		<getShadowTex public="1" set="method" line="52" override="1"><f a=""><t path="hxsl.ChannelTextureType"/></f></getShadowTex>
		<calcShadowBounds public="1" set="dynamic" line="56"><f a="camera">
	<c path="h3d.Camera"/>
	<x path="Void"/>
</f></calcShadowBounds>
		<setGlobals set="method" line="137" override="1"><f a=""><x path="Void"/></f></setGlobals>
		<syncShader set="method" line="147" override="1"><f a="texture">
	<t path="hxsl.ChannelTextureType"/>
	<x path="Void"/>
</f></syncShader>
		<saveStaticData public="1" set="method" line="165" override="1"><f a=""><c path="haxe.io.Bytes"/></f></saveStaticData>
		<loadStaticData public="1" set="method" line="190" override="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
</f></loadStaticData>
		<draw public="1" set="method" line="221" override="1"><f a="passes:?sort">
	<c path="h3d.pass.PassList"/>
	<f a="">
		<c path="h3d.pass.PassList"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></draw>
		<computeStatic public="1" set="method" line="279" override="1"><f a="passes">
	<c path="h3d.pass.PassList"/>
	<x path="Void"/>
</f></computeStatic>
		<new public="1" set="method" line="18"><f a="light">
	<c path="h3d.scene.Light"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="h3d.pass.DefaultShadowMap" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/DefaultShadowMap.hx">
		<extends path="h3d.pass.DirShadowMap"/>
		<shadowMapId><x path="Int"/></shadowMapId>
		<shadowProjId><x path="Int"/></shadowProjId>
		<shadowColorId><x path="Int"/></shadowColorId>
		<shadowPowerId><x path="Int"/></shadowPowerId>
		<shadowBiasId><x path="Int"/></shadowBiasId>
		<color public="1"><c path="h3d.Vector"/></color>
		<draw public="1" set="method" line="27" override="1"><f a="passes:?sort">
	<c path="h3d.pass.PassList"/>
	<f a="">
		<c path="h3d.pass.PassList"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></draw>
		<new public="1" set="method" line="13">
			<f a="?size:?format" v="1024:">
				<x path="Int"/>
				<e path="hxd.PixelFormat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ size : 1024 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.pass._HardwarePick.FixedColor" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/HardwarePick.hx" private="1" module="h3d.pass.HardwarePick">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLIWgzZC5wYXNzLl9IYXJkd2FyZVBpY2suRml4ZWRDb2xvcgUBB2NvbG9ySUQFDAIAAAIIdmlld3BvcnQFDAIAAAMGb3V0cHV0DQECBAhwb3NpdGlvbgUMBAMABQdjb2xvcklEBQwEAwAEAAAGBnZlcnRleA4GAAAHCGZyYWdtZW50DgYAAAIABgAABQEGBAIEBQwGAQQGAAIEBQwGAQkDKg4DCgICBQwRAAUKAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMCgIEBQwMAAMFDAUMBQwJAyoOAwoCAgUMOQAFCgEDAAAAAAAA8D8DAQMAAAAAAADwPwMFDAUMBQwAAQcAAAUBBgQCBQUMAgEFDAUMAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLIWgzZC5wYXNzLl9IYXJkd2FyZVBpY2suRml4ZWRDb2xvcgUBB2NvbG9ySUQFDAIAAAIIdmlld3BvcnQFDAIAAAMGb3V0cHV0DQECBAhwb3NpdGlvbgUMBAMABQdjb2xvcklEBQwEAwAEAAAGBnZlcnRleA4GAAAHCGZyYWdtZW50DgYAAAIABgAABQEGBAIEBQwGAQQGAAIEBQwGAQkDKg4DCgICBQwRAAUKAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMCgIEBQwMAAMFDAUMBQwJAyoOAwoCAgUMOQAFCgEDAAAAAAAA8D8DAQMAAAAAAADwPwMFDAUMBQwAAQcAAAUBBgQCBQUMAgEFDAUMAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<colorID public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></colorID>
		<colorID__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</colorID__>
		<get_colorID get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_colorID>
		<set_colorID get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_colorID>
		<viewport public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></viewport>
		<viewport__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</viewport__>
		<get_viewport get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_viewport>
		<set_viewport get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_viewport>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="3"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@param var colorID:Vec4;
	@param var viewport:Vec4;
	var output:{ var position : Vec4; var colorID : Vec4};
	function vertex() {
		output.position = (output.position + vec4(viewport.xy, 0., 0.) * output.position.w) * vec4(viewport.zw, 1., 1.);
	};
	function fragment() {
		output.colorID = colorID;
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.pass.HardwarePick" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/HardwarePick.hx">
		<extends path="h3d.pass.Default"/>
		<pickX public="1"><x path="Float"/></pickX>
		<pickY public="1"><x path="Float"/></pickY>
		<fixedColor expr="new FixedColor()">
			<c path="h3d.pass._HardwarePick.FixedColor"/>
			<meta><m n=":value"><e>new FixedColor()</e></m></meta>
		</fixedColor>
		<colorID><x path="Int"/></colorID>
		<texOut><c path="h3d.mat.Texture"/></texOut>
		<material><c path="h3d.mat.Pass"/></material>
		<pickedIndex public="1" expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</pickedIndex>
		<dispose public="1" set="method" line="45" override="1"><f a=""><x path="Void"/></f></dispose>
		<getOutputs set="method" line="53" override="1"><f a=""><c path="Array"><e path="hxsl.Output"/></c></f></getOutputs>
		<drawObject set="method" line="57" override="1"><f a="p">
	<c path="h3d.pass.PassObject"/>
	<x path="Void"/>
</f></drawObject>
		<nextID get="inline" set="null" line="62"><f a=""><x path="Void"/></f></nextID>
		<draw public="1" set="method" line="66" override="1"><f a="passes:?sort">
	<c path="h3d.pass.PassList"/>
	<f a="">
		<c path="h3d.pass.PassList"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></draw>
		<new public="1" set="method" line="33"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.pass.PassListIterator" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/PassList.hx" module="h3d.pass.PassList">
		<o><c path="h3d.pass.PassObject"/></o>
		<hasNext public="1" get="inline" set="null" line="8"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="11"><f a=""><c path="h3d.pass.PassObject"/></f></next>
		<new public="1" get="inline" set="null" line="5"><f a="o">
	<c path="h3d.pass.PassObject"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.pass.PassList" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/PassList.hx">
		<current><c path="h3d.pass.PassObject"/></current>
		<discarded><c path="h3d.pass.PassObject"/></discarded>
		<lastDisc><c path="h3d.pass.PassObject"/></lastDisc>
		<init public="1" get="inline" set="null" line="32">
			<f a="pass">
				<c path="h3d.pass.PassObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the passes and empty the discarded list</haxe_doc>
		</init>
		<reset public="1" get="inline" set="null" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Put back discarded passes into the pass list</haxe_doc>
		</reset>
		<save public="1" get="inline" set="null" line="51">
			<f a=""><c path="h3d.pass.PassObject"/></f>
			<haxe_doc>Save the discarded list, allow to perfom some filters, then call "load" to restore passes</haxe_doc>
		</save>
		<load public="1" get="inline" set="null" line="58">
			<f a="p">
				<c path="h3d.pass.PassObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>load state that was save() before</haxe_doc>
		</load>
		<isEmpty public="1" get="inline" set="null" line="72"><f a=""><x path="Bool"/></f></isEmpty>
		<clear public="1" set="method" line="79">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Put all passes into discarded list</haxe_doc>
		</clear>
		<sort public="1" get="inline" set="null" line="92"><f a="f">
	<f a=":">
		<c path="h3d.pass.PassObject"/>
		<c path="h3d.pass.PassObject"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<filter public="1" get="inline" set="null" line="99">
			<f a="f">
				<f a="">
					<c path="h3d.pass.PassObject"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Filter current passes, add results to discarded list</haxe_doc>
		</filter>
		<iterator public="1" get="inline" set="null" line="132"><f a=""><c path="h3d.pass.PassListIterator"/></f></iterator>
		<getFiltered public="1" get="inline" set="null" line="139">
			<f a=""><c path="h3d.pass.PassListIterator"/></f>
			<haxe_doc>Iterate on all discarded elements, if any</haxe_doc>
		</getFiltered>
		<new public="1" set="method" line="25"><f a="?current">
	<c path="h3d.pass.PassObject"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>h3d.pass.PassObject</e></m>
		</meta>
	</class>
	<class path="h3d.pass.PassObject" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/PassObject.hx">
		<next public="1">
			<c path="h3d.pass.PassObject"/>
			<meta><m n=":noCompletion"/></meta>
		</next>
		<nextAlloc><c path="h3d.pass.PassObject"/></nextAlloc>
		<pass public="1"><c path="h3d.mat.Pass"/></pass>
		<obj public="1"><c path="h3d.scene.Object"/></obj>
		<index public="1"><x path="Int"/></index>
		<shaders public="1"><c path="hxsl.ShaderList"/></shaders>
		<shader public="1"><c path="hxsl.RuntimeShader"/></shader>
		<depth public="1"><x path="Float"/></depth>
		<texture public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</texture>
		<new set="method" line="16"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.pass.ShaderManager" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/ShaderManager.hx">
		<STRICT public="1" expr="true" line="5" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</STRICT>
		<globals public="1"><c path="hxsl.Globals"/></globals>
		<shaderCache><c path="hxsl.Cache"/></shaderCache>
		<currentOutput><c path="hxsl.ShaderList"/></currentOutput>
		<setOutput public="1" set="method" line="21"><f a="?output">
	<c path="Array"><e path="hxsl.Output"/></c>
	<x path="Void"/>
</f></setOutput>
		<fillRec set="method" line="27">
			<f a="v:type:out:pos">
				<d/>
				<e path="hxsl.Type"/>
				<t path="h3d.shader.ShaderBufferData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noDebug"/></meta>
		</fillRec>
		<shaderInfo set="method" line="154"><f a="shaders:path">
	<c path="hxsl.ShaderList"/>
	<c path="String"/>
	<c path="String"/>
</f></shaderInfo>
		<getPtr get="inline" set="null" line="166"><f a="data">
	<t path="h3d.shader.ShaderBufferData"/>
	<t path="h3d.shader.ShaderBufferData"/>
</f></getPtr>
		<getParamValue public="1" get="inline" set="null" line="174">
			<f a="p:shaders:?opt" v="::false">
				<c path="hxsl.AllocParam"/>
				<c path="hxsl.ShaderList"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ opt : false }</e></m></meta>
		</getParamValue>
		<fillGlobals public="1" set="method" line="190"><f a="buf:s">
	<c path="h3d.shader.Buffers"/>
	<c path="hxsl.RuntimeShader"/>
	<x path="Void"/>
</f></fillGlobals>
		<fillParams public="1" set="method" line="212"><f a="buf:s:shaders">
	<c path="h3d.shader.Buffers"/>
	<c path="hxsl.RuntimeShader"/>
	<c path="hxsl.ShaderList"/>
	<x path="Void"/>
</f></fillParams>
		<compileShaders public="1" set="method" line="268">
			<f a="shaders:?batchMode" v=":false">
				<c path="hxsl.ShaderList"/>
				<x path="Bool"/>
				<c path="hxsl.RuntimeShader"/>
			</f>
			<meta><m n=":value"><e>{ batchMode : false }</e></m></meta>
		</compileShaders>
		<new public="1" set="method" line="11"><f a="?output">
	<c path="Array"><e path="hxsl.Output"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="h3d.pass.RenderMode" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/Shadows.hx" module="h3d.pass.Shadows">
		<None/>
		<Static/>
		<Dynamic/>
		<Mixed/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="h3d.pass.ShadowSamplingKind" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/Shadows.hx" module="h3d.pass.Shadows">
		<None/>
		<PCF/>
		<ESM/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="h3d.pass.SortByMaterial" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/pass/SortByMaterial.hx">
		<shaderCount expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</shaderCount>
		<textureCount expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</textureCount>
		<shaderIdMap><c path="Array"><x path="Int"/></c></shaderIdMap>
		<textureIdMap><c path="Array"><x path="Int"/></c></textureIdMap>
		<sort public="1" set="method" line="15"><f a="passes">
	<c path="h3d.pass.PassList"/>
	<x path="Void"/>
</f></sort>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.prim.BigPrimitive" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/prim/BigPrimitive.hx">
		<extends path="h3d.prim.Primitive"/>
		<PREV_BUFFER static="1"><x path="hxd.FloatBuffer"/></PREV_BUFFER>
		<PREV_INDEX static="1"><x path="hxd.IndexBuffer"/></PREV_INDEX>
		<isRaw><x path="Bool"/></isRaw>
		<stride><x path="Int"/></stride>
		<buffers><c path="Array"><c path="h3d.Buffer"/></c></buffers>
		<allIndexes><c path="Array"><c path="h3d.Indexes"/></c></allIndexes>
		<tmpBuf><x path="hxd.FloatBuffer"/></tmpBuf>
		<tmpIdx><x path="hxd.IndexBuffer"/></tmpIdx>
		<bounds><c path="h3d.col.Bounds"/></bounds>
		<bufPos expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</bufPos>
		<idxPos expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</idxPos>
		<startIndex expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</startIndex>
		<flushing><x path="Bool"/></flushing>
		<hasTangents public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</hasTangents>
		<isStatic public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</isStatic>
		<begin public="1" set="method" line="46">
			<f a="vcount:icount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Call begin() before starting to add vertexes/indexes to the primitive.
		The count value is the number of vertexes you will add, it will automatically flush() if it doesn't fit into the current buffer.</haxe_doc>
		</begin>
		<addPoint public="1" get="inline" set="null" line="81">
			<f a="x:y:z">
				<t path="hxd.impl.Float32"/>
				<t path="hxd.impl.Float32"/>
				<t path="hxd.impl.Float32"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This is similar to addVertexValue for X Y and Z, but will also update the bounds if you wish to have them calculated.</haxe_doc>
		</addPoint>
		<addBounds public="1" get="inline" set="null" line="88"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addBounds>
		<addVertexValue public="1" get="inline" set="null" line="92"><f a="v">
	<t path="hxd.impl.Float32"/>
	<x path="Void"/>
</f></addVertexValue>
		<addIndex public="1" get="inline" set="null" line="96"><f a="i">
	<x path="Int"/>
	<x path="Void"/>
</f></addIndex>
		<triCount public="1" set="method" line="100" override="1"><f a=""><x path="Int"/></f></triCount>
		<vertexCount public="1" set="method" line="108" override="1"><f a=""><x path="Int"/></f></vertexCount>
		<flush public="1" set="method" line="120">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush the current buffer.
		It is required to call begin() after a flush()</haxe_doc>
		</flush>
		<render public="1" set="method" line="147" override="1"><f a="engine">
	<c path="h3d.Engine"/>
	<x path="Void"/>
</f></render>
		<getBounds public="1" set="method" line="153" override="1"><f a=""><c path="h3d.col.Bounds"/></f></getBounds>
		<dispose public="1" set="method" line="157" override="1"><f a=""><x path="Void"/></f></dispose>
		<clear public="1" set="method" line="161"><f a=""><x path="Void"/></f></clear>
		<add public="1" set="method" line="183">
			<f a="buf:idx:?dx:?dy:?dz:?rotation:?scale:?stride" v="::0.:0.:0.:0.:1.:-1">
				<x path="hxd.FloatBuffer"/>
				<x path="hxd.IndexBuffer"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ stride : -1, scale : 1., rotation : 0., dz : 0., dy : 0., dx : 0. }</e></m></meta>
			<haxe_doc>Adds a complete object to the primitive, with custom position,scale,rotation.
		See addSub for complete documentation.</haxe_doc>
		</add>
		<addSub public="1" set="method" line="195">
			<f a="buf:idx:startVert:startTri:nvert:triCount:?dx:?dy:?dz:?rotation:?scale:?stride:?deltaU:?deltaV:?color:?mat" v="::::::0.:0.:0.:0.:1.:-1:0.:0.:1.:null">
				<x path="hxd.FloatBuffer"/>
				<x path="hxd.IndexBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="h3d.Matrix"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ mat : null, color : 1., deltaV : 0., deltaU : 0., stride : -1, scale : 1., rotation : 0., dz : 0., dy : 0., dx : 0. }</e></m>
				<m n=":noDebug"/>
			</meta>
			<haxe_doc>Adds a buffer to the primitive, with custom position,scale,rotation.
		The buffer can have more stride than the BigPrimitive, but not less.
		It is assumed that the buffer contains [X,Y,Z,NX,NY,NZ,U,V,R,G,B] (depending on his stride) so the different offsets are applied to the corresponding components.
		If hasTangent=true, we have [TX,TY,TZ] just after normal.
		However if the stride is 5, we assume [X,Y,Z,U,V]
		If mat is not null, it overrides dx, dy, dz, rotation, scale</haxe_doc>
		</addSub>
		<new public="1" set="method" line="30">
			<f a="stride:?isRaw" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ isRaw : false }</e></m></meta>
		</new>
		<haxe_doc>Vertex buffers are limited to 65K vertexes because of the 16-bits limitation of the index buffers.
	BigPrimitive allows you to easily create large buffers by spliting the buffers.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.prim.MeshPrimitive" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/prim/MeshPrimitive.hx">
		<extends path="h3d.prim.Primitive"/>
		<bufferCache><t path="Map">
	<x path="Int"/>
	<c path="h3d.BufferOffset"/>
</t></bufferCache>
		<layouts><t path="Map">
	<x path="Int"/>
	<c path="h3d.BufferOffset"/>
</t></layouts>
		<allocBuffer set="method" line="8"><f a="engine:name">
	<c path="h3d.Engine"/>
	<c path="String"/>
	<x path="Null"><c path="h3d.BufferOffset"/></x>
</f></allocBuffer>
		<hasBuffer public="1" set="method" line="12"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasBuffer>
		<addBuffer set="method" line="18">
			<f a="name:buf:?offset" v="::0">
				<c path="String"/>
				<c path="h3d.Buffer"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
		</addBuffer>
		<dispose public="1" set="method" line="28" override="1"><f a=""><x path="Void"/></f></dispose>
		<getBuffers set="method" line="37"><f a="engine">
	<c path="h3d.Engine"/>
	<x path="Null"><c path="h3d.BufferOffset"/></x>
</f></getBuffers>
		<render public="1" set="method" line="67" override="1"><f a="engine">
	<c path="h3d.Engine"/>
	<x path="Void"/>
</f></render>
		<new public="1" set="method" line="3">
			<f a=""><x path="Void"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</new>
	</class>
	<class path="h3d.prim.HMDModel" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/prim/HMDModel.hx">
		<extends path="h3d.prim.MeshPrimitive"/>
		<data><c path="hxd.fmt.hmd.Geometry"/></data>
		<dataPosition><x path="Int"/></dataPosition>
		<indexCount><x path="Int"/></indexCount>
		<indexesTriPos><c path="Array"><x path="Int"/></c></indexesTriPos>
		<lib><c path="hxd.fmt.hmd.Library"/></lib>
		<curMaterial><x path="Int"/></curMaterial>
		<collider><c path="h3d.col.Collider"/></collider>
		<normalsRecomputed><c path="String"/></normalsRecomputed>
		<bufferAliases expr="new Map()">
			<t path="Map">
				<c path="String"/>
				<a>
					<realName><c path="String"/></realName>
					<offset><x path="Int"/></offset>
				</a>
			</t>
			<meta><m n=":value"><e>new Map()</e></m></meta>
		</bufferAliases>
		<triCount public="1" set="method" line="21" override="1"><f a=""><x path="Int"/></f></triCount>
		<vertexCount public="1" set="method" line="25" override="1"><f a=""><x path="Int"/></f></vertexCount>
		<getBounds public="1" set="method" line="29" override="1"><f a=""><c path="h3d.col.Bounds"/></f></getBounds>
		<selectMaterial public="1" set="method" line="33" override="1"><f a="i">
	<x path="Int"/>
	<x path="Void"/>
</f></selectMaterial>
		<getDataBuffers public="1" set="method" line="37"><f a="fmt:?defaults:?material">
	<c path="Array"><c path="hxd.fmt.hmd.GeometryFormat"/></c>
	<c path="Array"><c path="h3d.Vector"/></c>
	<x path="Int"/>
	<c path="hxd.fmt.hmd.GeometryBuffer"/>
</f></getDataBuffers>
		<loadSkin public="1" set="method" line="41"><f a="skin">
	<c path="h3d.anim.Skin"/>
	<x path="Void"/>
</f></loadSkin>
		<addAlias public="1" set="method" line="45">
			<f a="name:realName:?offset" v="::0">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
		</addAlias>
		<alloc public="1" set="method" line="56" override="1"><f a="engine">
	<c path="h3d.Engine"/>
	<x path="Void"/>
</f></alloc>
		<allocAlias set="method" line="99"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></allocAlias>
		<recomputeNormals public="1" set="method" line="107"><f a="?name">
	<c path="String"/>
	<x path="Void"/>
</f></recomputeNormals>
		<render public="1" set="method" line="155" override="1"><f a="engine">
	<c path="h3d.Engine"/>
	<x path="Void"/>
</f></render>
		<initCollider set="method" line="166"><f a="poly">
	<c path="h3d.col.PolygonBuffer"/>
	<x path="Void"/>
</f></initCollider>
		<getCollider public="1" set="method" line="175" override="1"><f a=""><c path="h3d.col.Collider"/></f></getCollider>
		<new public="1" set="method" line="15"><f a="data:dataPos:lib">
	<c path="hxd.fmt.hmd.Geometry"/>
	<x path="Int"/>
	<c path="hxd.fmt.hmd.Library"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.prim.Plane2D" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/prim/Plane2D.hx">
		<extends path="h3d.prim.Primitive"/>
		<get public="1" set="method" line="46" static="1"><f a=""><x path="Null"><d/></x></f></get>
		<triCount public="1" set="method" line="8" override="1"><f a=""><x path="Int"/></f></triCount>
		<vertexCount public="1" set="method" line="12" override="1"><f a=""><x path="Int"/></f></vertexCount>
		<alloc public="1" set="method" line="16" override="1"><f a="engine">
	<c path="h3d.Engine"/>
	<x path="Void"/>
</f></alloc>
		<render public="1" set="method" line="41" override="1"><f a="engine">
	<c path="h3d.Engine"/>
	<x path="Void"/>
</f></render>
		<new public="1" set="method" line="5"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.prim.Polygon" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/prim/Polygon.hx">
		<extends path="h3d.prim.MeshPrimitive"/>
		<points public="1"><c path="Array"><c path="h3d.col.Point"/></c></points>
		<normals public="1"><c path="Array"><c path="h3d.col.Point"/></c></normals>
		<tangents public="1"><c path="Array"><c path="h3d.col.Point"/></c></tangents>
		<uvs public="1"><c path="Array"><c path="h3d.prim.UV"/></c></uvs>
		<idx public="1"><x path="hxd.IndexBuffer"/></idx>
		<colors public="1"><c path="Array"><c path="h3d.col.Point"/></c></colors>
		<scaled expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":s"/>
			</meta>
		</scaled>
		<translatedX expr="0.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0.</e></m>
				<m n=":s"/>
			</meta>
		</translatedX>
		<translatedY expr="0.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0.</e></m>
				<m n=":s"/>
			</meta>
		</translatedY>
		<translatedZ expr="0.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0.</e></m>
				<m n=":s"/>
			</meta>
		</translatedZ>
		<getBounds public="1" set="method" line="22" override="1"><f a=""><c path="h3d.col.Bounds"/></f></getBounds>
		<alloc public="1" set="method" line="29" override="1"><f a="engine">
	<c path="h3d.Engine"/>
	<x path="Void"/>
</f></alloc>
		<unindex public="1" set="method" line="99"><f a=""><x path="Void"/></f></unindex>
		<translate public="1" set="method" line="134"><f a="dx:dy:dz">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<scale public="1" set="method" line="145"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<addNormals public="1" set="method" line="154"><f a=""><x path="Void"/></f></addNormals>
		<addTangents public="1" set="method" line="186"><f a=""><x path="Void"/></f></addTangents>
		<addUVs public="1" set="method" line="233"><f a=""><x path="Void"/></f></addUVs>
		<uvScale public="1" set="method" line="239"><f a="su:sv">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uvScale>
		<triCount public="1" set="method" line="251" override="1"><f a=""><x path="Int"/></f></triCount>
		<vertexCount public="1" set="method" line="258" override="1"><f a=""><x path="Int"/></f></vertexCount>
		<getCollider public="1" set="method" line="262" override="1"><f a=""><c path="h3d.col.Collider"/></f></getCollider>
		<render public="1" set="method" line="278" override="1"><f a="engine">
	<c path="h3d.Engine"/>
	<x path="Void"/>
</f></render>
		<new public="1" set="method" line="17"><f a="points:?idx">
	<c path="Array"><c path="h3d.col.Point"/></c>
	<x path="hxd.IndexBuffer"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.prim.RawPrimitive" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/prim/RawPrimitive.hx">
		<extends path="h3d.prim.Primitive"/>
		<vcount><x path="Int"/></vcount>
		<tcount><x path="Int"/></tcount>
		<bounds><c path="h3d.col.Bounds"/></bounds>
		<onContextLost public="1"><f a=""><a>
	<vbuf><x path="hxd.FloatBuffer"/></vbuf>
	<stride><x path="Int"/></stride>
	<quads>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</quads>
	<ibuf>
		<x path="Null"><x path="hxd.IndexBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</ibuf>
</a></f></onContextLost>
		<alloc public="1" set="method" line="17" override="1"><f a="engine">
	<c path="h3d.Engine"/>
	<x path="Void"/>
</f></alloc>
		<getBounds public="1" set="method" line="34" override="1"><f a=""><c path="h3d.col.Bounds"/></f></getBounds>
		<triCount public="1" set="method" line="39" override="1"><f a=""><x path="Int"/></f></triCount>
		<vertexCount public="1" set="method" line="43" override="1"><f a=""><x path="Int"/></f></vertexCount>
		<new public="1" set="method" line="10">
			<f a="inf:?persist" v=":false">
				<a>
					<vbuf><x path="hxd.FloatBuffer"/></vbuf>
					<stride><x path="Int"/></stride>
					<quads>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</quads>
					<ibuf>
						<x path="Null"><x path="hxd.IndexBuffer"/></x>
						<meta><m n=":optional"/></meta>
					</ibuf>
					<bounds>
						<x path="Null"><c path="h3d.col.Bounds"/></x>
						<meta><m n=":optional"/></meta>
					</bounds>
				</a>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ persist : false }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.prim.UV" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/prim/UV.hx">
		<u public="1"><x path="Float"/></u>
		<v public="1"><x path="Float"/></v>
		<clone public="1" set="method" line="13"><f a=""><c path="h3d.prim.UV"/></f></clone>
		<toString set="method" line="17"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="8"><f a="u:v">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.scene._Graphics.GPoint" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Graphics.hx" private="1" module="h3d.scene.Graphics">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<r public="1"><x path="Float"/></r>
		<g public="1"><x path="Float"/></g>
		<b public="1"><x path="Float"/></b>
		<a public="1"><x path="Float"/></a>
		<new public="1" set="method" line="12"><f a="x:y:z:r:g:b:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.scene.Object" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Object.hx">
		<implements path="hxd.impl._Serializable.NoSerializeSupport"/>
		<ROT2RAD get="inline" set="null" expr="-0.017453292519943295769236907684886" line="35" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>-0.017453292519943295769236907684886</e></m></meta>
		</ROT2RAD>
		<tmpMat expr="new h3d.Matrix()" line="828" static="1">
			<c path="h3d.Matrix"/>
			<meta><m n=":value"><e>new h3d.Matrix()</e></m></meta>
			<haxe_doc>Set the position, scale and rotation of the object relative to its parent based on the specified transform matrix.</haxe_doc>
		</tmpMat>
		<tmpVec expr="new h3d.Vector()" line="829" static="1">
			<c path="h3d.Vector"/>
			<meta><m n=":value"><e>new h3d.Vector()</e></m></meta>
		</tmpVec>
		<flags>
			<x path="h3d.scene.ObjectFlags"/>
			<meta><m n=":s"/></meta>
		</flags>
		<children><c path="Array"><c path="h3d.scene.Object"/></c></children>
		<parent public="1" set="null">
			<c path="h3d.scene.Object"/>
			<haxe_doc>The parent object in the scene tree.</haxe_doc>
		</parent>
		<numChildren public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>How many immediate children this object has.</haxe_doc>
		</numChildren>
		<name public="1">
			<x path="Null"><c path="String"/></x>
			<meta><m n=":s"/></meta>
			<haxe_doc>The name of the object, can be used to retrieve an object within a tree by using `getObjectByName` (default null)</haxe_doc>
		</name>
		<x public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":s"/></meta>
			<haxe_doc>The x position of the object relative to its parent.</haxe_doc>
		</x>
		<y public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":s"/></meta>
			<haxe_doc>The y position of the object relative to its parent.</haxe_doc>
		</y>
		<z public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":s"/></meta>
			<haxe_doc>The z position of the object relative to its parent.</haxe_doc>
		</z>
		<scaleX public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":s"/></meta>
			<haxe_doc>The amount of scaling along the X axis of this object (default 1.0)</haxe_doc>
		</scaleX>
		<scaleY public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":s"/></meta>
			<haxe_doc>The amount of scaling along the Y axis of this object (default 1.0)</haxe_doc>
		</scaleY>
		<scaleZ public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":s"/></meta>
			<haxe_doc>The amount of scaling along the Z axis of this object (default 1.0)</haxe_doc>
		</scaleZ>
		<visible public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Is the object and its children are displayed on screen (default true).</haxe_doc>
		</visible>
		<allocated get="accessor" set="accessor"><x path="Bool"/></allocated>
		<follow public="1" set="accessor">
			<c path="h3d.scene.Object"/>
			<meta><m n=":s"/></meta>
			<haxe_doc>Follow a given object or joint as if it was our parent. Ignore defaultTransform when set.</haxe_doc>
		</follow>
		<followPositionOnly public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>When follow is set, only follow the position and ignore both scale and rotation.</haxe_doc>
		</followPositionOnly>
		<defaultTransform public="1" set="accessor">
			<c path="h3d.Matrix"/>
			<haxe_doc>This is an additional optional transformation that is performed before other local transformations.
		It is used by the animation system.</haxe_doc>
		</defaultTransform>
		<currentAnimation public="1" set="null">
			<c path="h3d.anim.Animation"/>
			<meta><m n=":s"/></meta>
		</currentAnimation>
		<culled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Inform that the object is not to be displayed and his animation doesn't have to be sync. Unlike visible, this doesn't apply to children unless inheritCulled is set to true.</haxe_doc>
		</culled>
		<alwaysSync public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>When an object is not visible or culled, its animation does not get synchronized unless you set alwaysSync=true</haxe_doc>
		</alwaysSync>
		<inheritCulled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>When enabled, the culled flag and culling collider is inherited by children objects.</haxe_doc>
		</inheritCulled>
		<ignoreBounds public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>When enabled, the object bounds are ignored when using getBounds()</haxe_doc>
		</ignoreBounds>
		<ignoreCollide public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>When enabled, the object is ignored when using getCollider()</haxe_doc>
		</ignoreCollide>
		<allowSerialize public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>When enabled, the object can be serialized (default : true)</haxe_doc>
		</allowSerialize>
		<ignoreParentTransform public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>When enabled, the object will not follow its parent transform</haxe_doc>
		</ignoreParentTransform>
		<lightCameraCenter public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>When selecting the lights to apply to this object, we will use the camera target as reference
		instead of the object absolute position. This is useful for very large objects so they can get good lighting.</haxe_doc>
		</lightCameraCenter>
		<cullingCollider public="1" set="accessor">
			<c path="h3d.col.Collider"/>
			<haxe_doc>When set, collider shape will be used for automatic frustum culling.
		If `inheritCulled` is true, collider will be inherited to children unless they have their own collider set.</haxe_doc>
		</cullingCollider>
		<set_cullingCollider set="method" line="156"><f a="c">
	<c path="h3d.col.Collider"/>
	<c path="h3d.col.Collider"/>
</f></set_cullingCollider>
		<cullingColliderInherited get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Indicates that current cullingCollider is currently inherited from a parent object</haxe_doc>
		</cullingColliderInherited>
		<absPos><c path="h3d.Matrix"/></absPos>
		<invPos><c path="h3d.Matrix"/></invPos>
		<qRot><c path="h3d.Quat"/></qRot>
		<posChanged get="accessor" set="accessor"><x path="Bool"/></posChanged>
		<lastFrame><x path="Int"/></lastFrame>
		<get_visible get="inline" set="null" line="189"><f a=""><x path="Bool"/></f></get_visible>
		<get_allocated get="inline" set="null" line="190"><f a=""><x path="Bool"/></f></get_allocated>
		<get_posChanged get="inline" set="null" line="191"><f a=""><x path="Bool"/></f></get_posChanged>
		<get_culled get="inline" set="null" line="192"><f a=""><x path="Bool"/></f></get_culled>
		<get_followPositionOnly get="inline" set="null" line="193"><f a=""><x path="Bool"/></f></get_followPositionOnly>
		<get_lightCameraCenter get="inline" set="null" line="194"><f a=""><x path="Bool"/></f></get_lightCameraCenter>
		<get_alwaysSync get="inline" set="null" line="195"><f a=""><x path="Bool"/></f></get_alwaysSync>
		<get_inheritCulled get="inline" set="null" line="196"><f a=""><x path="Bool"/></f></get_inheritCulled>
		<get_ignoreBounds get="inline" set="null" line="197"><f a=""><x path="Bool"/></f></get_ignoreBounds>
		<get_ignoreCollide get="inline" set="null" line="198"><f a=""><x path="Bool"/></f></get_ignoreCollide>
		<get_allowSerialize get="inline" set="null" line="199"><f a=""><x path="Bool"/></f></get_allowSerialize>
		<get_ignoreParentTransform get="inline" set="null" line="200"><f a=""><x path="Bool"/></f></get_ignoreParentTransform>
		<get_cullingColliderInherited get="inline" set="null" line="201"><f a=""><x path="Bool"/></f></get_cullingColliderInherited>
		<set_posChanged get="inline" set="null" line="202"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_posChanged>
		<set_culled get="inline" set="null" line="203"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_culled>
		<set_visible get="inline" set="null" line="204"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<set_allocated get="inline" set="null" line="205"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_allocated>
		<set_followPositionOnly get="inline" set="null" line="206"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_followPositionOnly>
		<set_lightCameraCenter get="inline" set="null" line="207"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_lightCameraCenter>
		<set_alwaysSync get="inline" set="null" line="208"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_alwaysSync>
		<set_ignoreBounds get="inline" set="null" line="209"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ignoreBounds>
		<set_inheritCulled get="inline" set="null" line="210"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_inheritCulled>
		<set_ignoreCollide get="inline" set="null" line="211"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ignoreCollide>
		<set_allowSerialize get="inline" set="null" line="212"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_allowSerialize>
		<set_ignoreParentTransform get="inline" set="null" line="213"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ignoreParentTransform>
		<set_cullingColliderInherited get="inline" set="null" line="214"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_cullingColliderInherited>
		<playAnimation public="1" set="method" line="219">
			<f a="a">
				<c path="h3d.anim.Animation"/>
				<c path="h3d.anim.Animation"/>
			</f>
			<haxe_doc>Create an animation instance bound to the object, set it as currentAnimation and play it.</haxe_doc>
		</playAnimation>
		<switchToAnimation public="1" set="method" line="226">
			<f a="a">
				<c path="h3d.anim.Animation"/>
				<c path="h3d.anim.Animation"/>
			</f>
			<haxe_doc>Change the current animation. This animation should be an instance that was previously created by playAnimation.</haxe_doc>
		</switchToAnimation>
		<stopAnimation public="1" set="method" line="233">
			<f a="?recursive" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ recursive : false }</e></m></meta>
			<haxe_doc>Stop the current animation. If recursive is set to true, all children will also stop their animation</haxe_doc>
		</stopAnimation>
		<applyAnimationTransform public="1" set="method" line="248">
			<f a="?recursive" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ recursive : true }</e></m></meta>
			<haxe_doc>When an object is loaded, its position scale and rotation will always be set to the default values (0 for position/rotation and 1 for scale).
		If it's part of a group/scene or if it's animated, then its position/rotation/scale will be stored into the defaultTransform matrix.
		Calling this function will reset the defaultTransform to null and instead initialize x/y/z/rotation/scale properties.
		This will not change the actual position of the object but allows you to move the object more freely on your own.
		Do not use on an object that is currently being animated, since it will set again defaultTransform and apply twice the transformation.</haxe_doc>
		</applyAnimationTransform>
		<getObjectsCount public="1" set="method" line="268">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the total number of children, recursively.</haxe_doc>
		</getObjectsCount>
		<getMaterialByName public="1" set="method" line="278">
			<f a="name">
				<c path="String"/>
				<c path="h3d.mat.Material"/>
			</f>
			<haxe_doc>Search for a material recursively by name, return it or null if not found.</haxe_doc>
		</getMaterialByName>
		<contains public="1" set="method" line="289">
			<f a="o">
				<c path="h3d.scene.Object"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the object is contained into this object children, recursively.</haxe_doc>
		</contains>
		<find public="1" params="T" set="method" line="300">
			<f a="f">
				<f a="">
					<c path="h3d.scene.Object"/>
					<x path="Null"><c path="find.T"/></x>
				</f>
				<x path="Null"><c path="find.T"/></x>
			</f>
			<haxe_doc>Find a single object in the tree by calling `f` on each and returning the first not-null value returned, or null if not found.</haxe_doc>
		</find>
		<findAll public="1" params="T" set="method" line="314">
			<f a="f:?arr">
				<f a="">
					<c path="h3d.scene.Object"/>
					<x path="Null"><c path="findAll.T"/></x>
				</f>
				<c path="Array"><c path="findAll.T"/></c>
				<c path="Array"><c path="findAll.T"/></c>
			</f>
			<haxe_doc>Find several objects in the tree by calling `f` on each and returning all the not-null values returned.</haxe_doc>
		</findAll>
		<getMaterials public="1" set="method" line="327">
			<f a="?a:?recursive" v=":true">
				<c path="Array"><c path="h3d.mat.Material"/></c>
				<x path="Bool"/>
				<x path="Null"><c path="Array"><c path="h3d.mat.Material"/></c></x>
			</f>
			<meta><m n=":value"><e>{ recursive : true }</e></m></meta>
			<haxe_doc>Return all materials in the tree.</haxe_doc>
		</getMaterials>
		<localToGlobal public="1" set="method" line="339">
			<f a="?pt">
				<c path="h3d.col.Point"/>
				<x path="Null"><c path="h3d.col.Point"/></x>
			</f>
			<haxe_doc>Convert a local position (or [0,0] if pt is null) relative to the object origin into an absolute global position, applying all the inherited transforms.</haxe_doc>
		</localToGlobal>
		<globalToLocal public="1" set="method" line="349">
			<f a="pt">
				<c path="h3d.col.Point"/>
				<c path="h3d.col.Point"/>
			</f>
			<haxe_doc>Convert an absolute global position into a local position relative to the object origin, applying all the inherited transforms.</haxe_doc>
		</globalToLocal>
		<getInvPos public="1" set="method" line="357">
			<f a=""><c path="h3d.Matrix"/></f>
			<haxe_doc>Returns the updated inverse position matrix. Please note that this is not a copy and should not be modified.</haxe_doc>
		</getInvPos>
		<getBounds final="1" public="1" set="method" line="371">
			<f a="?b">
				<c path="h3d.col.Bounds"/>
				<c path="h3d.col.Bounds"/>
			</f>
			<meta><m n=":final"/></meta>
			<haxe_doc>Return the bounds of this object and all its children, in absolute global coordinates.</haxe_doc>
		</getBounds>
		<getBoundsRec set="method" line="379"><f a="b">
	<c path="h3d.col.Bounds"/>
	<c path="h3d.col.Bounds"/>
</f></getBoundsRec>
		<getMeshes public="1" set="method" line="394">
			<f a="?out">
				<c path="Array"><c path="h3d.scene.Mesh"/></c>
				<x path="Null"><c path="Array"><c path="h3d.scene.Mesh"/></c></x>
			</f>
			<haxe_doc>Return all meshes part of this tree</haxe_doc>
		</getMeshes>
		<getMeshByName public="1" set="method" line="406">
			<f a="name">
				<c path="String"/>
				<c path="h3d.scene.Mesh"/>
			</f>
			<haxe_doc>Search for an mesh recursively by name, return null if not found.</haxe_doc>
		</getMeshByName>
		<getObjectByName public="1" set="method" line="413">
			<f a="name">
				<c path="String"/>
				<c path="h3d.scene.Object"/>
			</f>
			<haxe_doc>Search for an object recursively by name, return null if not found.</haxe_doc>
		</getObjectByName>
		<clone public="1" set="method" line="426">
			<f a="?o">
				<c path="h3d.scene.Object"/>
				<c path="h3d.scene.Object"/>
			</f>
			<haxe_doc>Make a copy of the object and all its children.</haxe_doc>
		</clone>
		<addChild public="1" set="method" line="455">
			<f a="o">
				<c path="h3d.scene.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add a child object at the end of the children list.</haxe_doc>
		</addChild>
		<addChildAt public="1" set="method" line="462">
			<f a="o:pos">
				<c path="h3d.scene.Object"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Insert a child object at the specified position of the children list.</haxe_doc>
		</addChildAt>
		<iterVisibleMeshes public="1" set="method" line="494">
			<f a="callb">
				<f a="">
					<c path="h3d.scene.Mesh"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Iterate on all mesh that are currently visible and not culled in the tree. Call `callb` for each mesh found.</haxe_doc>
		</iterVisibleMeshes>
		<onParentChanged set="method" line="505"><f a=""><x path="Void"/></f></onParentChanged>
		<onAdd set="method" line="511"><f a=""><x path="Void"/></f></onAdd>
		<onRemove set="method" line="518"><f a=""><x path="Void"/></f></onRemove>
		<removeChild public="1" set="method" line="527">
			<f a="o">
				<c path="h3d.scene.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the given object from our immediate children list if it's part of it.</haxe_doc>
		</removeChild>
		<removeChildren public="1" set="method" line="538">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Remove all children from our immediate children list</haxe_doc>
		</removeChildren>
		<remove public="1" get="inline" set="null" line="547">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Same as parent.removeChild(this), but does nothing if parent is null.
		In order to capture add/removal from scene, you can override onAdd/onRemove/onParentChanged</haxe_doc>
		</remove>
		<getScene public="1" set="method" line="554">
			<f a=""><c path="h3d.scene.Scene"/></f>
			<haxe_doc>Return the Scene this object is part of, or null if not added to a Scene.</haxe_doc>
		</getScene>
		<getAbsPos public="1" set="method" line="563">
			<f a=""><c path="h3d.Matrix"/></f>
			<haxe_doc>Returns the updated absolute position matrix. Please note that this is not a copy so it should not be modified.</haxe_doc>
		</getAbsPos>
		<getRelPos public="1" set="method" line="571">
			<f a="obj">
				<c path="h3d.scene.Object"/>
				<c path="h3d.Matrix"/>
			</f>
			<haxe_doc>Returns the position matrix relative to another scene object</haxe_doc>
		</getRelPos>
		<isMesh public="1" get="inline" set="null" line="583">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tell if the object is a Mesh.</haxe_doc>
		</isMesh>
		<toMesh public="1" set="method" line="590">
			<f a=""><c path="h3d.scene.Mesh"/></f>
			<haxe_doc>If the object is a Mesh, return the corresponding Mesh. If not, throw an exception.</haxe_doc>
		</toMesh>
		<getCollider final="1" public="1" set="method" line="601">
			<f a=""><c path="h3d.col.Collider"/></f>
			<meta><m n=":final"/></meta>
			<haxe_doc>Build and return the global absolute recursive collider for the object.
		Returns null if no collider was found or if ignoreCollide was set to true.</haxe_doc>
		</getCollider>
		<getGlobalCollider public="1" set="method" line="628">
			<f a=""><c path="h3d.col.Collider"/></f>
			<haxe_doc>Same as getLocalCollider, but returns an absolute collider instead of a local one.</haxe_doc>
		</getGlobalCollider>
		<getLocalCollider public="1" set="method" line="639">
			<f a=""><c path="h3d.col.Collider"/></f>
			<haxe_doc>Build and returns the local relative not-recursive collider for the object, or null if this object does not have a collider.
		Does not check for ignoreCollide.</haxe_doc>
		</getLocalCollider>
		<draw set="method" line="643"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></draw>
		<set_follow set="method" line="646"><f a="v">
	<c path="h3d.scene.Object"/>
	<c path="h3d.scene.Object"/>
</f></set_follow>
		<calcAbsPos set="method" line="651"><f a=""><x path="Void"/></f></calcAbsPos>
		<sync set="method" line="684"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></sync>
		<syncRec set="method" line="687"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></syncRec>
		<syncPos set="method" line="739"><f a=""><x path="Void"/></f></syncPos>
		<emit set="method" line="749"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></emit>
		<emitRec set="method" line="752"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></emitRec>
		<set_x get="inline" set="null" line="773"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y get="inline" set="null" line="779"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<set_z get="inline" set="null" line="785"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
		<set_scaleX get="inline" set="null" line="791"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleX>
		<set_scaleY get="inline" set="null" line="797"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleY>
		<set_scaleZ get="inline" set="null" line="803"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleZ>
		<set_defaultTransform get="inline" set="null" line="809"><f a="v">
	<c path="h3d.Matrix"/>
	<c path="h3d.Matrix"/>
</f></set_defaultTransform>
		<setPosition public="1" get="inline" set="null" line="818">
			<f a="x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the position of the object relative to its parent.</haxe_doc>
		</setPosition>
		<setTransform public="1" set="method" line="830"><f a="mat">
	<c path="h3d.Matrix"/>
	<x path="Void"/>
</f></setTransform>
		<getTransform public="1" set="method" line="847">
			<f a="?mat">
				<c path="h3d.Matrix"/>
				<c path="h3d.Matrix"/>
			</f>
			<haxe_doc>Returns the local position, scale and rotation of the object relative to its parent.</haxe_doc>
		</getTransform>
		<rotate public="1" set="method" line="861">
			<f a="rx:ry:rz">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Rotate around the current rotation axis by the specified angles (in radian).</haxe_doc>
		</rotate>
		<setRotation public="1" set="method" line="871">
			<f a="rx:ry:rz">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the rotation using the specified angles (in radian).</haxe_doc>
		</setRotation>
		<setRotationAxis public="1" set="method" line="879">
			<f a="ax:ay:az:angle">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the rotation using the specified axis and angle of rotation around it (in radian).</haxe_doc>
		</setRotationAxis>
		<setDirection public="1" set="method" line="887">
			<f a="v">
				<c path="h3d.Vector"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the rotation using the specified look at direction</haxe_doc>
		</setDirection>
		<getLocalDirection public="1" set="method" line="895">
			<f a=""><c path="h3d.Vector"/></f>
			<haxe_doc>Return the direction in which the object rotation is currently oriented to</haxe_doc>
		</getLocalDirection>
		<getRotationQuat public="1" set="method" line="903">
			<f a=""><c path="h3d.Quat"/></f>
			<haxe_doc>Return the quaternion representing the current object rotation.
		Dot not modify as it's not a copy.</haxe_doc>
		</getRotationQuat>
		<setRotationQuat public="1" set="method" line="911">
			<f a="q">
				<c path="h3d.Quat"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the quaternion representing the current object rotation.
		Dot not modify the value afterwards as no copy is made.</haxe_doc>
		</setRotationQuat>
		<scale public="1" get="inline" set="null" line="919">
			<f a="v">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scale uniformly the object by the given factor.</haxe_doc>
		</scale>
		<setScale public="1" get="inline" set="null" line="929">
			<f a="v">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the uniform scale for the object.</haxe_doc>
		</setScale>
		<toString public="1" set="method" line="939">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return both class name and object name if any.</haxe_doc>
		</toString>
		<getChildAt public="1" get="inline" set="null" line="946">
			<f a="n">
				<x path="Int"/>
				<c path="h3d.scene.Object"/>
			</f>
			<haxe_doc>Return the `n`th element among our immediate children list, or null if there is no.</haxe_doc>
		</getChildAt>
		<getChildIndex public="1" set="method" line="953">
			<f a="o">
				<c path="h3d.scene.Object"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Return the index of the object `o` within our immediate children list, or `-1` if it is not part of our children list.</haxe_doc>
		</getChildIndex>
		<get_numChildren get="inline" set="null" line="960"><f a=""><x path="Int"/></f></get_numChildren>
		<iterator public="1" get="inline" set="null" line="967">
			<f a=""><c path="hxd.impl.ArrayIterator_h3d_scene_Object"/></f>
			<haxe_doc>Return an iterator over this object immediate children</haxe_doc>
		</iterator>
		<new public="1" set="method" line="176">
			<f a="?parent">
				<c path="h3d.scene.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new empty object, and adds it to the parent object if not null.</haxe_doc>
		</new>
		<haxe_doc>h3d.scene.Object is the base 3D class that all scene tree elements inherit from.
	It can be used to create a virtual container that does not display anything but can contain other objects
	so the various transforms are inherited to its children.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.scene.Mesh" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Mesh.hx">
		<extends path="h3d.scene.Object"/>
		<primitive public="1" set="accessor">
			<c path="h3d.prim.Primitive"/>
			<haxe_doc>The primitive of the mesh: the list of vertexes and indices necessary to display the mesh.</haxe_doc>
		</primitive>
		<material public="1">
			<c path="h3d.mat.Material"/>
			<haxe_doc>The material of the mesh: the properties used to display it (texture, color, shaders, etc.)</haxe_doc>
		</material>
		<getMeshMaterials public="1" set="method" line="36">
			<f a=""><c path="Array"><c path="h3d.mat.Material"/></c></f>
			<haxe_doc>Return all materials for the current object.</haxe_doc>
		</getMeshMaterials>
		<getBoundsRec set="method" line="40" override="1"><f a="b">
	<c path="h3d.col.Bounds"/>
	<c path="h3d.col.Bounds"/>
</f></getBoundsRec>
		<clone public="1" set="method" line="50" override="1"><f a="?o">
	<c path="h3d.scene.Object"/>
	<c path="h3d.scene.Object"/>
</f></clone>
		<getLocalCollider public="1" set="method" line="58" override="1"><f a=""><c path="h3d.col.Collider"/></f></getLocalCollider>
		<draw set="method" line="62" override="1"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></draw>
		<emit set="method" line="66" override="1"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></emit>
		<getMaterialByName public="1" set="method" line="70" override="1"><f a="name">
	<c path="String"/>
	<c path="h3d.mat.Material"/>
</f></getMaterialByName>
		<getMaterials public="1" set="method" line="76" override="1">
			<f a="?a:?recursive" v=":true">
				<c path="Array"><c path="h3d.mat.Material"/></c>
				<x path="Bool"/>
				<x path="Null"><c path="Array"><c path="h3d.mat.Material"/></c></x>
			</f>
			<meta><m n=":value"><e>{ recursive : true }</e></m></meta>
		</getMaterials>
		<onAdd set="method" line="96" override="1"><f a=""><x path="Void"/></f></onAdd>
		<onRemove set="method" line="102" override="1"><f a=""><x path="Void"/></f></onRemove>
		<set_primitive set="method" line="107"><f a="prim">
	<c path="h3d.prim.Primitive"/>
	<c path="h3d.prim.Primitive"/>
</f></set_primitive>
		<new public="1" set="method" line="23">
			<f a="primitive:?material:?parent">
				<c path="h3d.prim.Primitive"/>
				<c path="h3d.mat.Material"/>
				<c path="h3d.scene.Object"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new mesh with given primitive, material and parent object.
		If material is not specified, a new default material is created for the current renderer.</haxe_doc>
		</new>
		<haxe_doc>h3d.scene.Mesh is the base class for all 3D objects displayed on screen.
	Unlike Object base class, all properties of Mesh only apply to the current object and are not inherited by its children.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.scene.Graphics" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Graphics.hx">
		<extends path="h3d.scene.Mesh"/>
		<bprim><c path="h3d.prim.BigPrimitive"/></bprim>
		<curX expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</curX>
		<curY expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</curY>
		<curZ expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</curZ>
		<curR expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</curR>
		<curG><x path="Float"/></curG>
		<curB><x path="Float"/></curB>
		<curA><x path="Float"/></curA>
		<lineSize expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</lineSize>
		<lineShader><c path="h3d.shader.LineShader"/></lineShader>
		<tmpPoints><c path="Array"><c path="h3d.scene._Graphics.GPoint"/></c></tmpPoints>
		<is3D public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Setting is3D to true will switch from a screen space line (constant size whatever the distance) to a world space line</haxe_doc>
		</is3D>
		<onRemove set="method" line="58" override="1"><f a=""><x path="Void"/></f></onRemove>
		<set_is3D set="method" line="63"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_is3D>
		<flushLine set="method" line="76"><f a=""><x path="Void"/></f></flushLine>
		<flush set="method" line="185"><f a=""><x path="Void"/></f></flush>
		<sync set="method" line="194" override="1"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></sync>
		<draw set="method" line="200" override="1"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></draw>
		<clear public="1" set="method" line="206"><f a=""><x path="Void"/></f></clear>
		<lineStyle public="1" set="method" line="211">
			<f a="?size:?color:?alpha" v="0.:0:1.">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1., color : 0, size : 0. }</e></m></meta>
		</lineStyle>
		<setColor public="1" set="method" line="220">
			<f a="color:?alpha" v=":1.">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1. }</e></m></meta>
		</setColor>
		<drawLine public="1" get="inline" set="null" line="227"><f a="p1:p2">
	<c path="h3d.col.Point"/>
	<c path="h3d.col.Point"/>
	<x path="Void"/>
</f></drawLine>
		<moveTo public="1" set="method" line="232"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<addVertex get="inline" set="null" line="243"><f a="x:y:z:r:g:b:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addVertex>
		<lineTo public="1" set="method" line="247"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<new public="1" set="method" line="42"><f a="?parent">
	<c path="h3d.scene.Object"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.scene.Interactive" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Interactive.hx">
		<extends path="h3d.scene.Object"/>
		<implements path="hxd.Interactive"/>
		<shape public="1">
			<c path="h3d.col.Collider"/>
			<meta><m n=":s"/></meta>
		</shape>
		<preciseShape public="1">
			<x path="Null"><c path="h3d.col.Collider"/></x>
			<meta><m n=":s"/></meta>
			<haxe_doc>If several interactive conflicts, the preciseShape (if defined) can be used to distinguish between the two.</haxe_doc>
		</preciseShape>
		<priority public="1">
			<x path="Int"/>
			<meta><m n=":s"/></meta>
			<haxe_doc>In case of conflicting shapes, usually the one in front of the camera is prioritized, unless you set an higher priority.</haxe_doc>
		</priority>
		<cursor public="1" set="accessor"><x path="Null"><e path="hxd.Cursor"/></x></cursor>
		<cancelEvents public="1" expr="false">
			<x path="Bool"/>
			<meta>
				<m n=":value"><e>false</e></m>
				<m n=":s"/>
			</meta>
			<haxe_doc>Set the default `cancel` mode (see `hxd.Event`), default to false.</haxe_doc>
		</cancelEvents>
		<propagateEvents public="1" expr="false">
			<x path="Bool"/>
			<meta>
				<m n=":value"><e>false</e></m>
				<m n=":s"/>
			</meta>
			<haxe_doc>Set the default `propagate` mode (see `hxd.Event`), default to false.</haxe_doc>
		</propagateEvents>
		<enableRightButton public="1">
			<x path="Bool"/>
			<meta><m n=":s"/></meta>
		</enableRightButton>
		<bestMatch public="1">
			<x path="Bool"/>
			<meta><m n=":s"/></meta>
			<haxe_doc>Is it required to find the best hit point in a complex mesh or any hit possible point will be enough (default = false, faster).</haxe_doc>
		</bestMatch>
		<scene><c path="h3d.scene.Scene"/></scene>
		<mouseDownButton expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</mouseDownButton>
		<hitPoint expr="new h3d.Vector()">
			<c path="h3d.Vector"/>
			<meta>
				<m n=":value"><e>new h3d.Vector()</e></m>
				<m n=":allow"><e>h3d.scene.Scene</e></m>
			</meta>
		</hitPoint>
		<onAdd set="method" line="45" override="1"><f a=""><x path="Void"/></f></onAdd>
		<onRemove set="method" line="51" override="1"><f a=""><x path="Void"/></f></onRemove>
		<preventClick public="1" set="method" line="62">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This can be called during or after a push event in order to prevent the release from triggering a click.</haxe_doc>
		</preventClick>
		<getInteractiveScene public="1" set="method" line="66">
			<f a=""><c path="hxd.InteractiveScene"/></f>
			<meta><m n=":noCompletion"/></meta>
		</getInteractiveScene>
		<handleEvent public="1" set="method" line="70">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</handleEvent>
		<set_cursor set="method" line="117"><f a="c">
	<x path="Null"><e path="hxd.Cursor"/></x>
	<x path="Null"><e path="hxd.Cursor"/></x>
</f></set_cursor>
		<focus public="1" set="method" line="124"><f a=""><x path="Void"/></f></focus>
		<blur public="1" set="method" line="130"><f a=""><x path="Void"/></f></blur>
		<isOver public="1" set="method" line="134"><f a=""><x path="Bool"/></f></isOver>
		<hasFocus public="1" set="method" line="138"><f a=""><x path="Bool"/></f></hasFocus>
		<onOver public="1" set="dynamic" line="147">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when mouse enters Interactive hitbox area.
		`event.propagate` and `event.cancel` are ignored during `onOver`.
		Propagation can be set with `onMove` event, as well as cancelling `onMove` will prevent `onOver`.</haxe_doc>
		</onOver>
		<onOut public="1" set="dynamic" line="153">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when mouse exits Interactive hitbox area.
		`event.propagate` and `event.cancel` are ignored during `onOut`.</haxe_doc>
		</onOut>
		<onPush public="1" set="dynamic" line="157">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when Interactive is pressed by user.</haxe_doc>
		</onPush>
		<onRelease public="1" set="dynamic" line="168">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent on multiple conditions.
		A. Always sent if user releases mouse while it is inside Interactive hitbox area.
			This happends regardless if that Interactive was pressed prior or not.
		B. Sent before `onReleaseOutside` if this Interactive was pressed, but released outside it's bounds.
		For first case `event.kind` will be `ERelease`, for second case - `EReleaseOutside`.
		See `onClick` and `onReleaseOutside` functions for separate events that trigger only when user interacts with this particular Interactive.</haxe_doc>
		</onRelease>
		<onReleaseOutside public="1" set="dynamic" line="175">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when user presses Interactive, moves mouse outside and releases it.
		This event fired only on Interactive that user pressed, but released mouse after moving it outside of Interactive hitbox area.</haxe_doc>
		</onReleaseOutside>
		<onClick public="1" set="dynamic" line="182">
			<f a="e">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sent when Interactive is clicked by user.
		This event fired only on Interactive that user pressed and released when mouse is inside Interactive hitbox area.</haxe_doc>
		</onClick>
		<onMove public="1" set="dynamic" line="185"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></onMove>
		<onWheel public="1" set="dynamic" line="188"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></onWheel>
		<onFocus public="1" set="dynamic" line="191"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></onFocus>
		<onFocusLost public="1" set="dynamic" line="194"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></onFocusLost>
		<onKeyUp public="1" set="dynamic" line="197"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></onKeyUp>
		<onKeyDown public="1" set="dynamic" line="200"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></onKeyDown>
		<onCheck public="1" set="dynamic" line="203"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></onCheck>
		<onTextInput public="1" set="dynamic" line="206"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></onTextInput>
		<new public="1" set="method" line="39"><f a="shape:?parent">
	<c path="h3d.col.Collider"/>
	<c path="h3d.scene.Object"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="h3d.scene.Light" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Light.hx">
		<extends path="h3d.scene.Object"/>
		<shader><c path="hxsl.Shader"/></shader>
		<objectDistance><x path="Float"/></objectDistance>
		<next public="1">
			<c path="h3d.scene.Light"/>
			<meta><m n=":noCompletion"/></meta>
		</next>
		<cullingDistance expr="-1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>-1</e></m>
				<m n=":s"/>
			</meta>
		</cullingDistance>
		<priority public="1" expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":s"/>
			</meta>
		</priority>
		<color public="1" get="accessor" set="accessor"><c path="h3d.Vector"/></color>
		<enableSpecular public="1" get="accessor" set="accessor"><x path="Bool"/></enableSpecular>
		<get_color set="method" line="20"><f a=""><c path="h3d.Vector"/></f></get_color>
		<set_color set="method" line="24"><f a="v">
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
</f></set_color>
		<get_enableSpecular set="method" line="28"><f a=""><x path="Bool"/></f></get_enableSpecular>
		<set_enableSpecular set="method" line="32"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enableSpecular>
		<emit set="method" line="37" override="1"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></emit>
		<getShadowDirection set="method" line="41"><f a=""><c path="h3d.Vector"/></f></getShadowDirection>
		<new set="method" line="14"><f a="shader:?parent">
	<c path="hxsl.Shader"/>
	<c path="h3d.scene.Object"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="h3d.scene.LightSystem" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/LightSystem.hx">
		<drawPasses public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</drawPasses>
		<ambientLight public="1" set="null"><c path="h3d.Vector"/></ambientLight>
		<shadowLight public="1"><c path="h3d.scene.Light"/></shadowLight>
		<lightCount><x path="Int"/></lightCount>
		<ctx><c path="h3d.scene.RenderContext"/></ctx>
		<initGlobals public="1" set="method" line="16"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></initGlobals>
		<cullLights set="method" line="19"><f a=""><x path="Void"/></f></cullLights>
		<initLights public="1" set="method" line="45"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></initLights>
		<computeLight public="1" set="method" line="62"><f a="obj:shaders">
	<c path="h3d.scene.Object"/>
	<c path="hxsl.ShaderList"/>
	<c path="hxsl.ShaderList"/>
</f></computeLight>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="h3d.scene.MultiMaterial" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/MultiMaterial.hx">
		<extends path="h3d.scene.Mesh"/>
		<materials public="1"><c path="Array"><c path="h3d.mat.Material"/></c></materials>
		<getMeshMaterials public="1" set="method" line="12" override="1"><f a=""><c path="Array"><c path="h3d.mat.Material"/></c></f></getMeshMaterials>
		<clone public="1" set="method" line="16" override="1"><f a="?o">
	<c path="h3d.scene.Object"/>
	<c path="h3d.scene.MultiMaterial"/>
</f></clone>
		<emit set="method" line="26" override="1"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></emit>
		<getMaterialByName public="1" set="method" line="34" override="1"><f a="name">
	<c path="String"/>
	<c path="h3d.mat.Material"/>
</f></getMaterialByName>
		<getMaterials public="1" set="method" line="41" override="1">
			<f a="?a:?recursive" v=":true">
				<c path="Array"><c path="h3d.mat.Material"/></c>
				<x path="Bool"/>
				<x path="Null"><c path="Array"><c path="h3d.mat.Material"/></c></x>
			</f>
			<meta><m n=":value"><e>{ recursive : true }</e></m></meta>
		</getMaterials>
		<draw set="method" line="53" override="1"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></draw>
		<new public="1" set="method" line="7"><f a="prim:?mats:?parent">
	<c path="h3d.prim.Primitive"/>
	<c path="Array"><x path="Null"><c path="h3d.mat.Material"/></x></c>
	<c path="h3d.scene.Object"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="h3d.scene.ObjectFlags" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Object.hx" module="h3d.scene.Object">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="h3d.scene._Object.ObjectFlags_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Object.hx" private="1" module="h3d.scene.Object" final="1">
	<FPosChanged public="1" get="inline" set="null" expr="cast 0x01" line="4" static="1">
		<x path="h3d.scene.ObjectFlags"/>
		<meta>
			<m n=":value"><e>cast 0x01</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FPosChanged>
	<FVisible public="1" get="inline" set="null" expr="cast 0x02" line="5" static="1">
		<x path="h3d.scene.ObjectFlags"/>
		<meta>
			<m n=":value"><e>cast 0x02</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FVisible>
	<FCulled public="1" get="inline" set="null" expr="cast 0x04" line="6" static="1">
		<x path="h3d.scene.ObjectFlags"/>
		<meta>
			<m n=":value"><e>cast 0x04</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FCulled>
	<FFollowPositionOnly public="1" get="inline" set="null" expr="cast 0x08" line="7" static="1">
		<x path="h3d.scene.ObjectFlags"/>
		<meta>
			<m n=":value"><e>cast 0x08</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FFollowPositionOnly>
	<FLightCameraCenter public="1" get="inline" set="null" expr="cast 0x10" line="8" static="1">
		<x path="h3d.scene.ObjectFlags"/>
		<meta>
			<m n=":value"><e>cast 0x10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FLightCameraCenter>
	<FAllocated public="1" get="inline" set="null" expr="cast 0x20" line="9" static="1">
		<x path="h3d.scene.ObjectFlags"/>
		<meta>
			<m n=":value"><e>cast 0x20</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FAllocated>
	<FAlwaysSync public="1" get="inline" set="null" expr="cast 0x40" line="10" static="1">
		<x path="h3d.scene.ObjectFlags"/>
		<meta>
			<m n=":value"><e>cast 0x40</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FAlwaysSync>
	<FInheritCulled public="1" get="inline" set="null" expr="cast 0x80" line="11" static="1">
		<x path="h3d.scene.ObjectFlags"/>
		<meta>
			<m n=":value"><e>cast 0x80</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FInheritCulled>
	<FNoSerialize public="1" get="inline" set="null" expr="cast 0x100" line="12" static="1">
		<x path="h3d.scene.ObjectFlags"/>
		<meta>
			<m n=":value"><e>cast 0x100</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FNoSerialize>
	<FIgnoreBounds public="1" get="inline" set="null" expr="cast 0x200" line="13" static="1">
		<x path="h3d.scene.ObjectFlags"/>
		<meta>
			<m n=":value"><e>cast 0x200</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FIgnoreBounds>
	<FIgnoreCollide public="1" get="inline" set="null" expr="cast 0x400" line="14" static="1">
		<x path="h3d.scene.ObjectFlags"/>
		<meta>
			<m n=":value"><e>cast 0x400</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FIgnoreCollide>
	<FIgnoreParentTransform public="1" get="inline" set="null" expr="cast 0x800" line="15" static="1">
		<x path="h3d.scene.ObjectFlags"/>
		<meta>
			<m n=":value"><e>cast 0x800</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FIgnoreParentTransform>
	<FCullingColliderInherited public="1" get="inline" set="null" expr="cast 0x1000" line="16" static="1">
		<x path="h3d.scene.ObjectFlags"/>
		<meta>
			<m n=":value"><e>cast 0x1000</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FCullingColliderInherited>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="value">
			<x path="Int"/>
			<x path="h3d.scene.ObjectFlags"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<toInt public="1" get="inline" set="null" line="20" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
	<has public="1" get="inline" set="null" line="21" static="1"><f a="this:f">
	<x path="Int"/>
	<x path="h3d.scene.ObjectFlags"/>
	<x path="Bool"/>
</f></has>
	<set public="1" get="inline" set="null" line="22" static="1"><f a="this:f:b">
	<x path="Int"/>
	<x path="h3d.scene.ObjectFlags"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></set>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="h3d.scene._Object.ObjectFlags_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Object.hx" private="1" module="h3d.scene.Object" final="1">
		<FPosChanged public="1" get="inline" set="null" expr="cast 0x01" line="4" static="1">
			<x path="h3d.scene.ObjectFlags"/>
			<meta>
				<m n=":value"><e>cast 0x01</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FPosChanged>
		<FVisible public="1" get="inline" set="null" expr="cast 0x02" line="5" static="1">
			<x path="h3d.scene.ObjectFlags"/>
			<meta>
				<m n=":value"><e>cast 0x02</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FVisible>
		<FCulled public="1" get="inline" set="null" expr="cast 0x04" line="6" static="1">
			<x path="h3d.scene.ObjectFlags"/>
			<meta>
				<m n=":value"><e>cast 0x04</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FCulled>
		<FFollowPositionOnly public="1" get="inline" set="null" expr="cast 0x08" line="7" static="1">
			<x path="h3d.scene.ObjectFlags"/>
			<meta>
				<m n=":value"><e>cast 0x08</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FFollowPositionOnly>
		<FLightCameraCenter public="1" get="inline" set="null" expr="cast 0x10" line="8" static="1">
			<x path="h3d.scene.ObjectFlags"/>
			<meta>
				<m n=":value"><e>cast 0x10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FLightCameraCenter>
		<FAllocated public="1" get="inline" set="null" expr="cast 0x20" line="9" static="1">
			<x path="h3d.scene.ObjectFlags"/>
			<meta>
				<m n=":value"><e>cast 0x20</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FAllocated>
		<FAlwaysSync public="1" get="inline" set="null" expr="cast 0x40" line="10" static="1">
			<x path="h3d.scene.ObjectFlags"/>
			<meta>
				<m n=":value"><e>cast 0x40</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FAlwaysSync>
		<FInheritCulled public="1" get="inline" set="null" expr="cast 0x80" line="11" static="1">
			<x path="h3d.scene.ObjectFlags"/>
			<meta>
				<m n=":value"><e>cast 0x80</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FInheritCulled>
		<FNoSerialize public="1" get="inline" set="null" expr="cast 0x100" line="12" static="1">
			<x path="h3d.scene.ObjectFlags"/>
			<meta>
				<m n=":value"><e>cast 0x100</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FNoSerialize>
		<FIgnoreBounds public="1" get="inline" set="null" expr="cast 0x200" line="13" static="1">
			<x path="h3d.scene.ObjectFlags"/>
			<meta>
				<m n=":value"><e>cast 0x200</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FIgnoreBounds>
		<FIgnoreCollide public="1" get="inline" set="null" expr="cast 0x400" line="14" static="1">
			<x path="h3d.scene.ObjectFlags"/>
			<meta>
				<m n=":value"><e>cast 0x400</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FIgnoreCollide>
		<FIgnoreParentTransform public="1" get="inline" set="null" expr="cast 0x800" line="15" static="1">
			<x path="h3d.scene.ObjectFlags"/>
			<meta>
				<m n=":value"><e>cast 0x800</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FIgnoreParentTransform>
		<FCullingColliderInherited public="1" get="inline" set="null" expr="cast 0x1000" line="16" static="1">
			<x path="h3d.scene.ObjectFlags"/>
			<meta>
				<m n=":value"><e>cast 0x1000</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FCullingColliderInherited>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="h3d.scene.ObjectFlags"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<toInt public="1" get="inline" set="null" line="20" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
		<has public="1" get="inline" set="null" line="21" static="1"><f a="this:f">
	<x path="Int"/>
	<x path="h3d.scene.ObjectFlags"/>
	<x path="Bool"/>
</f></has>
		<set public="1" get="inline" set="null" line="22" static="1"><f a="this:f:b">
	<x path="Int"/>
	<x path="h3d.scene.ObjectFlags"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></set>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="h3d.scene._RenderContext.SharedGlobal" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/RenderContext.hx" private="1" module="h3d.scene.RenderContext">
		<gid public="1"><x path="Int"/></gid>
		<value public="1"><d/></value>
		<new public="1" set="method" line="6"><f a="gid:value">
	<x path="Int"/>
	<unknown/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.scene.RenderContext" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/RenderContext.hx">
		<extends path="h3d.impl.RenderContext"/>
		<camera public="1"><c path="h3d.Camera"/></camera>
		<scene public="1"><c path="h3d.scene.Scene"/></scene>
		<drawPass public="1"><c path="h3d.pass.PassObject"/></drawPass>
		<pbrLightPass public="1"><c path="h3d.mat.Pass"/></pbrLightPass>
		<computingStatic public="1"><x path="Bool"/></computingStatic>
		<sharedGlobals><c path="Array"><c path="h3d.scene._RenderContext.SharedGlobal"/></c></sharedGlobals>
		<lightSystem public="1"><c path="h3d.scene.LightSystem"/></lightSystem>
		<extraShaders public="1"><c path="hxsl.ShaderList"/></extraShaders>
		<visibleFlag public="1"><x path="Bool"/></visibleFlag>
		<shaderBuffers public="1"><c path="h3d.shader.Buffers"/></shaderBuffers>
		<cullingCollider public="1"><c path="h3d.col.Collider"/></cullingCollider>
		<allocPool><c path="h3d.pass.PassObject"/></allocPool>
		<allocFirst><c path="h3d.pass.PassObject"/></allocFirst>
		<cachedShaderList><c path="Array"><c path="hxsl.ShaderList"/></c></cachedShaderList>
		<cachedPassObjects><c path="Array"><c path="h3d.scene.PassObjects"/></c></cachedPassObjects>
		<cachedPos><x path="Int"/></cachedPos>
		<passes><c path="h3d.pass.PassObject"/></passes>
		<lights><c path="h3d.scene.Light"/></lights>
		<currentManager><c path="h3d.pass.ShaderManager"/></currentManager>
		<emit public="1" get="inline" set="null" line="43">
			<f a="mat:obj:?index" v="::0">
				<c path="h3d.mat.Material"/>
				<c path="h3d.scene.Object"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ index : 0 }</e></m>
				<m n=":access"><e>h3d.mat.Pass</e></m>
			</meta>
		</emit>
		<start public="1" set="method" line="51"><f a=""><x path="Void"/></f></start>
		<nextPass public="1" get="inline" set="null" line="63"><f a=""><x path="Void"/></f></nextPass>
		<getGlobal public="1" set="method" line="68"><f a="name">
	<c path="String"/>
	<d/>
</f></getGlobal>
		<setGlobal public="1" get="inline" set="null" line="76"><f a="name:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></setGlobal>
		<setGlobalID public="1" set="method" line="80"><f a="gid:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></setGlobalID>
		<emitPass public="1" set="method" line="89"><f a="pass:obj">
	<c path="h3d.mat.Pass"/>
	<c path="h3d.scene.Object"/>
	<c path="h3d.pass.PassObject"/>
</f></emitPass>
		<allocShaderList public="1" set="method" line="104"><f a="s:?next">
	<c path="hxsl.Shader"/>
	<c path="hxsl.ShaderList"/>
	<c path="hxsl.ShaderList"/>
</f></allocShaderList>
		<emitLight public="1" set="method" line="115"><f a="l">
	<c path="h3d.scene.Light"/>
	<x path="Void"/>
</f></emitLight>
		<uploadParams public="1" set="method" line="120"><f a=""><x path="Void"/></f></uploadParams>
		<done public="1" set="method" line="127"><f a=""><x path="Void"/></f></done>
		<new public="1" set="method" line="36"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.scene.PassObjects" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Renderer.hx" module="h3d.scene.Renderer">
		<name public="1"><c path="String"/></name>
		<passes public="1"><c path="h3d.pass.PassList"/></passes>
		<rendered public="1"><x path="Bool"/></rendered>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="h3d.scene._Renderer.SMap" params="T" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Renderer.hx" private="1" module="h3d.scene.Renderer"><t path="Map">
	<c path="String"/>
	<c path="h3d.scene._Renderer.SMap.T"/>
</t></typedef>
	<enum path="h3d.scene.RenderMode" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Renderer.hx" module="h3d.scene.Renderer">
		<Default/>
		<LightProbe/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="h3d.scene.Renderer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Renderer.hx">
		<extends path="hxd.impl.AnyProps"/>
		<defaultPass><c path="h3d.pass.Base"/></defaultPass>
		<passObjects><t path="h3d.scene._Renderer.SMap"><c path="h3d.scene.PassObjects"/></t></passObjects>
		<allPasses><c path="Array"><c path="h3d.pass.Base"/></c></allPasses>
		<emptyPasses expr="new h3d.pass.PassList()">
			<c path="h3d.pass.PassList"/>
			<meta><m n=":value"><e>new h3d.pass.PassList()</e></m></meta>
		</emptyPasses>
		<ctx><c path="h3d.scene.RenderContext"/></ctx>
		<hasSetTarget expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</hasSetTarget>
		<frontToBack><f a="">
	<c path="h3d.pass.PassList"/>
	<x path="Void"/>
</f></frontToBack>
		<backToFront><f a="">
	<c path="h3d.pass.PassList"/>
	<x path="Void"/>
</f></backToFront>
		<effects public="1" expr="[]">
			<c path="Array"><c path="h3d.impl.RendererFX"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</effects>
		<renderMode public="1" expr="Default">
			<e path="h3d.scene.RenderMode"/>
			<meta><m n=":value"><e>Default</e></m></meta>
		</renderMode>
		<getEffect public="1" params="T" set="method" line="45"><f a="cl">
	<x path="Class"><c path="getEffect.T"/></x>
	<c path="getEffect.T"/>
</f></getEffect>
		<dispose public="1" set="method" line="53"><f a=""><x path="Void"/></f></dispose>
		<mark set="method" line="61"><f a="id">
	<c path="String"/>
	<x path="Void"/>
</f></mark>
		<addShader public="1" set="method" line="67">
			<f a="s">
				<c path="hxsl.Shader"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inject a post process shader for the current frame. Shaders are reset after each render.</haxe_doc>
		</addShader>
		<getPass public="1" params="T" set="method" line="70"><f a="c">
	<x path="Class"><c path="getPass.T"/></x>
	<c path="getPass.T"/>
</f></getPass>
		<getPassByName public="1" set="method" line="77"><f a="name">
	<c path="String"/>
	<c path="h3d.pass.Base"/>
</f></getPassByName>
		<debugCompileShader public="1" set="method" line="84"><f a="pass">
	<c path="h3d.mat.Pass"/>
	<c path="hxsl.RuntimeShader"/>
</f></debugCompileShader>
		<hasFeature set="method" line="91"><f a="f">
	<e path="h3d.impl.Feature"/>
	<x path="Bool"/>
</f></hasFeature>
		<getDefaultLight params="T" set="method" line="95"><f a="l">
	<c path="getDefaultLight.T"/>
	<c path="getDefaultLight.T"/>
</f></getDefaultLight>
		<getLightSystem set="method" line="99"><f a=""><c path="h3d.scene.LightSystem"/></f></getLightSystem>
		<depthSort set="method" line="104">
			<f a="frontToBack:passes">
				<x path="Bool"/>
				<c path="h3d.pass.PassList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":access"><e>h3d.scene.Object</e></m></meta>
		</depthSort>
		<clear get="inline" set="null" line="117"><f a="?color:?depth:?stencil">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<allocTarget get="inline" set="null" line="121">
			<f a="name:?depth:?size:?format" v=":true:1.:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Float"/>
				<e path="hxd.PixelFormat"/>
				<c path="h3d.mat.Texture"/>
			</f>
			<meta><m n=":value"><e>{ size : 1., depth : true }</e></m></meta>
		</allocTarget>
		<copy set="method" line="125"><f a="from:to:?blend">
	<c path="h3d.mat.Texture"/>
	<c path="h3d.mat.Texture"/>
	<t path="h3d.mat.BlendMode"/>
	<x path="Void"/>
</f></copy>
		<setTarget set="method" line="129"><f a="tex">
	<c path="h3d.mat.Texture"/>
	<x path="Void"/>
</f></setTarget>
		<setTargets params="T" set="method" line="135"><f a="textures">
	<c path="Array"><c path="setTargets.T"/></c>
	<x path="Void"/>
</f></setTargets>
		<resetTarget set="method" line="141"><f a=""><x path="Void"/></f></resetTarget>
		<has set="method" line="148"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></has>
		<get set="method" line="152"><f a="name">
	<c path="String"/>
	<c path="h3d.pass.PassList"/>
</f></get>
		<draw set="method" line="159"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></draw>
		<render set="method" line="163"><f a=""><x path="Void"/></f></render>
		<computeStatic set="method" line="167"><f a=""><x path="Void"/></f></computeStatic>
		<start public="1" set="method" line="171"><f a=""><x path="Void"/></f></start>
		<process public="1" set="method" line="174"><f a="passes">
	<c path="Array"><c path="h3d.scene.PassObjects"/></c>
	<x path="Void"/>
</f></process>
		<new public="1" set="method" line="36"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>hrt.prefab.rfx.RendererFX</e></m>
			<m n=":allow"><e>h3d.pass.Shadows</e></m>
		</meta>
	</class>
	<class path="h3d.scene.Scene" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Scene.hx">
		<extends path="h3d.scene.Object"/>
		<implements path="hxd.InteractiveScene"/>
		<implements path="h3d.IDrawable"/>
		<camera public="1">
			<c path="h3d.Camera"/>
			<haxe_doc>The scene current camera.</haxe_doc>
		</camera>
		<lightSystem public="1">
			<c path="h3d.scene.LightSystem"/>
			<haxe_doc>The scene light system. Can be customized.</haxe_doc>
		</lightSystem>
		<renderer public="1" set="accessor">
			<c path="h3d.scene.Renderer"/>
			<haxe_doc>The scene renderer. Can be customized.</haxe_doc>
		</renderer>
		<ctx><c path="h3d.scene.RenderContext"/></ctx>
		<interactives><c path="Array"><c path="h3d.scene.Interactive"/></c></interactives>
		<events>
			<c path="hxd.SceneEvents"/>
			<meta><m n=":allow"><e>h3d.scene.Interactive</e></m></meta>
		</events>
		<hitInteractives><c path="Array"><c path="h3d.scene.Interactive"/></c></hitInteractives>
		<eventListeners><c path="Array"><f a="">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></c></eventListeners>
		<window><c path="hxd.Window"/></window>
		<setEvents public="1" set="method" line="53">
			<f a="events">
				<c path="hxd.SceneEvents"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</setEvents>
		<addEventListener public="1" set="method" line="60">
			<f a="f">
				<f a="">
					<c path="hxd.Event"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Add an event listener that will capture all events not caught by an h2d.Interactive</haxe_doc>
		</addEventListener>
		<removeEventListener public="1" set="method" line="67">
			<f a="f">
				<f a="">
					<c path="hxd.Event"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Remove a previously added event listener, return false it was not part of our event listeners.</haxe_doc>
		</removeEventListener>
		<dispatchListeners public="1" set="method" line="77">
			<f a="event">
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
		</dispatchListeners>
		<set_renderer set="method" line="84"><f a="r">
	<c path="h3d.scene.Renderer"/>
	<c path="h3d.scene.Renderer"/>
</f></set_renderer>
		<sortHitPointByCameraDistance set="method" line="90"><f a="i1:i2">
	<c path="h3d.scene.Interactive"/>
	<c path="h3d.scene.Interactive"/>
	<x path="Int"/>
</f></sortHitPointByCameraDistance>
		<dispatchEvent public="1" set="method" line="99">
			<f a="event:to">
				<c path="hxd.Event"/>
				<c path="hxd.Interactive"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
		</dispatchEvent>
		<isInteractiveVisible public="1" set="method" line="106">
			<f a="i">
				<c path="hxd.Interactive"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
		</isInteractiveVisible>
		<handleEvent public="1" set="method" line="116">
			<f a="event:last">
				<c path="hxd.Event"/>
				<c path="hxd.Interactive"/>
				<x path="Null"><c path="h3d.scene.Interactive"/></x>
			</f>
			<meta>
				<m n=":dox"><e>hide</e></m>
				<m n=":noCompletion"/>
			</meta>
		</handleEvent>
		<clone public="1" set="method" line="232" override="1"><f a="?o">
	<c path="h3d.scene.Object"/>
	<c path="h3d.scene.Scene"/>
</f></clone>
		<dispose public="1" set="method" line="242">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Free the GPU memory for this Scene and its children</haxe_doc>
		</dispose>
		<addEventTarget set="method" line="257">
			<f a="i">
				<c path="h3d.scene.Interactive"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>h3d</e></m></meta>
		</addEventTarget>
		<removeEventTarget set="method" line="263">
			<f a="i">
				<c path="h3d.scene.Interactive"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>h3d</e></m></meta>
		</removeEventTarget>
		<setElapsedTime public="1" set="method" line="274">
			<f a="elapsedTime">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Before render() or sync() are called, allow to set how much time has elapsed (in seconds) since the last frame in order to update scene animations.
		This is managed automatically by hxd.App</haxe_doc>
		</setElapsedTime>
		<hardwarePass><c path="h3d.pass.HardwarePick"/></hardwarePass>
		<hardwarePick public="1" set="method" line="287">
			<f a="pixelX:pixelY">
				<x path="Float"/>
				<x path="Float"/>
				<c path="h3d.scene.Object"/>
			</f>
			<haxe_doc>Use GPU rendering to pick a model at the given pixel position.
		hardwarePick() will check all scene visible meshes bounds against a ray cast with current camera, then draw them into a 1x1 pixel texture with a specific shader.
		The texture will then be read and the color will identify the object that was rendered at this pixel.
		This is a very precise way of doing scene picking since it performs exactly the same transformations (skinning, custom shaders, etc.) but might be more costly than using CPU colliders.
		Please note that when done during/after rendering, this might clear the screen on some platforms so it should always be done before rendering.</haxe_doc>
		</hardwarePick>
		<syncOnly public="1" set="method" line="339">
			<f a="et">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Synchronize the scene without rendering, updating all objects and animations by the given amount of time, in seconds.</haxe_doc>
		</syncOnly>
		<computeStatic public="1" set="method" line="361">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Perform a rendering with `RendererContext.computingStatic=true`, allowing the computation of static shadow maps, etc.</haxe_doc>
		</computeStatic>
		<render public="1" set="method" line="375">
			<f a="engine">
				<c path="h3d.Engine"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":access"><e>h3d.mat.Pass</e></m>
				<m n=":access"><e>h3d.scene.RenderContext</e></m>
			</meta>
			<haxe_doc>Render the scene on screen. Internal usage only.</haxe_doc>
		</render>
		<serializeScene public="1" set="method" line="458">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Serialize the scene content as HSD bytes (see hxd.fmt.hsd package). Requires -lib hxbit</haxe_doc>
		</serializeScene>
		<new public="1" set="method" line="37">
			<f a="?createRenderer:?createLightSystem" v="true:true">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ createLightSystem : true, createRenderer : true }</e></m></meta>
			<haxe_doc>Create a new scene. A default 3D scene is already available in `hxd.App.s3d`</haxe_doc>
		</new>
		<haxe_doc>h3d.scene.Scene is the root class for a 3D scene. All root objects are added to it before being drawn on screen.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.scene.Joint" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Skin.hx" module="h3d.scene.Skin">
		<extends path="h3d.scene.Object"/>
		<skin public="1">
			<c path="h3d.scene.Skin"/>
			<meta><m n=":s"/></meta>
		</skin>
		<index public="1">
			<x path="Int"/>
			<meta><m n=":s"/></meta>
		</index>
		<getObjectByName public="1" set="method" line="16" override="1"><f a="name">
	<c path="String"/>
	<c path="h3d.scene.Joint"/>
</f></getObjectByName>
		<syncPos set="method" line="36" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":access"><e>h3d.scene.Skin</e></m></meta>
		</syncPos>
		<new public="1" set="method" line="7"><f a="skin:j">
	<c path="h3d.scene.Skin"/>
	<c path="h3d.anim.Joint"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.scene.Skin" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/Skin.hx">
		<extends path="h3d.scene.MultiMaterial"/>
		<TMP_MAT expr="new h3d.Matrix()" line="219" static="1">
			<c path="h3d.Matrix"/>
			<meta><m n=":value"><e>new h3d.Matrix()</e></m></meta>
		</TMP_MAT>
		<skinData><c path="h3d.anim.Skin"/></skinData>
		<currentRelPose><c path="Array"><c path="h3d.Matrix"/></c></currentRelPose>
		<currentAbsPose><c path="Array"><c path="h3d.Matrix"/></c></currentAbsPose>
		<currentPalette><c path="Array"><c path="h3d.Matrix"/></c></currentPalette>
		<splitPalette><c path="Array"><c path="Array"><c path="h3d.Matrix"/></c></c></splitPalette>
		<jointsUpdated><x path="Bool"/></jointsUpdated>
		<jointsAbsPosInv><c path="h3d.Matrix"/></jointsAbsPosInv>
		<paletteChanged><x path="Bool"/></paletteChanged>
		<skinShader><c path="h3d.shader.SkinBase"/></skinShader>
		<jointsGraphics><c path="h3d.scene.Graphics"/></jointsGraphics>
		<showJoints public="1"><x path="Bool"/></showJoints>
		<clone public="1" set="method" line="88" override="1"><f a="?o">
	<c path="h3d.scene.Object"/>
	<c path="h3d.scene.Skin"/>
</f></clone>
		<getBoundsRec set="method" line="96" override="1"><f a="b">
	<c path="h3d.col.Bounds"/>
	<c path="h3d.col.Bounds"/>
</f></getBoundsRec>
		<getCurrentSkeletonBounds public="1" set="method" line="120"><f a=""><c path="h3d.col.Bounds"/></f></getCurrentSkeletonBounds>
		<getObjectByName public="1" set="method" line="131" override="1"><f a="name">
	<c path="String"/>
	<c path="h3d.scene.Object"/>
</f></getObjectByName>
		<getLocalCollider public="1" set="method" line="146" override="1"><f a=""><c path="h3d.col.Collider"/></f></getLocalCollider>
		<getGlobalCollider public="1" set="method" line="151" override="1"><f a=""><c path="h3d.col.SkinCollider"/></f></getGlobalCollider>
		<calcAbsPos set="method" line="157" override="1"><f a=""><x path="Void"/></f></calcAbsPos>
		<getSkinData public="1" set="method" line="163"><f a=""><c path="h3d.anim.Skin"/></f></getSkinData>
		<setSkinData public="1" set="method" line="167">
			<f a="s:?shaderInit" v=":true">
				<c path="h3d.anim.Skin"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ shaderInit : true }</e></m></meta>
		</setSkinData>
		<sync set="method" line="213" override="1"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></sync>
		<syncJoints set="method" line="222">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noDebug"/></meta>
		</syncJoints>
		<emit set="method" line="243" override="1"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></emit>
		<draw set="method" line="279" override="1"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></draw>
		<new public="1" set="method" line="82"><f a="s:?mat:?parent">
	<c path="h3d.anim.Skin"/>
	<c path="Array"><x path="Null"><c path="h3d.mat.Material"/></x></c>
	<c path="h3d.scene.Object"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.scene.fwd.LightSystem" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/fwd/LightSystem.hx">
		<extends path="h3d.scene.LightSystem"/>
		<maxLightsPerObject public="1" expr="6">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</maxLightsPerObject>
		<globals><c path="hxsl.Globals"/></globals>
		<ambientShader><c path="hxsl.Shader"/></ambientShader>
		<perPixelLighting public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</perPixelLighting>
		<additiveLighting public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<haxe_doc>In the additive lighting model (by default), the lights are added after the ambient.
		In the new non additive ligthning model, the lights will be modulated against the ambient, so an ambient of 1 will reduce lights intensities to 0.</haxe_doc>
		</additiveLighting>
		<get_additiveLighting set="method" line="23"><f a=""><x path="Bool"/></f></get_additiveLighting>
		<set_additiveLighting set="method" line="27"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_additiveLighting>
		<initLights public="1" set="method" line="31" override="1"><f a="ctx">
	<c path="h3d.scene.RenderContext"/>
	<x path="Void"/>
</f></initLights>
		<initGlobals public="1" set="method" line="37" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></initGlobals>
		<sortLight set="method" line="42"><f a="l1:l2">
	<c path="h3d.scene.Light"/>
	<c path="h3d.scene.Light"/>
	<x path="Int"/>
</f></sortLight>
		<computeLight public="1" set="method" line="48" override="1"><f a="obj:shaders">
	<c path="h3d.scene.Object"/>
	<c path="hxsl.ShaderList"/>
	<c path="hxsl.ShaderList"/>
</f></computeLight>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="h3d.scene.fwd._Renderer.SMap" params="T" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/fwd/Renderer.hx" private="1" module="h3d.scene.fwd.Renderer"><t path="Map">
	<c path="String"/>
	<c path="h3d.scene.fwd._Renderer.SMap.T"/>
</t></typedef>
	<class path="h3d.scene.fwd.DepthPass" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/fwd/Renderer.hx" module="h3d.scene.fwd.Renderer">
		<extends path="h3d.pass.Default"/>
		<depthMapId><x path="Int"/></depthMapId>
		<enableSky public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</enableSky>
		<getOutputs set="method" line="15" override="1"><f a=""><c path="Array"><e path="hxsl.Output"/></c></f></getOutputs>
		<draw public="1" set="method" line="19" override="1"><f a="passes:?sort">
	<c path="h3d.pass.PassList"/>
	<f a="">
		<c path="h3d.pass.PassList"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></draw>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.scene.fwd.NormalPass" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/fwd/Renderer.hx" module="h3d.scene.fwd.Renderer">
		<extends path="h3d.pass.Default"/>
		<normalMapId><x path="Int"/></normalMapId>
		<getOutputs set="method" line="39" override="1"><f a=""><c path="Array"><e path="hxsl.Output"/></c></f></getOutputs>
		<draw public="1" set="method" line="43" override="1"><f a="passes:?sort">
	<c path="h3d.pass.PassList"/>
	<f a="">
		<c path="h3d.pass.PassList"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></draw>
		<new public="1" set="method" line="34"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.scene.fwd.Renderer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/scene/fwd/Renderer.hx">
		<extends path="h3d.scene.Renderer"/>
		<def get="accessor" set="null"><c path="h3d.pass.Base"/></def>
		<depth public="1" expr="new DepthPass()">
			<c path="h3d.pass.Base"/>
			<meta><m n=":value"><e>new DepthPass()</e></m></meta>
		</depth>
		<normal public="1" expr="new NormalPass()">
			<c path="h3d.pass.Base"/>
			<meta><m n=":value"><e>new NormalPass()</e></m></meta>
		</normal>
		<shadow public="1" expr="new h3d.pass.DefaultShadowMap(1024)">
			<c path="h3d.pass.DefaultShadowMap"/>
			<meta><m n=":value"><e>new h3d.pass.DefaultShadowMap(1024)</e></m></meta>
		</shadow>
		<get_def get="inline" set="null" line="67"><f a=""><c path="h3d.pass.Base"/></f></get_def>
		<renderPass set="method" line="70"><f a="p:passes:?sort">
	<c path="h3d.pass.Base"/>
	<c path="h3d.pass.PassList"/>
	<f a="">
		<c path="h3d.pass.PassList"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></renderPass>
		<getPassByName public="1" set="method" line="74" override="1"><f a="name">
	<c path="String"/>
	<c path="h3d.pass.Base"/>
</f></getPassByName>
		<render set="method" line="80" override="1"><f a=""><x path="Void"/></f></render>
		<new public="1" set="method" line="61"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.shader.AmbientLight" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/AmbientLight.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLF2gzZC5zaGFkZXIuQW1iaWVudExpZ2h0CgEGZ2xvYmFsDQECAgxhbWJpZW50TGlnaHQFCwABAAMQcGVyUGl4ZWxMaWdodGluZwIAAQEAAAAAAAAAAAQKcGl4ZWxDb2xvcgUMBAAABQ9saWdodFBpeGVsQ29sb3IFCwQAAAYKbGlnaHRDb2xvcgULBAAABwhhZGRpdGl2ZQICAAEAAAAAAAgIX19pbml0X18OBgAACRBfX2luaXRfX2ZyYWdtZW50DgYAAAoJY2FsY0xpZ2h0DgYAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAABQIIAAAFAQYEAgYFCwsCBwICAgULCQMpDgEBAwAAAAAAAAAAAwULBQsFCwACCQAABQEGBAIFBQsLAgcCAgIFCwkDKQ4BAQMAAAAAAAAAAAMFCwULBQsAAwoBDQpsaWdodENvbG9yBQsEAAAFCwUBDQsCBwICDQULBAYAAgIFCwYBCQMWDgIEBgMBAwAAAAAAAPA/AwICBQsFCwULAQMAAAAAAAAAAAMFCwINBQsFCwULBQsFCwAAAAsAAAUBCwcCAgMCAgaBCgIEBQySAAULCQIKDgECBgULBQsFCwAAAAEMAAAFAQsCAwIGgQoCBAUMkgAFCwkCCg4BAgUFCwULBQsAAAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLF2gzZC5zaGFkZXIuQW1iaWVudExpZ2h0CgEGZ2xvYmFsDQECAgxhbWJpZW50TGlnaHQFCwABAAMQcGVyUGl4ZWxMaWdodGluZwIAAQEAAAAAAAAAAAQKcGl4ZWxDb2xvcgUMBAAABQ9saWdodFBpeGVsQ29sb3IFCwQAAAYKbGlnaHRDb2xvcgULBAAABwhhZGRpdGl2ZQICAAEAAAAAAAgIX19pbml0X18OBgAACRBfX2luaXRfX2ZyYWdtZW50DgYAAAoJY2FsY0xpZ2h0DgYAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAABQIIAAAFAQYEAgYFCwsCBwICAgULCQMpDgEBAwAAAAAAAAAAAwULBQsFCwACCQAABQEGBAIFBQsLAgcCAgIFCwkDKQ4BAQMAAAAAAAAAAAMFCwULBQsAAwoBDQpsaWdodENvbG9yBQsEAAAFCwUBDQsCBwICDQULBAYAAgIFCwYBCQMWDgIEBgMBAwAAAAAAAPA/AwICBQsFCwULAQMAAAAAAAAAAAMFCwINBQsFCwULBQsFCwAAAAsAAAUBCwcCAgMCAgaBCgIEBQySAAULCQIKDgECBgULBQsFCwAAAAEMAAAFAQsCAwIGgQoCBAUMkgAFCwkCCg4BAgUFCwULBQsAAAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<additive public="1" get="accessor" set="accessor"><x path="Bool"/></additive>
		<additive__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</additive__>
		<get_additive get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_additive>
		<set_additive get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_additive>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="3"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@global var global:{ var ambientLight : Vec3; @const
	var perPixelLighting : Bool};
	var pixelColor:Vec4;
	var lightPixelColor:Vec3;
	var lightColor:Vec3;
	@const var additive:Bool;
	function __init__() {
		lightColor = additive ? global.ambientLight : vec3(0.);
	};
	function __init__fragment() {
		lightPixelColor = additive ? global.ambientLight : vec3(0.);
	};
	function calcLight(lightColor:Vec3):Vec3 {
		return additive ? lightColor : (global.ambientLight + (1 - global.ambientLight).max(0.) * lightColor);
	};
	function vertex() {
		if (!global.perPixelLighting) pixelColor.rgb *= calcLight(lightColor);
	};
	function fragment() {
		if (global.perPixelLighting) pixelColor.rgb *= calcLight(lightPixelColor);
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.Base2d" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/Base2d.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLEWgzZC5zaGFkZXIuQmFzZTJkGwEFaW5wdXQNAQMCCHBvc2l0aW9uBQoBAQADAnV2BQoBAQAEBWNvbG9yBQwBAQABAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgEdGltZQMAAAAJBnpWYWx1ZQMCAAAKB3RleHR1cmUKAgAACw5zcHJpdGVQb3NpdGlvbgUMBAAADBBhYnNvbHV0ZVBvc2l0aW9uBQwEAAANCnBpeGVsQ29sb3IFDAQAAA4MdGV4dHVyZUNvbG9yBQwEAAAPDGNhbGN1bGF0ZWRVVgUKAwAAEAppc1JlbGF0aXZlAgIAAQAAAAAAEQVjb2xvcgUMAgAAEg9hYnNvbHV0ZU1hdHJpeEEFCwIAABMPYWJzb2x1dGVNYXRyaXhCBQsCAAAUDWZpbHRlck1hdHJpeEEFCwIAABUNZmlsdGVyTWF0cml4QgULAgAAFghoYXNVVlBvcwICAAEAAAAAABcFdXZQb3MFDAIAABgJa2lsbEFscGhhAgIAAQAAAAAAGQpwaXhlbEFsaWduAgIAAQAAAAAAGhBoYWxmUGl4ZWxJbnZlcnNlBQoCAAAbCXZpZXdwb3J0QQULAgAAHAl2aWV3cG9ydEIFCwIAAB0Ob3V0cHV0UG9zaXRpb24FDAQAAB4IX19pbml0X18OBgAAHwZ2ZXJ0ZXgOBgAAIAhmcmFnbWVudA4GAAADAh4AAAUGBgQCCwUMCQMqDgMCAgUKAgkDAQMAAAAAAADwPwMFDAUMCwIQAgUDBgQKAgwFDAAAAwkDHQ4CCQMpDgIKAgsFDBEABQoBAwAAAAAAAPA/AwULAhIFCwMDBgQKAgwFDAQAAwkDHQ4CCQMpDgIKAgsFDBEABQoBAwAAAAAAAPA/AwULAhMFCwMDBgQKAgwFDDkABQoKAgsFDDkABQoFCgAGBAIMBQwCCwUMBQwABgQCDwUKCwIWAgYABgECAwUKCgIXBQw5AAUKBQoKAhcFDBEABQoFCgIDBQoFCgUKBgQCDQUMCwIQAgYBAhEFDAIEBQwFDAIEBQwFDAUMBgQCDgUMCQMhDgICCgoCDwUKBQwFDAaBAg0FDAIOBQwFDAAAHwAABQUIIQN0bXAFCwQAAAkDKQ4CCgIMBQwRAAUKAQMAAAAAAADwPwMFCwAGBAIhBQsJAykOAwkDHQ4CAiEFCwIUBQsDCQMdDgICIQULAhUFCwMBAwAAAAAAAPA/AwULBQsGBAIdBQwJAyoOAwkDHQ4CAiEFCwIbBQsDCQMdDgICIQULAhwFCwMKAgwFDDkABQoFDAUMCwIZAgaDCgIdBQwRAAUKAhoFCgUKAAAGBAIGBQwCHQUMBQwAASAAAAUCCwYOAhgCBgkKAg0FDAwAAwED/Knx0k1iUD8DAgIMAAAABgQCBwUMAg0FDAUMAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLEWgzZC5zaGFkZXIuQmFzZTJkGwEFaW5wdXQNAQMCCHBvc2l0aW9uBQoBAQADAnV2BQoBAQAEBWNvbG9yBQwBAQABAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgEdGltZQMAAAAJBnpWYWx1ZQMCAAAKB3RleHR1cmUKAgAACw5zcHJpdGVQb3NpdGlvbgUMBAAADBBhYnNvbHV0ZVBvc2l0aW9uBQwEAAANCnBpeGVsQ29sb3IFDAQAAA4MdGV4dHVyZUNvbG9yBQwEAAAPDGNhbGN1bGF0ZWRVVgUKAwAAEAppc1JlbGF0aXZlAgIAAQAAAAAAEQVjb2xvcgUMAgAAEg9hYnNvbHV0ZU1hdHJpeEEFCwIAABMPYWJzb2x1dGVNYXRyaXhCBQsCAAAUDWZpbHRlck1hdHJpeEEFCwIAABUNZmlsdGVyTWF0cml4QgULAgAAFghoYXNVVlBvcwICAAEAAAAAABcFdXZQb3MFDAIAABgJa2lsbEFscGhhAgIAAQAAAAAAGQpwaXhlbEFsaWduAgIAAQAAAAAAGhBoYWxmUGl4ZWxJbnZlcnNlBQoCAAAbCXZpZXdwb3J0QQULAgAAHAl2aWV3cG9ydEIFCwIAAB0Ob3V0cHV0UG9zaXRpb24FDAQAAB4IX19pbml0X18OBgAAHwZ2ZXJ0ZXgOBgAAIAhmcmFnbWVudA4GAAADAh4AAAUGBgQCCwUMCQMqDgMCAgUKAgkDAQMAAAAAAADwPwMFDAUMCwIQAgUDBgQKAgwFDAAAAwkDHQ4CCQMpDgIKAgsFDBEABQoBAwAAAAAAAPA/AwULAhIFCwMDBgQKAgwFDAQAAwkDHQ4CCQMpDgIKAgsFDBEABQoBAwAAAAAAAPA/AwULAhMFCwMDBgQKAgwFDDkABQoKAgsFDDkABQoFCgAGBAIMBQwCCwUMBQwABgQCDwUKCwIWAgYABgECAwUKCgIXBQw5AAUKBQoKAhcFDBEABQoFCgIDBQoFCgUKBgQCDQUMCwIQAgYBAhEFDAIEBQwFDAIEBQwFDAUMBgQCDgUMCQMhDgICCgoCDwUKBQwFDAaBAg0FDAIOBQwFDAAAHwAABQUIIQN0bXAFCwQAAAkDKQ4CCgIMBQwRAAUKAQMAAAAAAADwPwMFCwAGBAIhBQsJAykOAwkDHQ4CAiEFCwIUBQsDCQMdDgICIQULAhUFCwMBAwAAAAAAAPA/AwULBQsGBAIdBQwJAyoOAwkDHQ4CAiEFCwIbBQsDCQMdDgICIQULAhwFCwMKAgwFDDkABQoFDAUMCwIZAgaDCgIdBQwRAAUKAhoFCgUKAAAGBAIGBQwCHQUMBQwAASAAAAUCCwYOAhgCBgkKAg0FDAwAAwED/Knx0k1iUD8DAgIMAAAABgQCBwUMAg0FDAUMAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<zValue public="1" get="accessor" set="accessor"><x path="Float"/></zValue>
		<zValue__ expr="0">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</zValue__>
		<get_zValue get="inline" set="null" line="174">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_zValue>
		<set_zValue get="inline" set="null" line="191">
			<f a="_v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_zValue>
		<texture public="1" get="accessor" set="accessor"><t path="hxsl.Sampler2D"/></texture>
		<texture__>
			<t path="hxsl.Sampler2D"/>
			<meta><m n=":noCompletion"/></meta>
		</texture__>
		<get_texture get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Sampler2D"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_texture>
		<set_texture get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Sampler2D"/>
				<t path="hxsl.Sampler2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_texture>
		<isRelative public="1" get="accessor" set="accessor"><x path="Bool"/></isRelative>
		<isRelative__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</isRelative__>
		<get_isRelative get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_isRelative>
		<set_isRelative get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_isRelative>
		<color public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></color>
		<color__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</color__>
		<get_color get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_color>
		<set_color get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_color>
		<absoluteMatrixA public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></absoluteMatrixA>
		<absoluteMatrixA__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</absoluteMatrixA__>
		<get_absoluteMatrixA get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_absoluteMatrixA>
		<set_absoluteMatrixA get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_absoluteMatrixA>
		<absoluteMatrixB public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></absoluteMatrixB>
		<absoluteMatrixB__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</absoluteMatrixB__>
		<get_absoluteMatrixB get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_absoluteMatrixB>
		<set_absoluteMatrixB get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_absoluteMatrixB>
		<filterMatrixA public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></filterMatrixA>
		<filterMatrixA__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</filterMatrixA__>
		<get_filterMatrixA get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_filterMatrixA>
		<set_filterMatrixA get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_filterMatrixA>
		<filterMatrixB public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></filterMatrixB>
		<filterMatrixB__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</filterMatrixB__>
		<get_filterMatrixB get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_filterMatrixB>
		<set_filterMatrixB get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_filterMatrixB>
		<hasUVPos public="1" get="accessor" set="accessor"><x path="Bool"/></hasUVPos>
		<hasUVPos__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</hasUVPos__>
		<get_hasUVPos get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_hasUVPos>
		<set_hasUVPos get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_hasUVPos>
		<uvPos public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></uvPos>
		<uvPos__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</uvPos__>
		<get_uvPos get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_uvPos>
		<set_uvPos get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_uvPos>
		<killAlpha public="1" get="accessor" set="accessor"><x path="Bool"/></killAlpha>
		<killAlpha__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</killAlpha__>
		<get_killAlpha get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_killAlpha>
		<set_killAlpha get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_killAlpha>
		<pixelAlign public="1" get="accessor" set="accessor"><x path="Bool"/></pixelAlign>
		<pixelAlign__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</pixelAlign__>
		<get_pixelAlign get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_pixelAlign>
		<set_pixelAlign get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_pixelAlign>
		<halfPixelInverse public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></halfPixelInverse>
		<halfPixelInverse__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</halfPixelInverse__>
		<get_halfPixelInverse get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_halfPixelInverse>
		<set_halfPixelInverse get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_halfPixelInverse>
		<viewportA public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></viewportA>
		<viewportA__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</viewportA__>
		<get_viewportA get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_viewportA>
		<set_viewportA get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_viewportA>
		<viewportB public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></viewportB>
		<viewportB__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</viewportB__>
		<get_viewportB get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_viewportB>
		<set_viewportB get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_viewportB>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="3"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e><![CDATA[{
	@input var input:{ var position : Vec2; var uv : Vec2; var color : Vec4};
	var output:{ var position : Vec4; var color : Vec4};
	@global var time:Float;
	@param var zValue:Float;
	@param var texture:Sampler2D;
	var spritePosition:Vec4;
	var absolutePosition:Vec4;
	var pixelColor:Vec4;
	var textureColor:Vec4;
	@var var calculatedUV:Vec2;
	@const var isRelative:Bool;
	@param var color:Vec4;
	@param var absoluteMatrixA:Vec3;
	@param var absoluteMatrixB:Vec3;
	@param var filterMatrixA:Vec3;
	@param var filterMatrixB:Vec3;
	@const var hasUVPos:Bool;
	@param var uvPos:Vec4;
	@const var killAlpha:Bool;
	@const var pixelAlign:Bool;
	@param var halfPixelInverse:Vec2;
	@param var viewportA:Vec3;
	@param var viewportB:Vec3;
	var outputPosition:Vec4;
	function __init__() {
		spritePosition = vec4(input.position, zValue, 1);
		if (isRelative) {
			absolutePosition.x = vec3(spritePosition.xy, 1).dot(absoluteMatrixA);
			absolutePosition.y = vec3(spritePosition.xy, 1).dot(absoluteMatrixB);
			absolutePosition.zw = spritePosition.zw;
		} else absolutePosition = spritePosition;
		calculatedUV = hasUVPos ? input.uv * uvPos.zw + uvPos.xy : input.uv;
		pixelColor = isRelative ? color * input.color : input.color;
		textureColor = texture.get(calculatedUV);
		pixelColor *= textureColor;
	};
	function vertex() {
		var tmp = vec3(absolutePosition.xy, 1);
		tmp = vec3(tmp.dot(filterMatrixA), tmp.dot(filterMatrixB), 1);
		outputPosition = vec4(tmp.dot(viewportA), tmp.dot(viewportB), absolutePosition.zw);
		if (pixelAlign) outputPosition.xy -= halfPixelInverse;
		output.position = outputPosition;
	};
	function fragment() {
		if (killAlpha && pixelColor.a < 0.001) discard;
		output.color = pixelColor;
	};
}]]></e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.BaseMesh" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/BaseMesh.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLE2gzZC5zaGFkZXIuQmFzZU1lc2gXAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQVjb2xvcgUMAgAAJg1zcGVjdWxhclBvd2VyAwIAAQcAAAAAAAAAAAAAAAAAAFlAJw5zcGVjdWxhckFtb3VudAMCAAEHAAAAAAAAAAAAAAAAAAAkQCgNc3BlY3VsYXJDb2xvcgULAgAAKQhfX2luaXRfXw4GAAAqEF9faW5pdF9fZnJhZ21lbnQOBgAAKwZ2ZXJ0ZXgOBgAALAhmcmFnbWVudA4GAAAEAikAAAULBgQCGgULAhIFCwULBgQCGwULBgECGgULCQM0DgECDwcIBQsFCwYEAh4FDAYBCQMqDgICGwULAQMAAAAAAADwPwMFDAIHBwUMBQwGBAIdBQsJAx8OAQQGAQITBQsJAzIOAQIPBwYFCwULBQsFCwYEAgsFCwkDHw4BBAYDAgQFCwIbBQsFCwULBQsFCwYEAh8FDAIlBQwFDAYEAiIDAiYDAwYEAiMFCwYBAigFCwInAwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCJAMGAgkDGw4BBgMCGwULAgQFCwULAwIKAwMDAAIqAAAFBQYEAh0FCwkDHw4BAh0FCwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCIgMCJgMDBgQCIwULBgECKAULAicDBQsFCwAAKwAABQIGBAIVBQwGAQIeBQwJAyoOBAEDAAAAAAAA8D8DAgUDAQMAAAAAAADwPwMBAwAAAAAAAPA/AwUMBQwFDAYEAhwFCwIbBQsFCwABLAAABQQGBAIWBQwCHwUMBQwGBAIXAwIgAwMGBAIYBQsCHQULBQsGBAIZAwIkAwMA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLE2gzZC5zaGFkZXIuQmFzZU1lc2gXAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQVjb2xvcgUMAgAAJg1zcGVjdWxhclBvd2VyAwIAAQcAAAAAAAAAAAAAAAAAAFlAJw5zcGVjdWxhckFtb3VudAMCAAEHAAAAAAAAAAAAAAAAAAAkQCgNc3BlY3VsYXJDb2xvcgULAgAAKQhfX2luaXRfXw4GAAAqEF9faW5pdF9fZnJhZ21lbnQOBgAAKwZ2ZXJ0ZXgOBgAALAhmcmFnbWVudA4GAAAEAikAAAULBgQCGgULAhIFCwULBgQCGwULBgECGgULCQM0DgECDwcIBQsFCwYEAh4FDAYBCQMqDgICGwULAQMAAAAAAADwPwMFDAIHBwUMBQwGBAIdBQsJAx8OAQQGAQITBQsJAzIOAQIPBwYFCwULBQsFCwYEAgsFCwkDHw4BBAYDAgQFCwIbBQsFCwULBQsFCwYEAh8FDAIlBQwFDAYEAiIDAiYDAwYEAiMFCwYBAigFCwInAwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCJAMGAgkDGw4BBgMCGwULAgQFCwULAwIKAwMDAAIqAAAFBQYEAh0FCwkDHw4BAh0FCwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCIgMCJgMDBgQCIwULBgECKAULAicDBQsFCwAAKwAABQIGBAIVBQwGAQIeBQwJAyoOBAEDAAAAAAAA8D8DAgUDAQMAAAAAAADwPwMBAwAAAAAAAPA/AwUMBQwFDAYEAhwFCwIbBQsFCwABLAAABQQGBAIWBQwCHwUMBQwGBAIXAwIgAwMGBAIYBQsCHQULBQsGBAIZAwIkAwMA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<color public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></color>
		<color__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</color__>
		<get_color get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_color>
		<set_color get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_color>
		<specularPower public="1" get="accessor" set="accessor"><x path="Float"/></specularPower>
		<specularPower__ expr="0">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</specularPower__>
		<get_specularPower get="inline" set="null" line="174">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_specularPower>
		<set_specularPower get="inline" set="null" line="191">
			<f a="_v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_specularPower>
		<specularAmount public="1" get="accessor" set="accessor"><x path="Float"/></specularAmount>
		<specularAmount__ expr="0">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</specularAmount__>
		<get_specularAmount get="inline" set="null" line="174">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_specularAmount>
		<set_specularAmount get="inline" set="null" line="191">
			<f a="_v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_specularAmount>
		<specularColor public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></specularColor>
		<specularColor__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</specularColor__>
		<get_specularColor get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_specularColor>
		<set_specularColor get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_specularColor>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="95"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@global var camera:{ var view : Mat4; var proj : Mat4; var position : Vec3; var projFlip : Float; var projDiag : Vec3; var viewProj : Mat4; var inverseViewProj : Mat4; var zNear : Float; var zFar : Float; @var
	var dir : Vec3};
	@global var global:{ var time : Float; var pixelSize : Vec2; @perObject
	var modelView : Mat4; @perObject
	var modelViewInverse : Mat4};
	@input var input:{ var position : Vec3; var normal : Vec3};
	var output:{ var position : Vec4; var color : Vec4; var depth : Float; var normal : Vec3; var worldDist : Float};
	var relativePosition:Vec3;
	var transformedPosition:Vec3;
	var pixelTransformedPosition:Vec3;
	var transformedNormal:Vec3;
	var projectedPosition:Vec4;
	var pixelColor:Vec4;
	var depth:Float;
	var screenUV:Vec2;
	var specPower:Float;
	var specColor:Vec3;
	var worldDist:Float;
	@param var color:Vec4;
	@range(0, 100) @param var specularPower:Float;
	@range(0, 10) @param var specularAmount:Float;
	@param var specularColor:Vec3;
	function __init__() {
		relativePosition = input.position;
		transformedPosition = relativePosition * global.modelView.mat3x4();
		projectedPosition = vec4(transformedPosition, 1) * camera.viewProj;
		transformedNormal = (input.normal * global.modelView.mat3()).normalize();
		camera.dir = (camera.position - transformedPosition).normalize();
		pixelColor = color;
		specPower = specularPower;
		specColor = specularColor * specularAmount;
		screenUV = screenToUv(projectedPosition.xy / projectedPosition.w);
		depth = projectedPosition.z / projectedPosition.w;
		worldDist = length(transformedPosition - camera.position) / camera.zFar;
	};
	function __init__fragment() {
		transformedNormal = transformedNormal.normalize();
		screenUV = screenToUv(projectedPosition.xy / projectedPosition.w);
		depth = projectedPosition.z / projectedPosition.w;
		specPower = specularPower;
		specColor = specularColor * specularAmount;
	};
	function vertex() {
		output.position = projectedPosition * vec4(1, camera.projFlip, 1, 1);
		pixelTransformedPosition = transformedPosition;
	};
	function fragment() {
		output.color = pixelColor;
		output.depth = depth;
		output.normal = transformedNormal;
		output.worldDist = worldDist;
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.Blur" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/Blur.hx">
		<extends path="h3d.shader.ScreenShader"/>
		<SRC expr="&quot;HXSLD2gzZC5zaGFkZXIuQmx1choBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoVY2FtZXJhSW52ZXJzZVZpZXdQcm9qBwIAAAsHdGV4dHVyZQoCAAAMDGRlcHRoVGV4dHVyZQoCAAANB1F1YWxpdHkBAgABAAAAAAAOB2lzRGVwdGgCAgABAAAAAAAPBnZhbHVlcw8DDQIAABAHb2Zmc2V0cw8DDQIAABEFcGl4ZWwFCgIAABINaGFzRml4ZWRDb2xvcgICAAEAAAAAABMQc21vb3RoRml4ZWRDb2xvcgICAAEAAAAAABQKZml4ZWRDb2xvcgUMAgAAFRBpc0RlcHRoRGVwZW5kYW50AgIAAQAAAAAAFgloYXNOb3JtYWwCAgABAAAAAAAXDW5vcm1hbFRleHR1cmUKAgAAGAZpc0N1YmUCAgABAAAAAAAZC2N1YmVUZXh0dXJlDAIAABoHY3ViZURpcgYCAAAbCF9faW5pdF9fDgYAABwGdmVydGV4DgYAAB0IZnJhZ21lbnQOBgAAHgtnZXRQb3NpdGlvbg4GAAAEAhsAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAcAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEdAAAFAgsCFQIFBggfBHBjdXIFCwQAAAkCHg4BAgMFCgULAAggBGNjdXIFDAQAAAkDIQ4CAgsKAgMFCgUMAAghBWNvbG9yBQwEAAAJAyoOBAEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwACCIEbmN1cgULBAAACQM5DgEJAyEOAgIXCgIDBQoFDAULABUGdW5yb2xsAA4jAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUICCQCdXYFCgQAAAYAAgMFCgYBAhEFChECEA8DDQsGCQIjAQECAAAAAAECBwMCIwEBAiMBAQMFCgUKAAglAWMFDAQAAAkDIQ4CAgsKAiQFCgUMAAgmAXAFCwQAAAkCHg4BAiQFCgULAAgnAWQDBAAACQMdDgIEBgMCJgULAh8FCwULBQsGAwImBQsCHwULBQsDAAgoAW4FCwQAAAkDOQ4BCQMhDgICFwoCJAUKBQwFCwAGBAIlBQwJAxgOAwIgBQwCJQUMCQMdDgICIgULAigFCwMFDAUMBgQCJQUMCQMYDgMCJQUMAiAFDAkDFQ4CBAYBCQMWDgIEBgMCJwMBA/yp8dJNYlA/AwMDAQMAAAAAAAAAAAMDAQMAAAAAAGr4QAMDAwEDAAAAAAAA8D8DAwUMBQwGgAIhBQwGAQIlBQwRAg8PAw0LBgkCIwEBAgAAAAABAgcDAiMBAQIjAQEDBQwFDAAAAAYEAggFDAIhBQwFDAALAg4CBQMIKQN2YWwDBAAAAQMAAAAAAAAAAAMAFQZ1bnJvbGwADioBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACKQMGAQkDNw4BCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwDEQIPDwMNCwYJAioBAQIAAAAAAQIHAwIqAQECKgEBAwMDBoACKQMGAQkDNw4BCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFDAMRAg8PAw0LBgkCKgEBAgAAAAABAgcDAioBAQIqAQEDAwMAAAAABgQCCAUMCQM2DgEJAxUOAgIpAwEDyxpQyv//7z8DAwUMBQwABQMIKwVjb2xvcgUMBAAACQMqDgQBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMABUGdW5yb2xsAA4sAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUBCwIYAgaAAisFDAYBCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwRAg8PAw0LBgkCLAEBAgAAAAABAgcDAiwBAQIsAQEDBQwFDAaAAisFDAYBCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFDBECDw8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFDAUMAAAAAAYEAggFDAIrBQwFDAAAAAsCEgIFAgsCEwIGgQoCCAUMDAADCgIUBQwMAAMDBgQKAggFDAwAAwYBCgIUBQwMAAMJAyYOAQYHCgIIBQwMAAMBAwAAAAAAAAAAAwIDAwMABgQKAggFDJIABQsGAQoCFAUMkgAFCwoCCAUMDAADBQsFCwAAAAADHgEtAnV2BQoEAAAFCwUECC4FZGVwdGgDBAAACQM3DgEJAyEOAgIMCgItBQoFDAMACC8EdGVtcAUMBAAABgEJAyoOAwkDOw4BAi0FCgUKAi4DAQMAAAAAAADwPwMFDAIKBwUMAAgwCG9yaWdpbldTBQsEAAAGAgoCLwUMkgAFCwoCLwUMDAADBQsADQIwBQsAAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLD2gzZC5zaGFkZXIuQmx1choBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoVY2FtZXJhSW52ZXJzZVZpZXdQcm9qBwIAAAsHdGV4dHVyZQoCAAAMDGRlcHRoVGV4dHVyZQoCAAANB1F1YWxpdHkBAgABAAAAAAAOB2lzRGVwdGgCAgABAAAAAAAPBnZhbHVlcw8DDQIAABAHb2Zmc2V0cw8DDQIAABEFcGl4ZWwFCgIAABINaGFzRml4ZWRDb2xvcgICAAEAAAAAABMQc21vb3RoRml4ZWRDb2xvcgICAAEAAAAAABQKZml4ZWRDb2xvcgUMAgAAFRBpc0RlcHRoRGVwZW5kYW50AgIAAQAAAAAAFgloYXNOb3JtYWwCAgABAAAAAAAXDW5vcm1hbFRleHR1cmUKAgAAGAZpc0N1YmUCAgABAAAAAAAZC2N1YmVUZXh0dXJlDAIAABoHY3ViZURpcgYCAAAbCF9faW5pdF9fDgYAABwGdmVydGV4DgYAAB0IZnJhZ21lbnQOBgAAHgtnZXRQb3NpdGlvbg4GAAAEAhsAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAcAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEdAAAFAgsCFQIFBggfBHBjdXIFCwQAAAkCHg4BAgMFCgULAAggBGNjdXIFDAQAAAkDIQ4CAgsKAgMFCgUMAAghBWNvbG9yBQwEAAAJAyoOBAEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwACCIEbmN1cgULBAAACQM5DgEJAyEOAgIXCgIDBQoFDAULABUGdW5yb2xsAA4jAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUICCQCdXYFCgQAAAYAAgMFCgYBAhEFChECEA8DDQsGCQIjAQECAAAAAAECBwMCIwEBAiMBAQMFCgUKAAglAWMFDAQAAAkDIQ4CAgsKAiQFCgUMAAgmAXAFCwQAAAkCHg4BAiQFCgULAAgnAWQDBAAACQMdDgIEBgMCJgULAh8FCwULBQsGAwImBQsCHwULBQsDAAgoAW4FCwQAAAkDOQ4BCQMhDgICFwoCJAUKBQwFCwAGBAIlBQwJAxgOAwIgBQwCJQUMCQMdDgICIgULAigFCwMFDAUMBgQCJQUMCQMYDgMCJQUMAiAFDAkDFQ4CBAYBCQMWDgIEBgMCJwMBA/yp8dJNYlA/AwMDAQMAAAAAAAAAAAMDAQMAAAAAAGr4QAMDAwEDAAAAAAAA8D8DAwUMBQwGgAIhBQwGAQIlBQwRAg8PAw0LBgkCIwEBAgAAAAABAgcDAiMBAQIjAQEDBQwFDAAAAAYEAggFDAIhBQwFDAALAg4CBQMIKQN2YWwDBAAAAQMAAAAAAAAAAAMAFQZ1bnJvbGwADioBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACKQMGAQkDNw4BCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwDEQIPDwMNCwYJAioBAQIAAAAAAQIHAwIqAQECKgEBAwMDBoACKQMGAQkDNw4BCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFDAMRAg8PAw0LBgkCKgEBAgAAAAABAgcDAioBAQIqAQEDAwMAAAAABgQCCAUMCQM2DgEJAxUOAgIpAwEDyxpQyv//7z8DAwUMBQwABQMIKwVjb2xvcgUMBAAACQMqDgQBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMABUGdW5yb2xsAA4sAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUBCwIYAgaAAisFDAYBCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwRAg8PAw0LBgkCLAEBAgAAAAABAgcDAiwBAQIsAQEDBQwFDAaAAisFDAYBCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFDBECDw8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFDAUMAAAAAAYEAggFDAIrBQwFDAAAAAsCEgIFAgsCEwIGgQoCCAUMDAADCgIUBQwMAAMDBgQKAggFDAwAAwYBCgIUBQwMAAMJAyYOAQYHCgIIBQwMAAMBAwAAAAAAAAAAAwIDAwMABgQKAggFDJIABQsGAQoCFAUMkgAFCwoCCAUMDAADBQsFCwAAAAADHgEtAnV2BQoEAAAFCwUECC4FZGVwdGgDBAAACQM3DgEJAyEOAgIMCgItBQoFDAMACC8EdGVtcAUMBAAABgEJAyoOAwkDOw4BAi0FCgUKAi4DAQMAAAAAAADwPwMFDAIKBwUMAAgwCG9yaWdpbldTBQsEAAAGAgoCLwUMkgAFCwoCLwUMDAADBQsADQIwBQsAAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<cameraInverseViewProj public="1" get="accessor" set="accessor"><t path="hxsl.Matrix"/></cameraInverseViewProj>
		<cameraInverseViewProj__ expr="new hxsl.Types.Matrix()">
			<t path="hxsl.Matrix"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Matrix()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</cameraInverseViewProj__>
		<get_cameraInverseViewProj get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Matrix"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_cameraInverseViewProj>
		<set_cameraInverseViewProj get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Matrix"/>
				<t path="hxsl.Matrix"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_cameraInverseViewProj>
		<texture public="1" get="accessor" set="accessor"><t path="hxsl.Sampler2D"/></texture>
		<texture__>
			<t path="hxsl.Sampler2D"/>
			<meta><m n=":noCompletion"/></meta>
		</texture__>
		<get_texture get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Sampler2D"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_texture>
		<set_texture get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Sampler2D"/>
				<t path="hxsl.Sampler2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_texture>
		<depthTexture public="1" get="accessor" set="accessor"><t path="hxsl.Sampler2D"/></depthTexture>
		<depthTexture__>
			<t path="hxsl.Sampler2D"/>
			<meta><m n=":noCompletion"/></meta>
		</depthTexture__>
		<get_depthTexture get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Sampler2D"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_depthTexture>
		<set_depthTexture get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Sampler2D"/>
				<t path="hxsl.Sampler2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_depthTexture>
		<Quality public="1" get="accessor" set="accessor"><x path="Int"/></Quality>
		<Quality__ expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</Quality__>
		<get_Quality get="inline" set="null" line="174">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_Quality>
		<set_Quality get="inline" set="null" line="193">
			<f a="_v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_Quality>
		<isDepth public="1" get="accessor" set="accessor"><x path="Bool"/></isDepth>
		<isDepth__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</isDepth__>
		<get_isDepth get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_isDepth>
		<set_isDepth get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_isDepth>
		<values public="1" get="accessor" set="accessor"><c path="Array"><x path="Float"/></c></values>
		<values__ expr="new Array()">
			<c path="Array"><x path="Float"/></c>
			<meta>
				<m n=":value"><e>new Array()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</values__>
		<get_values get="inline" set="null" line="174">
			<f a=""><c path="Array"><x path="Float"/></c></f>
			<meta><m n=":noCompletion"/></meta>
		</get_values>
		<set_values get="inline" set="null" line="191">
			<f a="_v">
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_values>
		<offsets public="1" get="accessor" set="accessor"><c path="Array"><x path="Float"/></c></offsets>
		<offsets__ expr="new Array()">
			<c path="Array"><x path="Float"/></c>
			<meta>
				<m n=":value"><e>new Array()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</offsets__>
		<get_offsets get="inline" set="null" line="174">
			<f a=""><c path="Array"><x path="Float"/></c></f>
			<meta><m n=":noCompletion"/></meta>
		</get_offsets>
		<set_offsets get="inline" set="null" line="191">
			<f a="_v">
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_offsets>
		<pixel public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></pixel>
		<pixel__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</pixel__>
		<get_pixel get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_pixel>
		<set_pixel get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_pixel>
		<hasFixedColor public="1" get="accessor" set="accessor"><x path="Bool"/></hasFixedColor>
		<hasFixedColor__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</hasFixedColor__>
		<get_hasFixedColor get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_hasFixedColor>
		<set_hasFixedColor get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_hasFixedColor>
		<smoothFixedColor public="1" get="accessor" set="accessor"><x path="Bool"/></smoothFixedColor>
		<smoothFixedColor__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</smoothFixedColor__>
		<get_smoothFixedColor get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_smoothFixedColor>
		<set_smoothFixedColor get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_smoothFixedColor>
		<fixedColor public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></fixedColor>
		<fixedColor__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</fixedColor__>
		<get_fixedColor get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_fixedColor>
		<set_fixedColor get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_fixedColor>
		<isDepthDependant public="1" get="accessor" set="accessor"><x path="Bool"/></isDepthDependant>
		<isDepthDependant__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</isDepthDependant__>
		<get_isDepthDependant get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_isDepthDependant>
		<set_isDepthDependant get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_isDepthDependant>
		<hasNormal public="1" get="accessor" set="accessor"><x path="Bool"/></hasNormal>
		<hasNormal__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</hasNormal__>
		<get_hasNormal get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_hasNormal>
		<set_hasNormal get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_hasNormal>
		<normalTexture public="1" get="accessor" set="accessor"><t path="hxsl.Sampler2D"/></normalTexture>
		<normalTexture__>
			<t path="hxsl.Sampler2D"/>
			<meta><m n=":noCompletion"/></meta>
		</normalTexture__>
		<get_normalTexture get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Sampler2D"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_normalTexture>
		<set_normalTexture get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Sampler2D"/>
				<t path="hxsl.Sampler2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_normalTexture>
		<isCube public="1" get="accessor" set="accessor"><x path="Bool"/></isCube>
		<isCube__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</isCube__>
		<get_isCube get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_isCube>
		<set_isCube get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_isCube>
		<cubeTexture public="1" get="accessor" set="accessor"><t path="hxsl.SamplerCube"/></cubeTexture>
		<cubeTexture__>
			<t path="hxsl.SamplerCube"/>
			<meta><m n=":noCompletion"/></meta>
		</cubeTexture__>
		<get_cubeTexture get="inline" set="null" line="174">
			<f a=""><t path="hxsl.SamplerCube"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_cubeTexture>
		<set_cubeTexture get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.SamplerCube"/>
				<t path="hxsl.SamplerCube"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_cubeTexture>
		<cubeDir public="1" get="accessor" set="accessor"><t path="hxsl.Matrix"/></cubeDir>
		<cubeDir__ expr="new hxsl.Types.Matrix()">
			<t path="hxsl.Matrix"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Matrix()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</cubeDir__>
		<get_cubeDir get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Matrix"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_cubeDir>
		<set_cubeDir get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Matrix"/>
				<t path="hxsl.Matrix"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_cubeDir>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="3"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e><![CDATA[{
	@param var cameraInverseViewProj:Mat4;
	@param var texture:Sampler2D;
	@param var depthTexture:Sampler2D;
	@param @const var Quality:Int;
	@param @const var isDepth:Bool;
	@param var values:Array<Float,Quality>;
	@param var offsets:Array<Float,Quality>;
	@param var pixel:Vec2;
	@const var hasFixedColor:Bool;
	@const var smoothFixedColor:Bool;
	@param var fixedColor:Vec4;
	@param @const var isDepthDependant:Bool;
	@param @const var hasNormal:Bool;
	@param var normalTexture:Sampler2D;
	@param @const var isCube:Bool;
	@param var cubeTexture:SamplerCube;
	@param var cubeDir:Mat3;
	function fragment() {
		if (isDepthDependant) {
			var pcur = getPosition(input.uv);
			var ccur = texture.get(input.uv);
			var color = vec4(0, 0, 0, 0);
			var ncur = unpackNormal(normalTexture.get(input.uv));
			@unroll for (i  in  -Quality + 1 ... Quality) {
				var uv = input.uv + pixel * offsets[i < 0 ? -i : i];
				var c = texture.get(uv);
				var p = getPosition(uv);
				var d = (p - pcur).dot(p - pcur);
				var n = unpackNormal(normalTexture.get(uv));
				c = mix(ccur, c, ncur.dot(n));
				c = mix(c, ccur, ((d - 0.001).max(0.) * 100000).min(1.));
				color += c * values[i < 0 ? -i : i];
			};
			pixelColor = color;
		} else if (isDepth) {
			var val = 0.;
			@unroll for (i  in  -Quality + 1 ... Quality) {
				if (isCube) val += unpack(cubeTexture.get(vec3((input.uv + pixel * offsets[i < 0 ? -i : i] * i) * 2.0 - 1.0, 1) * cubeDir)) * values[i < 0 ? -i : i] else val += unpack(texture.get(input.uv + pixel * offsets[i < 0 ? -i : i] * i)) * values[i < 0 ? -i : i];
			};
			pixelColor = pack(val.min(0.9999999));
		} else {
			var color = vec4(0, 0, 0, 0);
			@unroll for (i  in  -Quality + 1 ... Quality) {
				if (isCube) color += cubeTexture.get(vec3((input.uv + pixel * offsets[i < 0 ? -i : i] * i) * 2.0 - 1.0, 1) * cubeDir) * values[i < 0 ? -i : i] else color += texture.get(input.uv + pixel * offsets[i < 0 ? -i : i] * i) * values[i < 0 ? -i : i];
			};
			pixelColor = color;
		};
		if (hasFixedColor) {
			if (smoothFixedColor) pixelColor.a *= fixedColor.a else pixelColor.a = fixedColor.a * float(pixelColor.a > 0);
			pixelColor.rgb = fixedColor.rgb * pixelColor.a;
		};
	};
	function getPosition(uv:Vec2):Vec3 {
		var depth = unpack(depthTexture.get(uv));
		var temp = vec4(uvToScreen(uv), depth, 1) * cameraInverseViewProj;
		var originWS = temp.xyz / temp.w;
		return originWS;
	};
}]]></e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<abstract path="h3d.shader.BufferKind" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/Buffers.hx" module="h3d.shader.Buffers">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="h3d.shader._Buffers.BufferKind_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/Buffers.hx" private="1" module="h3d.shader.Buffers" extern="1" final="1">
	<Globals public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="h3d.shader.BufferKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Globals>
	<Params public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="h3d.shader.BufferKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Params>
	<Textures public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="h3d.shader.BufferKind"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Textures>
	<Buffers public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
		<x path="h3d.shader.BufferKind"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Buffers>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="h3d.shader._Buffers.BufferKind_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/Buffers.hx" private="1" module="h3d.shader.Buffers" extern="1" final="1">
		<Globals public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="h3d.shader.BufferKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Globals>
		<Params public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="h3d.shader.BufferKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Params>
		<Textures public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="h3d.shader.BufferKind"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Textures>
		<Buffers public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
			<x path="h3d.shader.BufferKind"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Buffers>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="h3d.shader.ShaderBufferData" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/Buffers.hx" module="h3d.shader.Buffers"><t path="hxd.impl.Float32Array"/></typedef>
	<class path="h3d.shader.ShaderBuffers" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/Buffers.hx" module="h3d.shader.Buffers">
		<globals public="1"><t path="h3d.shader.ShaderBufferData"/></globals>
		<params public="1"><t path="h3d.shader.ShaderBufferData"/></params>
		<tex public="1"><x path="haxe.ds.Vector"><c path="h3d.mat.Texture"/></x></tex>
		<buffers public="1"><x path="haxe.ds.Vector"><c path="h3d.Buffer"/></x></buffers>
		<grow public="1" set="method" line="26"><f a="s">
	<c path="hxsl.RuntimeShaderData"/>
	<x path="Void"/>
</f></grow>
		<new public="1" set="method" line="19"><f a="s">
	<c path="hxsl.RuntimeShaderData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.shader.Buffers" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/Buffers.hx">
		<vertex public="1"><c path="h3d.shader.ShaderBuffers"/></vertex>
		<fragment public="1"><c path="h3d.shader.ShaderBuffers"/></fragment>
		<grow public="1" get="inline" set="null" line="49"><f a="s">
	<c path="hxsl.RuntimeShader"/>
	<x path="Void"/>
</f></grow>
		<new public="1" set="method" line="44"><f a="s">
	<c path="hxsl.RuntimeShader"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="h3d.shader.ColorAdd" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/ColorAdd.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLE2gzZC5zaGFkZXIuQ29sb3JBZGQDAQpwaXhlbENvbG9yBQwEAAACBWNvbG9yBQsCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGgAoCAQUMkgAFCwICBQsFCwA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLE2gzZC5zaGFkZXIuQ29sb3JBZGQDAQpwaXhlbENvbG9yBQwEAAACBWNvbG9yBQsCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGgAoCAQUMkgAFCwICBQsFCwA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<color public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></color>
		<color__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</color__>
		<get_color get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_color>
		<set_color get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_color>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="16">
			<f a="?color" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	var pixelColor:Vec4;
	@param var color:Vec3;
	function fragment() {
		pixelColor.rgb += color;
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.ColorKey" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/ColorKey.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLE2gzZC5zaGFkZXIuQ29sb3JLZXkDAQhjb2xvcktleQUMAgAAAgx0ZXh0dXJlQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAggEBWNkaWZmBQwEAAAGAwICBQwCAQUMBQwACwYJCQMdDgICBAUMAgQFDAMBA/Fo44i1+OQ+AwIMAAAAAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLE2gzZC5zaGFkZXIuQ29sb3JLZXkDAQhjb2xvcktleQUMAgAAAgx0ZXh0dXJlQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAggEBWNkaWZmBQwEAAAGAwICBQwCAQUMBQwACwYJCQMdDgICBAUMAgQFDAMBA/Fo44i1+OQ+AwIMAAAAAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<colorKey public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></colorKey>
		<colorKey__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</colorKey__>
		<get_colorKey get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_colorKey>
		<set_colorKey get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_colorKey>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="15">
			<f a="?v" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ v : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e><![CDATA[{
	@param var colorKey:Vec4;
	var textureColor:Vec4;
	function fragment() {
		var cdiff = textureColor - colorKey;
		if (cdiff.dot(cdiff) < 0.00001) discard;
	};
}]]></e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.ColorMatrix" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/ColorMatrix.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLFmgzZC5zaGFkZXIuQ29sb3JNYXRyaXgDAQpwaXhlbENvbG9yBQwEAAACBm1hdHJpeAcCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGBAIBBQwJAyoOAgoEBgEJAyoOAgoCAQUMkgAFCwEDAAAAAAAA8D8DBQwCAgcFDAUMkgAFCwoEBgECAQUMAgIHBQwFDAwAAwUMBQwA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLFmgzZC5zaGFkZXIuQ29sb3JNYXRyaXgDAQpwaXhlbENvbG9yBQwEAAACBm1hdHJpeAcCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGBAIBBQwJAyoOAgoEBgEJAyoOAgoCAQUMkgAFCwEDAAAAAAAA8D8DBQwCAgcFDAUMkgAFCwoEBgECAQUMAgIHBQwFDAwAAwUMBQwA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<matrix public="1" get="accessor" set="accessor"><t path="hxsl.Matrix"/></matrix>
		<matrix__ expr="new hxsl.Types.Matrix()">
			<t path="hxsl.Matrix"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Matrix()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</matrix__>
		<get_matrix get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Matrix"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_matrix>
		<set_matrix get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Matrix"/>
				<t path="hxsl.Matrix"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_matrix>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="16"><f a="?m">
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	var pixelColor:Vec4;
	@param var matrix:Mat4;
	function fragment() {
		pixelColor = vec4((vec4(pixelColor.rgb, 1.) * matrix).rgb, (pixelColor * matrix).a);
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.DirShadow" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/DirShadow.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLFGgzZC5zaGFkZXIuRGlyU2hhZG93EgEGZW5hYmxlAgIAAQAAAAAAAgdVU0VfRVNNAgIAAQAAAAAAAwtzaGFkb3dQb3dlcgMCAAAEB1VTRV9QQ0YCAgABAAAAAAAFCnBjZlF1YWxpdHkBAgABAAAAAAAGCHBjZlNjYWxlAwIAAAcJc2hhZG93UmVzBQoCAAAICXNoYWRvd01hcBEBAgAACQpzaGFkb3dQcm9qCAIAAAoKc2hhZG93QmlhcwMCAAALE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAwGc2hhZG93AwQAAA0JZGlyU2hhZG93AwQAAA4OcG9pc3NvbkRpc2tMb3cPBQwABAIAAA8PcG9pc3NvbkRpc2tIaWdoDwUMAAwCAAAQE3BvaXNzb25EaXNrVmVyeUhpZ2gPBQwAQAIAABEEcmFuZA4GAAASCGZyYWdtZW50DgYAAAIDEQETAXYDBAAAAwUCCBQCZHADBAAACQMdDgIJAyoOAQITAwUMCQMqDgQBA18pyxDH+ilAAwED9P3UeOmOU0ADAQOiRbbz/ZRGQAMBA1CNl24Sq1dAAwUMAwANCQMTDgEGAQkDAg4BAhQDAwEDUPwYc9Fd5UADAwMAAAESAAAFAgsCAQIFAQsCBAIFBwYEAgwDAQMAAAAAAADwPwMDCBUJdGV4ZWxTaXplBQoEAAAGAgEDAAAAAAAA8D8DAgcFCgUKAAgWCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACBcIc2hhZG93VXYFCgQAAAkDOg4BCgIWBQsRAAUKBQoACBgEek1heAMEAAAJAzUOAQoCFgULCAADAwAIGQNyb3QDBAAABgEGAQkCEQ4BBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwEDH4XrUbgeCUADAwEDAAAAAAAAAEADAwATBAIFAQEDAQECAQAAAAEFAggaDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAABBAAwMADhsBaQEEAAAGFQECAAAAAAEBAgQAAAABDwEAAAUECBwGb2Zmc2V0BQoEAAAGAQYBChECDg8FDAAEAhsBBQwRAAUKAhUFCgUKAgYDBQoABgQCHAUKCQMoDgIGAwYBCQMDDgECGQMDCgIcBQoAAAMDBgEJAwIOAQIZAwMKAhwFCgQAAwMDBgAGAQkDAw4BAhkDAwoCHAUKBAADAwYBCQMCDgECGQMDCgIcBQoAAAMDAwUKBQoIHQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCHAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAh0DAgaDAgwDAhoDAwAAAAAAAQECAgAAAAEFAggeDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAAChAAwMADh8BaQEEAAAGFQECAAAAAAEBAgwAAAABDwEAAAUECCAGb2Zmc2V0BQoEAAAGAQYBChECDw8FDAAMAh8BBQwRAAUKAhUFCgUKAgYDBQoABgQCIAUKCQMoDgIGAwYBCQMDDgECGQMDCgIgBQoAAAMDBgEJAwIOAQIZAwMKAiAFCgQAAwMDBgAGAQkDAw4BAhkDAwoCIAUKBAADAwYBCQMCDgECGQMDCgIgBQoAAAMDAwUKBQoIIQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCIAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAiEDAgaDAgwDAh4DAwAAAAAAAQECAwAAAAEFAggiDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAAFBAAwMADiMBaQEEAAAGFQECAAAAAAEBAkAAAAABDwEAAAUECCQGb2Zmc2V0BQoEAAAGAQYBChECEA8FDABAAiMBBQwRAAUKAhUFCgUKAgYDBQoABgQCJAUKCQMoDgIGAwYBCQMDDgECGQMDCgIkBQoAAAMDBgEJAwIOAQIZAwMKAiQFCgQAAwMDBgAGAQkDAw4BAhkDAwoCJAUKBAADAwYBCQMCDgECGQMDCgIkBQoAAAMDAwUKBQoIJQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCJAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAiUDAgaDAgwDAiIDAwAAAAAAAAAACwICAgUFCCYJc2hhZG93UG9zBQsEAAAGAQILBQsCCQgFCwAIJwVkZXB0aAMEAAAJAz8OAgIIEQEJAzoOAQoCJgULEQAFCgUKAwAIKAR6TWF4AwQAAAkDNQ4BCgImBQsIAAMDAAgpBWRlbHRhAwQAAAYDCQMVDgIEBgACJwMCCgMDAwIoAwMCKAMDAAYEAgwDCQM1DgEJAwkOAQYBAgMDAikDAwMDAwAFBAgqCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACCsIc2hhZG93VXYFCgQAAAkDOg4BCgIqBQsRAAUKBQoACCwFZGVwdGgDBAAACQM/DgICCBEBCgIrBQoRAAUKAwAGBAIMAwsGBwYDCgIqBQsIAAMCCgMDAiwDAgEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwAAAAAAAAYEAg0DAgwDAwA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLFGgzZC5zaGFkZXIuRGlyU2hhZG93EgEGZW5hYmxlAgIAAQAAAAAAAgdVU0VfRVNNAgIAAQAAAAAAAwtzaGFkb3dQb3dlcgMCAAAEB1VTRV9QQ0YCAgABAAAAAAAFCnBjZlF1YWxpdHkBAgABAAAAAAAGCHBjZlNjYWxlAwIAAAcJc2hhZG93UmVzBQoCAAAICXNoYWRvd01hcBEBAgAACQpzaGFkb3dQcm9qCAIAAAoKc2hhZG93QmlhcwMCAAALE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAwGc2hhZG93AwQAAA0JZGlyU2hhZG93AwQAAA4OcG9pc3NvbkRpc2tMb3cPBQwABAIAAA8PcG9pc3NvbkRpc2tIaWdoDwUMAAwCAAAQE3BvaXNzb25EaXNrVmVyeUhpZ2gPBQwAQAIAABEEcmFuZA4GAAASCGZyYWdtZW50DgYAAAIDEQETAXYDBAAAAwUCCBQCZHADBAAACQMdDgIJAyoOAQITAwUMCQMqDgQBA18pyxDH+ilAAwED9P3UeOmOU0ADAQOiRbbz/ZRGQAMBA1CNl24Sq1dAAwUMAwANCQMTDgEGAQkDAg4BAhQDAwEDUPwYc9Fd5UADAwMAAAESAAAFAgsCAQIFAQsCBAIFBwYEAgwDAQMAAAAAAADwPwMDCBUJdGV4ZWxTaXplBQoEAAAGAgEDAAAAAAAA8D8DAgcFCgUKAAgWCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACBcIc2hhZG93VXYFCgQAAAkDOg4BCgIWBQsRAAUKBQoACBgEek1heAMEAAAJAzUOAQoCFgULCAADAwAIGQNyb3QDBAAABgEGAQkCEQ4BBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwEDH4XrUbgeCUADAwEDAAAAAAAAAEADAwATBAIFAQEDAQECAQAAAAEFAggaDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAABBAAwMADhsBaQEEAAAGFQECAAAAAAEBAgQAAAABDwEAAAUECBwGb2Zmc2V0BQoEAAAGAQYBChECDg8FDAAEAhsBBQwRAAUKAhUFCgUKAgYDBQoABgQCHAUKCQMoDgIGAwYBCQMDDgECGQMDCgIcBQoAAAMDBgEJAwIOAQIZAwMKAhwFCgQAAwMDBgAGAQkDAw4BAhkDAwoCHAUKBAADAwYBCQMCDgECGQMDCgIcBQoAAAMDAwUKBQoIHQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCHAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAh0DAgaDAgwDAhoDAwAAAAAAAQECAgAAAAEFAggeDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAAChAAwMADh8BaQEEAAAGFQECAAAAAAEBAgwAAAABDwEAAAUECCAGb2Zmc2V0BQoEAAAGAQYBChECDw8FDAAMAh8BBQwRAAUKAhUFCgUKAgYDBQoABgQCIAUKCQMoDgIGAwYBCQMDDgECGQMDCgIgBQoAAAMDBgEJAwIOAQIZAwMKAiAFCgQAAwMDBgAGAQkDAw4BAhkDAwoCIAUKBAADAwYBCQMCDgECGQMDCgIgBQoAAAMDAwUKBQoIIQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCIAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAiEDAgaDAgwDAh4DAwAAAAAAAQECAwAAAAEFAggiDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAAFBAAwMADiMBaQEEAAAGFQECAAAAAAEBAkAAAAABDwEAAAUECCQGb2Zmc2V0BQoEAAAGAQYBChECEA8FDABAAiMBBQwRAAUKAhUFCgUKAgYDBQoABgQCJAUKCQMoDgIGAwYBCQMDDgECGQMDCgIkBQoAAAMDBgEJAwIOAQIZAwMKAiQFCgQAAwMDBgAGAQkDAw4BAhkDAwoCJAUKBAADAwYBCQMCDgECGQMDCgIkBQoAAAMDAwUKBQoIJQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCJAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAiUDAgaDAgwDAiIDAwAAAAAAAAAACwICAgUFCCYJc2hhZG93UG9zBQsEAAAGAQILBQsCCQgFCwAIJwVkZXB0aAMEAAAJAz8OAgIIEQEJAzoOAQoCJgULEQAFCgUKAwAIKAR6TWF4AwQAAAkDNQ4BCgImBQsIAAMDAAgpBWRlbHRhAwQAAAYDCQMVDgIEBgACJwMCCgMDAwIoAwMCKAMDAAYEAgwDCQM1DgEJAwkOAQYBAgMDAikDAwMDAwAFBAgqCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACCsIc2hhZG93VXYFCgQAAAkDOg4BCgIqBQsRAAUKBQoACCwFZGVwdGgDBAAACQM/DgICCBEBCgIrBQoRAAUKAwAGBAIMAwsGBwYDCgIqBQsIAAMCCgMDAiwDAgEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwAAAAAAAAYEAg0DAgwDAwA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<enable public="1" get="accessor" set="accessor"><x path="Bool"/></enable>
		<enable__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</enable__>
		<get_enable get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_enable>
		<set_enable get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_enable>
		<USE_ESM public="1" get="accessor" set="accessor"><x path="Bool"/></USE_ESM>
		<USE_ESM__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</USE_ESM__>
		<get_USE_ESM get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_USE_ESM>
		<set_USE_ESM get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_USE_ESM>
		<shadowPower public="1" get="accessor" set="accessor"><x path="Float"/></shadowPower>
		<shadowPower__ expr="0">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</shadowPower__>
		<get_shadowPower get="inline" set="null" line="174">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_shadowPower>
		<set_shadowPower get="inline" set="null" line="191">
			<f a="_v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_shadowPower>
		<USE_PCF public="1" get="accessor" set="accessor"><x path="Bool"/></USE_PCF>
		<USE_PCF__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</USE_PCF__>
		<get_USE_PCF get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_USE_PCF>
		<set_USE_PCF get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_USE_PCF>
		<pcfQuality public="1" get="accessor" set="accessor"><x path="Int"/></pcfQuality>
		<pcfQuality__ expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</pcfQuality__>
		<get_pcfQuality get="inline" set="null" line="174">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_pcfQuality>
		<set_pcfQuality get="inline" set="null" line="193">
			<f a="_v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_pcfQuality>
		<pcfScale public="1" get="accessor" set="accessor"><x path="Float"/></pcfScale>
		<pcfScale__ expr="0">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</pcfScale__>
		<get_pcfScale get="inline" set="null" line="174">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_pcfScale>
		<set_pcfScale get="inline" set="null" line="191">
			<f a="_v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_pcfScale>
		<shadowRes public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></shadowRes>
		<shadowRes__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</shadowRes__>
		<get_shadowRes get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_shadowRes>
		<set_shadowRes get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_shadowRes>
		<shadowMap public="1" get="accessor" set="accessor"><t path="hxsl.ChannelTextureType"/></shadowMap>
		<shadowMap__>
			<t path="hxsl.ChannelTextureType"/>
			<meta><m n=":noCompletion"/></meta>
		</shadowMap__>
		<get_shadowMap get="inline" set="null" line="174">
			<f a=""><t path="hxsl.ChannelTextureType"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_shadowMap>
		<set_shadowMap get="inline" set="null" line="193">
			<f a="_v">
				<t path="hxsl.ChannelTextureType"/>
				<t path="hxsl.ChannelTextureType"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_shadowMap>
		<shadowMapChannel__ expr="Unknown">
			<e path="hxsl.Channel"/>
			<meta><m n=":value"><e>Unknown</e></m></meta>
		</shadowMapChannel__>
		<shadowMapChannel public="1" get="accessor" set="accessor"><e path="hxsl.Channel"/></shadowMapChannel>
		<get_shadowMapChannel get="inline" set="null" line="216"><f a=""><e path="hxsl.Channel"/></f></get_shadowMapChannel>
		<set_shadowMapChannel get="inline" set="null" line="217"><f a="v">
	<e path="hxsl.Channel"/>
	<e path="hxsl.Channel"/>
</f></set_shadowMapChannel>
		<shadowProj public="1" get="accessor" set="accessor"><t path="hxsl.Matrix"/></shadowProj>
		<shadowProj__ expr="new hxsl.Types.Matrix()">
			<t path="hxsl.Matrix"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Matrix()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</shadowProj__>
		<get_shadowProj get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Matrix"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_shadowProj>
		<set_shadowProj get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Matrix"/>
				<t path="hxsl.Matrix"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_shadowProj>
		<shadowBias public="1" get="accessor" set="accessor"><x path="Float"/></shadowBias>
		<shadowBias__ expr="0">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</shadowBias__>
		<get_shadowBias get="inline" set="null" line="174">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_shadowBias>
		<set_shadowBias get="inline" set="null" line="191">
			<f a="_v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_shadowBias>
		<poissonDiskLow public="1" get="accessor" set="accessor"><c path="Array"><t path="hxsl.Vec"/></c></poissonDiskLow>
		<poissonDiskLow__ expr="new Array()">
			<c path="Array"><t path="hxsl.Vec"/></c>
			<meta>
				<m n=":value"><e>new Array()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</poissonDiskLow__>
		<get_poissonDiskLow get="inline" set="null" line="174">
			<f a=""><c path="Array"><t path="hxsl.Vec"/></c></f>
			<meta><m n=":noCompletion"/></meta>
		</get_poissonDiskLow>
		<set_poissonDiskLow get="inline" set="null" line="191">
			<f a="_v">
				<c path="Array"><t path="hxsl.Vec"/></c>
				<c path="Array"><t path="hxsl.Vec"/></c>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_poissonDiskLow>
		<poissonDiskHigh public="1" get="accessor" set="accessor"><c path="Array"><t path="hxsl.Vec"/></c></poissonDiskHigh>
		<poissonDiskHigh__ expr="new Array()">
			<c path="Array"><t path="hxsl.Vec"/></c>
			<meta>
				<m n=":value"><e>new Array()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</poissonDiskHigh__>
		<get_poissonDiskHigh get="inline" set="null" line="174">
			<f a=""><c path="Array"><t path="hxsl.Vec"/></c></f>
			<meta><m n=":noCompletion"/></meta>
		</get_poissonDiskHigh>
		<set_poissonDiskHigh get="inline" set="null" line="191">
			<f a="_v">
				<c path="Array"><t path="hxsl.Vec"/></c>
				<c path="Array"><t path="hxsl.Vec"/></c>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_poissonDiskHigh>
		<poissonDiskVeryHigh public="1" get="accessor" set="accessor"><c path="Array"><t path="hxsl.Vec"/></c></poissonDiskVeryHigh>
		<poissonDiskVeryHigh__ expr="new Array()">
			<c path="Array"><t path="hxsl.Vec"/></c>
			<meta>
				<m n=":value"><e>new Array()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</poissonDiskVeryHigh__>
		<get_poissonDiskVeryHigh get="inline" set="null" line="174">
			<f a=""><c path="Array"><t path="hxsl.Vec"/></c></f>
			<meta><m n=":noCompletion"/></meta>
		</get_poissonDiskVeryHigh>
		<set_poissonDiskVeryHigh get="inline" set="null" line="191">
			<f a="_v">
				<c path="Array"><t path="hxsl.Vec"/></c>
				<c path="Array"><t path="hxsl.Vec"/></c>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_poissonDiskVeryHigh>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="93"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e><![CDATA[{
	@const var enable:Bool;
	@const var USE_ESM:Bool;
	@param var shadowPower:Float;
	@const var USE_PCF:Bool;
	@const var pcfQuality:Int;
	@param var pcfScale:Float;
	@param var shadowRes:Vec2;
	@param var shadowMap:Channel;
	@param var shadowProj:Mat3x4;
	@param var shadowBias:Float;
	var transformedPosition:Vec3;
	var shadow:Float;
	var dirShadow:Float;
	@param var poissonDiskLow:Array<Vec4,4>;
	@param var poissonDiskHigh:Array<Vec4,12>;
	@param var poissonDiskVeryHigh:Array<Vec4,64>;
	function rand(v:Float):Float {
		var dp = dot(vec4(v), vec4(12.9898, 78.233, 45.164, 94.673));
		return fract(sin(dp) * 43758.5453);
	};
	function fragment() {
		if (enable) {
			if (USE_PCF) {
				shadow = 1.0;
				var texelSize = 1.0 / shadowRes;
				var shadowPos = transformedPosition * shadowProj;
				var shadowUv = screenToUv(shadowPos.xy);
				var zMax = shadowPos.z.saturate();
				var rot = rand(transformedPosition.x + transformedPosition.y + transformedPosition.z) * 3.14 * 2;
				switch (pcfQuality) {
					case 1:
						var sampleStrength = 1.0 / 4.0;
						for (i  in  0 ... 4) {
							var offset = poissonDiskLow[i].xy * texelSize * pcfScale;
							offset = vec2(cos(rot) * offset.x - sin(rot) * offset.y, cos(rot) * offset.y + sin(rot) * offset.x);
							var depth = shadowMap.getLod(shadowUv + offset, 0);
							if (zMax - shadowBias > depth) shadow -= sampleStrength;
						};					
					case 2:
						var sampleStrength = 1.0 / 12.0;
						for (i  in  0 ... 12) {
							var offset = poissonDiskHigh[i].xy * texelSize * pcfScale;
							offset = vec2(cos(rot) * offset.x - sin(rot) * offset.y, cos(rot) * offset.y + sin(rot) * offset.x);
							var depth = shadowMap.getLod(shadowUv + offset, 0);
							if (zMax - shadowBias > depth) shadow -= sampleStrength;
						};					
					case 3:
						var sampleStrength = 1.0 / 64.0;
						for (i  in  0 ... 64) {
							var offset = poissonDiskVeryHigh[i].xy * texelSize * pcfScale;
							offset = vec2(cos(rot) * offset.x - sin(rot) * offset.y, cos(rot) * offset.y + sin(rot) * offset.x);
							var depth = shadowMap.getLod(shadowUv + offset, 0);
							if (zMax - shadowBias > depth) shadow -= sampleStrength;
						};					
				};
			} else if (USE_ESM) {
				var shadowPos = transformedPosition * shadowProj;
				var depth = shadowMap.get(screenToUv(shadowPos.xy));
				var zMax = shadowPos.z.saturate();
				var delta = (depth + shadowBias).min(zMax) - zMax;
				shadow = exp(shadowPower * delta).saturate();
			} else {
				var shadowPos = transformedPosition * shadowProj;
				var shadowUv = screenToUv(shadowPos.xy);
				var depth = shadowMap.get(shadowUv.xy);
				shadow = shadowPos.z - shadowBias > depth ? 0 : 1;
			};
		};
		dirShadow = shadow;
	};
}]]></e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.GenTexture" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/GenTexture.hx">
		<extends path="h3d.shader.ScreenShader"/>
		<SRC expr="&quot;HXSLFWgzZC5zaGFkZXIuR2VuVGV4dHVyZQoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEbW9kZQECAAEAAAAAAAsFY29sb3IFDAIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFARMEAgoBAQEBAQIAAAAAAQUBBgQCCAUMCwYHCQMbDgEKAgYFDBEABQoDAQMAAAAAAADwPwMCCQMqDgEBAwAAAAAAAAAAAwUMAgsFDAUMBQwAAAAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLFWgzZC5zaGFkZXIuR2VuVGV4dHVyZQoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEbW9kZQECAAEAAAAAAAsFY29sb3IFDAIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFARMEAgoBAQEBAQIAAAAAAQUBBgQCCAUMCwYHCQMbDgEKAgYFDBEABQoDAQMAAAAAAADwPwMCCQMqDgEBAwAAAAAAAAAAAwUMAgsFDAUMBQwAAAAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<mode public="1" get="accessor" set="accessor"><x path="Int"/></mode>
		<mode__ expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</mode__>
		<get_mode get="inline" set="null" line="174">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_mode>
		<set_mode get="inline" set="null" line="193">
			<f a="_v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_mode>
		<color public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></color>
		<color__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</color__>
		<get_color get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_color>
		<set_color get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_color>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="3"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e><![CDATA[{
	@const var mode:Int;
	@param var color:Vec4;
	function fragment() {
		switch (mode) {
			case 0:
				pixelColor = output.position.xy.length() > 1 ? vec4(0.) : color;			
		};
	};
}]]></e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.LineShader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/LineShader.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLFWgzZC5zaGFkZXIuTGluZVNoYWRlcgwBBmNhbWVyYQ0BAwIEdmlldwcAAQADBHByb2oHAAEABAh2aWV3UHJvagcAAQAAAAAFBmdsb2JhbA0CAgYJcGl4ZWxTaXplBQoABQAHCW1vZGVsVmlldwcABQEDAAAACAVpbnB1dA0DAwkIcG9zaXRpb24FCwEIAAoGbm9ybWFsBQsBCAALAnV2BQoBCAABAAAMBm91dHB1dA0EAQ0IcG9zaXRpb24FDAQMAAQAAA4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAA8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAEBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAEQtsZW5ndGhTY2FsZQMCAAASBXdpZHRoAwIAABMEcGRpcgUMBAAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAACAhQAAAUBBQUIFgNkaXIFCwQAAAYBAgoFCwkDMg4BAgcHBgULAAYEAhMFDAYBCQMqDgIGAQIWBQsJAzIOAQICBwYFCwEDAAAAAAAA8D8DBQwCAwcFDAUMBoEKAhMFDBEABQoGAgEDAAAAAAAA8D8DCQMNDgEGAAYBCgITBQwAAAMKAhMFDAAAAwMGAQoCEwUMBAADCgITBQwEAAMDAwMDBQoGgAIPBQsGAQYBAhYFCwoCCwUKAAADBQsCEQMFCwULBgQCDgULCQMfDgECFgULBQsFCwAAABUAAAUBBoAKAhAFDBEABQoGAQYBBgEGAQQGAQoCEwUMBQAFCgkDKA4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoFCgQGAwoCCwUKBAADAQMAAAAAAADgPwMDAwUKCgIQBQwIAAMFCgIGBQoFCgISAwUKBQoA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLFWgzZC5zaGFkZXIuTGluZVNoYWRlcgwBBmNhbWVyYQ0BAwIEdmlldwcAAQADBHByb2oHAAEABAh2aWV3UHJvagcAAQAAAAAFBmdsb2JhbA0CAgYJcGl4ZWxTaXplBQoABQAHCW1vZGVsVmlldwcABQEDAAAACAVpbnB1dA0DAwkIcG9zaXRpb24FCwEIAAoGbm9ybWFsBQsBCAALAnV2BQoBCAABAAAMBm91dHB1dA0EAQ0IcG9zaXRpb24FDAQMAAQAAA4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAA8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAEBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAEQtsZW5ndGhTY2FsZQMCAAASBXdpZHRoAwIAABMEcGRpcgUMBAAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAACAhQAAAUBBQUIFgNkaXIFCwQAAAYBAgoFCwkDMg4BAgcHBgULAAYEAhMFDAYBCQMqDgIGAQIWBQsJAzIOAQICBwYFCwEDAAAAAAAA8D8DBQwCAwcFDAUMBoEKAhMFDBEABQoGAgEDAAAAAAAA8D8DCQMNDgEGAAYBCgITBQwAAAMKAhMFDAAAAwMGAQoCEwUMBAADCgITBQwEAAMDAwMDBQoGgAIPBQsGAQYBAhYFCwoCCwUKAAADBQsCEQMFCwULBgQCDgULCQMfDgECFgULBQsFCwAAABUAAAUBBoAKAhAFDBEABQoGAQYBBgEGAQQGAQoCEwUMBQAFCgkDKA4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoFCgQGAwoCCwUKBAADAQMAAAAAAADgPwMDAwUKCgIQBQwIAAMFCgIGBQoFCgISAwUKBQoA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<lengthScale public="1" get="accessor" set="accessor"><x path="Float"/></lengthScale>
		<lengthScale__ expr="0">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</lengthScale__>
		<get_lengthScale get="inline" set="null" line="174">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_lengthScale>
		<set_lengthScale get="inline" set="null" line="191">
			<f a="_v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_lengthScale>
		<width public="1" get="accessor" set="accessor"><x path="Float"/></width>
		<width__ expr="0">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</width__>
		<get_width get="inline" set="null" line="174">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_width>
		<set_width get="inline" set="null" line="191">
			<f a="_v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_width>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="53">
			<f a="?width:?lengthScale" v="1.5:1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ lengthScale : 1., width : 1.5 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@global var camera:{ var view : Mat4; var proj : Mat4; var viewProj : Mat4};
	@global var global:{ var pixelSize : Vec2; @perObject
	var modelView : Mat4};
	@input var input:{ var position : Vec3; var normal : Vec3; var uv : Vec2};
	var output:{ var position : Vec4};
	var transformedNormal:Vec3;
	var transformedPosition:Vec3;
	var projectedPosition:Vec4;
	@param var lengthScale:Float;
	@param var width:Float;
	var pdir:Vec4;
	function __init__() {
		{
			var dir = input.normal * global.modelView.mat3();
			pdir = vec4(dir * mat3(camera.view), 1) * camera.proj;
			pdir.xy *= 1 / sqrt(pdir.x * pdir.x + pdir.y * pdir.y);
			transformedPosition += dir * input.uv.x * lengthScale;
			transformedNormal = dir.normalize();
		};
	};
	function vertex() {
		projectedPosition.xy += (pdir.yx * vec2(1, -1)) * (input.uv.y - 0.5) * projectedPosition.z * global.pixelSize * width;
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.MinMaxShader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/MinMaxShader.hx">
		<extends path="h3d.shader.ScreenShader"/>
		<SRC expr="&quot;HXSLF2gzZC5zaGFkZXIuTWluTWF4U2hhZGVyCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgR0ZXhBCgIAAAsEdGV4QgoCAAAMBWlzTWF4AgIAAQAAAAAADQhfX2luaXRfXw4GAAAOBnZlcnRleA4GAAAPCGZyYWdtZW50DgYAAAMCDQAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA4AAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ8AAAUDCBABYQUMBAAACQMhDgICCgoCCQUKBQwACBEBYgUMBAAACQMhDgICCwoCCQUKBQwABgQCCAUMCwIMAgkDFg4CAhAFDAIRBQwFDAkDFQ4CAhAFDAIRBQwFDAUMBQwA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLF2gzZC5zaGFkZXIuTWluTWF4U2hhZGVyCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgR0ZXhBCgIAAAsEdGV4QgoCAAAMBWlzTWF4AgIAAQAAAAAADQhfX2luaXRfXw4GAAAOBnZlcnRleA4GAAAPCGZyYWdtZW50DgYAAAMCDQAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA4AAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ8AAAUDCBABYQUMBAAACQMhDgICCgoCCQUKBQwACBEBYgUMBAAACQMhDgICCwoCCQUKBQwABgQCCAUMCwIMAgkDFg4CAhAFDAIRBQwFDAkDFQ4CAhAFDAIRBQwFDAUMBQwA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<texA public="1" get="accessor" set="accessor"><t path="hxsl.Sampler2D"/></texA>
		<texA__>
			<t path="hxsl.Sampler2D"/>
			<meta><m n=":noCompletion"/></meta>
		</texA__>
		<get_texA get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Sampler2D"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_texA>
		<set_texA get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Sampler2D"/>
				<t path="hxsl.Sampler2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_texA>
		<texB public="1" get="accessor" set="accessor"><t path="hxsl.Sampler2D"/></texB>
		<texB__>
			<t path="hxsl.Sampler2D"/>
			<meta><m n=":noCompletion"/></meta>
		</texB__>
		<get_texB get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Sampler2D"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_texB>
		<set_texB get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Sampler2D"/>
				<t path="hxsl.Sampler2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_texB>
		<isMax public="1" get="accessor" set="accessor"><x path="Bool"/></isMax>
		<isMax__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</isMax__>
		<get_isMax get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_isMax>
		<set_isMax get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_isMax>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="3"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@param var texA:Sampler2D;
	@param var texB:Sampler2D;
	@const var isMax:Bool;
	function fragment() {
		var a = texA.get(calculatedUV);
		var b = texB.get(calculatedUV);
		pixelColor = isMax ? max(a, b) : min(a, b);
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.CubeMinMaxShader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/MinMaxShader.hx" module="h3d.shader.MinMaxShader">
		<extends path="h3d.shader.ScreenShader"/>
		<SRC expr="&quot;HXSLG2gzZC5zaGFkZXIuQ3ViZU1pbk1heFNoYWRlcgwBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEdGV4QQwCAAALBHRleEIMAgAADAVpc01heAICAAEAAAAAAA0DbWF0BgIAAA4IX19pbml0X18OBgAADwZ2ZXJ0ZXgOBgAAEAhmcmFnbWVudA4GAAADAg4AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAPAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEQAAAFBQgRAnV2BQoEAAAGAwYBAgkFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAAgSA2RpcgULBAAABgEJAykOAgIRBQoBAwAAAAAAAPA/AwULAg0GBQsACBMBYQUMBAAACQMhDgICCgwCEgULBQwACBQBYgUMBAAACQMhDgICCwwCEgULBQwABgQCCAUMCwIMAgkDFg4CAhMFDAIUBQwFDAkDFQ4CAhMFDAIUBQwFDAUMBQwA&quot;" line="21" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLG2gzZC5zaGFkZXIuQ3ViZU1pbk1heFNoYWRlcgwBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEdGV4QQwCAAALBHRleEIMAgAADAVpc01heAICAAEAAAAAAA0DbWF0BgIAAA4IX19pbml0X18OBgAADwZ2ZXJ0ZXgOBgAAEAhmcmFnbWVudA4GAAADAg4AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAPAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEQAAAFBQgRAnV2BQoEAAAGAwYBAgkFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAAgSA2RpcgULBAAABgEJAykOAgIRBQoBAwAAAAAAAPA/AwULAg0GBQsACBMBYQUMBAAACQMhDgICCgwCEgULBQwACBQBYgUMBAAACQMhDgICCwwCEgULBQwABgQCCAUMCwIMAgkDFg4CAhMFDAIUBQwFDAkDFQ4CAhMFDAIUBQwFDAUMBQwA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<texA public="1" get="accessor" set="accessor"><t path="hxsl.SamplerCube"/></texA>
		<texA__>
			<t path="hxsl.SamplerCube"/>
			<meta><m n=":noCompletion"/></meta>
		</texA__>
		<get_texA get="inline" set="null" line="174">
			<f a=""><t path="hxsl.SamplerCube"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_texA>
		<set_texA get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.SamplerCube"/>
				<t path="hxsl.SamplerCube"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_texA>
		<texB public="1" get="accessor" set="accessor"><t path="hxsl.SamplerCube"/></texB>
		<texB__>
			<t path="hxsl.SamplerCube"/>
			<meta><m n=":noCompletion"/></meta>
		</texB__>
		<get_texB get="inline" set="null" line="174">
			<f a=""><t path="hxsl.SamplerCube"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_texB>
		<set_texB get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.SamplerCube"/>
				<t path="hxsl.SamplerCube"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_texB>
		<isMax public="1" get="accessor" set="accessor"><x path="Bool"/></isMax>
		<isMax__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</isMax__>
		<get_isMax get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_isMax>
		<set_isMax get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_isMax>
		<mat public="1" get="accessor" set="accessor"><t path="hxsl.Matrix"/></mat>
		<mat__ expr="new hxsl.Types.Matrix()">
			<t path="hxsl.Matrix"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Matrix()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</mat__>
		<get_mat get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Matrix"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_mat>
		<set_mat get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Matrix"/>
				<t path="hxsl.Matrix"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_mat>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="21" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="21" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="21" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":src"><e>{
	@param var texA:SamplerCube;
	@param var texB:SamplerCube;
	@const var isMax:Bool;
	@param var mat:Mat3;
	function fragment() {
		var uv = calculatedUV * 2.0 - 1.0;
		var dir = vec3(uv, 1) * mat;
		var a = texA.get(dir);
		var b = texB.get(dir);
		pixelColor = isMax ? max(a, b) : min(a, b);
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.NormalMap" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/NormalMap.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLFGgzZC5zaGFkZXIuTm9ybWFsTWFwCgEGY2FtZXJhDQECAghwb3NpdGlvbgULAAEAAwNkaXIFCwMBAAAAAAQGZ2xvYmFsDQIBBQltb2RlbFZpZXcHAAQBAwAAAAYFaW5wdXQNAwIHBm5vcm1hbAULAQYACAd0YW5nZW50BQsBBgABAAAJB3RleHR1cmUKAgAACgxjYWxjdWxhdGVkVVYFCgQAAAsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAADBF0cmFuc2Zvcm1lZE5vcm1hbAULBAAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAMAAA4OX19pbml0X192ZXJ0ZXgOBgAADwhmcmFnbWVudA4GAAACAg4AAAUBBgQCDQUMCQMqDgIGAQIIBQsJAzIOAQIFBwYFCwsGBwkDHQ4CAggFCwIIBQsDAQMAAAAAAADgPwMCAQMAAAAAAADwPwMBAwAAAAAAAPC/AwMFDAUMAAEPAAAFBQgQAW4FCwQAAAIMBQsACBECbmYFCwQAAAkDOQ4BCQMhDgICCQoCCgUKBQwFCwAIEgR0YW5YBQsEAAAJAx8OAQoCDQUMkgAFCwULAAgTBHRhblkFCwQAAAYBCQMeDgICEAULAhIFCwULBwMKAg0FDAwAAwMFCwAGBAIMBQsJAx8OAQQGAAYABgEKAhEFCwAAAwISBQsFCwYBCgIRBQsEAAMCEwULBQsFCwYBCgIRBQsIAAMCEAULBQsFCwULBQsFCwA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLFGgzZC5zaGFkZXIuTm9ybWFsTWFwCgEGY2FtZXJhDQECAghwb3NpdGlvbgULAAEAAwNkaXIFCwMBAAAAAAQGZ2xvYmFsDQIBBQltb2RlbFZpZXcHAAQBAwAAAAYFaW5wdXQNAwIHBm5vcm1hbAULAQYACAd0YW5nZW50BQsBBgABAAAJB3RleHR1cmUKAgAACgxjYWxjdWxhdGVkVVYFCgQAAAsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAADBF0cmFuc2Zvcm1lZE5vcm1hbAULBAAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAMAAA4OX19pbml0X192ZXJ0ZXgOBgAADwhmcmFnbWVudA4GAAACAg4AAAUBBgQCDQUMCQMqDgIGAQIIBQsJAzIOAQIFBwYFCwsGBwkDHQ4CAggFCwIIBQsDAQMAAAAAAADgPwMCAQMAAAAAAADwPwMBAwAAAAAAAPC/AwMFDAUMAAEPAAAFBQgQAW4FCwQAAAIMBQsACBECbmYFCwQAAAkDOQ4BCQMhDgICCQoCCgUKBQwFCwAIEgR0YW5YBQsEAAAJAx8OAQoCDQUMkgAFCwULAAgTBHRhblkFCwQAAAYBCQMeDgICEAULAhIFCwULBwMKAg0FDAwAAwMFCwAGBAIMBQsJAx8OAQQGAAYABgEKAhEFCwAAAwISBQsFCwYBCgIRBQsEAAMCEwULBQsFCwYBCgIRBQsIAAMCEAULBQsFCwULBQsFCwA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<texture public="1" get="accessor" set="accessor"><t path="hxsl.Sampler2D"/></texture>
		<texture__>
			<t path="hxsl.Sampler2D"/>
			<meta><m n=":noCompletion"/></meta>
		</texture__>
		<get_texture get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Sampler2D"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_texture>
		<set_texture get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Sampler2D"/>
				<t path="hxsl.Sampler2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_texture>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="43"><f a="?texture">
	<t path="hxsl.Sampler2D"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e><![CDATA[{
	@global var camera:{ var position : Vec3; @var
	var dir : Vec3};
	@global var global:{ @perObject
	var modelView : Mat4};
	@input var input:{ var normal : Vec3; var tangent : Vec3};
	@param var texture:Sampler2D;
	var calculatedUV:Vec2;
	var transformedPosition:Vec3;
	var transformedNormal:Vec3;
	@var var transformedTangent:Vec4;
	function __init__vertex() {
		transformedTangent = vec4(input.tangent * global.modelView.mat3(), input.tangent.dot(input.tangent) > 0.5 ? 1. : -1.);
	};
	function fragment() {
		var n = transformedNormal;
		var nf = unpackNormal(texture.get(calculatedUV));
		var tanX = transformedTangent.xyz.normalize();
		var tanY = n.cross(tanX) * -transformedTangent.w;
		transformedNormal = (nf.x * tanX + nf.y * tanY + nf.z * n).normalize();
	};
}]]></e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.Shadow" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/Shadow.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLEWgzZC5zaGFkZXIuU2hhZG93BgEGc2hhZG93DQEFAgNtYXARAQABAAMEcHJvaggAAQAEBWNvbG9yBQsAAQAFBXBvd2VyAwABAAYEYmlhcwMAAQAAAAAHCnBpeGVsQ29sb3IFDAQAAAgTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoJc2hhZG93UG9zBQsEAAEBCwhmcmFnbWVudA4GAAABAQsAAAUGCAwJc2hhZG93UG9zBQsEAAAGAQIJBQsCAwgFCwAIDQVkZXB0aAMEAAAJAz8OAgICEQEJAzoOAQoCDAULEQAFCgUKAwAIDgR6TWF4AwQAAAkDNQ4BCgIMBQsIAAMDAAgPBWRlbHRhAwQAAAYDCQMVDgIEBgACDQMCBgMDAwIOAwMCDgMDAAgQBXNoYWRlAwQAAAkDNQ4BCQMJDgEGAQIFAwIPAwMDAwAGgQoCBwUMkgAFCwYABgEEBgMBAwAAAAAAAPA/AwIQAwMDCgIEBQuSAAULBQsCEAMFCwULAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLEWgzZC5zaGFkZXIuU2hhZG93BgEGc2hhZG93DQEFAgNtYXARAQABAAMEcHJvaggAAQAEBWNvbG9yBQsAAQAFBXBvd2VyAwABAAYEYmlhcwMAAQAAAAAHCnBpeGVsQ29sb3IFDAQAAAgTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoJc2hhZG93UG9zBQsEAAEBCwhmcmFnbWVudA4GAAABAQsAAAUGCAwJc2hhZG93UG9zBQsEAAAGAQIJBQsCAwgFCwAIDQVkZXB0aAMEAAAJAz8OAgICEQEJAzoOAQoCDAULEQAFCgUKAwAIDgR6TWF4AwQAAAkDNQ4BCgIMBQsIAAMDAAgPBWRlbHRhAwQAAAYDCQMVDgIEBgACDQMCBgMDAwIOAwMCDgMDAAgQBXNoYWRlAwQAAAkDNQ4BCQMJDgEGAQIFAwIPAwMDAwAGgQoCBwUMkgAFCwYABgEEBgMBAwAAAAAAAPA/AwIQAwMDCgIEBQuSAAULBQsCEAMFCwULAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@global var shadow:{ var map : Channel; var proj : Mat3x4; var color : Vec3; var power : Float; var bias : Float};
	var pixelColor:Vec4;
	var transformedPosition:Vec3;
	var pixelTransformedPosition:Vec3;
	@private var shadowPos:Vec3;
	function fragment() {
		var shadowPos = pixelTransformedPosition * shadow.proj;
		var depth = shadow.map.get(screenToUv(shadowPos.xy));
		var zMax = shadowPos.z.saturate();
		var delta = (depth + shadow.bias).min(zMax) - zMax;
		var shade = exp(shadow.power * delta).saturate();
		pixelColor.rgb *= (1 - shade) * shadow.color.rgb + shade;
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.SkinBase" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/SkinBase.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLE2gzZC5zaGFkZXIuU2tpbkJhc2UFARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLE2gzZC5zaGFkZXIuU2tpbkJhc2UFARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<MaxBones public="1" get="accessor" set="accessor"><x path="Int"/></MaxBones>
		<MaxBones__ expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</MaxBones__>
		<get_MaxBones get="inline" set="null" line="174">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_MaxBones>
		<set_MaxBones get="inline" set="null" line="193">
			<f a="_v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_MaxBones>
		<bonesMatrixes public="1" get="accessor" set="accessor"><c path="Array"><t path="hxsl.Matrix"/></c></bonesMatrixes>
		<bonesMatrixes__ expr="new Array()">
			<c path="Array"><t path="hxsl.Matrix"/></c>
			<meta>
				<m n=":value"><e>new Array()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</bonesMatrixes__>
		<get_bonesMatrixes get="inline" set="null" line="174">
			<f a=""><c path="Array"><t path="hxsl.Matrix"/></c></f>
			<meta><m n=":noCompletion"/></meta>
		</get_bonesMatrixes>
		<set_bonesMatrixes get="inline" set="null" line="191">
			<f a="_v">
				<c path="Array"><t path="hxsl.Matrix"/></c>
				<c path="Array"><t path="hxsl.Matrix"/></c>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_bonesMatrixes>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":src"><e><![CDATA[{
	var relativePosition:Vec3;
	var transformedPosition:Vec3;
	var transformedNormal:Vec3;
	@const var MaxBones:Int;
	@ignore @param var bonesMatrixes:Array<Mat3x4,MaxBones>;
}]]></e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.Skin" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/Skin.hx">
		<extends path="h3d.shader.SkinBase"/>
		<SRC expr="&quot;HXSLD2gzZC5zaGFkZXIuU2tpbggBEHJlbGF0aXZlUG9zaXRpb24FCwQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABAhNYXhCb25lcwECAAEAAAAAAAUNYm9uZXNNYXRyaXhlcw8IBAIAAQgGBWlucHV0DQEEBwhwb3NpdGlvbgULAQYACAZub3JtYWwFCwEGAAkHd2VpZ2h0cwULAQYACgdpbmRleGVzCQQAAAABBgABAAALEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADAZ2ZXJ0ZXgOBgAAAQAMAAAFAgYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQJAyUOAQoCCgkEAAAAAAADAQgFCwULCgIJBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAkDJQ4BCgIKCQQAAAAEAAMBCAULBQsKAgkFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQJAyUOAQoCCgkEAAAACAADAQgFCwULCgIJBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAkDJQ4BCgIKCQQAAAAAAAMBCAYFCwULCgIJBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECQMlDgEKAgoJBAAAAAQAAwEIBgULBQsKAgkFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAkDJQ4BCgIKCQQAAAAIAAMBCAYFCwULCgIJBQsIAAMFCwULBQsFCwA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLD2gzZC5zaGFkZXIuU2tpbggBEHJlbGF0aXZlUG9zaXRpb24FCwQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABAhNYXhCb25lcwECAAEAAAAAAAUNYm9uZXNNYXRyaXhlcw8IBAIAAQgGBWlucHV0DQEEBwhwb3NpdGlvbgULAQYACAZub3JtYWwFCwEGAAkHd2VpZ2h0cwULAQYACgdpbmRleGVzCQQAAAABBgABAAALEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADAZ2ZXJ0ZXgOBgAAAQAMAAAFAgYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQJAyUOAQoCCgkEAAAAAAADAQgFCwULCgIJBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAkDJQ4BCgIKCQQAAAAEAAMBCAULBQsKAgkFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQJAyUOAQoCCgkEAAAACAADAQgFCwULCgIJBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAkDJQ4BCgIKCQQAAAAAAAMBCAYFCwULCgIJBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECQMlDgEKAgoJBAAAAAQAAwEIBgULBQsKAgkFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAkDJQ4BCgIKCQQAAAAIAAMBCAYFCwULCgIJBQsIAAMFCwULBQsFCwA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="3"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@input var input:{ var position : Vec3; var normal : Vec3; var weights : Vec3; var indexes : Bytes4};
	var transformedTangent:Vec4;
	function vertex() {
		transformedPosition = (relativePosition * bonesMatrixes[int(input.indexes.x)]) * input.weights.x + (relativePosition * bonesMatrixes[int(input.indexes.y)]) * input.weights.y + (relativePosition * bonesMatrixes[int(input.indexes.z)]) * input.weights.z;
		transformedNormal = normalize((input.normal * mat3(bonesMatrixes[int(input.indexes.x)])) * input.weights.x + (input.normal * mat3(bonesMatrixes[int(input.indexes.y)])) * input.weights.y + (input.normal * mat3(bonesMatrixes[int(input.indexes.z)])) * input.weights.z);
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.SkinTangent" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/SkinTangent.hx">
		<extends path="h3d.shader.SkinBase"/>
		<SRC expr="&quot;HXSLFmgzZC5zaGFkZXIuU2tpblRhbmdlbnQIARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIBgVpbnB1dA0BBQcIcG9zaXRpb24FCwEGAAgGbm9ybWFsBQsBBgAJB3RhbmdlbnQFCwEGAAoHd2VpZ2h0cwULAQYACwdpbmRleGVzCQQAAAABBgABAAAMEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADQZ2ZXJ0ZXgOBgAAAQANAAAFAwYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQJAyUOAQoCCwkEAAAAAAADAQgFCwULCgIKBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAkDJQ4BCgILCQQAAAAEAAMBCAULBQsKAgoFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQJAyUOAQoCCwkEAAAACAADAQgFCwULCgIKBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAkDJQ4BCgILCQQAAAAAAAMBCAYFCwULCgIKBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECQMlDgEKAgsJBAAAAAQAAwEIBgULBQsKAgoFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAkDJQ4BCgILCQQAAAAIAAMBCAYFCwULCgIKBQsIAAMFCwULBQsFCwYEAgwFDAkDKg4CCQMfDgEGAAYABgEEBgEKAgkFC5IABQsJAzIOARECBQ8IBAkDJQ4BCgILCQQAAAAAAAMBCAYFCwULCgIKBQsAAAMFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQJAyUOAQoCCwkEAAAABAADAQgGBQsFCwoCCgULBAADBQsFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQJAyUOAQoCCwkEAAAACAADAQgGBQsFCwoCCgULCAADBQsFCwULCgIMBQwMAAMFDAUMAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLFmgzZC5zaGFkZXIuU2tpblRhbmdlbnQIARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIBgVpbnB1dA0BBQcIcG9zaXRpb24FCwEGAAgGbm9ybWFsBQsBBgAJB3RhbmdlbnQFCwEGAAoHd2VpZ2h0cwULAQYACwdpbmRleGVzCQQAAAABBgABAAAMEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADQZ2ZXJ0ZXgOBgAAAQANAAAFAwYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQJAyUOAQoCCwkEAAAAAAADAQgFCwULCgIKBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAkDJQ4BCgILCQQAAAAEAAMBCAULBQsKAgoFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQJAyUOAQoCCwkEAAAACAADAQgFCwULCgIKBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAkDJQ4BCgILCQQAAAAAAAMBCAYFCwULCgIKBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECQMlDgEKAgsJBAAAAAQAAwEIBgULBQsKAgoFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAkDJQ4BCgILCQQAAAAIAAMBCAYFCwULCgIKBQsIAAMFCwULBQsFCwYEAgwFDAkDKg4CCQMfDgEGAAYABgEEBgEKAgkFC5IABQsJAzIOARECBQ8IBAkDJQ4BCgILCQQAAAAAAAMBCAYFCwULCgIKBQsAAAMFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQJAyUOAQoCCwkEAAAABAADAQgGBQsFCwoCCgULBAADBQsFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQJAyUOAQoCCwkEAAAACAADAQgGBQsFCwoCCgULCAADBQsFCwULCgIMBQwMAAMFDAUMAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="3"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@input var input:{ var position : Vec3; var normal : Vec3; var tangent : Vec3; var weights : Vec3; var indexes : Bytes4};
	var transformedTangent:Vec4;
	function vertex() {
		transformedPosition = (relativePosition * bonesMatrixes[int(input.indexes.x)]) * input.weights.x + (relativePosition * bonesMatrixes[int(input.indexes.y)]) * input.weights.y + (relativePosition * bonesMatrixes[int(input.indexes.z)]) * input.weights.z;
		transformedNormal = normalize((input.normal * mat3(bonesMatrixes[int(input.indexes.x)])) * input.weights.x + (input.normal * mat3(bonesMatrixes[int(input.indexes.y)])) * input.weights.y + (input.normal * mat3(bonesMatrixes[int(input.indexes.z)])) * input.weights.z);
		transformedTangent = vec4(normalize((input.tangent.xyz * mat3(bonesMatrixes[int(input.indexes.x)])) * input.weights.x + (input.tangent.xyz * mat3(bonesMatrixes[int(input.indexes.y)])) * input.weights.y + (input.tangent.xyz * mat3(bonesMatrixes[int(input.indexes.z)])) * input.weights.z), transformedTangent.w);
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.SpecularTexture" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/SpecularTexture.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLGmgzZC5zaGFkZXIuU3BlY3VsYXJUZXh0dXJlBAEHdGV4dHVyZQoCAAACDGNhbGN1bGF0ZWRVVgUKBAAAAwlzcGVjQ29sb3IFCwQAAAQIZnJhZ21lbnQOBgAAAQEEAAAFAQaBAgMFCwoJAyEOAgIBCgICBQoFDJIABQsFCwA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLGmgzZC5zaGFkZXIuU3BlY3VsYXJUZXh0dXJlBAEHdGV4dHVyZQoCAAACDGNhbGN1bGF0ZWRVVgUKBAAAAwlzcGVjQ29sb3IFCwQAAAQIZnJhZ21lbnQOBgAAAQEEAAAFAQaBAgMFCwoJAyEOAgIBCgICBQoFDJIABQsFCwA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<texture public="1" get="accessor" set="accessor"><t path="hxsl.Sampler2D"/></texture>
		<texture__>
			<t path="hxsl.Sampler2D"/>
			<meta><m n=":noCompletion"/></meta>
		</texture__>
		<get_texture get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Sampler2D"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_texture>
		<set_texture get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Sampler2D"/>
				<t path="hxsl.Sampler2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_texture>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="15"><f a="?tex">
	<t path="hxsl.Sampler2D"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@param var texture:Sampler2D;
	var calculatedUV:Vec2;
	var specColor:Vec3;
	function fragment() {
		specColor *= texture.get(calculatedUV).rgb;
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.Texture" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/Texture.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLEmgzZC5zaGFkZXIuVGV4dHVyZQsBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhhZGRpdGl2ZQICAAEAAAAAAAQJa2lsbEFscGhhAgIAAQAAAAAABQ1zcGVjdWxhckFscGhhAgIAAQAAAAAABhJraWxsQWxwaGFUaHJlc2hvbGQDAgABBwAAAAAAAAAAAAAAAAAA8D8HB3RleHR1cmUKAgAACAxjYWxjdWxhdGVkVVYFCgQAAAkKcGl4ZWxDb2xvcgUMBAAACglzcGVjQ29sb3IFCwQAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAAAgALAAAFAQYEAggFCgICBQoFCgABDAAABQQIDQFjBQwEAAAJAyEOAgIHCgIIBQoFDAALBg4CBAIGCQYDCgINBQwMAAMCBgMDAQMAAAAAAAAAAAMCAgwAAAALAgMCBoACCQUMAg0FDAUMBoECCQUMAg0FDAUMAAsCBQIGgQIKBQsKAg0FDP4ABQsFCwAAAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLEmgzZC5zaGFkZXIuVGV4dHVyZQsBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhhZGRpdGl2ZQICAAEAAAAAAAQJa2lsbEFscGhhAgIAAQAAAAAABQ1zcGVjdWxhckFscGhhAgIAAQAAAAAABhJraWxsQWxwaGFUaHJlc2hvbGQDAgABBwAAAAAAAAAAAAAAAAAA8D8HB3RleHR1cmUKAgAACAxjYWxjdWxhdGVkVVYFCgQAAAkKcGl4ZWxDb2xvcgUMBAAACglzcGVjQ29sb3IFCwQAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAAAgALAAAFAQYEAggFCgICBQoFCgABDAAABQQIDQFjBQwEAAAJAyEOAgIHCgIIBQoFDAALBg4CBAIGCQYDCgINBQwMAAMCBgMDAQMAAAAAAAAAAAMCAgwAAAALAgMCBoACCQUMAg0FDAUMBoECCQUMAg0FDAUMAAsCBQIGgQIKBQsKAg0FDP4ABQsFCwAAAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<additive public="1" get="accessor" set="accessor"><x path="Bool"/></additive>
		<additive__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</additive__>
		<get_additive get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_additive>
		<set_additive get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_additive>
		<killAlpha public="1" get="accessor" set="accessor"><x path="Bool"/></killAlpha>
		<killAlpha__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</killAlpha__>
		<get_killAlpha get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_killAlpha>
		<set_killAlpha get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_killAlpha>
		<specularAlpha public="1" get="accessor" set="accessor"><x path="Bool"/></specularAlpha>
		<specularAlpha__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</specularAlpha__>
		<get_specularAlpha get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_specularAlpha>
		<set_specularAlpha get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_specularAlpha>
		<killAlphaThreshold public="1" get="accessor" set="accessor"><x path="Float"/></killAlphaThreshold>
		<killAlphaThreshold__ expr="0">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</killAlphaThreshold__>
		<get_killAlphaThreshold get="inline" set="null" line="174">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_killAlphaThreshold>
		<set_killAlphaThreshold get="inline" set="null" line="191">
			<f a="_v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_killAlphaThreshold>
		<texture public="1" get="accessor" set="accessor"><t path="hxsl.Sampler2D"/></texture>
		<texture__>
			<t path="hxsl.Sampler2D"/>
			<meta><m n=":noCompletion"/></meta>
		</texture__>
		<get_texture get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Sampler2D"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_texture>
		<set_texture get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Sampler2D"/>
				<t path="hxsl.Sampler2D"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_texture>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="37"><f a="?tex">
	<t path="hxsl.Sampler2D"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e><![CDATA[{
	@input var input:{ var uv : Vec2};
	@const var additive:Bool;
	@const var killAlpha:Bool;
	@const var specularAlpha:Bool;
	@range(0, 1) @param var killAlphaThreshold:Float;
	@param var texture:Sampler2D;
	var calculatedUV:Vec2;
	var pixelColor:Vec4;
	var specColor:Vec3;
	function vertex() {
		calculatedUV = input.uv;
	};
	function fragment() {
		var c = texture.get(calculatedUV);
		if (killAlpha && c.a - killAlphaThreshold < 0) discard;
		if (additive) pixelColor += c else pixelColor *= c;
		if (specularAlpha) specColor *= c.aaa;
	};
}]]></e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.UVDelta" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/UVDelta.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLEmgzZC5zaGFkZXIuVVZEZWx0YQQBB3V2RGVsdGEFCgIAAAIHdXZTY2FsZQUKAgAAAwxjYWxjdWxhdGVkVVYFCgQAAAQGdmVydGV4DgYAAAEABAAABQEGBAIDBQoGAAYBAgMFCgICBQoFCgIBBQoFCgUKAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLEmgzZC5zaGFkZXIuVVZEZWx0YQQBB3V2RGVsdGEFCgIAAAIHdXZTY2FsZQUKAgAAAwxjYWxjdWxhdGVkVVYFCgQAAAQGdmVydGV4DgYAAAEABAAABQEGBAIDBQoGAAYBAgMFCgICBQoFCgIBBQoFCgUKAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<uvDelta public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></uvDelta>
		<uvDelta__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</uvDelta__>
		<get_uvDelta get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_uvDelta>
		<set_uvDelta get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_uvDelta>
		<uvScale public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></uvScale>
		<uvScale__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</uvScale__>
		<get_uvScale get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_uvScale>
		<set_uvScale get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_uvScale>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="14">
			<f a="?dx:?dy:?sx:?sy" v="0.:0.:1.:1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sy : 1., sx : 1., dy : 0., dx : 0. }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@param var uvDelta:Vec2;
	@param var uvScale:Vec2;
	var calculatedUV:Vec2;
	function vertex() {
		calculatedUV = calculatedUV * uvScale + uvDelta;
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.VertexColorAlpha" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/VertexColorAlpha.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLG2gzZC5zaGFkZXIuVmVydGV4Q29sb3JBbHBoYQQBBWlucHV0DQEBAgVjb2xvcgUMAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGFkZGl0aXZlAgIAAQAAAAAABQhmcmFnbWVudA4GAAABAQUAAAUBCwIEAgaAAgMFDAICBQwFDAaBAgMFDAICBQwFDAAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLG2gzZC5zaGFkZXIuVmVydGV4Q29sb3JBbHBoYQQBBWlucHV0DQEBAgVjb2xvcgUMAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGFkZGl0aXZlAgIAAQAAAAAABQhmcmFnbWVudA4GAAABAQUAAAUBCwIEAgaAAgMFDAICBQwFDAaBAgMFDAICBQwFDAAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<additive public="1" get="accessor" set="accessor"><x path="Bool"/></additive>
		<additive__>
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</additive__>
		<get_additive get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_additive>
		<set_additive get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_additive>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="3"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e>{
	@input var input:{ var color : Vec4};
	var pixelColor:Vec4;
	@const var additive:Bool;
	function fragment() {
		if (additive) pixelColor += input.color else pixelColor *= input.color;
	};
}</e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="h3d.shader.VolumeDecal" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/h3d/shader/VolumeDecal.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLFmgzZC5zaGFkZXIuVm9sdW1lRGVjYWwYAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQhkZXB0aE1hcBEBAAAAJgVzY2FsZQUKAgAAJwZub3JtYWwFCwIAACgHdGFuZ2VudAULAgAAKQppc0NlbnRlcmVkAgIAAQAAAAAAKgxjYWxjdWxhdGVkVVYFCgQAACsSdHJhbnNmb3JtZWRUYW5nZW50BQwEAAAsDl9faW5pdF9fdmVydGV4DgYAAC0IZnJhZ21lbnQOBgAAAgIsAAAFAgYEAh0FCwkDHw4BBAYBAicFCwkDMg4BAg8HBgULBQsFCwULBgQCKwUMCQMqDgIJAx8OAQQGAQIoBQsJAzIOAQIPBwYFCwULBQsBAwAAAAAAAPA/AwUMBQwAAS0AAAUJCC4GbWF0cml4BwQAAAYBAggHAhAHBwAILwlzY3JlZW5Qb3MFCgQAAAYCCgIeBQwRAAUKCgIeBQwMAAMFCgAIMANydXYFDAQAAAkDKg4DAi8FCgkDPw4CAiURAQkDOg4BAi8FCgUKAwEDAAAAAAAA8D8DBQwACDEEd3BvcwUMBAAABgECMAUMAi4HBQwACDIEcHBvcwUMBAAABgECMAUMAggHBQwABgQCHAULBgIKAjIFDJIABQsKAjIFDAwAAwULBQsGBAIqBQoGAQImBQoEBgIKAjEFDBEABQoKAjEFDAwAAwUKBQoFCgUKCwIpAgaAAioFCgEDAAAAAAAA4D8DBQoAAAsGCQkDFQ4CCQMVDgIKAioFCgAAAwoCKgUKBAADAwkDFQ4CBgMBAwAAAAAAAPA/AwoCKgUKAAADAwYDAQMAAAAAAADwPwMKAioFCgQAAwMDAwEDAAAAAAAAAAADAgwAAAAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLFmgzZC5zaGFkZXIuVm9sdW1lRGVjYWwYAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQhkZXB0aE1hcBEBAAAAJgVzY2FsZQUKAgAAJwZub3JtYWwFCwIAACgHdGFuZ2VudAULAgAAKQppc0NlbnRlcmVkAgIAAQAAAAAAKgxjYWxjdWxhdGVkVVYFCgQAACsSdHJhbnNmb3JtZWRUYW5nZW50BQwEAAAsDl9faW5pdF9fdmVydGV4DgYAAC0IZnJhZ21lbnQOBgAAAgIsAAAFAgYEAh0FCwkDHw4BBAYBAicFCwkDMg4BAg8HBgULBQsFCwULBgQCKwUMCQMqDgIJAx8OAQQGAQIoBQsJAzIOAQIPBwYFCwULBQsBAwAAAAAAAPA/AwUMBQwAAS0AAAUJCC4GbWF0cml4BwQAAAYBAggHAhAHBwAILwlzY3JlZW5Qb3MFCgQAAAYCCgIeBQwRAAUKCgIeBQwMAAMFCgAIMANydXYFDAQAAAkDKg4DAi8FCgkDPw4CAiURAQkDOg4BAi8FCgUKAwEDAAAAAAAA8D8DBQwACDEEd3BvcwUMBAAABgECMAUMAi4HBQwACDIEcHBvcwUMBAAABgECMAUMAggHBQwABgQCHAULBgIKAjIFDJIABQsKAjIFDAwAAwULBQsGBAIqBQoGAQImBQoEBgIKAjEFDBEABQoKAjEFDAwAAwUKBQoFCgUKCwIpAgaAAioFCgEDAAAAAAAA4D8DBQoAAAsGCQkDFQ4CCQMVDgIKAioFCgAAAwoCKgUKBAADAwkDFQ4CBgMBAwAAAAAAAPA/AwoCKgUKAAADAwYDAQMAAAAAAADwPwMKAioFCgQAAwMDAwEDAAAAAAAAAAADAgwAAAAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<scale public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></scale>
		<scale__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</scale__>
		<get_scale get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_scale>
		<set_scale get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_scale>
		<normal public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></normal>
		<normal__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</normal__>
		<get_normal get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_normal>
		<set_normal get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_normal>
		<tangent public="1" get="accessor" set="accessor"><t path="hxsl.Vec"/></tangent>
		<tangent__ expr="new hxsl.Types.Vec()">
			<t path="hxsl.Vec"/>
			<meta>
				<m n=":value"><e>new hxsl.Types.Vec()</e></m>
				<m n=":noCompletion"/>
			</meta>
		</tangent__>
		<get_tangent get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Vec"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_tangent>
		<set_tangent get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Vec"/>
				<t path="hxsl.Vec"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_tangent>
		<isCentered public="1" get="accessor" set="accessor"><x path="Bool"/></isCentered>
		<isCentered__ expr="true">
			<x path="Bool"/>
			<meta>
				<m n=":value"><e>true</e></m>
				<m n=":noCompletion"/>
			</meta>
		</isCentered__>
		<get_isCentered get="inline" set="null" line="174">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_isCentered>
		<set_isCentered get="inline" set="null" line="193">
			<f a="_v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_isCentered>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="42"><f a="objectWidth:objectHeight">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e><![CDATA[{
	@:import BaseMesh;
	@global var depthMap:Channel;
	@param var scale:Vec2;
	@param var normal:Vec3;
	@param var tangent:Vec3;
	@const var isCentered:Bool = true;
	var calculatedUV:Vec2;
	var transformedTangent:Vec4;
	function __init__vertex() {
		transformedNormal = (normal * global.modelView.mat3()).normalize();
		transformedTangent = vec4((tangent * global.modelView.mat3()).normalize(), 1.);
	};
	function fragment() {
		var matrix = camera.inverseViewProj * global.modelViewInverse;
		var screenPos = projectedPosition.xy / projectedPosition.w;
		var ruv = vec4(screenPos, depthMap.get(screenToUv(screenPos)), 1);
		var wpos = ruv * matrix;
		var ppos = ruv * camera.inverseViewProj;
		pixelTransformedPosition = ppos.xyz / ppos.w;
		calculatedUV = scale * (wpos.xy / wpos.w);
		if (isCentered) calculatedUV += 0.5;
		if (min(min(calculatedUV.x, calculatedUV.y), min(1 - calculatedUV.x, 1 - calculatedUV.y)) < 0) discard;
	};
}]]></e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<abstract path="haxe.CallStack" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1"><meta><m n=":keep"/></meta></class>
	<abstract path="haxe.DynamicAccess" params="T" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EntryPoint" params="" file="/usr/local/lib/haxe/std/haxe/EntryPoint.hx">
		<pending expr="new Array&lt;Void&gt;()" line="44" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Array<Void>()]]></e></m></meta>
		</pending>
		<threadCount public="1" set="null" expr="0" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</threadCount>
		<processEvents set="method" line="99" static="1"><f a=""><x path="Float"/></f></processEvents>
		<run public="1" set="method" line="126" static="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Start the main loop. Depending on the platform, this can return immediately or will only return when the application exits.</haxe_doc>
		</run>
		<haxe_doc>If `haxe.MainLoop` is kept from DCE, then we will insert an `haxe.EntryPoint.run()` call just at then end of `main()`.
	This class can be redefined by custom frameworks so they can handle their own main loop logic.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="/usr/local/lib/haxe/std/haxe/EnumFlags.hx">
		<this><x path="Int"/></this>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.

	Enum constructor indices are preserved from Haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as `has(EnumCtor)`. Otherwise
	`Type.enumIndex()` reflection is used.</haxe_doc>
		<impl><class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe._Exception.NativeException" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/Exception.hx" private="1" module="haxe.Exception" extern="1">
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="haxe.Exception" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/Exception.hx">
		<extends path="haxe._Exception.NativeException"/>
		<caught set="method" line="18" static="1"><f a="value">
	<x path="Any"/>
	<c path="haxe.Exception"/>
</f></caught>
		<thrown set="method" line="28" static="1">
			<f a="value">
				<x path="Any"/>
				<x path="Any"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</thrown>
		<message public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Exception message.</haxe_doc>
		</message>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__skipStack>
			<x path="Int"/>
			<meta>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</__skipStack>
		<__nativeException>
			<x path="Any"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<unwrap set="method" line="70"><f a=""><x path="Any"/></f></unwrap>
		<toString public="1" set="method" line="74">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<get_message set="method" line="88"><f a=""><c path="String"/></f></get_message>
		<get_native final="1" set="method" line="96"><f a=""><x path="Any"/></f></get_native>
		<new public="1" set="method" line="40">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.Int32" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe.Json" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/Json.hx" extern="1">
		<parse public="1" set="method" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `text` is not valid JSON, an exception will be thrown.

		@see https://haxe.org/manual/std-Json-parsing.html]]></haxe_doc>
		</parse>
		<stringify public="1" set="method" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes the given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve the
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.

		@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		</stringify>
		<haxe_doc>Cross-platform JSON API: it will automatically use the optimized native API if available.
	Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
	This will provide extra encoding features such as enums (replaced by their index) and StringMaps.

	@see https://haxe.org/manual/std-Json.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":native"><e>"JSON"</e></m>
		</meta>
	</class>
	<class path="haxe.Log" params="" file="/usr/local/lib/haxe/std/haxe/Log.hx">
		<formatOutput public="1" set="method" line="33" static="1">
			<f a="v:infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<trace public="1" set="dynamic" line="62" static="1">
			<f a="v:?infos">
				<d/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.MainEvent" params="" file="/usr/local/lib/haxe/std/haxe/MainLoop.hx" module="haxe.MainLoop">
		<f><f a=""><x path="Void"/></f></f>
		<prev><c path="haxe.MainEvent"/></prev>
		<next><c path="haxe.MainEvent"/></next>
		<isBlocking public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
			<haxe_doc>Tells if the event can lock the process from exiting (default:true)</haxe_doc>
		</isBlocking>
		<nextRun public="1" set="null"><x path="Float"/></nextRun>
		<priority public="1" set="null"><x path="Int"/></priority>
		<stop public="1" set="method" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop the event from firing anymore.</haxe_doc>
		</stop>
		<new set="method" line="22"><f a="f:p">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.MainLoop" params="" file="/usr/local/lib/haxe/std/haxe/MainLoop.hx">
		<pending static="1"><c path="haxe.MainEvent"/></pending>
		<hasEvents public="1" set="method" line="76" static="1"><f a=""><x path="Bool"/></f></hasEvents>
		<add public="1" set="method" line="97" static="1">
			<f a="f:?priority" v=":0">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.MainEvent"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0 }</e></m></meta>
			<haxe_doc>Add a pending event to be run into the main loop.</haxe_doc>
		</add>
		<injectIntoEventLoop set="method" line="110" static="1"><f a="waitMs">
	<x path="Int"/>
	<x path="Void"/>
</f></injectIntoEventLoop>
		<sortEvents set="method" line="129" static="1"><f a=""><x path="Void"/></f></sortEvents>
		<tick set="method" line="194" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Run the pending events. Return the time for next event.</haxe_doc>
		</tick>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":access"><e>haxe.MainEvent</e></m>
		</meta>
	</class>
	<class path="haxe._NativeStackTrace.V8Error" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/NativeStackTrace.hx" private="1" module="haxe.NativeStackTrace" extern="1">
		<prepareStackTrace public="1" static="1"><f a="error:structuredStackTrace">
	<c path="js.lib.Error"/>
	<c path="Array"><t path="haxe.V8CallSite"/></c>
	<x path="Any"/>
</f></prepareStackTrace>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<typedef path="haxe.V8CallSite" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/NativeStackTrace.hx" module="haxe.NativeStackTrace"><a>
	<getLineNumber set="method"><f a=""><x path="Int"/></f></getLineNumber>
	<getFunctionName set="method"><f a=""><c path="String"/></f></getFunctionName>
	<getFileName set="method"><f a=""><c path="String"/></f></getFileName>
	<getColumnNumber set="method"><f a=""><x path="Int"/></f></getColumnNumber>
</a></typedef>
	<typedef path="haxe.PosInfos" params="" file="/usr/local/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<typedef path="haxe._Rest.NativeRest" params="T" file="/usr/local/lib/haxe/std/haxe/Rest.hx" private="1" module="haxe.Rest"><c path="Array"><c path="haxe._Rest.NativeRest.T"/></c></typedef>
	<abstract path="haxe.Rest" params="T" file="/usr/local/lib/haxe/std/haxe/Rest.hx">
		<from><icast field="of"><c path="Array"><c path="of.T"/></c></icast></from>
		<this><t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t></this>
		<to><icast field="toArray"><c path="Array"><c path="haxe.Rest.T"/></c></icast></to>
		<haxe_doc><![CDATA[A special type that represents a "rest" function argument.
	
	The special `...` syntax can be used for convenience and improved readability:

	```haxe
	function f(...rest:Int) {
		$type(rest); // haxe.Rest<Int>
	}

	f(1, 2, 3);

	final array = [1, 2, 3];
	f(...array);
	```

	Should be used as a type for the last argument of a method, indicating that
	an arbitrary number of arguments of the given type can be passed to that method.

	Allows to use array access by index to get values of rest arguments.
	If the index exceeds the amount of rest arguments passed, the result is unspecified.]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe._Rest.Rest_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.Timer" params="" file="/usr/local/lib/haxe/std/haxe/Timer.hx">
		<delay public="1" set="method" line="140" static="1">
			<f a="f:time_ms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>Invokes `f` after `time_ms` milliseconds.

		This is a convenience function for creating a new Timer instance with
		`time_ms` as argument, binding its `run()` method to `f` and then stopping
		`this` Timer upon the first invocation.

		If `f` is `null`, the result is unspecified.</haxe_doc>
		</delay>
		<id><x path="Null"><x path="Int"/></x></id>
		<stop public="1" set="method" line="95">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="129">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:

		```haxe
		var timer = new haxe.Timer(1000); // 1000ms delay
		timer.run = function() { ... }
		```

		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="65">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this.run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The `Timer` class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the `Timer` class with a given
	interval, set its `run()` method to a custom function to be invoked and
	eventually call `stop()` to stop the `Timer`.

	Note that a running `Timer` may or may not prevent the program to exit
	automatically when `main()` returns.

	It is also possible to extend this class and override its `run()` method in
	the child class.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ValueException" params="" file="/usr/local/lib/haxe/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<unwrap set="method" line="35" override="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		This method must return the same value on subsequent calls.
		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.crypto.Adler32" params="" file="/usr/local/lib/haxe/std/haxe/crypto/Adler32.hx">
		<read public="1" set="method" line="60" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.crypto.Adler32"/>
</f></read>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<update public="1" set="method" line="41"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="52"><f a="a">
	<c path="haxe.crypto.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Adler32 of the given Bytes.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.Bytes" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Bytes.hx">
		<ofString public="1" set="method" line="206" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `String`, using the
		specified encoding (UTF-8 by default).</haxe_doc>
		</ofString>
		<ofData public="1" set="method" line="243" static="1">
			<f a="b">
				<t path="haxe.io.BytesData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the `Bytes` representation of the given `BytesData`.</haxe_doc>
		</ofData>
		<length public="1" set="null"><x path="Int"/></length>
		<b><c path="js.lib.Uint8Array"/></b>
		<data><c path="js.lib.DataView"/></data>
		<blit public="1" set="method" line="50">
			<f a="pos:src:srcpos:len">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `len` bytes from `src` into this instance.
		@param pos Zero-based location in `this` instance at which to start writing
			bytes.
		@param src Source `Bytes` instance from which to copy bytes.
		@param srcpos Zero-based location at `src` from which bytes will be copied.
		@param len Number of bytes to be copied.</haxe_doc>
		</blit>
		<fill public="1" set="method" line="59">
			<f a="pos:len:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets `len` consecutive bytes starting from index `pos` of `this` instance
		to `value`.</haxe_doc>
		</fill>
		<getFloat public="1" set="method" line="90">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single-precision value at the given position `pos` (in
		little-endian encoding). Result is unspecified if `pos` is outside the
		bounds.</haxe_doc>
		</getFloat>
		<setFloat public="1" set="method" line="100">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given IEEE single-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" set="method" line="105">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16-bit unsigned integer at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" set="method" line="110">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 16-bit unsigned integer `v` at the given position `pos`
		(in little-endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" set="method" line="115">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32-bit integer at the given position `pos` (in little-endian
		encoding).</haxe_doc>
		</getInt32>
		<setInt32 public="1" set="method" line="120">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 32-bit integer `v` at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</setInt32>
		<getString public="1" set="method" line="134">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the `len`-bytes long string stored at the given position `pos`,
		interpreted with the given `encoding` (UTF-8 by default).</haxe_doc>
		</getString>
		<toString public="1" set="method" line="180">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a `String` representation of the bytes interpreted as UTF-8.</haxe_doc>
		</toString>
		<new set="method" line="32">
			<f a="data">
				<t path="haxe.io.BytesData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="haxe.io.Encoding" params="" file="/usr/local/lib/haxe/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="js.lib.ArrayBufferView" params="" file="/usr/local/lib/haxe/std/js/lib/ArrayBufferView.hx" extern="1" interface="1">
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<haxe_doc><![CDATA[`ArrayBufferView` is a helper type representing any of the following JavaScript `TypedArray` types:

	Documentation [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView>]]></haxe_doc>
	</class>
	<class path="js.lib.Uint8Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8Array"/>
	</f>
	<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8Array` typed array represents an array of 8-bit unsigned integers. The contents
	are initialized to 0. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Uint8Array"</e></m>
		</meta>
	</class>
	<class path="haxe.crypto.Base64" params="" file="/usr/local/lib/haxe/std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<encode public="1" set="method" line="35" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</encode>
		<decode public="1" set="method" line="48" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</decode>
		<haxe_doc>Allows one to encode/decode String and bytes using Base64 encoding.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/usr/local/lib/haxe/std/haxe/crypto/BaseCode.hx">
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows one to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.crypto.Md5" params="" file="/usr/local/lib/haxe/std/haxe/crypto/Md5.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<str2blks set="method" line="120" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bitOR set="method" line="57"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="63"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="69"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<addme set="method" line="75"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<hex set="method" line="81"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<rol set="method" line="154"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<cmn set="method" line="158"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<ff set="method" line="162"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<gg set="method" line="166"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<hh set="method" line="170"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<ii set="method" line="174"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<doEncode set="method" line="178"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<new set="method" line="55"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a MD5 of a String.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.ArraySort" params="" file="/usr/local/lib/haxe/std/haxe/ds/ArraySort.hx">
		<sort public="1" params="T" set="method" line="42" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array `a` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies Array `a` in place.

		This operation is stable: The order of equal elements is preserved.

		If `a` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="46" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="68" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="94" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="rotate.T"/>
		<c path="rotate.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="115" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="124" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="139" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="153" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its `sort`
	method. It should be used instead of `Array.sort` in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/BalancedTree.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.BalancedTree.K"/>
			<c path="haxe.ds.BalancedTree.V"/>
		</implements>
		<iteratorLoop params="K:V" set="method" line="172" static="1"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="iteratorLoop.K"/>
		<c path="iteratorLoop.V"/>
	</c>
	<c path="Array"><c path="iteratorLoop.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Null"><c path="haxe.ds.BalancedTree.V"/></x>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<iterator public="1" set="method" line="120">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<setLoop set="method" line="150"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<balance set="method" line="205"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="225"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="32" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="43"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="55"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="/usr/local/lib/haxe/std/js/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><d/></h>
		<remove public="1" set="method" line="44">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="51">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="57">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<new public="1" get="inline" set="null" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds.List" params="T" file="/usr/local/lib/haxe/std/haxe/ds/List.hx">
		<h><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></h>
		<q><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="53">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="68">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<remove public="1" set="method" line="137">
			<f a="v">
				<c path="haxe.ds.List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<new public="1" set="method" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds._List.ListNode" params="T" file="/usr/local/lib/haxe/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="266"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/usr/local/lib/haxe/std/js/_std/haxe/ds/ObjectMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<count static="1"><x path="Int"/></count>
		<h><a><__keys__><a/></__keys__></a></h>
		<set public="1" set="method" line="52">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<remove public="1" set="method" line="69">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="78">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<new public="1" set="method" line="48">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="/usr/local/lib/haxe/std/js/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h><d/></h>
		<new public="1" get="inline" set="null" line="33">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
	<blit public="1" params="T" set="method" line="151" static="1">
		<f a="src:srcPos:dest:destPos:len">
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
	</blit>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
		<blit public="1" params="T" set="method" line="151" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
		</blit>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.exceptions.PosException" params="" file="/usr/local/lib/haxe/std/haxe/exceptions/PosException.hx">
		<extends path="haxe.Exception"/>
		<posInfos final="1" public="1">
			<t path="haxe.PosInfos"/>
			<haxe_doc>Position where this exception was created.</haxe_doc>
		</posInfos>
		<toString public="1" set="method" line="24" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<new public="1" set="method" line="12"><f a="message:?previous:?pos">
	<c path="String"/>
	<c path="haxe.Exception"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception that carry position information of a place where it was created.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.exceptions.NotImplementedException" params="" file="/usr/local/lib/haxe/std/haxe/exceptions/NotImplementedException.hx">
		<extends path="haxe.exceptions.PosException"/>
		<new public="1" set="method" line="7">
			<f a="?message:?previous:?pos" v="&quot;Not implemented&quot;::">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "Not implemented" }</e></m></meta>
		</new>
		<haxe_doc>An exception that is thrown when requested function or operation does not have an implementation.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/usr/local/lib/haxe/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.extern.Rest" params="T" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx">
		<x path="haxe.Rest"><c path="haxe.extern.Rest.T"/></x>
		<haxe_doc><![CDATA[DEPRECATED: use haxe.Rest instead.
	
	A special type that represents "rest" function argument.
	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="js.lib.ArrayBufferView"/></typedef>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.io.BytesBuffer" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/BytesBuffer.hx">
		<buffer><c path="js.lib.ArrayBuffer"/></buffer>
		<view><c path="js.lib.DataView"/></view>
		<u8><c path="js.lib.Uint8Array"/></u8>
		<pos><x path="Int"/></pos>
		<size><x path="Int"/></size>
		<addByte public="1" set="method" line="44"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<add public="1" set="method" line="50"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addInt32 public="1" set="method" line="64"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addFloat public="1" set="method" line="79"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" set="method" line="86"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" set="method" line="93"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<grow set="method" line="105"><f a="delta">
	<x path="Int"/>
	<x path="Void"/>
</f></grow>
		<getBytes public="1" set="method" line="120">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer should no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesData.hx"><c path="js.lib.ArrayBuffer"/></typedef>
	<class path="haxe.io.Input" params="" file="/usr/local/lib/haxe/std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<readByte public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="64">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readFullBytes public="1" set="method" line="132">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="145">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readLine public="1" set="method" line="176">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="199">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="208">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt16 public="1" set="method" line="229">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="243">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readUInt24 public="1" set="method" line="269">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="281">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="304">
			<f a="len:?encoding">
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesInput" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><c path="js.lib.Uint8Array"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<readByte public="1" set="method" line="96" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="119" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="39"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.Output" params="" file="/usr/local/lib/haxe/std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="103">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="120">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeInt32 public="1" set="method" line="225">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<writeString public="1" set="method" line="278">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="137">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns the `Bytes` of this output.

		This function should not be called more than once on a given
		`BytesOutput` instance.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.Eof" params="" file="/usr/local/lib/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.io.Eof.*"</e></m></meta>
		</toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<enum path="haxe.io.Error" params="" file="/usr/local/lib/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="js.lib.ArrayBuffer" params="" file="/usr/local/lib/haxe/std/js/lib/ArrayBuffer.hx" extern="1">
		<isView public="1" set="method" static="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></isView>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<slice public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method">
			<f a="length">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"ArrayBuffer"</e></m>
		</meta>
	</class>
	<class path="js.lib.DataView" params="" file="/usr/local/lib/haxe/std/js/lib/DataView.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<getInt8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt8>
		<getUint8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getUint8>
		<getInt16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt16>
		<getUint16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint16>
		<getInt32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt32>
		<getUint32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint32>
		<getFloat32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat32>
		<getFloat64 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat64>
		<setInt8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt8>
		<setUint8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUint8>
		<setInt16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt16>
		<setUint16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint16>
		<setInt32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt32>
		<setUint32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint32>
		<setFloat32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat32>
		<setFloat64 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat64>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?byteLength">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"DataView"</e></m>
		</meta>
	</class>
	<class path="haxe.io.FPHelper" params="" file="/usr/local/lib/haxe/std/haxe/io/FPHelper.hx">
		<helper expr="new js.lib.DataView(new js.lib.ArrayBuffer(8))" line="127" static="1">
			<c path="js.lib.DataView"/>
			<meta><m n=":value"><e>new js.lib.DataView(new js.lib.ArrayBuffer(8))</e></m></meta>
		</helper>
		<i32ToFloat public="1" set="method" line="133" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></i32ToFloat>
		<floatToI32 public="1" set="method" line="177" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></floatToI32>
		<i64ToDouble public="1" set="method" line="214" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></i64ToDouble>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><c path="js.lib.Float32Array"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.io.Path" params="" file="/usr/local/lib/haxe/std/haxe/io/Path.hx">
		<extension public="1" set="method" line="161" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If `path` has no extension, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</extension>
		<dir public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is `null`.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for `".htaccess"` or `"/dir/"`, the value
		is the empty String `""`.</haxe_doc>
		</file>
		<ext public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is `null`.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>`true` if the last directory separator is a backslash, `false` otherwise.</haxe_doc>
		</backslash>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Path` instance by parsing `path`.

		Path information can be retrieved by accessing the `dir`, `file` and `ext`
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- `directory1/directory2/filename.extension`
	- `directory1\directory2\filename.extension`</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/usr/local/lib/haxe/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Binop" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=` `-=` `/=` `*=` `<<=` `>>=` `>>>=` `|=` `&=` `^=` `%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
		<OpIn><haxe_doc>`in`</haxe_doc></OpIn>
		<haxe_doc>A binary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<OpSpread><haxe_doc>`...`</haxe_doc></OpSpread>
		<haxe_doc>A unary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Metadata associatied with the variable, if available.</haxe_doc>
			</meta>
			<isFinal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable can be assigned to.</haxe_doc>
			</isFinal>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@see https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ObjectField" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<quotes>
				<x path="Null"><e path="haxe.macro.QuoteStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>How the field name is quoted.</haxe_doc>
			</quotes>
			<field>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</field>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The field expression.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents the field of an object declaration.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypePath" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has `name = "Module"`, `sub = "Type"`, if available.</haxe_doc>
			</sub>
			<params>
				<x path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<constraints>
				<x path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<x path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the type, if available. If the type has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ImportExpr" params="" file="/usr/local/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<class path="haxe.zip.Compress" params="" file="/usr/local/lib/haxe/std/haxe/zip/Compress.hx">
		<run public="1" set="method" line="38" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<enum path="haxe.zip.Huffman" params="" file="/usr/local/lib/haxe/std/haxe/zip/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="haxe.zip.Huffman"/>
			<e path="haxe.zip.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="haxe.zip.Huffman"/></c>
		</NeedBits>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="haxe.zip.HuffTools" params="" file="/usr/local/lib/haxe/std/haxe/zip/Huffman.hx" module="haxe.zip.Huffman">
		<treeDepth set="method" line="34"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="45"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<e path="haxe.zip.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="62"><f a="table:p:cd:d:t">
	<c path="Array"><e path="haxe.zip.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="75"><f a="bits:maxbits:v:len">
	<c path="haxe.ds.IntMap"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="86"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></make>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.zip._InflateImpl.Window" params="" file="/usr/local/lib/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="haxe.crypto.Adler32"/></crc>
		<slide public="1" set="method" line="44"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="53"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="60"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="67"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="71"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="75"><f a=""><c path="haxe.crypto.Adler32"/></f></checksum>
		<new public="1" set="method" line="37"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<enum path="haxe.zip._InflateImpl.State" params="" file="/usr/local/lib/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="haxe.zip.InflateImpl" params="" file="/usr/local/lib/haxe/std/haxe/zip/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]" line="97" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]</e></m></meta>
		</LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL expr="[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]" line="100" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]</e></m></meta>
		</LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]" line="103" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]</e></m></meta>
		</DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL expr="[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]" line="106" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]</e></m></meta>
		</DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS expr="[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]" line="109" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]</e></m></meta>
		</CODE_LENGTHS_POS>
		<FIXED_HUFFMAN expr="null" line="127" static="1">
			<e path="haxe.zip.Huffman"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</FIXED_HUFFMAN>
		<run public="1" set="method" line="388" static="1">
			<f a="i:?bufsize" v=":65536">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ bufsize : 65536 }</e></m></meta>
		</run>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="haxe.zip._InflateImpl.State"/></state>
		<isFinal><x path="Bool"/></isFinal>
		<huffman><e path="haxe.zip.Huffman"/></huffman>
		<huffdist><x path="Null"><e path="haxe.zip.Huffman"/></x></huffdist>
		<htools><c path="haxe.zip.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="haxe.zip._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="149"><f a=""><e path="haxe.zip.Huffman"/></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="159"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="168"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="179"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="190"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="199"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="204"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="211"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="218"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="224"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="228"><f a="h">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="236"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="268"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="129">
			<f a="i:?header:?crc" v=":true:true">
				<c path="haxe.io.Input"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ crc : true, header : true }</e></m></meta>
		</new>
		<haxe_doc>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.zip.Uncompress" params="" file="/usr/local/lib/haxe/std/haxe/zip/Uncompress.hx">
		<run public="1" set="method" line="38" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="hxd.BitmapInnerData" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/BitmapData.hx" module="hxd.BitmapData"><c path="js.html.CanvasRenderingContext2D"/></typedef>
	<class path="hxd.BitmapData" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/BitmapData.hx">
		<notImplemented get="inline" set="null" line="78" static="1"><f a=""><x path="Void"/></f></notImplemented>
		<fromNative public="1" set="method" line="663" static="1"><f a="data">
	<t path="hxd.BitmapInnerData"/>
	<c path="hxd.BitmapData"/>
</f></fromNative>
		<ctx><c path="js.html.CanvasRenderingContext2D"/></ctx>
		<lockImage><c path="js.html.ImageData"/></lockImage>
		<pixel><c path="js.html.ImageData"/></pixel>
		<width public="1" get="accessor" set="null"><x path="Int"/></width>
		<height public="1" get="accessor" set="null"><x path="Int"/></height>
		<clear public="1" set="method" line="70"><f a="color">
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<fill public="1" set="method" line="82"><f a="x:y:width:height:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<draw public="1" set="method" line="114"><f a="x:y:src:srcX:srcY:width:height:?blendMode">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hxd.BitmapData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="h2d.BlendMode"/>
	<x path="Void"/>
</f></draw>
		<drawScaled public="1" set="method" line="169">
			<f a="x:y:width:height:src:srcX:srcY:srcWidth:srcHeight:?blendMode:?smooth" v="::::::::::true">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="hxd.BitmapData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<e path="h2d.BlendMode"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : true }</e></m></meta>
		</drawScaled>
		<line public="1" set="method" line="227"><f a="x0:y0:x1:y1:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></line>
		<dispose public="1" get="inline" set="null" line="461"><f a=""><x path="Void"/></f></dispose>
		<clone public="1" set="method" line="472"><f a=""><c path="hxd.BitmapData"/></f></clone>
		<sub public="1" set="method" line="476"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="hxd.BitmapData"/>
</f></sub>
		<lock public="1" set="method" line="509">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Inform that we will perform several pixel operations on the BitmapData.</haxe_doc>
		</lock>
		<unlock public="1" set="method" line="521">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Inform that we have finished performing pixel operations on the BitmapData.</haxe_doc>
		</unlock>
		<getPixel public="1" set="method" line="535">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Access the pixel color value at the given position. Note : this function can be very slow if done many times and the BitmapData has not been locked.</haxe_doc>
		</getPixel>
		<setPixel public="1" set="method" line="556">
			<f a="x:y:c">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Modify the pixel color value at the given position. Note : this function can be very slow if done many times and the BitmapData has not been locked.</haxe_doc>
		</setPixel>
		<get_width get="inline" set="null" line="584"><f a=""><x path="Int"/></f></get_width>
		<get_height get="inline" set="null" line="594"><f a=""><x path="Int"/></f></get_height>
		<getPixels public="1" set="method" line="604"><f a=""><c path="hxd.Pixels"/></f></getPixels>
		<setPixels public="1" set="method" line="623"><f a="pixels">
	<c path="hxd.Pixels"/>
	<x path="Void"/>
</f></setPixels>
		<toNative public="1" get="inline" set="null" line="653"><f a=""><t path="hxd.BitmapInnerData"/></f></toNative>
		<toPNG public="1" set="method" line="675"><f a=""><c path="haxe.io.Bytes"/></f></toPNG>
		<new public="1" set="method" line="45"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="hxd.Cursor" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Cursor.hx">
		<Default/>
		<Button/>
		<Move/>
		<TextInput/>
		<Hide/>
		<Custom a="custom"><c path="hxd.CustomCursor"/></Custom>
		<Callback a="f">
			<f a=""><x path="Void"/></f>
			<haxe_doc>When this cursor is selected, call the function itself, which can handle complex logic and is responsible to call hxd.System.setCursor</haxe_doc>
		</Callback>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="hxd.CustomCursor" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Cursor.hx" module="hxd.Cursor">
		<getNativeCursor public="1" set="method" line="111" static="1"><f a="name">
	<c path="String"/>
	<e path="hxd.Cursor"/>
</f></getNativeCursor>
		<frames><c path="Array"><c path="hxd.BitmapData"/></c></frames>
		<speed><x path="Float"/></speed>
		<offsetX><x path="Int"/></offsetX>
		<offsetY><x path="Int"/></offsetY>
		<alloc><c path="Array"><c path="String"/></c></alloc>
		<frameDelay><x path="Float"/></frameDelay>
		<frameTime><x path="Float"/></frameTime>
		<frameIndex><x path="Int"/></frameIndex>
		<reset public="1" set="method" line="62"><f a=""><x path="Void"/></f></reset>
		<update public="1" set="method" line="67"><f a="dt">
	<x path="Float"/>
	<x path="Int"/>
</f></update>
		<dispose public="1" set="method" line="86"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="46"><f a="frames:speed:offsetX:offsetY">
	<c path="Array"><c path="hxd.BitmapData"/></c>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>hxd.System</e></m></meta>
	</class>
	<enum path="hxd.EventKind" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Event.hx" module="hxd.Event">
		<EPush/>
		<ERelease/>
		<EMove/>
		<EOver/>
		<EOut/>
		<EWheel/>
		<EFocus/>
		<EFocusLost/>
		<EKeyDown/>
		<EKeyUp/>
		<EReleaseOutside/>
		<ETextInput/>
		<ECheck><haxe_doc>Used to check if we are still on the interactive if no EMove was triggered this frame.</haxe_doc></ECheck>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="hxd.Event" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Event.hx">
		<kind public="1"><e path="hxd.EventKind"/></kind>
		<relX public="1"><x path="Float"/></relX>
		<relY public="1"><x path="Float"/></relY>
		<relZ public="1"><x path="Float"/></relZ>
		<propagate public="1">
			<x path="Bool"/>
			<haxe_doc>Will propagate the event to other interactives that are below the current one.</haxe_doc>
		</propagate>
		<cancel public="1">
			<x path="Bool"/>
			<haxe_doc>Will cancel the default behavior for this event as if it had happen outside of the interactive zone.</haxe_doc>
		</cancel>
		<button public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</button>
		<touchId public="1"><x path="Int"/></touchId>
		<keyCode public="1"><x path="Int"/></keyCode>
		<charCode public="1"><x path="Int"/></charCode>
		<wheelDelta public="1"><x path="Float"/></wheelDelta>
		<toString public="1" set="method" line="48"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="42">
			<f a="k:?x:?y" v=":0.:0.">
				<e path="hxd.EventKind"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0., x : 0. }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="hxd._FloatBuffer.InnerData" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/FloatBuffer.hx" private="1" module="hxd.FloatBuffer"><x path="hxd._FloatBuffer.Float32Expand"/></typedef>
	<abstract path="hxd._FloatBuffer.Float32Expand" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/FloatBuffer.hx" private="1" module="hxd.FloatBuffer">
		<this><a>
	<pos><x path="Int"/></pos>
	<array><t path="hxd.impl.Float32Array"/></array>
</a></this>
		<to>
			<icast field="toF32Array"><c path="js.lib.Float32Array"/></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
		</to>
		<impl><class path="hxd._FloatBuffer.Float32Expand_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/FloatBuffer.hx" private="1" module="hxd.FloatBuffer" final="1">
	<length public="1" get="accessor" set="accessor" static="1"><x path="Int"/></length>
	<_new public="1" set="method" line="11" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="hxd._FloatBuffer.Float32Expand"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="15" static="1"><f a="this">
	<a>
		<pos><x path="Int"/></pos>
		<array><t path="hxd.impl.Float32Array"/></array>
	</a>
	<x path="Int"/>
</f></get_length>
	<set_length get="inline" set="null" line="16" static="1"><f a="this:v">
	<a>
		<pos><x path="Int"/></pos>
		<array><t path="hxd.impl.Float32Array"/></array>
	</a>
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
	<push public="1" get="inline" set="null" line="26" static="1"><f a="this:v">
	<a>
		<pos><x path="Int"/></pos>
		<array><t path="hxd.impl.Float32Array"/></array>
	</a>
	<x path="Float"/>
	<x path="Void"/>
</f></push>
	<get get="inline" set="null" line="37" static="1">
		<f a="this:index">
			<a>
				<pos><x path="Int"/></pos>
				<array><t path="hxd.impl.Float32Array"/></array>
			</a>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set get="inline" set="null" line="38" static="1">
		<f a="this:index:v">
			<a>
				<pos><x path="Int"/></pos>
				<array><t path="hxd.impl.Float32Array"/></array>
			</a>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<toF32Array get="inline" set="null" line="40" static="1">
		<f a="this">
			<a>
				<pos><x path="Int"/></pos>
				<array><t path="hxd.impl.Float32Array"/></array>
			</a>
			<t path="hxd.impl.Float32Array"/>
		</f>
		<meta><m n=":to"/></meta>
	</toF32Array>
	<toArray get="inline" set="null" line="41" static="1">
		<f a="this">
			<a>
				<pos><x path="Int"/></pos>
				<array><t path="hxd.impl.Float32Array"/></array>
			</a>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":to"/></meta>
	</toArray>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hxd._FloatBuffer.Float32Expand_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/FloatBuffer.hx" private="1" module="hxd.FloatBuffer" final="1">
		<length public="1" get="accessor" set="accessor" static="1"><x path="Int"/></length>
		<_new public="1" set="method" line="11" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="hxd._FloatBuffer.Float32Expand"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="15" static="1"><f a="this">
	<a>
		<pos><x path="Int"/></pos>
		<array><t path="hxd.impl.Float32Array"/></array>
	</a>
	<x path="Int"/>
</f></get_length>
		<set_length get="inline" set="null" line="16" static="1"><f a="this:v">
	<a>
		<pos><x path="Int"/></pos>
		<array><t path="hxd.impl.Float32Array"/></array>
	</a>
	<x path="Int"/>
	<x path="Int"/>
</f></set_length>
		<push public="1" get="inline" set="null" line="26" static="1"><f a="this:v">
	<a>
		<pos><x path="Int"/></pos>
		<array><t path="hxd.impl.Float32Array"/></array>
	</a>
	<x path="Float"/>
	<x path="Void"/>
</f></push>
		<get get="inline" set="null" line="37" static="1">
			<f a="this:index">
				<a>
					<pos><x path="Int"/></pos>
					<array><t path="hxd.impl.Float32Array"/></array>
				</a>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set get="inline" set="null" line="38" static="1">
			<f a="this:index:v">
				<a>
					<pos><x path="Int"/></pos>
					<array><t path="hxd.impl.Float32Array"/></array>
				</a>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<toF32Array get="inline" set="null" line="40" static="1">
			<f a="this">
				<a>
					<pos><x path="Int"/></pos>
					<array><t path="hxd.impl.Float32Array"/></array>
				</a>
				<t path="hxd.impl.Float32Array"/>
			</f>
			<meta><m n=":to"/></meta>
		</toF32Array>
		<toArray get="inline" set="null" line="41" static="1">
			<f a="this">
				<a>
					<pos><x path="Int"/></pos>
					<array><t path="hxd.impl.Float32Array"/></array>
				</a>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":to"/></meta>
		</toArray>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd._FloatBuffer.InnerIterator" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/FloatBuffer.hx" private="1" module="hxd.FloatBuffer">
		<b><t path="hxd._FloatBuffer.InnerData"/></b>
		<len><x path="Int"/></len>
		<pos><x path="Int"/></pos>
		<hasNext public="1" get="inline" set="null" line="55"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="58"><f a=""><x path="Float"/></f></next>
		<new public="1" get="inline" set="null" line="50"><f a="b">
	<t path="hxd._FloatBuffer.InnerData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxd.FloatBuffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/FloatBuffer.hx">
		<this><t path="hxd._FloatBuffer.InnerData"/></this>
		<impl><class path="hxd._FloatBuffer.FloatBuffer_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/FloatBuffer.hx" private="1" module="hxd.FloatBuffer" final="1">
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<_new public="1" get="inline" set="null" line="67" static="1">
		<f a="?length" v="0">
			<x path="Int"/>
			<x path="hxd.FloatBuffer"/>
		</f>
		<meta>
			<m n=":value"><e>{ length : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<push public="1" get="inline" set="null" line="76" static="1"><f a="this:v">
	<t path="hxd._FloatBuffer.InnerData"/>
	<t path="hxd.impl.Float32"/>
	<x path="Void"/>
</f></push>
	<grow public="1" get="inline" set="null" line="84" static="1"><f a="this:v">
	<t path="hxd._FloatBuffer.InnerData"/>
	<x path="Int"/>
	<x path="Void"/>
</f></grow>
	<resize public="1" get="inline" set="null" line="95" static="1"><f a="this:v">
	<t path="hxd._FloatBuffer.InnerData"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
	<arrayRead get="inline" set="null" line="104" static="1">
		<f a="this:key">
			<t path="hxd._FloatBuffer.InnerData"/>
			<x path="Int"/>
			<t path="hxd.impl.Float32"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</arrayRead>
	<arrayWrite get="inline" set="null" line="108" static="1">
		<f a="this:key:value">
			<t path="hxd._FloatBuffer.InnerData"/>
			<x path="Int"/>
			<t path="hxd.impl.Float32"/>
			<t path="hxd.impl.Float32"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</arrayWrite>
	<getNative public="1" get="inline" set="null" line="112" static="1"><f a="this">
	<t path="hxd._FloatBuffer.InnerData"/>
	<t path="hxd._FloatBuffer.InnerData"/>
</f></getNative>
	<iterator public="1" get="inline" set="null" line="116" static="1"><f a="this">
	<t path="hxd._FloatBuffer.InnerData"/>
	<c path="hxd._FloatBuffer.InnerIterator"/>
</f></iterator>
	<get_length get="inline" set="null" line="120" static="1"><f a="this">
	<t path="hxd._FloatBuffer.InnerData"/>
	<x path="Int"/>
</f></get_length>
</class></impl>
	</abstract>
	<class path="hxd._FloatBuffer.FloatBuffer_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/FloatBuffer.hx" private="1" module="hxd.FloatBuffer" final="1">
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<_new public="1" get="inline" set="null" line="67" static="1">
			<f a="?length" v="0">
				<x path="Int"/>
				<x path="hxd.FloatBuffer"/>
			</f>
			<meta>
				<m n=":value"><e>{ length : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<push public="1" get="inline" set="null" line="76" static="1"><f a="this:v">
	<t path="hxd._FloatBuffer.InnerData"/>
	<t path="hxd.impl.Float32"/>
	<x path="Void"/>
</f></push>
		<grow public="1" get="inline" set="null" line="84" static="1"><f a="this:v">
	<t path="hxd._FloatBuffer.InnerData"/>
	<x path="Int"/>
	<x path="Void"/>
</f></grow>
		<resize public="1" get="inline" set="null" line="95" static="1"><f a="this:v">
	<t path="hxd._FloatBuffer.InnerData"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<arrayRead get="inline" set="null" line="104" static="1">
			<f a="this:key">
				<t path="hxd._FloatBuffer.InnerData"/>
				<x path="Int"/>
				<t path="hxd.impl.Float32"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</arrayRead>
		<arrayWrite get="inline" set="null" line="108" static="1">
			<f a="this:key:value">
				<t path="hxd._FloatBuffer.InnerData"/>
				<x path="Int"/>
				<t path="hxd.impl.Float32"/>
				<t path="hxd.impl.Float32"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</arrayWrite>
		<getNative public="1" get="inline" set="null" line="112" static="1"><f a="this">
	<t path="hxd._FloatBuffer.InnerData"/>
	<t path="hxd._FloatBuffer.InnerData"/>
</f></getNative>
		<iterator public="1" get="inline" set="null" line="116" static="1"><f a="this">
	<t path="hxd._FloatBuffer.InnerData"/>
	<c path="hxd._FloatBuffer.InnerIterator"/>
</f></iterator>
		<get_length get="inline" set="null" line="120" static="1"><f a="this">
	<t path="hxd._FloatBuffer.InnerData"/>
	<x path="Int"/>
</f></get_length>
	</class>
	<typedef path="hxd._IndexBuffer.InnerData" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/IndexBuffer.hx" private="1" module="hxd.IndexBuffer"><c path="Array"><t path="hxd.impl.UInt16"/></c></typedef>
	<class path="hxd._IndexBuffer.InnerIterator" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/IndexBuffer.hx" private="1" module="hxd.IndexBuffer">
		<b><t path="hxd._IndexBuffer.InnerData"/></b>
		<len><x path="Int"/></len>
		<pos><x path="Int"/></pos>
		<hasNext public="1" get="inline" set="null" line="14"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="17"><f a=""><x path="Int"/></f></next>
		<new public="1" get="inline" set="null" line="9"><f a="b">
	<t path="hxd._IndexBuffer.InnerData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxd.IndexBuffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/IndexBuffer.hx">
		<this><t path="hxd._IndexBuffer.InnerData"/></this>
		<impl><class path="hxd._IndexBuffer.IndexBuffer_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/IndexBuffer.hx" private="1" module="hxd.IndexBuffer" final="1">
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="?length" v="0">
			<x path="Int"/>
			<x path="hxd.IndexBuffer"/>
		</f>
		<meta>
			<m n=":value"><e>{ length : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<push public="1" get="inline" set="null" line="37" static="1"><f a="this:v">
	<t path="hxd._IndexBuffer.InnerData"/>
	<x path="Int"/>
	<x path="Void"/>
</f></push>
	<grow public="1" get="inline" set="null" line="45" static="1"><f a="this:v">
	<t path="hxd._IndexBuffer.InnerData"/>
	<x path="Int"/>
	<x path="Void"/>
</f></grow>
	<arrayRead get="inline" set="null" line="55" static="1">
		<f a="this:key">
			<t path="hxd._IndexBuffer.InnerData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</arrayRead>
	<arrayWrite get="inline" set="null" line="59" static="1">
		<f a="this:key:value">
			<t path="hxd._IndexBuffer.InnerData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</arrayWrite>
	<getNative public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<t path="hxd._IndexBuffer.InnerData"/>
	<t path="hxd._IndexBuffer.InnerData"/>
</f></getNative>
	<iterator public="1" get="inline" set="null" line="67" static="1"><f a="this">
	<t path="hxd._IndexBuffer.InnerData"/>
	<c path="hxd._IndexBuffer.InnerIterator"/>
</f></iterator>
	<get_length get="inline" set="null" line="71" static="1"><f a="this">
	<t path="hxd._IndexBuffer.InnerData"/>
	<x path="Int"/>
</f></get_length>
</class></impl>
	</abstract>
	<class path="hxd._IndexBuffer.IndexBuffer_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/IndexBuffer.hx" private="1" module="hxd.IndexBuffer" final="1">
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="?length" v="0">
				<x path="Int"/>
				<x path="hxd.IndexBuffer"/>
			</f>
			<meta>
				<m n=":value"><e>{ length : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<push public="1" get="inline" set="null" line="37" static="1"><f a="this:v">
	<t path="hxd._IndexBuffer.InnerData"/>
	<x path="Int"/>
	<x path="Void"/>
</f></push>
		<grow public="1" get="inline" set="null" line="45" static="1"><f a="this:v">
	<t path="hxd._IndexBuffer.InnerData"/>
	<x path="Int"/>
	<x path="Void"/>
</f></grow>
		<arrayRead get="inline" set="null" line="55" static="1">
			<f a="this:key">
				<t path="hxd._IndexBuffer.InnerData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</arrayRead>
		<arrayWrite get="inline" set="null" line="59" static="1">
			<f a="this:key:value">
				<t path="hxd._IndexBuffer.InnerData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</arrayWrite>
		<getNative public="1" get="inline" set="null" line="63" static="1"><f a="this">
	<t path="hxd._IndexBuffer.InnerData"/>
	<t path="hxd._IndexBuffer.InnerData"/>
</f></getNative>
		<iterator public="1" get="inline" set="null" line="67" static="1"><f a="this">
	<t path="hxd._IndexBuffer.InnerData"/>
	<c path="hxd._IndexBuffer.InnerIterator"/>
</f></iterator>
		<get_length get="inline" set="null" line="71" static="1"><f a="this">
	<t path="hxd._IndexBuffer.InnerData"/>
	<x path="Int"/>
</f></get_length>
	</class>
	<class path="hxd.Key" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Key.hx">
		<BACKSPACE public="1" get="inline" set="null" expr="8" line="7" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BACKSPACE>
		<TAB public="1" get="inline" set="null" expr="9" line="8" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</TAB>
		<ENTER public="1" get="inline" set="null" expr="13" line="9" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</ENTER>
		<SHIFT public="1" get="inline" set="null" expr="16" line="10" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</SHIFT>
		<CTRL public="1" get="inline" set="null" expr="17" line="11" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</CTRL>
		<ALT public="1" get="inline" set="null" expr="18" line="12" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</ALT>
		<ESCAPE public="1" get="inline" set="null" expr="27" line="13" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>27</e></m></meta>
		</ESCAPE>
		<SPACE public="1" get="inline" set="null" expr="32" line="14" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</SPACE>
		<PGUP public="1" get="inline" set="null" expr="33" line="15" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33</e></m></meta>
		</PGUP>
		<PGDOWN public="1" get="inline" set="null" expr="34" line="16" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34</e></m></meta>
		</PGDOWN>
		<END public="1" get="inline" set="null" expr="35" line="17" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35</e></m></meta>
		</END>
		<HOME public="1" get="inline" set="null" expr="36" line="18" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36</e></m></meta>
		</HOME>
		<LEFT public="1" get="inline" set="null" expr="37" line="19" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37</e></m></meta>
		</LEFT>
		<UP public="1" get="inline" set="null" expr="38" line="20" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>38</e></m></meta>
		</UP>
		<RIGHT public="1" get="inline" set="null" expr="39" line="21" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>39</e></m></meta>
		</RIGHT>
		<DOWN public="1" get="inline" set="null" expr="40" line="22" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>40</e></m></meta>
		</DOWN>
		<INSERT public="1" get="inline" set="null" expr="45" line="23" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>45</e></m></meta>
		</INSERT>
		<DELETE public="1" get="inline" set="null" expr="46" line="24" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
		</DELETE>
		<QWERTY_EQUALS public="1" get="inline" set="null" expr="187" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>187</e></m></meta>
		</QWERTY_EQUALS>
		<QWERTY_MINUS public="1" get="inline" set="null" expr="189" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>189</e></m></meta>
		</QWERTY_MINUS>
		<QWERTY_TILDE public="1" get="inline" set="null" expr="192" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>192</e></m></meta>
		</QWERTY_TILDE>
		<QWERTY_BRACKET_LEFT public="1" get="inline" set="null" expr="219" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>219</e></m></meta>
		</QWERTY_BRACKET_LEFT>
		<QWERTY_BRACKET_RIGHT public="1" get="inline" set="null" expr="221" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>221</e></m></meta>
		</QWERTY_BRACKET_RIGHT>
		<QWERTY_SEMICOLON public="1" get="inline" set="null" expr="186" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>186</e></m></meta>
		</QWERTY_SEMICOLON>
		<QWERTY_QUOTE public="1" get="inline" set="null" expr="222" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>222</e></m></meta>
		</QWERTY_QUOTE>
		<QWERTY_BACKSLASH public="1" get="inline" set="null" expr="220" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>220</e></m></meta>
		</QWERTY_BACKSLASH>
		<QWERTY_COMMA public="1" get="inline" set="null" expr="188" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>188</e></m></meta>
		</QWERTY_COMMA>
		<QWERTY_PERIOD public="1" get="inline" set="null" expr="190" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>190</e></m></meta>
		</QWERTY_PERIOD>
		<QWERTY_SLASH public="1" get="inline" set="null" expr="191" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>191</e></m></meta>
		</QWERTY_SLASH>
		<INTL_BACKSLASH public="1" get="inline" set="null" expr="226" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>226</e></m></meta>
		</INTL_BACKSLASH>
		<LEFT_WINDOW_KEY public="1" get="inline" set="null" expr="91" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>91</e></m></meta>
		</LEFT_WINDOW_KEY>
		<RIGHT_WINDOW_KEY public="1" get="inline" set="null" expr="92" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>92</e></m></meta>
		</RIGHT_WINDOW_KEY>
		<CONTEXT_MENU public="1" get="inline" set="null" expr="93" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>93</e></m></meta>
		</CONTEXT_MENU>
		<PAUSE_BREAK public="1" get="inline" set="null" expr="19" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</PAUSE_BREAK>
		<CAPS_LOCK public="1" get="inline" set="null" expr="20" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</CAPS_LOCK>
		<NUM_LOCK public="1" get="inline" set="null" expr="144" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>144</e></m></meta>
		</NUM_LOCK>
		<SCROLL_LOCK public="1" get="inline" set="null" expr="145" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>145</e></m></meta>
		</SCROLL_LOCK>
		<NUMBER_0 public="1" get="inline" set="null" expr="48" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>48</e></m></meta>
		</NUMBER_0>
		<NUMBER_1 public="1" get="inline" set="null" expr="49" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>49</e></m></meta>
		</NUMBER_1>
		<NUMBER_2 public="1" get="inline" set="null" expr="50" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>50</e></m></meta>
		</NUMBER_2>
		<NUMBER_3 public="1" get="inline" set="null" expr="51" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>51</e></m></meta>
		</NUMBER_3>
		<NUMBER_4 public="1" get="inline" set="null" expr="52" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>52</e></m></meta>
		</NUMBER_4>
		<NUMBER_5 public="1" get="inline" set="null" expr="53" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>53</e></m></meta>
		</NUMBER_5>
		<NUMBER_6 public="1" get="inline" set="null" expr="54" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>54</e></m></meta>
		</NUMBER_6>
		<NUMBER_7 public="1" get="inline" set="null" expr="55" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>55</e></m></meta>
		</NUMBER_7>
		<NUMBER_8 public="1" get="inline" set="null" expr="56" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>56</e></m></meta>
		</NUMBER_8>
		<NUMBER_9 public="1" get="inline" set="null" expr="57" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>57</e></m></meta>
		</NUMBER_9>
		<NUMPAD_0 public="1" get="inline" set="null" expr="96" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>96</e></m></meta>
		</NUMPAD_0>
		<NUMPAD_1 public="1" get="inline" set="null" expr="97" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>97</e></m></meta>
		</NUMPAD_1>
		<NUMPAD_2 public="1" get="inline" set="null" expr="98" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>98</e></m></meta>
		</NUMPAD_2>
		<NUMPAD_3 public="1" get="inline" set="null" expr="99" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>99</e></m></meta>
		</NUMPAD_3>
		<NUMPAD_4 public="1" get="inline" set="null" expr="100" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>100</e></m></meta>
		</NUMPAD_4>
		<NUMPAD_5 public="1" get="inline" set="null" expr="101" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>101</e></m></meta>
		</NUMPAD_5>
		<NUMPAD_6 public="1" get="inline" set="null" expr="102" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>102</e></m></meta>
		</NUMPAD_6>
		<NUMPAD_7 public="1" get="inline" set="null" expr="103" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>103</e></m></meta>
		</NUMPAD_7>
		<NUMPAD_8 public="1" get="inline" set="null" expr="104" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>104</e></m></meta>
		</NUMPAD_8>
		<NUMPAD_9 public="1" get="inline" set="null" expr="105" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>105</e></m></meta>
		</NUMPAD_9>
		<A public="1" get="inline" set="null" expr="65" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65</e></m></meta>
		</A>
		<B public="1" get="inline" set="null" expr="66" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>66</e></m></meta>
		</B>
		<C public="1" get="inline" set="null" expr="67" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>67</e></m></meta>
		</C>
		<D public="1" get="inline" set="null" expr="68" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>68</e></m></meta>
		</D>
		<E public="1" get="inline" set="null" expr="69" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>69</e></m></meta>
		</E>
		<F public="1" get="inline" set="null" expr="70" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>70</e></m></meta>
		</F>
		<G public="1" get="inline" set="null" expr="71" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>71</e></m></meta>
		</G>
		<H public="1" get="inline" set="null" expr="72" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>72</e></m></meta>
		</H>
		<I public="1" get="inline" set="null" expr="73" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>73</e></m></meta>
		</I>
		<J public="1" get="inline" set="null" expr="74" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>74</e></m></meta>
		</J>
		<K public="1" get="inline" set="null" expr="75" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>75</e></m></meta>
		</K>
		<L public="1" get="inline" set="null" expr="76" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>76</e></m></meta>
		</L>
		<M public="1" get="inline" set="null" expr="77" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>77</e></m></meta>
		</M>
		<N public="1" get="inline" set="null" expr="78" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>78</e></m></meta>
		</N>
		<O public="1" get="inline" set="null" expr="79" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>79</e></m></meta>
		</O>
		<P public="1" get="inline" set="null" expr="80" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>80</e></m></meta>
		</P>
		<Q public="1" get="inline" set="null" expr="81" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>81</e></m></meta>
		</Q>
		<R public="1" get="inline" set="null" expr="82" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>82</e></m></meta>
		</R>
		<S public="1" get="inline" set="null" expr="83" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>83</e></m></meta>
		</S>
		<T public="1" get="inline" set="null" expr="84" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>84</e></m></meta>
		</T>
		<U public="1" get="inline" set="null" expr="85" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>85</e></m></meta>
		</U>
		<V public="1" get="inline" set="null" expr="86" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>86</e></m></meta>
		</V>
		<W public="1" get="inline" set="null" expr="87" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>87</e></m></meta>
		</W>
		<X public="1" get="inline" set="null" expr="88" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>88</e></m></meta>
		</X>
		<Y public="1" get="inline" set="null" expr="89" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>89</e></m></meta>
		</Y>
		<Z public="1" get="inline" set="null" expr="90" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>90</e></m></meta>
		</Z>
		<F1 public="1" get="inline" set="null" expr="112" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>112</e></m></meta>
		</F1>
		<F2 public="1" get="inline" set="null" expr="113" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>113</e></m></meta>
		</F2>
		<F3 public="1" get="inline" set="null" expr="114" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>114</e></m></meta>
		</F3>
		<F4 public="1" get="inline" set="null" expr="115" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>115</e></m></meta>
		</F4>
		<F5 public="1" get="inline" set="null" expr="116" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>116</e></m></meta>
		</F5>
		<F6 public="1" get="inline" set="null" expr="117" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>117</e></m></meta>
		</F6>
		<F7 public="1" get="inline" set="null" expr="118" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>118</e></m></meta>
		</F7>
		<F8 public="1" get="inline" set="null" expr="119" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>119</e></m></meta>
		</F8>
		<F9 public="1" get="inline" set="null" expr="120" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>120</e></m></meta>
		</F9>
		<F10 public="1" get="inline" set="null" expr="121" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>121</e></m></meta>
		</F10>
		<F11 public="1" get="inline" set="null" expr="122" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>122</e></m></meta>
		</F11>
		<F12 public="1" get="inline" set="null" expr="123" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>123</e></m></meta>
		</F12>
		<F13 public="1" get="inline" set="null" expr="124" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>124</e></m></meta>
		</F13>
		<F14 public="1" get="inline" set="null" expr="125" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>125</e></m></meta>
		</F14>
		<F15 public="1" get="inline" set="null" expr="126" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>126</e></m></meta>
		</F15>
		<F16 public="1" get="inline" set="null" expr="127" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>127</e></m></meta>
		</F16>
		<F17 public="1" get="inline" set="null" expr="128" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</F17>
		<F18 public="1" get="inline" set="null" expr="129" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>129</e></m></meta>
		</F18>
		<F19 public="1" get="inline" set="null" expr="130" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>130</e></m></meta>
		</F19>
		<F20 public="1" get="inline" set="null" expr="131" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>131</e></m></meta>
		</F20>
		<F21 public="1" get="inline" set="null" expr="132" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>132</e></m></meta>
		</F21>
		<F22 public="1" get="inline" set="null" expr="133" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>133</e></m></meta>
		</F22>
		<F23 public="1" get="inline" set="null" expr="134" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>134</e></m></meta>
		</F23>
		<F24 public="1" get="inline" set="null" expr="135" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>135</e></m></meta>
		</F24>
		<NUMPAD_MULT public="1" get="inline" set="null" expr="106" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>106</e></m></meta>
		</NUMPAD_MULT>
		<NUMPAD_ADD public="1" get="inline" set="null" expr="107" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>107</e></m></meta>
		</NUMPAD_ADD>
		<NUMPAD_ENTER public="1" get="inline" set="null" expr="108" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>108</e></m></meta>
		</NUMPAD_ENTER>
		<NUMPAD_SUB public="1" get="inline" set="null" expr="109" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>109</e></m></meta>
		</NUMPAD_SUB>
		<NUMPAD_DOT public="1" get="inline" set="null" expr="110" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>110</e></m></meta>
		</NUMPAD_DOT>
		<NUMPAD_DIV public="1" get="inline" set="null" expr="111" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>111</e></m></meta>
		</NUMPAD_DIV>
		<MOUSE_LEFT public="1" get="inline" set="null" expr="0" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</MOUSE_LEFT>
		<MOUSE_RIGHT public="1" get="inline" set="null" expr="1" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</MOUSE_RIGHT>
		<MOUSE_MIDDLE public="1" get="inline" set="null" expr="2" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</MOUSE_MIDDLE>
		<MOUSE_BACK public="1" get="inline" set="null" expr="3" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</MOUSE_BACK>
		<MOUSE_FORWARD public="1" get="inline" set="null" expr="4" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</MOUSE_FORWARD>
		<MOUSE_WHEEL_UP public="1" get="inline" set="null" expr="5" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
			<haxe_doc>* Mouse wheel does not have an off signal, and should be checked only through `isPressed` method.
	 * Note that there may be multiple wheel scrolls between 2 frames, and to receive more accurate
	 * results, it is recommended to directly listen to wheel events which also provide OS-generated wheel delta value.
	 * See `Interactive.onWheel` for per-interactive events. For scene-based see `Scene.addEventListener`
	 * when event is `EWheel`. For global hook use `Window.addEventTarget` method.</haxe_doc>
		</MOUSE_WHEEL_UP>
		<MOUSE_WHEEL_DOWN public="1" get="inline" set="null" expr="6" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
			<haxe_doc>* Mouse wheel does not have an off signal, and should be checked only through `isPressed` method.
	 * Note that there may be multiple wheel scrolls between 2 frames, and to receive more accurate
	 * results, it is recommended to directly listen to wheel events which also provide OS-generated wheel delta value.
	 * See `Interactive.onWheel` for per-interactive events. For scene-based see `Scene.addEventListener`
	 * when event is `EWheel`. For global hook use `Window.addEventTarget` method.</haxe_doc>
		</MOUSE_WHEEL_DOWN>
		<LOC_LEFT public="1" get="inline" set="null" expr="256" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
			<haxe_doc>a bit that is set for left keys</haxe_doc>
		</LOC_LEFT>
		<LOC_RIGHT public="1" get="inline" set="null" expr="512" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
			<haxe_doc>a bit that is set for right keys</haxe_doc>
		</LOC_RIGHT>
		<LSHIFT public="1" get="inline" set="null" expr="SHIFT | LOC_LEFT" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>SHIFT | LOC_LEFT</e></m></meta>
		</LSHIFT>
		<RSHIFT public="1" get="inline" set="null" expr="SHIFT | LOC_RIGHT" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>SHIFT | LOC_RIGHT</e></m></meta>
		</RSHIFT>
		<LCTRL public="1" get="inline" set="null" expr="CTRL | LOC_LEFT" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>CTRL | LOC_LEFT</e></m></meta>
		</LCTRL>
		<RCTRL public="1" get="inline" set="null" expr="CTRL | LOC_RIGHT" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>CTRL | LOC_RIGHT</e></m></meta>
		</RCTRL>
		<LALT public="1" get="inline" set="null" expr="ALT | LOC_LEFT" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>ALT | LOC_LEFT</e></m></meta>
		</LALT>
		<RALT public="1" get="inline" set="null" expr="ALT | LOC_RIGHT" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>ALT | LOC_RIGHT</e></m></meta>
		</RALT>
		<initDone expr="false" line="168" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</initDone>
		<keyPressed expr="[]" line="169" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</keyPressed>
		<ALLOW_KEY_REPEAT public="1" expr="false" line="177" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>This enable the native key repeat behavior, and will
		report several times isPressed() in case a key is kept
		pressed for a long time if this is allowed by the target
		platform.</haxe_doc>
		</ALLOW_KEY_REPEAT>
		<isDown public="1" set="method" line="179" static="1"><f a="code">
	<x path="Int"/>
	<x path="Bool"/>
</f></isDown>
		<getFrame public="1" get="inline" set="null" line="183" static="1"><f a=""><x path="Int"/></f></getFrame>
		<isPressed public="1" set="method" line="187" static="1"><f a="code">
	<x path="Int"/>
	<x path="Bool"/>
</f></isPressed>
		<isReleased public="1" set="method" line="191" static="1"><f a="code">
	<x path="Int"/>
	<x path="Bool"/>
</f></isReleased>
		<initialize public="1" set="method" line="195" static="1"><f a=""><x path="Void"/></f></initialize>
		<dispose public="1" set="method" line="206" static="1"><f a=""><x path="Void"/></f></dispose>
		<onEvent set="method" line="223" static="1"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></onEvent>
		<getKeyName public="1" set="method" line="240" static="1"><f a="keyCode">
	<x path="Int"/>
	<x path="Null"><c path="String"/></x>
</f></getKeyName>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.Math" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Math.hx">
		<PI public="1" get="inline" set="null" expr="3.14159265358979323" line="5" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>3.14159265358979323</e></m></meta>
		</PI>
		<EPSILON public="1" get="inline" set="null" expr="1e-10" line="6" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1e-10</e></m></meta>
		</EPSILON>
		<POSITIVE_INFINITY public="1" get="accessor" set="null" static="1"><x path="Float"/></POSITIVE_INFINITY>
		<NEGATIVE_INFINITY public="1" get="accessor" set="null" static="1"><x path="Float"/></NEGATIVE_INFINITY>
		<NaN public="1" get="accessor" set="null" static="1"><x path="Float"/></NaN>
		<get_POSITIVE_INFINITY get="inline" set="null" line="12" static="1"><f a=""><x path="Float"/></f></get_POSITIVE_INFINITY>
		<get_NEGATIVE_INFINITY get="inline" set="null" line="16" static="1"><f a=""><x path="Float"/></f></get_NEGATIVE_INFINITY>
		<get_NaN get="inline" set="null" line="20" static="1"><f a=""><x path="Float"/></f></get_NaN>
		<isNaN public="1" get="inline" set="null" line="24" static="1"><f a="v">
	<x path="Float"/>
	<x path="Bool"/>
</f></isNaN>
		<fmt public="1" set="method" line="29" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fmt>
		<floor public="1" get="inline" set="null" line="47" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></floor>
		<ceil public="1" get="inline" set="null" line="51" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></ceil>
		<round public="1" get="inline" set="null" line="55" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<clamp public="1" get="inline" set="null" line="59" static="1">
			<f a="f:?min:?max" v=":0.:1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ max : 1., min : 0. }</e></m></meta>
		</clamp>
		<pow public="1" get="inline" set="null" line="63" static="1"><f a="v:p">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<cos public="1" get="inline" set="null" line="67" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<sin public="1" get="inline" set="null" line="71" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<tan public="1" get="inline" set="null" line="75" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<acos public="1" get="inline" set="null" line="79" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<asin public="1" get="inline" set="null" line="83" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<atan public="1" get="inline" set="null" line="87" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<sqrt public="1" get="inline" set="null" line="91" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></sqrt>
		<invSqrt public="1" get="inline" set="null" line="95" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></invSqrt>
		<atan2 public="1" get="inline" set="null" line="99" static="1"><f a="dy:dx">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<abs public="1" get="inline" set="null" line="103" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></abs>
		<max public="1" get="inline" set="null" line="107" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></max>
		<min public="1" get="inline" set="null" line="111" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></min>
		<iabs public="1" get="inline" set="null" line="115" static="1"><f a="i">
	<x path="Int"/>
	<x path="Int"/>
</f></iabs>
		<imax public="1" get="inline" set="null" line="119" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></imax>
		<imin public="1" get="inline" set="null" line="123" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></imin>
		<iclamp public="1" get="inline" set="null" line="127" static="1"><f a="v:min:max">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></iclamp>
		<lerp public="1" get="inline" set="null" line="134" static="1">
			<f a="a:b:k">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Linear interpolation between two values. When k is 0 a is returned, when it's 1, b is returned.</haxe_doc>
		</lerp>
		<lerpTime public="1" get="inline" set="null" line="141" static="1">
			<f a="a:b:k:dt">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Same as lerp but is scaled based on current FPS, using current elapsed time in seconds.</haxe_doc>
		</lerpTime>
		<bitCount public="1" get="inline" set="null" line="145" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></bitCount>
		<isPOT public="1" get="inline" set="null" line="151" static="1"><f a="v">
	<x path="Int"/>
	<x path="Bool"/>
</f></isPOT>
		<nextPOT public="1" get="inline" set="null" line="155" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></nextPOT>
		<distanceSq public="1" get="inline" set="null" line="165" static="1">
			<f a="dx:dy:?dz" v="::0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ dz : 0. }</e></m></meta>
		</distanceSq>
		<distance public="1" get="inline" set="null" line="169" static="1">
			<f a="dx:dy:?dz" v="::0.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ dz : 0. }</e></m></meta>
		</distance>
		<colorLerp public="1" set="method" line="176" static="1">
			<f a="c1:c2:k">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Linear interpolation between two colors (ARGB).</haxe_doc>
		</colorLerp>
		<angle public="1" get="inline" set="null" line="195" static="1"><f a="da">
	<x path="Float"/>
	<x path="Float"/>
</f></angle>
		<angleLerp public="1" get="inline" set="null" line="201" static="1"><f a="a:b:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></angleLerp>
		<angleMove public="1" get="inline" set="null" line="208" static="1">
			<f a="a:b:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Move angle a towards angle b with a max increment. Return the new angle.</haxe_doc>
		</angleMove>
		<valueMove public="1" get="inline" set="null" line="216" static="1">
			<f a="v:target:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Move a value towards the given target using the max increment. Return the new value.</haxe_doc>
		</valueMove>
		<shuffle public="1" params="T" get="inline" set="null" line="227" static="1"><f a="a">
	<c path="Array"><c path="shuffle.T"/></c>
	<x path="Void"/>
</f></shuffle>
		<random public="1" get="inline" set="null" line="238" static="1">
			<f a="?max" v="1.0">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ max : 1.0 }</e></m></meta>
		</random>
		<srand public="1" set="method" line="245" static="1">
			<f a="?max" v="1.0">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ max : 1.0 }</e></m></meta>
			<haxe_doc>Returns a signed random between -max and max (both included).</haxe_doc>
		</srand>
		<b2f public="1" get="inline" set="null" line="255" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* takes an int , masks it and devide so that it safely maps 0...255 to 0...1.0
	 * @paramv an int between 0 and 255 will be masked
	 * @return a float between( 0 and 1)</haxe_doc>
		</b2f>
		<f2b public="1" get="inline" set="null" line="264" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* takes a float , clamps it and multipy so that it safely maps 0...1 to 0...255.0
	 * @param	f a float
	 * @return an int [0...255]</haxe_doc>
		</f2b>
		<umod public="1" get="inline" set="null" line="271" static="1">
			<f a="value:modulo">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* returns the modulo but always positive</haxe_doc>
		</umod>
		<ufmod public="1" get="inline" set="null" line="279" static="1">
			<f a="value:modulo">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* returns the modulo but always positive</haxe_doc>
		</ufmod>
		<degToRad public="1" get="inline" set="null" line="287" static="1">
			<f a="deg">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Convert degrees to radians</haxe_doc>
		</degToRad>
		<radToDeg public="1" get="inline" set="null" line="294" static="1">
			<f a="rad">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Convert radians to degrees</haxe_doc>
		</radToDeg>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="hxd.Flags" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Pixels.hx" module="hxd.Pixels">
		<ReadOnly/>
		<AlphaPremultiplied/>
		<FlipY/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<abstract path="hxd.PixelsARGB" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Pixels.hx" module="hxd.Pixels">
		<from><icast field="fromPixels"><c path="hxd.Pixels"/></icast></from>
		<this><c path="hxd.Pixels"/></this>
		<to><icast><c path="hxd.Pixels"/></icast></to>
		<meta><m n=":forward">
	<e>bytes</e>
	<e>format</e>
	<e>width</e>
	<e>height</e>
	<e>offset</e>
	<e>flags</e>
	<e>clear</e>
	<e>dispose</e>
	<e>toPNG</e>
	<e>clone</e>
	<e>sub</e>
	<e>blit</e>
</m></meta>
		<impl><class path="hxd._Pixels.PixelsARGB_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Pixels.hx" private="1" module="hxd.Pixels" final="1">
	<getPixel public="1" get="inline" set="null" line="13" static="1"><f a="this:x:y">
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getPixel>
	<setPixel public="1" get="inline" set="null" line="17" static="1"><f a="this:x:y:v">
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setPixel>
	<fromPixels public="1" set="method" line="21" static="1">
		<f a="p">
			<c path="hxd.Pixels"/>
			<x path="hxd.PixelsARGB"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromPixels>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hxd._Pixels.PixelsARGB_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Pixels.hx" private="1" module="hxd.Pixels" final="1">
		<getPixel public="1" get="inline" set="null" line="13" static="1"><f a="this:x:y">
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getPixel>
		<setPixel public="1" get="inline" set="null" line="17" static="1"><f a="this:x:y:v">
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setPixel>
		<fromPixels public="1" set="method" line="21" static="1">
			<f a="p">
				<c path="hxd.Pixels"/>
				<x path="hxd.PixelsARGB"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromPixels>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxd.PixelsFloat" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Pixels.hx" module="hxd.Pixels">
		<from><icast field="fromPixels"><c path="hxd.Pixels"/></icast></from>
		<this><c path="hxd.Pixels"/></this>
		<to><icast><c path="hxd.Pixels"/></icast></to>
		<meta>
			<m n=":forward">
				<e>bytes</e>
				<e>format</e>
				<e>width</e>
				<e>height</e>
				<e>offset</e>
				<e>flags</e>
				<e>clear</e>
				<e>dispose</e>
				<e>toPNG</e>
				<e>clone</e>
				<e>sub</e>
				<e>blit</e>
			</m>
			<m n=":access"><e>hxd.Pixels</e></m>
		</meta>
		<impl><class path="hxd._Pixels.PixelsFloat_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Pixels.hx" private="1" module="hxd.Pixels" final="1">
	<getPixelF public="1" get="inline" set="null" line="32" static="1"><f a="this:x:y:?v">
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="h3d.Vector"/>
	<x path="Null"><c path="h3d.Vector"/></x>
</f></getPixelF>
	<setPixelF public="1" get="inline" set="null" line="40" static="1"><f a="this:x:y:v">
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="h3d.Vector"/>
	<x path="Void"/>
</f></setPixelF>
	<fromPixels public="1" set="method" line="45" static="1">
		<f a="p">
			<c path="hxd.Pixels"/>
			<x path="hxd.PixelsFloat"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromPixels>
	<meta><m n=":access"><e>hxd.Pixels</e></m></meta>
</class></impl>
	</abstract>
	<class path="hxd._Pixels.PixelsFloat_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Pixels.hx" private="1" module="hxd.Pixels" final="1">
		<getPixelF public="1" get="inline" set="null" line="32" static="1"><f a="this:x:y:?v">
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="h3d.Vector"/>
	<x path="Null"><c path="h3d.Vector"/></x>
</f></getPixelF>
		<setPixelF public="1" get="inline" set="null" line="40" static="1"><f a="this:x:y:v">
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="h3d.Vector"/>
	<x path="Void"/>
</f></setPixelF>
		<fromPixels public="1" set="method" line="45" static="1">
			<f a="p">
				<c path="hxd.Pixels"/>
				<x path="hxd.PixelsFloat"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromPixels>
		<meta><m n=":access"><e>hxd.Pixels</e></m></meta>
	</class>
	<abstract path="hxd.PixelsFloatRGBA" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Pixels.hx" module="hxd.Pixels">
		<from><icast field="fromPixels"><c path="hxd.Pixels"/></icast></from>
		<this><c path="hxd.Pixels"/></this>
		<to><icast><c path="hxd.Pixels"/></icast></to>
		<meta>
			<m n=":forward">
				<e>bytes</e>
				<e>format</e>
				<e>width</e>
				<e>height</e>
				<e>offset</e>
				<e>flags</e>
				<e>clear</e>
				<e>dispose</e>
				<e>toPNG</e>
				<e>clone</e>
				<e>sub</e>
				<e>blit</e>
			</m>
			<m n=":access"><e>hxd.Pixels</e></m>
		</meta>
		<impl><class path="hxd._Pixels.PixelsFloatRGBA_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Pixels.hx" private="1" module="hxd.Pixels" final="1">
	<getPixelF public="1" get="inline" set="null" line="57" static="1"><f a="this:x:y:?v">
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="h3d.Vector"/>
	<x path="Null"><c path="h3d.Vector"/></x>
</f></getPixelF>
	<setPixelF public="1" get="inline" set="null" line="68" static="1"><f a="this:x:y:v">
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="h3d.Vector"/>
	<x path="Void"/>
</f></setPixelF>
	<fromPixels public="1" set="method" line="76" static="1">
		<f a="p">
			<c path="hxd.Pixels"/>
			<x path="hxd.PixelsFloatRGBA"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromPixels>
	<meta><m n=":access"><e>hxd.Pixels</e></m></meta>
</class></impl>
	</abstract>
	<class path="hxd._Pixels.PixelsFloatRGBA_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Pixels.hx" private="1" module="hxd.Pixels" final="1">
		<getPixelF public="1" get="inline" set="null" line="57" static="1"><f a="this:x:y:?v">
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="h3d.Vector"/>
	<x path="Null"><c path="h3d.Vector"/></x>
</f></getPixelF>
		<setPixelF public="1" get="inline" set="null" line="68" static="1"><f a="this:x:y:v">
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="h3d.Vector"/>
	<x path="Void"/>
</f></setPixelF>
		<fromPixels public="1" set="method" line="76" static="1">
			<f a="p">
				<c path="hxd.Pixels"/>
				<x path="hxd.PixelsFloatRGBA"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromPixels>
		<meta><m n=":access"><e>hxd.Pixels</e></m></meta>
	</class>
	<abstract path="hxd.Channel" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Pixels.hx" module="hxd.Pixels">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxd._Pixels.Channel_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Pixels.hx" private="1" module="hxd.Pixels" final="1">
	<R public="1" get="inline" set="null" expr="cast 0" line="85" static="1">
		<x path="hxd.Channel"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</R>
	<G public="1" get="inline" set="null" expr="cast 1" line="86" static="1">
		<x path="hxd.Channel"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</G>
	<B public="1" get="inline" set="null" expr="cast 2" line="87" static="1">
		<x path="hxd.Channel"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</B>
	<A public="1" get="inline" set="null" expr="cast 3" line="88" static="1">
		<x path="hxd.Channel"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</A>
	<toInt public="1" get="inline" set="null" line="89" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
	<fromInt public="1" get="inline" set="null" line="90" static="1"><f a="v">
	<x path="Int"/>
	<x path="hxd.Channel"/>
</f></fromInt>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxd._Pixels.Channel_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Pixels.hx" private="1" module="hxd.Pixels" final="1">
		<R public="1" get="inline" set="null" expr="cast 0" line="85" static="1">
			<x path="hxd.Channel"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</R>
		<G public="1" get="inline" set="null" expr="cast 1" line="86" static="1">
			<x path="hxd.Channel"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</G>
		<B public="1" get="inline" set="null" expr="cast 2" line="87" static="1">
			<x path="hxd.Channel"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</B>
		<A public="1" get="inline" set="null" expr="cast 3" line="88" static="1">
			<x path="hxd.Channel"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</A>
		<toInt public="1" get="inline" set="null" line="89" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
		<fromInt public="1" get="inline" set="null" line="90" static="1"><f a="v">
	<x path="Int"/>
	<x path="hxd.Channel"/>
</f></fromInt>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="hxd.Pixels" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Pixels.hx">
		<switchEndian public="1" get="inline" set="null" line="116" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></switchEndian>
		<switchBR public="1" get="inline" set="null" line="120" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></switchBR>
		<calcDataSize public="1" set="method" line="533" static="1"><f a="width:height:format">
	<x path="Int"/>
	<x path="Int"/>
	<e path="hxd.PixelFormat"/>
	<x path="Int"/>
</f></calcDataSize>
		<calcStride public="1" set="method" line="542" static="1"><f a="width:format">
	<x path="Int"/>
	<e path="hxd.PixelFormat"/>
	<x path="Int"/>
</f></calcStride>
		<isFloatFormat public="1" set="method" line="566" static="1"><f a="format">
	<e path="hxd.PixelFormat"/>
	<x path="Bool"/>
</f></isFloatFormat>
		<getChannelOffset public="1" set="method" line="579" static="1">
			<f a="format:channel">
				<e path="hxd.PixelFormat"/>
				<x path="hxd.Channel"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the byte offset for the requested channel (0=R,1=G,2=B,3=A)
		Returns -1 if the channel is not found</haxe_doc>
		</getChannelOffset>
		<alloc public="1" set="method" line="606" static="1"><f a="width:height:format">
	<x path="Int"/>
	<x path="Int"/>
	<e path="hxd.PixelFormat"/>
	<c path="hxd.Pixels"/>
</f></alloc>
		<toDDS public="1" set="method" line="616" static="1">
			<f a="pixels:?isCubeMap" v=":false">
				<c path="Array"><c path="hxd.Pixels"/></c>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ isCubeMap : false }</e></m></meta>
			<haxe_doc>Build DDS texture bytes from an array of pixels :
		- can contain a single image
		- can contain multiple layers (set isCubeMap = true if it's a cubemap)
		- can contain single or multiple layers with mipmaps (auto detected with diffences in size)</haxe_doc>
		</toDDS>
		<bytes public="1"><c path="haxe.io.Bytes"/></bytes>
		<format public="1" get="accessor" set="null"><e path="hxd.PixelFormat"/></format>
		<width public="1" set="null"><x path="Int"/></width>
		<height public="1" set="null"><x path="Int"/></height>
		<dataSize public="1" set="null"><x path="Int"/></dataSize>
		<offset public="1"><x path="Int"/></offset>
		<flags public="1"><x path="haxe.EnumFlags"><e path="hxd.Flags"/></x></flags>
		<stride><x path="Int"/></stride>
		<bytesPerPixel><x path="Int"/></bytesPerPixel>
		<innerFormat set="accessor"><e path="hxd.PixelFormat"/></innerFormat>
		<get_format get="inline" set="null" line="124"><f a=""><e path="hxd.PixelFormat"/></f></get_format>
		<set_innerFormat set="method" line="126"><f a="fmt">
	<e path="hxd.PixelFormat"/>
	<e path="hxd.PixelFormat"/>
</f></set_innerFormat>
		<invalidFormat set="method" line="134"><f a=""><x path="Void"/></f></invalidFormat>
		<sub public="1" set="method" line="138"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="hxd.Pixels"/>
</f></sub>
		<yflip get="inline" set="null" line="152"><f a="y">
	<x path="Int"/>
	<x path="Int"/>
</f></yflip>
		<blit public="1" set="method" line="156"><f a="x:y:src:srcX:srcY:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hxd.Pixels"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<clear public="1" set="method" line="174">
			<f a="color:?preserveMask" v=":0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ preserveMask : 0 }</e></m></meta>
		</clear>
		<toVector public="1" set="method" line="222"><f a=""><x path="haxe.ds.Vector"><x path="Int"/></x></f></toVector>
		<makeSquare public="1" set="method" line="264"><f a="?copy">
	<x path="Bool"/>
	<c path="hxd.Pixels"/>
</f></makeSquare>
		<copyInner set="method" line="294"><f a=""><x path="Void"/></f></copyInner>
		<willChange get="inline" set="null" line="302"><f a=""><x path="Void"/></f></willChange>
		<setFlip public="1" set="method" line="306"><f a="b">
	<x path="Bool"/>
	<x path="Void"/>
</f></setFlip>
		<convert public="1" set="method" line="326"><f a="target">
	<e path="hxd.PixelFormat"/>
	<x path="Void"/>
</f></convert>
		<getPixel public="1" set="method" line="431"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getPixel>
		<setPixel public="1" set="method" line="446"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setPixel>
		<getPixelF public="1" set="method" line="463"><f a="x:y:?v">
	<x path="Int"/>
	<x path="Int"/>
	<c path="h3d.Vector"/>
	<x path="Null"><c path="h3d.Vector"/></x>
</f></getPixelF>
		<setPixelF public="1" set="method" line="483"><f a="x:y:v">
	<x path="Int"/>
	<x path="Int"/>
	<c path="h3d.Vector"/>
	<x path="Void"/>
</f></setPixelF>
		<dispose public="1" set="method" line="499"><f a=""><x path="Void"/></f></dispose>
		<toString public="1" set="method" line="503"><f a=""><c path="String"/></f></toString>
		<toPNG public="1" set="method" line="507">
			<f a="?level" v="9">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
		</toPNG>
		<clone public="1" set="method" line="522"><f a=""><c path="hxd.Pixels"/></f></clone>
		<new public="1" set="method" line="107">
			<f a="width:height:bytes:format:?offset" v="::::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<e path="hxd.PixelFormat"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noDebug"/>
		</meta>
	</class>
	<class path="hxd.SceneEvents" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/SceneEvents.hx">
		<window><c path="hxd.Window"/></window>
		<scenes><c path="Array"><c path="hxd.InteractiveScene"/></c></scenes>
		<overList><c path="Array"><c path="hxd.Interactive"/></c></overList>
		<overCandidates><c path="Array"><a>
	<z><x path="Float"/></z>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<s><c path="hxd.InteractiveScene"/></s>
	<i><c path="hxd.Interactive"/></i>
</a></c></overCandidates>
		<overIndex expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</overIndex>
		<currentFocus><c path="hxd.Interactive"/></currentFocus>
		<pendingEvents><c path="Array"><c path="hxd.Event"/></c></pendingEvents>
		<pushList><c path="Array"><c path="hxd.Interactive"/></c></pushList>
		<currentDrag><a>
	<ref><x path="Null"><x path="Int"/></x></ref>
	<onCancel><f a=""><x path="Void"/></f></onCancel>
	<f><f a="">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></f>
</a></currentDrag>
		<mouseX expr="-1.">
			<x path="Float"/>
			<meta><m n=":value"><e>-1.</e></m></meta>
		</mouseX>
		<mouseY expr="-1.">
			<x path="Float"/>
			<meta><m n=":value"><e>-1.</e></m></meta>
		</mouseY>
		<lastTouch expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</lastTouch>
		<focusLost expr="new hxd.Event(EFocusLost)">
			<c path="hxd.Event"/>
			<meta><m n=":value"><e>new hxd.Event(EFocusLost)</e></m></meta>
		</focusLost>
		<checkPos expr="new hxd.Event(ECheck)">
			<c path="hxd.Event"/>
			<meta><m n=":value"><e>new hxd.Event(ECheck)</e></m></meta>
		</checkPos>
		<onOut expr="new hxd.Event(EOut)">
			<c path="hxd.Event"/>
			<meta><m n=":value"><e>new hxd.Event(EOut)</e></m></meta>
		</onOut>
		<onOver expr="new hxd.Event(EOver)">
			<c path="hxd.Event"/>
			<meta><m n=":value"><e>new hxd.Event(EOver)</e></m></meta>
		</onOver>
		<isOut expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</isOut>
		<enablePhysicalMouse public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
			<haxe_doc>* enablePhysicalMouse : enable mouse movements of system mouse, set it to false anse use setMousePos instead to manually set mouse position</haxe_doc>
		</enablePhysicalMouse>
		<mouseCheckMove public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
			<haxe_doc>* enable/disable per frame check of elements under mouse (default:true)</haxe_doc>
		</mouseCheckMove>
		<defaultCursor public="1" set="accessor" expr="Default">
			<e path="hxd.Cursor"/>
			<meta><m n=":value"><e>Default</e></m></meta>
			<haxe_doc>* Default cursor when there is no Interactive present under cursor.</haxe_doc>
		</defaultCursor>
		<setMousePos public="1" set="method" line="69"><f a="xPos:yPos">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setMousePos>
		<onRemove set="method" line="74"><f a="i">
	<c path="hxd.Interactive"/>
	<x path="Void"/>
</f></onRemove>
		<addScene public="1" set="method" line="92"><f a="s:?index">
	<c path="hxd.InteractiveScene"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addScene>
		<removeScene public="1" set="method" line="97"><f a="s">
	<c path="hxd.InteractiveScene"/>
	<x path="Void"/>
</f></removeScene>
		<dispose public="1" set="method" line="101"><f a=""><x path="Void"/></f></dispose>
		<focus public="1" set="method" line="105"><f a="i">
	<c path="hxd.Interactive"/>
	<x path="Void"/>
</f></focus>
		<blur public="1" set="method" line="122"><f a=""><x path="Void"/></f></blur>
		<checkFocus set="method" line="131"><f a=""><x path="Void"/></f></checkFocus>
		<emitEvent set="method" line="142"><f a="event">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></emitEvent>
		<checkEvents public="1" set="method" line="309"><f a=""><x path="Void"/></f></checkEvents>
		<startCapture public="1" set="method" line="382"><f a="f:?onCancel:?touchId">
	<f a="">
		<c path="hxd.Event"/>
		<x path="Void"/>
	</f>
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Void"/>
</f></startCapture>
		<stopCapture public="1" set="method" line="388"><f a=""><x path="Void"/></f></stopCapture>
		<startDrag public="1" get="inline" set="null" line="395">
			<f a="f:?onCancel:?refEvent">
				<f a="">
					<c path="hxd.Event"/>
					<x path="Void"/>
				</f>
				<f a=""><x path="Void"/></f>
				<c path="hxd.Event"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"Renamed to startCapture"</e></m>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</startDrag>
		<stopDrag public="1" get="inline" set="null" line="400">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":deprecated"><e>"Renamed to stopCapture"</e></m>
				<m n=":dox"><e>hide</e></m>
			</meta>
		</stopDrag>
		<getFocus public="1" set="method" line="404"><f a=""><c path="hxd.Interactive"/></f></getFocus>
		<updateCursor public="1" set="method" line="408"><f a="i">
	<c path="hxd.Interactive"/>
	<x path="Void"/>
</f></updateCursor>
		<set_defaultCursor set="method" line="412"><f a="c">
	<e path="hxd.Cursor"/>
	<e path="hxd.Cursor"/>
</f></set_defaultCursor>
		<selectCursor set="method" line="420"><f a=""><x path="Void"/></f></selectCursor>
		<onEvent set="method" line="434"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></onEvent>
		<dispatchListeners set="method" line="439"><f a="event">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></dispatchListeners>
		<new public="1" set="method" line="58"><f a="?window">
	<c path="hxd.Window"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="hxd.Platform" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/System.js.hx" module="hxd.System">
		<IOS/>
		<Android/>
		<WebGL/>
		<PC/>
		<Console/>
		<FlashPlayer/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="hxd.SystemValue" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/System.js.hx" module="hxd.System">
		<IsTouch/>
		<IsWindowed/>
		<IsMobile/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="hxd.Timer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Timer.hx">
		<wantedFPS public="1" expr="60." line="14" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>60.</e></m></meta>
			<haxe_doc>The FPS on which "tmod" have values are based on.
		Can be freely configured if your gameplay runs at a different speed.
		Default : 60</haxe_doc>
		</wantedFPS>
		<maxDeltaTime public="1" expr="0.5" line="21" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.5</e></m></meta>
			<haxe_doc>The maximum amount of time between two frames (in seconds).
		If the time exceed this amount, Timer will consider these lags are to be ignored.
		Default : 0.5</haxe_doc>
		</maxDeltaTime>
		<smoothFactor public="1" expr="0.95" line="28" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.95</e></m></meta>
			<haxe_doc>The smoothing done between frames. A smoothing of 0 gives "real time" values, higher values will smooth
		the results for tmod/dt/fps over frames using the formula   dt = lerp(dt, elapsedTime, smoothFactor)
		Default : 0 on HashLink, 0.95 on other platforms</haxe_doc>
		</smoothFactor>
		<lastTimeStamp public="1" set="null" expr="haxe.Timer.stamp()" line="33" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>haxe.Timer.stamp()</e></m></meta>
			<haxe_doc>The last timestamp in which update() function was called.</haxe_doc>
		</lastTimeStamp>
		<elapsedTime public="1" set="null" expr="0." line="38" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
			<haxe_doc>The amount of time (unsmoothed) that was spent since the last frame.</haxe_doc>
		</elapsedTime>
		<frameCount public="1" expr="0" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
			<haxe_doc>A frame counter, increases on each call to update()</haxe_doc>
		</frameCount>
		<dt public="1" expr="1 / wantedFPS" line="49" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1 / wantedFPS</e></m></meta>
			<haxe_doc>The smoothed elapsed time (in seconds).</haxe_doc>
		</dt>
		<tmod public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>The smoothed frame modifier, based on wantedFPS. Its value is the same as dt/wantedFPS
		Allows to express movements in terms of pixels-per-frame-at-wantedFPS instead of per second.</haxe_doc>
		</tmod>
		<currentDT expr="1 / wantedFPS" line="57" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1 / wantedFPS</e></m></meta>
		</currentDT>
		<update public="1" set="method" line="62" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Update the timer calculus on each frame. This is automatically called by hxd.App</haxe_doc>
		</update>
		<get_tmod get="inline" set="null" line="74" static="1"><f a=""><x path="Float"/></f></get_tmod>
		<set_tmod get="inline" set="null" line="78" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_tmod>
		<fps public="1" set="method" line="86" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>The current smoothed FPS.</haxe_doc>
		</fps>
		<skip public="1" set="method" line="95" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>After some loading / long processing, call skip() in order to prevent
		it from impacting your smoothed values.</haxe_doc>
		</skip>
		<reset public="1" set="method" line="103" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Similar as skip() but also reset dt to default value.
		Can be used when starting a new game if you want to discard any previous measurement.</haxe_doc>
		</reset>
		<haxe_doc>The Timer class acts as a global time measurement that can be accessed from various parts of the engine.
	These three values are representation of the same underlying calculus: tmod, dt, fps</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.Window" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Window.js.hx">
		<inst expr="null" line="186" static="1">
			<c path="hxd.Window"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</inst>
		<getInstance public="1" set="method" line="187" static="1"><f a=""><c path="hxd.Window"/></f></getInstance>
		<resizeEvents><t path="List"><f a=""><x path="Void"/></f></t></resizeEvents>
		<eventTargets><t path="List"><f a="">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></t></eventTargets>
		<width public="1" get="accessor" set="null"><x path="Int"/></width>
		<height public="1" get="accessor" set="null"><x path="Int"/></height>
		<mouseX public="1" get="accessor" set="null"><x path="Int"/></mouseX>
		<mouseY public="1" get="accessor" set="null"><x path="Int"/></mouseY>
		<mouseLock public="1" get="accessor" set="accessor"><x path="Bool"/></mouseLock>
		<vsync public="1" get="accessor" set="accessor"><x path="Bool"/></vsync>
		<isFocused public="1" get="accessor" set="null"><x path="Bool"/></isFocused>
		<propagateKeyEvents public="1"><x path="Bool"/></propagateKeyEvents>
		<title public="1" get="accessor" set="accessor"><c path="String"/></title>
		<displayMode public="1" get="accessor" set="accessor"><e path="hxd.DisplayMode"/></displayMode>
		<curMouseX expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</curMouseX>
		<curMouseY expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</curMouseY>
		<canvas><c path="js.html.CanvasElement"/></canvas>
		<element><c path="js.html.EventTarget"/></element>
		<canvasPos><a>
	<width set="null"><x path="Float"/></width>
	<top set="null"><x path="Float"/></top>
	<left set="null"><x path="Float"/></left>
	<height set="null"><x path="Float"/></height>
</a></canvasPos>
		<timer><c path="haxe.Timer"/></timer>
		<curW><x path="Int"/></curW>
		<curH><x path="Int"/></curH>
		<focused><x path="Bool"/></focused>
		<useScreenPixels public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
			<haxe_doc>When enabled, the browser zoom does not affect the canvas.
		(default : true)</haxe_doc>
		</useScreenPixels>
		<checkResize set="method" line="115"><f a=""><x path="Void"/></f></checkResize>
		<dispose public="1" set="method" line="125"><f a=""><x path="Void"/></f></dispose>
		<onClose public="1" set="dynamic" line="129"><f a=""><x path="Bool"/></f></onClose>
		<event public="1" set="method" line="133"><f a="e">
	<c path="hxd.Event"/>
	<x path="Void"/>
</f></event>
		<addEventTarget public="1" set="method" line="138"><f a="et">
	<f a="">
		<c path="hxd.Event"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></addEventTarget>
		<removeEventTarget public="1" set="method" line="142"><f a="et">
	<f a="">
		<c path="hxd.Event"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></removeEventTarget>
		<addResizeEvent public="1" set="method" line="150"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addResizeEvent>
		<removeResizeEvent public="1" set="method" line="154"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></removeResizeEvent>
		<onResize set="method" line="162"><f a="e">
	<d/>
	<x path="Void"/>
</f></onResize>
		<resize public="1" set="method" line="167"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<setFullScreen public="1" set="method" line="171">
			<f a="v">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"><e>"Use the displayMode property instead"</e></m></meta>
		</setFullScreen>
		<setCurrent public="1" set="method" line="182"><f a=""><x path="Void"/></f></setCurrent>
		<getPixelRatio set="method" line="192"><f a=""><x path="Float"/></f></getPixelRatio>
		<get_width set="method" line="196"><f a=""><x path="Int"/></f></get_width>
		<get_height set="method" line="200"><f a=""><x path="Int"/></f></get_height>
		<get_mouseX set="method" line="204"><f a=""><x path="Int"/></f></get_mouseX>
		<get_mouseY set="method" line="208"><f a=""><x path="Int"/></f></get_mouseY>
		<get_mouseLock set="method" line="212"><f a=""><x path="Bool"/></f></get_mouseLock>
		<set_mouseLock set="method" line="216"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_mouseLock>
		<get_vsync set="method" line="221"><f a=""><x path="Bool"/></f></get_vsync>
		<set_vsync set="method" line="223"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_vsync>
		<onMouseDown set="method" line="228"><f a="e">
	<c path="js.html.MouseEvent"/>
	<x path="Void"/>
</f></onMouseDown>
		<onMouseUp set="method" line="240"><f a="e">
	<c path="js.html.MouseEvent"/>
	<x path="Void"/>
</f></onMouseUp>
		<onMouseMove set="method" line="252"><f a="e">
	<c path="js.html.MouseEvent"/>
	<x path="Void"/>
</f></onMouseMove>
		<onMouseWheel set="method" line="258"><f a="e">
	<c path="js.html.WheelEvent"/>
	<x path="Void"/>
</f></onMouseWheel>
		<onTouchStart set="method" line="265"><f a="e">
	<c path="js.html.TouchEvent"/>
	<x path="Void"/>
</f></onTouchStart>
		<onTouchMove set="method" line="277"><f a="e">
	<c path="js.html.TouchEvent"/>
	<x path="Void"/>
</f></onTouchMove>
		<onTouchEnd set="method" line="289"><f a="e">
	<c path="js.html.TouchEvent"/>
	<x path="Void"/>
</f></onTouchEnd>
		<onKeyUp set="method" line="301"><f a="e">
	<c path="js.html.KeyboardEvent"/>
	<x path="Void"/>
</f></onKeyUp>
		<onKeyDown set="method" line="311"><f a="e">
	<c path="js.html.KeyboardEvent"/>
	<x path="Void"/>
</f></onKeyDown>
		<onKeyPress set="method" line="331"><f a="e">
	<c path="js.html.KeyboardEvent"/>
	<x path="Void"/>
</f></onKeyPress>
		<onFocus set="method" line="341"><f a="b">
	<x path="Bool"/>
	<x path="Void"/>
</f></onFocus>
		<get_isFocused set="method" line="346"><f a=""><x path="Bool"/></f></get_isFocused>
		<get_displayMode set="method" line="348"><f a=""><e path="hxd.DisplayMode"/></f></get_displayMode>
		<set_displayMode set="method" line="357"><f a="m">
	<e path="hxd.DisplayMode"/>
	<e path="hxd.DisplayMode"/>
</f></set_displayMode>
		<get_title set="method" line="371"><f a=""><c path="String"/></f></get_title>
		<set_title set="method" line="374"><f a="t">
	<c path="String"/>
	<c path="String"/>
</f></set_title>
		<new public="1" set="method" line="46"><f a="?canvas:?globalEvents">
	<c path="js.html.CanvasElement"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.System" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/System.js.hx">
		<width public="1" get="accessor" set="null" static="1"><x path="Int"/></width>
		<height public="1" get="accessor" set="null" static="1"><x path="Int"/></height>
		<lang public="1" get="accessor" set="null" static="1"><c path="String"/></lang>
		<platform public="1" get="accessor" set="null" static="1"><e path="hxd.Platform"/></platform>
		<screenDPI public="1" get="accessor" set="null" static="1"><x path="Float"/></screenDPI>
		<setCursor public="1" expr="setNativeCursor" line="25" static="1">
			<f a="c">
				<e path="hxd.Cursor"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>setNativeCursor</e></m></meta>
		</setCursor>
		<allowTimeout public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></allowTimeout>
		<timeoutTick public="1" set="method" line="28" static="1"><f a=""><x path="Void"/></f></timeoutTick>
		<loopFunc static="1"><f a=""><x path="Void"/></f></loopFunc>
		<loopInit expr="false" line="34" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</loopInit>
		<currentNativeCursor static="1"><e path="hxd.Cursor"/></currentNativeCursor>
		<currentCustomCursor static="1"><c path="hxd.CustomCursor"/></currentCustomCursor>
		<fpsLimit public="1" expr="-1" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
			<haxe_doc>If greater than 0, this will reduce loop framerate to reduce CPU usage</haxe_doc>
		</fpsLimit>
		<getCurrentLoop public="1" set="method" line="41" static="1"><f a=""><f a=""><x path="Void"/></f></f></getCurrentLoop>
		<setLoop public="1" set="method" line="45" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></setLoop>
		<browserLoop set="method" line="53" static="1"><f a=""><x path="Void"/></f></browserLoop>
		<start public="1" set="method" line="66" static="1"><f a="callb">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></start>
		<setNativeCursor public="1" set="method" line="70" static="1"><f a="c">
	<e path="hxd.Cursor"/>
	<x path="Void"/>
</f></setNativeCursor>
		<getDeviceName public="1" set="method" line="100" static="1"><f a=""><c path="String"/></f></getDeviceName>
		<getDefaultFrameRate public="1" set="method" line="104" static="1"><f a=""><x path="Float"/></f></getDefaultFrameRate>
		<getValue public="1" set="method" line="108" static="1"><f a="s">
	<e path="hxd.SystemValue"/>
	<x path="Bool"/>
</f></getValue>
		<exit public="1" set="method" line="117" static="1"><f a=""><x path="Void"/></f></exit>
		<openURL public="1" set="method" line="120" static="1"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></openURL>
		<updateCursor set="method" line="124" static="1"><f a=""><x path="Void"/></f></updateCursor>
		<get_width set="method" line="138" static="1"><f a=""><x path="Int"/></f></get_width>
		<get_height set="method" line="139" static="1"><f a=""><x path="Int"/></f></get_height>
		<get_lang set="method" line="140" static="1"><f a=""><c path="String"/></f></get_lang>
		<get_platform set="method" line="141" static="1"><f a=""><e path="hxd.Platform"/></f></get_platform>
		<get_screenDPI set="method" line="150" static="1"><f a=""><x path="Int"/></f></get_screenDPI>
		<get_allowTimeout set="method" line="151" static="1"><f a=""><x path="Bool"/></f></get_allowTimeout>
		<set_allowTimeout set="method" line="152" static="1"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_allowTimeout>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="hxd.DisplayMode" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/Window.js.hx" module="hxd.Window">
		<Windowed/>
		<Borderless/>
		<Fullscreen/>
		<FullscreenResize/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="hxd.clipper.ClipType" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/ClipType.hx">
		<Intersection/>
		<Union/>
		<Difference/>
		<Xor/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="hxd.clipper._Clipper.EdgeSide" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" private="1" module="hxd.clipper.Clipper">
		<Left/>
		<Right/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="hxd.clipper._Clipper.Direction" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" private="1" module="hxd.clipper.Clipper">
		<RightToLeft/>
		<LeftToRight/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="hxd.clipper._Clipper.PolyNode" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" private="1" module="hxd.clipper.Clipper">
		<parent public="1" set="null"><c path="hxd.clipper._Clipper.PolyNode"/></parent>
		<childs public="1" set="null"><c path="Array"><c path="hxd.clipper._Clipper.PolyNode"/></c></childs>
		<polygon><x path="h2d.col.IPolygon"/></polygon>
		<index><x path="Int"/></index>
		<jointype><e path="hxd.clipper.JoinType"/></jointype>
		<endtype><e path="hxd.clipper.EndType"/></endtype>
		<isHoleNode set="method" line="68"><f a=""><x path="Bool"/></f></isHoleNode>
		<childCount public="1" get="accessor" set="null"><x path="Int"/></childCount>
		<get_childCount get="inline" set="null" line="80"><f a=""><x path="Int"/></f></get_childCount>
		<contour public="1" get="accessor" set="null"><x path="h2d.col.IPolygon"/></contour>
		<get_contour get="inline" set="null" line="86"><f a=""><x path="h2d.col.IPolygon"/></f></get_contour>
		<addChild set="method" line="90"><f a="child">
	<c path="hxd.clipper._Clipper.PolyNode"/>
	<x path="Void"/>
</f></addChild>
		<getNext public="1" set="method" line="98"><f a=""><c path="hxd.clipper._Clipper.PolyNode"/></f></getNext>
		<getNextSiblingUp set="method" line="106"><f a=""><c path="hxd.clipper._Clipper.PolyNode"/></f></getNextSiblingUp>
		<isHole public="1" get="inline" set="null" line="115"><f a=""><x path="Bool"/></f></isHole>
		<new public="1" set="method" line="63"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>hxd.clipper</e></m>
		</meta>
	</class>
	<class path="hxd.clipper._Clipper.PolyTree" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" private="1" module="hxd.clipper.Clipper">
		<extends path="hxd.clipper._Clipper.PolyNode"/>
		<allPolys public="1"><c path="Array"><c path="hxd.clipper._Clipper.PolyNode"/></c></allPolys>
		<toPolygons public="1" set="method" line="131"><f a="polygons">
	<x path="h2d.col.IPolygons"/>
	<x path="Void"/>
</f></toPolygons>
		<addRec set="method" line="136"><f a="polynode:polygons">
	<c path="hxd.clipper._Clipper.PolyNode"/>
	<x path="h2d.col.IPolygons"/>
	<x path="Void"/>
</f></addRec>
		<clear public="1" set="method" line="143"><f a=""><x path="Void"/></f></clear>
		<getFirst public="1" set="method" line="148"><f a=""><c path="hxd.clipper._Clipper.PolyNode"/></f></getFirst>
		<total public="1" get="accessor" set="null"><x path="Int"/></total>
		<get_total get="inline" set="null" line="156"><f a=""><x path="Int"/></f></get_total>
		<new public="1" set="method" line="126"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="hxd.clipper._Clipper.Ref" params="T" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" private="1" module="hxd.clipper.Clipper">
		<val public="1"><c path="hxd.clipper._Clipper.Ref.T"/></val>
		<new public="1" get="inline" set="null" line="167"><f a="?v">
	<c path="hxd.clipper._Clipper.Ref.T"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":generic"/></meta>
	</class>
	<class path="hxd.clipper._Clipper.TEdge" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" private="1" module="hxd.clipper.Clipper">
		<botX public="1"><x path="Int"/></botX>
		<botY public="1"><x path="Int"/></botY>
		<currX public="1"><x path="Int"/></currX>
		<currY public="1"><x path="Int"/></currY>
		<topX public="1"><x path="Int"/></topX>
		<topY public="1"><x path="Int"/></topY>
		<deltaX public="1"><x path="Int"/></deltaX>
		<deltaY public="1"><x path="Int"/></deltaY>
		<dx public="1"><x path="Float"/></dx>
		<polyType public="1"><e path="hxd.clipper.PolyType"/></polyType>
		<side public="1"><e path="hxd.clipper._Clipper.EdgeSide"/></side>
		<windDelta public="1"><x path="Int"/></windDelta>
		<windCnt public="1"><x path="Int"/></windCnt>
		<windCnt2 public="1"><x path="Int"/></windCnt2>
		<outIdx public="1"><x path="Int"/></outIdx>
		<next public="1"><c path="hxd.clipper._Clipper.TEdge"/></next>
		<prev public="1"><c path="hxd.clipper._Clipper.TEdge"/></prev>
		<nextInLML public="1"><c path="hxd.clipper._Clipper.TEdge"/></nextInLML>
		<nextInAEL public="1"><c path="hxd.clipper._Clipper.TEdge"/></nextInAEL>
		<prevInAEL public="1"><c path="hxd.clipper._Clipper.TEdge"/></prevInAEL>
		<nextInSEL public="1"><c path="hxd.clipper._Clipper.TEdge"/></nextInSEL>
		<prevInSEL public="1"><c path="hxd.clipper._Clipper.TEdge"/></prevInSEL>
		<top public="1" get="accessor" set="accessor"><c path="h2d.col.IPoint"/></top>
		<bot public="1" get="accessor" set="accessor"><c path="h2d.col.IPoint"/></bot>
		<curr public="1" get="accessor" set="accessor"><c path="h2d.col.IPoint"/></curr>
		<get_top get="inline" set="null" line="200"><f a=""><c path="h2d.col.IPoint"/></f></get_top>
		<get_bot get="inline" set="null" line="201"><f a=""><c path="h2d.col.IPoint"/></f></get_bot>
		<get_curr get="inline" set="null" line="202"><f a=""><c path="h2d.col.IPoint"/></f></get_curr>
		<set_top get="inline" set="null" line="204"><f a="p">
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
</f></set_top>
		<set_bot get="inline" set="null" line="209"><f a="p">
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
</f></set_bot>
		<set_curr get="inline" set="null" line="214"><f a="p">
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
</f></set_curr>
		<new public="1" set="method" line="220"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.clipper._Clipper.IntersectNode" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" private="1" module="hxd.clipper.Clipper">
		<edge1 public="1"><c path="hxd.clipper._Clipper.TEdge"/></edge1>
		<edge2 public="1"><c path="hxd.clipper._Clipper.TEdge"/></edge2>
		<pt public="1"><c path="h2d.col.IPoint"/></pt>
		<new public="1" set="method" line="228"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.clipper._Clipper.LocalMinima" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" private="1" module="hxd.clipper.Clipper">
		<y public="1"><x path="Int"/></y>
		<leftBound public="1"><c path="hxd.clipper._Clipper.TEdge"/></leftBound>
		<rightBound public="1"><c path="hxd.clipper._Clipper.TEdge"/></rightBound>
		<next public="1"><c path="hxd.clipper._Clipper.LocalMinima"/></next>
		<new public="1" set="method" line="237"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.clipper._Clipper.Scanbeam" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" private="1" module="hxd.clipper.Clipper">
		<y public="1"><x path="Int"/></y>
		<next public="1"><c path="hxd.clipper._Clipper.Scanbeam"/></next>
		<new public="1" set="method" line="244"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.clipper._Clipper.OutRec" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" private="1" module="hxd.clipper.Clipper">
		<idx public="1"><x path="Int"/></idx>
		<isHole public="1"><x path="Bool"/></isHole>
		<firstLeft public="1"><c path="hxd.clipper._Clipper.OutRec"/></firstLeft>
		<pts public="1"><c path="hxd.clipper._Clipper.OutPt"/></pts>
		<bottomPt public="1"><c path="hxd.clipper._Clipper.OutPt"/></bottomPt>
		<polyNode public="1"><c path="hxd.clipper._Clipper.PolyNode"/></polyNode>
		<new public="1" set="method" line="255"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.clipper._Clipper.OutPt" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" private="1" module="hxd.clipper.Clipper">
		<idx public="1"><x path="Int"/></idx>
		<pt public="1"><c path="h2d.col.IPoint"/></pt>
		<next public="1"><c path="hxd.clipper._Clipper.OutPt"/></next>
		<prev public="1"><c path="hxd.clipper._Clipper.OutPt"/></prev>
		<new public="1" set="method" line="264"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.clipper._Clipper.Join" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" private="1" module="hxd.clipper.Clipper">
		<outPt1 public="1"><c path="hxd.clipper._Clipper.OutPt"/></outPt1>
		<outPt2 public="1"><c path="hxd.clipper._Clipper.OutPt"/></outPt2>
		<offPt public="1"><c path="h2d.col.IPoint"/></offPt>
		<new public="1" set="method" line="272"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.clipper._Clipper.ClipperBase" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" private="1" module="hxd.clipper.Clipper">
		<HORIZONTAL get="inline" set="null" expr="-9007199254740992." line="283" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>-9007199254740992.</e></m></meta>
		</HORIZONTAL>
		<TOLERANCE get="inline" set="null" expr="1E-20" line="284" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1E-20</e></m></meta>
		</TOLERANCE>
		<SKIP get="inline" set="null" expr="-2" line="285" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-2</e></m></meta>
		</SKIP>
		<UNASSIGNED get="inline" set="null" expr="-1" line="286" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</UNASSIGNED>
		<nearZero public="1" get="inline" set="null" line="303" static="1"><f a="v">
	<x path="Float"/>
	<x path="Bool"/>
</f></nearZero>
		<getBounds public="1" set="method" line="799" static="1"><f a="pols">
	<x path="h2d.col.IPolygons"/>
	<c path="hxd.clipper.Rect"/>
</f></getBounds>
		<preserveCollinear public="1"><x path="Bool"/></preserveCollinear>
		<m_MinimaList><c path="hxd.clipper._Clipper.LocalMinima"/></m_MinimaList>
		<m_CurrentLM><c path="hxd.clipper._Clipper.LocalMinima"/></m_CurrentLM>
		<m_edges><c path="Array"><c path="Array"><c path="hxd.clipper._Clipper.TEdge"/></c></c></m_edges>
		<isHorizontal public="1" get="inline" set="null" line="295"><f a="e">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Bool"/>
</f></isHorizontal>
		<abs get="inline" set="null" line="299"><f a="i">
	<x path="Int"/>
	<x path="Int"/>
</f></abs>
		<PointIsVertex set="method" line="309"><f a="pt:pp">
	<c path="h2d.col.IPoint"/>
	<c path="hxd.clipper._Clipper.OutPt"/>
	<x path="Bool"/>
</f></PointIsVertex>
		<PointOnLineSegment set="method" line="319"><f a="pt:linePt1:linePt2">
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<x path="Bool"/>
</f></PointOnLineSegment>
		<PointOnPolygon set="method" line="329"><f a="pt:pp">
	<c path="h2d.col.IPoint"/>
	<c path="hxd.clipper._Clipper.OutPt"/>
	<x path="Bool"/>
</f></PointOnPolygon>
		<SlopesEqual get="inline" set="null" line="342"><f a="e1:e2">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Bool"/>
</f></SlopesEqual>
		<SlopesEqual3 get="inline" set="null" line="347"><f a="pt1:pt2:pt3">
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<x path="Bool"/>
</f></SlopesEqual3>
		<clear public="1" set="method" line="363"><f a=""><x path="Void"/></f></clear>
		<disposeLocalMinimaList set="method" line="370"><f a=""><x path="Void"/></f></disposeLocalMinimaList>
		<addPolygons public="1" set="method" line="382"><f a="ppg:polyType">
	<x path="h2d.col.IPolygons"/>
	<e path="hxd.clipper.PolyType"/>
	<x path="Bool"/>
</f></addPolygons>
		<addPolygon public="1" set="method" line="391"><f a="pg:polyType">
	<x path="h2d.col.IPolygon"/>
	<e path="hxd.clipper.PolyType"/>
	<x path="Bool"/>
</f></addPolygon>
		<InitEdge get="inline" set="null" line="518"><f a="e:eNext:ePrev:pt">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="h2d.col.IPoint"/>
	<x path="Void"/>
</f></InitEdge>
		<InitEdge2 get="inline" set="null" line="526"><f a="e:polyType">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<e path="hxd.clipper.PolyType"/>
	<x path="Void"/>
</f></InitEdge2>
		<RemoveEdge set="method" line="545"><f a="e">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
</f></RemoveEdge>
		<FindNextLocMin set="method" line="556"><f a="e">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
</f></FindNextLocMin>
		<ProcessBound set="method" line="574"><f a="E:LeftBoundIsForward">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Bool"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
</f></ProcessBound>
		<ReverseHorizontal set="method" line="695"><f a="e">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Void"/>
</f></ReverseHorizontal>
		<Pt2IsBetweenPt1AndPt3 set="method" line="706"><f a="pt1:pt2:pt3">
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<x path="Bool"/>
</f></Pt2IsBetweenPt1AndPt3>
		<SetDx set="method" line="715"><f a="e">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Void"/>
</f></SetDx>
		<InsertLocalMinima set="method" line="725"><f a="newLm">
	<c path="hxd.clipper._Clipper.LocalMinima"/>
	<x path="Void"/>
</f></InsertLocalMinima>
		<PopLocalMinima set="method" line="745"><f a=""><x path="Void"/></f></PopLocalMinima>
		<SwapX get="inline" set="null" line="752"><f a="e">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Void"/>
</f></SwapX>
		<equals get="inline" set="null" line="763"><f a="pt1:pt2">
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<x path="Bool"/>
</f></equals>
		<Reset set="method" line="768"><f a=""><x path="Void"/></f></Reset>
		<new set="method" line="354"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noDebug"/>
			<m n=":allow"><e>hxd.clipper</e></m>
		</meta>
	</class>
	<enum path="hxd.clipper.NodeType" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" module="hxd.clipper.Clipper">
		<Any/>
		<Open/>
		<Closed/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="hxd.clipper.ResultKind" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" module="hxd.clipper.Clipper">
		<All/>
		<NoHoles/>
		<HolesOnly/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="hxd.clipper.Clipper" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx">
		<extends path="hxd.clipper._Clipper.ClipperBase"/>
		<compareY set="method" line="2349" static="1"><f a="n1:n2">
	<c path="hxd.clipper._Clipper.IntersectNode"/>
	<c path="hxd.clipper._Clipper.IntersectNode"/>
	<x path="Int"/>
</f></compareY>
		<Orientation public="1" get="inline" set="null" line="2612" static="1"><f a="poly">
	<x path="h2d.col.IPolygon"/>
	<x path="Bool"/>
</f></Orientation>
		<polArea public="1" set="method" line="3339" static="1"><f a="poly">
	<x path="h2d.col.IPolygon"/>
	<x path="Float"/>
</f></polArea>
		<SimplifyPolygon public="1" set="method" line="3369" static="1"><f a="poly:?fillType">
	<x path="h2d.col.IPolygon"/>
	<e path="hxd.clipper.PolyFillType"/>
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
</f></SimplifyPolygon>
		<SimplifyPolygons public="1" set="method" line="3379" static="1"><f a="polys:?fillType">
	<x path="h2d.col.IPolygons"/>
	<e path="hxd.clipper.PolyFillType"/>
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
</f></SimplifyPolygons>
		<MinkowskiSums public="1" set="method" line="3572" static="1"><f a="pattern:pols:?kind">
	<x path="h2d.col.IPolygon"/>
	<x path="h2d.col.IPolygons"/>
	<e path="hxd.clipper.ResultKind"/>
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
</f></MinkowskiSums>
		<MinkowskiDiff public="1" set="method" line="3587" static="1"><f a="pattern:pol:?kind">
	<x path="h2d.col.IPolygon"/>
	<x path="h2d.col.IPolygon"/>
	<e path="hxd.clipper.ResultKind"/>
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
</f></MinkowskiDiff>
		<strictlySimple public="1"><x path="Bool"/></strictlySimple>
		<reverseSolution public="1"><x path="Bool"/></reverseSolution>
		<resultKind public="1"><e path="hxd.clipper.ResultKind"/></resultKind>
		<m_PolyOuts><c path="Array"><c path="hxd.clipper._Clipper.OutRec"/></c></m_PolyOuts>
		<m_ClipType><e path="hxd.clipper.ClipType"/></m_ClipType>
		<m_Scanbeam><c path="hxd.clipper._Clipper.Scanbeam"/></m_Scanbeam>
		<m_ActiveEdges><c path="hxd.clipper._Clipper.TEdge"/></m_ActiveEdges>
		<m_SortedEdges><c path="hxd.clipper._Clipper.TEdge"/></m_SortedEdges>
		<m_IntersectList><c path="Array"><c path="hxd.clipper._Clipper.IntersectNode"/></c></m_IntersectList>
		<m_ExecuteLocked><x path="Bool"/></m_ExecuteLocked>
		<m_ClipFillType><e path="hxd.clipper.PolyFillType"/></m_ClipFillType>
		<m_SubjFillType><e path="hxd.clipper.PolyFillType"/></m_SubjFillType>
		<m_Joins><c path="Array"><c path="hxd.clipper._Clipper.Join"/></c></m_Joins>
		<m_GhostJoins><c path="Array"><c path="hxd.clipper._Clipper.Join"/></c></m_GhostJoins>
		<m_UsingPolyTree><x path="Bool"/></m_UsingPolyTree>
		<xor get="inline" set="null" line="876"><f a="a:b">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></xor>
		<DisposeScanbeamList set="method" line="883"><f a=""><x path="Void"/></f></DisposeScanbeamList>
		<Reset set="method" line="893" override="1"><f a=""><x path="Void"/></f></Reset>
		<InsertScanbeam set="method" line="910"><f a="y">
	<x path="Int"/>
	<x path="Void"/>
</f></InsertScanbeam>
		<execute public="1" set="method" line="934"><f a="clipType:?subjFillType:?clipFillType">
	<e path="hxd.clipper.ClipType"/>
	<e path="hxd.clipper.PolyFillType"/>
	<e path="hxd.clipper.PolyFillType"/>
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
</f></execute>
		<ExecuteTree public="1" set="method" line="957"><f a="clipType:polytree:?subjFillType:?clipFillType">
	<e path="hxd.clipper.ClipType"/>
	<c path="hxd.clipper._Clipper.PolyTree"/>
	<e path="hxd.clipper.PolyFillType"/>
	<e path="hxd.clipper.PolyFillType"/>
	<x path="Bool"/>
</f></ExecuteTree>
		<FixHoleLinkage set="method" line="975"><f a="outRec">
	<c path="hxd.clipper._Clipper.OutRec"/>
	<x path="Void"/>
</f></FixHoleLinkage>
		<ExecuteInternal set="method" line="989"><f a=""><x path="Bool"/></f></ExecuteInternal>
		<PopScanbeam set="method" line="1032"><f a=""><x path="Int"/></f></PopScanbeam>
		<DisposeAllPolyPts set="method" line="1039"><f a=""><x path="Void"/></f></DisposeAllPolyPts>
		<DisposeOutRec set="method" line="1047"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></DisposeOutRec>
		<AddJoin set="method" line="1056"><f a="op1:op2:offPt">
	<c path="hxd.clipper._Clipper.OutPt"/>
	<c path="hxd.clipper._Clipper.OutPt"/>
	<c path="h2d.col.IPoint"/>
	<x path="Void"/>
</f></AddJoin>
		<AddGhostJoin set="method" line="1066"><f a="op:offPt">
	<c path="hxd.clipper._Clipper.OutPt"/>
	<c path="h2d.col.IPoint"/>
	<x path="Void"/>
</f></AddGhostJoin>
		<InsertLocalMinimaIntoAEL set="method" line="1075"><f a="botY">
	<x path="Int"/>
	<x path="Void"/>
</f></InsertLocalMinimaIntoAEL>
		<InsertEdgeIntoAEL set="method" line="1156">
			<f a="edge:?startEdge" v=":null">
				<c path="hxd.clipper._Clipper.TEdge"/>
				<c path="hxd.clipper._Clipper.TEdge"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ startEdge : null }</e></m></meta>
		</InsertEdgeIntoAEL>
		<E2InsertsBeforeE1 set="method" line="1184"><f a="e1:e2">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Bool"/>
</f></E2InsertsBeforeE1>
		<IsEvenOddFillType get="inline" set="null" line="1196"><f a="edge">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Bool"/>
</f></IsEvenOddFillType>
		<IsEvenOddAltFillType get="inline" set="null" line="1205"><f a="edge">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Bool"/>
</f></IsEvenOddAltFillType>
		<IsContributing set="method" line="1214"><f a="edge">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Bool"/>
</f></IsContributing>
		<SetWindingCount set="method" line="1301"><f a="edge">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Void"/>
</f></SetWindingCount>
		<AddEdgeToSEL set="method" line="1378"><f a="edge">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Void"/>
</f></AddEdgeToSEL>
		<CopyAELToSEL get="inline" set="null" line="1398"><f a=""><x path="Void"/></f></CopyAELToSEL>
		<SwapPositionsInAEL set="method" line="1410"><f a="edge1:edge2">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Void"/>
</f></SwapPositionsInAEL>
		<SwapPositionsInSEL set="method" line="1467"><f a="edge1:edge2">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Void"/>
</f></SwapPositionsInSEL>
		<AddLocalMaxPoly set="method" line="1526"><f a="e1:e2:pt">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="h2d.col.IPoint"/>
	<x path="Void"/>
</f></AddLocalMaxPoly>
		<AddLocalMinPoly set="method" line="1541"><f a="e1:e2:pt">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="h2d.col.IPoint"/>
	<c path="hxd.clipper._Clipper.OutPt"/>
</f></AddLocalMinPoly>
		<CreateOutRec set="method" line="1579"><f a=""><c path="hxd.clipper._Clipper.OutRec"/></f></CreateOutRec>
		<AddOutPt set="method" line="1594"><f a="e:pt">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="h2d.col.IPoint"/>
	<c path="hxd.clipper._Clipper.OutPt"/>
</f></AddOutPt>
		<HorzSegmentsOverlap set="method" line="1629"><f a="seg1a:seg1b:seg2a:seg2b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></HorzSegmentsOverlap>
		<SetHoleState set="method" line="1646"><f a="e:outRec">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.OutRec"/>
	<x path="Void"/>
</f></SetHoleState>
		<GetDx set="method" line="1664"><f a="pt1:pt2">
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<x path="Float"/>
</f></GetDx>
		<FirstIsBottomPt set="method" line="1671"><f a="btmPt1:btmPt2">
	<c path="hxd.clipper._Clipper.OutPt"/>
	<c path="hxd.clipper._Clipper.OutPt"/>
	<x path="Bool"/>
</f></FirstIsBottomPt>
		<GetBottomPt set="method" line="1690"><f a="pp">
	<c path="hxd.clipper._Clipper.OutPt"/>
	<c path="hxd.clipper._Clipper.OutPt"/>
</f></GetBottomPt>
		<GetLowermostRec set="method" line="1727"><f a="outRec1:outRec2">
	<c path="hxd.clipper._Clipper.OutRec"/>
	<c path="hxd.clipper._Clipper.OutRec"/>
	<c path="hxd.clipper._Clipper.OutRec"/>
</f></GetLowermostRec>
		<Param1RightOfParam2 set="method" line="1748"><f a="outRec1:outRec2">
	<c path="hxd.clipper._Clipper.OutRec"/>
	<c path="hxd.clipper._Clipper.OutRec"/>
	<x path="Bool"/>
</f></Param1RightOfParam2>
		<GetOutRec set="method" line="1759"><f a="idx">
	<x path="Int"/>
	<c path="hxd.clipper._Clipper.OutRec"/>
</f></GetOutRec>
		<AppendPolygon set="method" line="1768"><f a="e1:e2">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Void"/>
</f></AppendPolygon>
		<ReversePolyPtLinks set="method" line="1864"><f a="pp">
	<c path="hxd.clipper._Clipper.OutPt"/>
	<x path="Void"/>
</f></ReversePolyPtLinks>
		<SwapSides get="inline" set="null" line="1880"><f a="edge1:edge2">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Void"/>
</f></SwapSides>
		<SwapPolyIndexes set="method" line="1888"><f a="edge1:edge2">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Void"/>
</f></SwapPolyIndexes>
		<IntersectEdges set="method" line="1895"><f a="e1:e2:pt">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="h2d.col.IPoint"/>
	<x path="Void"/>
</f></IntersectEdges>
		<DeleteFromAEL set="method" line="2036"><f a="e">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Void"/>
</f></DeleteFromAEL>
		<DeleteFromSEL set="method" line="2052"><f a="e">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Void"/>
</f></DeleteFromSEL>
		<UpdateEdgeIntoAEL set="method" line="2068"><f a="e">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
</f></UpdateEdgeIntoAEL>
		<GetHorzDirection set="method" line="2096"><f a="HorzEdge">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<a>
		<right><x path="Int"/></right>
		<left><x path="Int"/></left>
		<dir><e path="hxd.clipper._Clipper.Direction"/></dir>
	</a>
</f></GetHorzDirection>
		<ProcessHorizontals set="method" line="2105"><f a="isTopOfScanbeam">
	<x path="Bool"/>
	<x path="Void"/>
</f></ProcessHorizontals>
		<ProcessHorizontal set="method" line="2116"><f a="horzEdge:isTopOfScanbeam">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></ProcessHorizontal>
		<GetNextInAEL get="inline" set="null" line="2228"><f a="e:dir">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<e path="hxd.clipper._Clipper.Direction"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
</f></GetNextInAEL>
		<IsMinima get="inline" set="null" line="2234"><f a="e">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Bool"/>
</f></IsMinima>
		<IsMaxima get="inline" set="null" line="2240"><f a="e:y">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></IsMaxima>
		<IsIntermediate get="inline" set="null" line="2246"><f a="e:y">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></IsIntermediate>
		<GetMaximaPair set="method" line="2252"><f a="e">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
</f></GetMaximaPair>
		<ProcessIntersections set="method" line="2265"><f a="topY">
	<x path="Int"/>
	<x path="Bool"/>
</f></ProcessIntersections>
		<BuildIntersectList set="method" line="2286"><f a="topY">
	<x path="Int"/>
	<x path="Void"/>
</f></BuildIntersectList>
		<EdgesAdjacent get="inline" set="null" line="2334"><f a="inode">
	<c path="hxd.clipper._Clipper.IntersectNode"/>
	<x path="Bool"/>
</f></EdgesAdjacent>
		<IntersectNodeSort get="inline" set="null" line="2341"><f a="node1:node2">
	<c path="hxd.clipper._Clipper.IntersectNode"/>
	<c path="hxd.clipper._Clipper.IntersectNode"/>
	<x path="Int"/>
</f></IntersectNodeSort>
		<FixupIntersectionOrder set="method" line="2352"><f a=""><x path="Bool"/></f></FixupIntersectionOrder>
		<ProcessIntersectList set="method" line="2380"><f a=""><x path="Void"/></f></ProcessIntersectList>
		<Round get="inline" set="null" line="2394"><f a="value">
	<x path="Float"/>
	<x path="Int"/>
</f></Round>
		<TopX get="inline" set="null" line="2400"><f a="edge:currentY">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Int"/>
	<x path="Int"/>
</f></TopX>
		<IntersectPoint get="inline" set="null" line="2409"><f a="edge1:edge2">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="hxd.clipper._Clipper.TEdge"/>
	<c path="h2d.col.IPoint"/>
</f></IntersectPoint>
		<ProcessEdgesAtTopOfScanbeam set="method" line="2485"><f a="topY">
	<x path="Int"/>
	<x path="Void"/>
</f></ProcessEdgesAtTopOfScanbeam>
		<DoMaxima set="method" line="2573"><f a="e">
	<c path="hxd.clipper._Clipper.TEdge"/>
	<x path="Void"/>
</f></DoMaxima>
		<reversePolygons set="method" line="2607"><f a="polys">
	<x path="h2d.col.IPolygons"/>
	<x path="Void"/>
</f></reversePolygons>
		<PointCount set="method" line="2619"><f a="pts">
	<c path="hxd.clipper._Clipper.OutPt"/>
	<x path="Int"/>
</f></PointCount>
		<BuildResult set="method" line="2634"><f a=""><c path="Array"><x path="h2d.col.IPolygon"/></c></f></BuildResult>
		<BuildResult2 set="method" line="2657"><f a="polytree">
	<c path="hxd.clipper._Clipper.PolyTree"/>
	<x path="Void"/>
</f></BuildResult2>
		<FixupOutPolygon set="method" line="2690"><f a="outRec">
	<c path="hxd.clipper._Clipper.OutRec"/>
	<x path="Void"/>
</f></FixupOutPolygon>
		<DupOutPt set="method" line="2726"><f a="outPt:InsertAfter">
	<c path="hxd.clipper._Clipper.OutPt"/>
	<x path="Bool"/>
	<c path="hxd.clipper._Clipper.OutPt"/>
</f></DupOutPt>
		<GetOverlap set="method" line="2749"><f a="a1:a2:b1:b2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<a>
		<right><x path="Int"/></right>
		<left><x path="Int"/></left>
		<done><x path="Bool"/></done>
	</a>
</f></GetOverlap>
		<JoinHorz set="method" line="2779"><f a="op1:op1b:op2:op2b:pt:DiscardLeft">
	<c path="hxd.clipper._Clipper.OutPt"/>
	<c path="hxd.clipper._Clipper.OutPt"/>
	<c path="hxd.clipper._Clipper.OutPt"/>
	<c path="hxd.clipper._Clipper.OutPt"/>
	<c path="h2d.col.IPoint"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></JoinHorz>
		<JoinPoints set="method" line="2866"><f a="j:outRec1:outRec2">
	<c path="hxd.clipper._Clipper.Join"/>
	<c path="hxd.clipper._Clipper.OutRec"/>
	<c path="hxd.clipper._Clipper.OutRec"/>
	<x path="Bool"/>
</f></JoinPoints>
		<PointInPolygon public="1" set="method" line="3025"><f a="pt:pol">
	<c path="h2d.col.IPoint"/>
	<x path="h2d.col.IPolygon"/>
	<x path="Int"/>
</f></PointInPolygon>
		<PointInPolygon2 set="method" line="3071"><f a="pt:op">
	<c path="h2d.col.IPoint"/>
	<c path="hxd.clipper._Clipper.OutPt"/>
	<x path="Int"/>
</f></PointInPolygon2>
		<Poly2ContainsPoly1 set="method" line="3122"><f a="outPt1:outPt2">
	<c path="hxd.clipper._Clipper.OutPt"/>
	<c path="hxd.clipper._Clipper.OutPt"/>
	<x path="Bool"/>
</f></Poly2ContainsPoly1>
		<FixupFirstLefts1 set="method" line="3137"><f a="OldOutRec:NewOutRec">
	<c path="hxd.clipper._Clipper.OutRec"/>
	<c path="hxd.clipper._Clipper.OutRec"/>
	<x path="Void"/>
</f></FixupFirstLefts1>
		<FixupFirstLefts2 set="method" line="3152"><f a="OldOutRec:NewOutRec">
	<c path="hxd.clipper._Clipper.OutRec"/>
	<c path="hxd.clipper._Clipper.OutRec"/>
	<x path="Void"/>
</f></FixupFirstLefts2>
		<ParseFirstLeft set="method" line="3159"><f a="FirstLeft">
	<c path="hxd.clipper._Clipper.OutRec"/>
	<c path="hxd.clipper._Clipper.OutRec"/>
</f></ParseFirstLeft>
		<JoinCommonEdges set="method" line="3167"><f a=""><x path="Void"/></f></JoinCommonEdges>
		<UpdateOutPtIdxs set="method" line="3269"><f a="outrec">
	<c path="hxd.clipper._Clipper.OutRec"/>
	<x path="Void"/>
</f></UpdateOutPtIdxs>
		<DoSimplePolygons set="method" line="3281"><f a=""><x path="Void"/></f></DoSimplePolygons>
		<Area set="method" line="3351"><f a="outRec">
	<c path="hxd.clipper._Clipper.OutRec"/>
	<x path="Float"/>
</f></Area>
		<DistanceFromLineSqrd set="method" line="3389"><f a="pt:ln1:ln2">
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<x path="Float"/>
</f></DistanceFromLineSqrd>
		<SlopesNearCollinear set="method" line="3405"><f a="pt1:pt2:pt3:distSqrd">
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></SlopesNearCollinear>
		<PointsAreClose set="method" line="3432"><f a="pt1:pt2:distSqrd">
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></PointsAreClose>
		<ExcludeOp set="method" line="3440"><f a="op">
	<c path="hxd.clipper._Clipper.OutPt"/>
	<c path="hxd.clipper._Clipper.OutPt"/>
</f></ExcludeOp>
		<CleanPolygon public="1" set="method" line="3450">
			<f a="path:?distance" v=":1.415">
				<x path="h2d.col.IPolygon"/>
				<x path="Float"/>
				<x path="h2d.col.IPolygon"/>
			</f>
			<meta><m n=":value"><e>{ distance : 1.415 }</e></m></meta>
		</CleanPolygon>
		<CleanPolygons public="1" set="method" line="3509">
			<f a="polys:?distance" v=":1.415">
				<x path="h2d.col.IPolygons"/>
				<x path="Float"/>
				<x path="h2d.col.IPolygons"/>
			</f>
			<meta><m n=":value"><e>{ distance : 1.415 }</e></m></meta>
		</CleanPolygons>
		<Minkowski set="method" line="3518"><f a="pattern:path:IsSum">
	<x path="h2d.col.IPolygon"/>
	<x path="h2d.col.IPolygon"/>
	<x path="Bool"/>
	<x path="h2d.col.IPolygons"/>
</f></Minkowski>
		<MinkowskiSum public="1" set="method" line="3552"><f a="pattern:pol:?kind">
	<x path="h2d.col.IPolygon"/>
	<x path="h2d.col.IPolygon"/>
	<e path="hxd.clipper.ResultKind"/>
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
</f></MinkowskiSum>
		<TranslatePath set="method" line="3563"><f a="path:delta">
	<x path="h2d.col.IPolygon"/>
	<c path="h2d.col.IPoint"/>
	<x path="h2d.col.IPolygon"/>
</f></TranslatePath>
		<PolyTreeToPaths public="1" set="method" line="3600"><f a="polytree">
	<c path="hxd.clipper._Clipper.PolyTree"/>
	<x path="h2d.col.IPolygons"/>
</f></PolyTreeToPaths>
		<AddPolyNodeToPaths set="method" line="3608"><f a="polynode:nt:paths">
	<c path="hxd.clipper._Clipper.PolyNode"/>
	<e path="hxd.clipper.NodeType"/>
	<x path="h2d.col.IPolygons"/>
	<x path="Void"/>
</f></AddPolyNodeToPaths>
		<new public="1" set="method" line="858"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noDebug"/>
			<m n=":allow"><e>hxd.clipper</e></m>
		</meta>
	</class>
	<class path="hxd.clipper.ClipperOffset" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Clipper.hx" module="hxd.clipper.Clipper">
		<m_destPolys><x path="h2d.col.IPolygons"/></m_destPolys>
		<m_srcPoly><x path="h2d.col.IPolygon"/></m_srcPoly>
		<m_destPoly><x path="h2d.col.IPolygon"/></m_destPoly>
		<m_normals><c path="Array"><c path="h2d.col.Point"/></c></m_normals>
		<m_delta><x path="Float"/></m_delta>
		<m_sinA><x path="Float"/></m_sinA>
		<m_sin><x path="Float"/></m_sin>
		<m_cos><x path="Float"/></m_cos>
		<m_miterLim><x path="Float"/></m_miterLim>
		<m_StepsPerRad><x path="Float"/></m_StepsPerRad>
		<m_lowest><c path="h2d.col.IPoint"/></m_lowest>
		<m_polyNodes><c path="hxd.clipper._Clipper.PolyNode"/></m_polyNodes>
		<ArcTolerance public="1"><x path="Float"/></ArcTolerance>
		<MiterLimit public="1"><x path="Float"/></MiterLimit>
		<resultKind public="1"><e path="hxd.clipper.ResultKind"/></resultKind>
		<def_arc_tolerance expr="0.25">
			<x path="Float"/>
			<meta><m n=":value"><e>0.25</e></m></meta>
		</def_arc_tolerance>
		<two_pi expr="Math.PI * 2">
			<x path="Float"/>
			<meta><m n=":value"><e>Math.PI * 2</e></m></meta>
		</two_pi>
		<clear public="1" set="method" line="3662"><f a=""><x path="Void"/></f></clear>
		<addPolygon public="1" set="method" line="3669"><f a="pol:joinType:endType">
	<x path="h2d.col.IPolygon"/>
	<e path="hxd.clipper.JoinType"/>
	<e path="hxd.clipper.EndType"/>
	<x path="Void"/>
</f></addPolygon>
		<addPolygons public="1" set="method" line="3707"><f a="pols:joinType:endType">
	<x path="h2d.col.IPolygons"/>
	<e path="hxd.clipper.JoinType"/>
	<e path="hxd.clipper.EndType"/>
	<x path="Void"/>
</f></addPolygons>
		<fixOrientations set="method" line="3715"><f a=""><x path="Void"/></f></fixOrientations>
		<getUnitNormal set="method" line="3735"><f a="pt1:pt2">
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.IPoint"/>
	<c path="h2d.col.Point"/>
</f></getUnitNormal>
		<doOffset set="method" line="3748"><f a="delta">
	<x path="Float"/>
	<x path="Void"/>
</f></doOffset>
		<execute public="1" set="method" line="3909"><f a="delta">
	<x path="Float"/>
	<c path="Array"><x path="h2d.col.IPolygon"/></c>
</f></execute>
		<offsetPoint set="method" line="3937"><f a="j:k:jointype">
	<x path="Int"/>
	<x path="Int"/>
	<e path="hxd.clipper.JoinType"/>
	<x path="Int"/>
</f></offsetPoint>
		<doSquare get="inline" set="null" line="3982"><f a="j:k">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doSquare>
		<doMiter get="inline" set="null" line="3990"><f a="j:k:r">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></doMiter>
		<doRound get="inline" set="null" line="3997"><f a="j:k">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doRound>
		<new public="1" set="method" line="3652">
			<f a="?miterLimit:?arcTolerance" v="2.0:0.25">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ arcTolerance : 0.25, miterLimit : 2.0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>hxd.clipper</e></m>
		</meta>
	</class>
	<enum path="hxd.clipper.EndType" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/EndType.hx">
		<ClosedPol/>
		<ClosedLine/>
		<OpenButt/>
		<OpenSquare/>
		<OpenRound/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="hxd.clipper.JoinType" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/JoinType.hx">
		<Square/>
		<Round/>
		<Miter/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="hxd.clipper.PolyFillType" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/PolyFillType.hx">
		<EvenOdd/>
		<NonZero/>
		<Positive/>
		<Negative/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="hxd.clipper.PolyType" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/PolyType.hx">
		<Subject/>
		<Clip/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="hxd.clipper.Rect" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/clipper/Rect.hx">
		<left public="1"><x path="Int"/></left>
		<top public="1"><x path="Int"/></top>
		<right public="1"><x path="Int"/></right>
		<bottom public="1"><x path="Int"/></bottom>
		<new public="1" set="method" line="9">
			<f a="?l:?t:?r:?b" v="0:0:0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ b : 0, r : 0, t : 0, l : 0 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.earcut.EarNode" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/earcut/Earcut.hx" module="hxd.earcut.Earcut">
		<next public="1"><c path="hxd.earcut.EarNode"/></next>
		<prev public="1"><c path="hxd.earcut.EarNode"/></prev>
		<nextZ public="1"><c path="hxd.earcut.EarNode"/></nextZ>
		<prevZ public="1"><c path="hxd.earcut.EarNode"/></prevZ>
		<allocNext public="1"><c path="hxd.earcut.EarNode"/></allocNext>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<i public="1"><x path="Int"/></i>
		<z public="1"><x path="Int"/></z>
		<steiner public="1"><x path="Bool"/></steiner>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.earcut.Earcut" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/earcut/Earcut.hx">
		<triangles><c path="Array"><x path="Int"/></c></triangles>
		<cache><c path="hxd.earcut.EarNode"/></cache>
		<allocated><c path="hxd.earcut.EarNode"/></allocated>
		<minX><x path="Float"/></minX>
		<minY><x path="Float"/></minY>
		<size><x path="Float"/></size>
		<hasSize><x path="Bool"/></hasSize>
		<triangulateNode public="1" set="method" line="48"><f a="root:useZOrder">
	<c path="hxd.earcut.EarNode"/>
	<x path="Bool"/>
	<c path="Array"><x path="Int"/></c>
</f></triangulateNode>
		<eliminateHole set="method" line="147"><f a="hole:root">
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
	<x path="Void"/>
</f></eliminateHole>
		<findHoleBridge set="method" line="156"><f a="hole:root">
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
</f></findHoleBridge>
		<getLeftmost set="method" line="201"><f a="node">
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
</f></getLeftmost>
		<compareX get="inline" set="null" line="212"><f a="a:b">
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
	<x path="Int"/>
</f></compareX>
		<equals get="inline" set="null" line="216"><f a="p1:p2">
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
	<x path="Bool"/>
</f></equals>
		<area get="inline" set="null" line="220"><f a="p:q:r">
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
	<x path="Float"/>
</f></area>
		<intersects get="inline" set="null" line="224"><f a="p1:q1:p2:q2">
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
	<x path="Bool"/>
</f></intersects>
		<locallyInside get="inline" set="null" line="229"><f a="a:b">
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
	<x path="Bool"/>
</f></locallyInside>
		<filterPoints set="method" line="235">
			<f a="start:?end" v=":null">
				<c path="hxd.earcut.EarNode"/>
				<c path="hxd.earcut.EarNode"/>
				<c path="hxd.earcut.EarNode"/>
			</f>
			<meta><m n=":value"><e>{ end : null }</e></m></meta>
		</filterPoints>
		<removeNode get="inline" set="null" line="253"><f a="p">
	<c path="hxd.earcut.EarNode"/>
	<x path="Void"/>
</f></removeNode>
		<allocNode get="inline" set="null" line="260">
			<f a="i:x:y:?last" v=":::null">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="hxd.earcut.EarNode"/>
				<c path="hxd.earcut.EarNode"/>
			</f>
			<meta><m n=":value"><e>{ last : null }</e></m></meta>
		</allocNode>
		<earcutLinked set="method" line="282">
			<f a="ear:?pass" v=":0">
				<c path="hxd.earcut.EarNode"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ pass : 0 }</e></m></meta>
		</earcutLinked>
		<isEar set="method" line="333"><f a="ear">
	<c path="hxd.earcut.EarNode"/>
	<x path="Bool"/>
</f></isEar>
		<isEarHashed set="method" line="352"><f a="ear">
	<c path="hxd.earcut.EarNode"/>
	<x path="Bool"/>
</f></isEarHashed>
		<cureLocalIntersections set="method" line="393"><f a="start">
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
</f></cureLocalIntersections>
		<splitEarcut set="method" line="419"><f a="start">
	<c path="hxd.earcut.EarNode"/>
	<x path="Void"/>
</f></splitEarcut>
		<splitPolygon set="method" line="446"><f a="a:b">
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
</f></splitPolygon>
		<pointInTriangle get="inline" set="null" line="467"><f a="ax:ay:bx:by:cx:cy:px:py">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></pointInTriangle>
		<isValidDiagonal set="method" line="474"><f a="a:b">
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
	<x path="Bool"/>
</f></isValidDiagonal>
		<middleInside set="method" line="480"><f a="a:b">
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
	<x path="Bool"/>
</f></middleInside>
		<intersectsPolygon set="method" line="495"><f a="a:b">
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
	<x path="Bool"/>
</f></intersectsPolygon>
		<zOrder get="inline" set="null" line="505"><f a="px:py">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></zOrder>
		<indexCurve set="method" line="523"><f a="start">
	<c path="hxd.earcut.EarNode"/>
	<x path="Void"/>
</f></indexCurve>
		<sortLinked set="method" line="538"><f a="list">
	<c path="hxd.earcut.EarNode"/>
	<c path="hxd.earcut.EarNode"/>
</f></sortLinked>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Ported from https://github.com/mapbox/earcut by @ncannasse</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hdr.Reader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hdr/Reader.hx">
		<decode public="1" set="method" line="5" static="1"><f a="bytes:sRGB">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
	<a>
		<width><x path="Int"/></width>
		<height><x path="Int"/></height>
		<gamma><x path="Bool"/></gamma>
		<bytes><c path="haxe.io.Bytes"/></bytes>
	</a>
</f></decode>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxd.fmt.hmd.GeometryDataFormat" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxd.fmt.hmd._Data.GeometryDataFormat_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" private="1" module="hxd.fmt.hmd.Data" final="1">
	<DFloat public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="hxd.fmt.hmd.GeometryDataFormat"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DFloat>
	<DVec2 public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="hxd.fmt.hmd.GeometryDataFormat"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DVec2>
	<DVec3 public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
		<x path="hxd.fmt.hmd.GeometryDataFormat"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DVec3>
	<DVec4 public="1" get="inline" set="null" expr="cast 4" line="8" static="1">
		<x path="hxd.fmt.hmd.GeometryDataFormat"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DVec4>
	<DBytes4 public="1" get="inline" set="null" expr="cast 9" line="9" static="1">
		<x path="hxd.fmt.hmd.GeometryDataFormat"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DBytes4>
	<_new get="inline" set="null" line="11" static="1">
		<f a="v">
			<x path="Int"/>
			<x path="hxd.fmt.hmd.GeometryDataFormat"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<getSize public="1" get="inline" set="null" line="15" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></getSize>
	<toInt public="1" get="inline" set="null" line="19" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
	<toString public="1" set="method" line="23" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
	<fromInt public="1" get="inline" set="null" line="33" static="1"><f a="v">
	<x path="Int"/>
	<x path="hxd.fmt.hmd.GeometryDataFormat"/>
</f></fromInt>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxd.fmt.hmd._Data.GeometryDataFormat_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" private="1" module="hxd.fmt.hmd.Data" final="1">
		<DFloat public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="hxd.fmt.hmd.GeometryDataFormat"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DFloat>
		<DVec2 public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="hxd.fmt.hmd.GeometryDataFormat"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DVec2>
		<DVec3 public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
			<x path="hxd.fmt.hmd.GeometryDataFormat"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DVec3>
		<DVec4 public="1" get="inline" set="null" expr="cast 4" line="8" static="1">
			<x path="hxd.fmt.hmd.GeometryDataFormat"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DVec4>
		<DBytes4 public="1" get="inline" set="null" expr="cast 9" line="9" static="1">
			<x path="hxd.fmt.hmd.GeometryDataFormat"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DBytes4>
		<_new get="inline" set="null" line="11" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="hxd.fmt.hmd.GeometryDataFormat"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<getSize public="1" get="inline" set="null" line="15" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></getSize>
		<toInt public="1" get="inline" set="null" line="19" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
		<toString public="1" set="method" line="23" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
		<fromInt public="1" get="inline" set="null" line="33" static="1"><f a="v">
	<x path="Int"/>
	<x path="hxd.fmt.hmd.GeometryDataFormat"/>
</f></fromInt>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="hxd.fmt.hmd.DataPosition" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data"><x path="Int"/></typedef>
	<typedef path="hxd.fmt.hmd.Index" params="T" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data"><x path="Int"/></typedef>
	<enum path="hxd.fmt.hmd.Property" params="T" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data">
		<CameraFOVY a="v"><x path="Float"/></CameraFOVY>
		<Unused_HasMaterialFlags/>
		<HasExtraTextures/>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="hxd.fmt.hmd.Properties" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data"><x path="Null"><c path="Array"><e path="hxd.fmt.hmd.Property"><d/></e></c></x></typedef>
	<class path="hxd.fmt.hmd.Position" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data">
		<QTMP expr="new h3d.Quat()" line="91" static="1">
			<c path="h3d.Quat"/>
			<meta><m n=":value"><e>new h3d.Quat()</e></m></meta>
		</QTMP>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<qx public="1"><x path="Float"/></qx>
		<qy public="1"><x path="Float"/></qy>
		<qz public="1"><x path="Float"/></qz>
		<qw public="1" get="accessor" set="null"><x path="Float"/></qw>
		<sx public="1"><x path="Float"/></sx>
		<sy public="1"><x path="Float"/></sy>
		<sz public="1"><x path="Float"/></sz>
		<loadQuaternion public="1" get="inline" set="null" line="63"><f a="q">
	<c path="h3d.Quat"/>
	<x path="Void"/>
</f></loadQuaternion>
		<get_qw set="method" line="70"><f a=""><x path="Float"/></f></get_qw>
		<toMatrix public="1" set="method" line="75">
			<f a="?postScale" v="false">
				<x path="Bool"/>
				<c path="h3d.Matrix"/>
			</f>
			<meta><m n=":value"><e>{ postScale : false }</e></m></meta>
		</toMatrix>
		<new public="1" set="method" line="60"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hmd.GeometryFormat" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data">
		<name public="1"><c path="String"/></name>
		<format public="1"><x path="hxd.fmt.hmd.GeometryDataFormat"/></format>
		<new public="1" set="method" line="97"><f a="name:format">
	<c path="String"/>
	<x path="hxd.fmt.hmd.GeometryDataFormat"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hmd.Geometry" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data">
		<props public="1"><t path="hxd.fmt.hmd.Properties"/></props>
		<vertexCount public="1"><x path="Int"/></vertexCount>
		<vertexStride public="1"><x path="Int"/></vertexStride>
		<vertexFormat public="1"><c path="Array"><c path="hxd.fmt.hmd.GeometryFormat"/></c></vertexFormat>
		<vertexPosition public="1"><t path="hxd.fmt.hmd.DataPosition"/></vertexPosition>
		<indexCount public="1" get="accessor" set="null"><x path="Int"/></indexCount>
		<indexCounts public="1"><c path="Array"><x path="Int"/></c></indexCounts>
		<indexPosition public="1"><t path="hxd.fmt.hmd.DataPosition"/></indexPosition>
		<bounds public="1"><c path="h3d.col.Bounds"/></bounds>
		<get_indexCount set="method" line="115"><f a=""><x path="Int"/></f></get_indexCount>
		<new public="1" set="method" line="113"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hmd.Material" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data">
		<name public="1"><c path="String"/></name>
		<props public="1"><t path="hxd.fmt.hmd.Properties"/></props>
		<diffuseTexture public="1"><x path="Null"><c path="String"/></x></diffuseTexture>
		<specularTexture public="1"><x path="Null"><c path="String"/></x></specularTexture>
		<normalMap public="1"><x path="Null"><c path="String"/></x></normalMap>
		<blendMode public="1"><t path="h3d.mat.BlendMode"/></blendMode>
		<new public="1" set="method" line="131"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hmd.SkinJoint" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data">
		<name public="1"><c path="String"/></name>
		<props public="1"><t path="hxd.fmt.hmd.Properties"/></props>
		<parent public="1"><t path="hxd.fmt.hmd.Index"><c path="hxd.fmt.hmd.SkinJoint"/></t></parent>
		<position public="1"><c path="hxd.fmt.hmd.Position"/></position>
		<bind public="1"><x path="Int"/></bind>
		<transpos public="1"><x path="Null"><c path="hxd.fmt.hmd.Position"/></x></transpos>
		<new public="1" set="method" line="142"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hmd.SkinSplit" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data">
		<materialIndex public="1"><x path="Int"/></materialIndex>
		<joints public="1"><c path="Array"><t path="hxd.fmt.hmd.Index"><c path="hxd.fmt.hmd.SkinJoint"/></t></c></joints>
		<new public="1" set="method" line="149"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hmd.Skin" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data">
		<name public="1"><c path="String"/></name>
		<props public="1"><t path="hxd.fmt.hmd.Properties"/></props>
		<joints public="1"><c path="Array"><c path="hxd.fmt.hmd.SkinJoint"/></c></joints>
		<split public="1"><x path="Null"><c path="Array"><c path="hxd.fmt.hmd.SkinSplit"/></c></x></split>
		<new public="1" set="method" line="158"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hmd.Model" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data">
		<name public="1"><c path="String"/></name>
		<props public="1"><t path="hxd.fmt.hmd.Properties"/></props>
		<parent public="1"><t path="hxd.fmt.hmd.Index"><c path="hxd.fmt.hmd.Model"/></t></parent>
		<follow public="1"><x path="Null"><c path="String"/></x></follow>
		<position public="1"><c path="hxd.fmt.hmd.Position"/></position>
		<geometry public="1"><t path="hxd.fmt.hmd.Index"><c path="hxd.fmt.hmd.Geometry"/></t></geometry>
		<materials public="1"><x path="Null"><c path="Array"><t path="hxd.fmt.hmd.Index"><c path="hxd.fmt.hmd.Material"/></t></c></x></materials>
		<skin public="1"><x path="Null"><c path="hxd.fmt.hmd.Skin"/></x></skin>
		<new public="1" set="method" line="171"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="hxd.fmt.hmd.AnimationFlag" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data">
		<HasPosition/>
		<HasRotation/>
		<HasScale/>
		<HasUV/>
		<HasAlpha/>
		<SingleFrame/>
		<HasProps/>
		<Reserved/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="hxd.fmt.hmd.AnimationObject" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data">
		<name public="1"><c path="String"/></name>
		<flags public="1"><x path="haxe.EnumFlags"><e path="hxd.fmt.hmd.AnimationFlag"/></x></flags>
		<props public="1"><c path="Array"><c path="String"/></c></props>
		<getStride public="1" set="method" line="192"><f a=""><x path="Int"/></f></getStride>
		<new public="1" set="method" line="190"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hmd.AnimationEvent" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data">
		<frame public="1"><x path="Int"/></frame>
		<data public="1"><c path="String"/></data>
		<new public="1" set="method" line="207"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hmd.Animation" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx" module="hxd.fmt.hmd.Data">
		<name public="1"><c path="String"/></name>
		<props public="1"><t path="hxd.fmt.hmd.Properties"/></props>
		<frames public="1"><x path="Int"/></frames>
		<sampling public="1"><x path="Float"/></sampling>
		<speed public="1"><x path="Float"/></speed>
		<loop public="1"><x path="Bool"/></loop>
		<objects public="1"><c path="Array"><c path="hxd.fmt.hmd.AnimationObject"/></c></objects>
		<events public="1"><x path="Null"><c path="Array"><c path="hxd.fmt.hmd.AnimationEvent"/></c></x></events>
		<dataPosition public="1"><t path="hxd.fmt.hmd.DataPosition"/></dataPosition>
		<new public="1" set="method" line="221"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hmd.Data" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Data.hx">
		<CURRENT_VERSION public="1" get="inline" set="null" expr="3" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</CURRENT_VERSION>
		<version public="1"><x path="Int"/></version>
		<props public="1"><t path="hxd.fmt.hmd.Properties"/></props>
		<geometries public="1"><c path="Array"><c path="hxd.fmt.hmd.Geometry"/></c></geometries>
		<materials public="1"><c path="Array"><c path="hxd.fmt.hmd.Material"/></c></materials>
		<models public="1"><c path="Array"><c path="hxd.fmt.hmd.Model"/></c></models>
		<animations public="1"><c path="Array"><c path="hxd.fmt.hmd.Animation"/></c></animations>
		<dataPosition public="1"><x path="Int"/></dataPosition>
		<data public="1"><c path="haxe.io.Bytes"/></data>
		<new public="1" set="method" line="238"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hmd._Library.FormatMap" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Library.hx" private="1" module="hxd.fmt.hmd.Library">
		<size public="1"><x path="Int"/></size>
		<offset public="1"><x path="Int"/></offset>
		<def public="1"><c path="h3d.Vector"/></def>
		<next public="1"><c path="hxd.fmt.hmd._Library.FormatMap"/></next>
		<new public="1" set="method" line="9"><f a="size:offset:def:next">
	<x path="Int"/>
	<x path="Int"/>
	<c path="h3d.Vector"/>
	<c path="hxd.fmt.hmd._Library.FormatMap"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hmd.GeometryBuffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Library.hx" module="hxd.fmt.hmd.Library">
		<vertexes public="1"><x path="haxe.ds.Vector"><t path="hxd.impl.Float32"/></x></vertexes>
		<indexes public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></indexes>
		<new public="1" set="method" line="20"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hmd.Library" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Library.hx">
		<resource public="1" set="null"><c path="hxd.res.Resource"/></resource>
		<header public="1" set="null"><c path="hxd.fmt.hmd.Data"/></header>
		<cachedPrimitives><c path="Array"><c path="h3d.prim.HMDModel"/></c></cachedPrimitives>
		<cachedAnimations><t path="Map">
	<c path="String"/>
	<c path="h3d.anim.Animation"/>
</t></cachedAnimations>
		<cachedSkin><t path="Map">
	<c path="String"/>
	<c path="h3d.anim.Skin"/>
</t></cachedSkin>
		<getData public="1" set="method" line="40"><f a=""><c path="haxe.io.Bytes"/></f></getData>
		<getDefaultFormat public="1" set="method" line="50"><f a="stride">
	<x path="Int"/>
	<a>
		<format><c path="Array"><c path="hxd.fmt.hmd.GeometryFormat"/></c></format>
		<defs><c path="Array"><c path="h3d.Vector"/></c></defs>
	</a>
</f></getDefaultFormat>
		<load public="1" set="method" line="72">
			<f a="format:?defaults:?modelIndex" v="::-1">
				<c path="Array"><c path="hxd.fmt.hmd.GeometryFormat"/></c>
				<c path="Array"><c path="h3d.Vector"/></c>
				<x path="Int"/>
				<a>
					<vertex><x path="hxd.FloatBuffer"/></vertex>
					<index><x path="hxd.IndexBuffer"/></index>
				</a>
			</f>
			<meta><m n=":value"><e>{ modelIndex : -1 }</e></m></meta>
		</load>
		<getBuffers public="1" set="method" line="110">
			<f a="geom:format:?defaults:?material">
				<c path="hxd.fmt.hmd.Geometry"/>
				<c path="Array"><c path="hxd.fmt.hmd.GeometryFormat"/></c>
				<c path="Array"><c path="h3d.Vector"/></c>
				<x path="Int"/>
				<c path="hxd.fmt.hmd.GeometryBuffer"/>
			</f>
			<meta><m n=":noDebug"/></meta>
		</getBuffers>
		<makePrimitive set="method" line="260"><f a="id">
	<x path="Int"/>
	<c path="h3d.prim.HMDModel"/>
</f></makePrimitive>
		<makeMaterial set="method" line="269"><f a="model:mid:loadTexture">
	<c path="hxd.fmt.hmd.Model"/>
	<x path="Int"/>
	<f a="">
		<c path="String"/>
		<c path="h3d.mat.Texture"/>
	</f>
	<c path="h3d.mat.Material"/>
</f></makeMaterial>
		<makeSkin set="method" line="290">
			<f a="skin">
				<c path="hxd.fmt.hmd.Skin"/>
				<x path="Null"><c path="h3d.anim.Skin"/></x>
			</f>
			<meta><m n=":access"><e>h3d.anim.Skin</e></m></meta>
		</makeSkin>
		<getModelProperty public="1" params="T" set="method" line="327"><f a="objName:p:?def">
	<c path="String"/>
	<e path="hxd.fmt.hmd.Property"><c path="getModelProperty.T"/></e>
	<c path="getModelProperty.T"/>
	<x path="Null"><c path="getModelProperty.T"/></x>
</f></getModelProperty>
		<makeObject public="1" set="method" line="342"><f a="?loadTexture">
	<f a="">
		<c path="String"/>
		<c path="h3d.mat.Texture"/>
	</f>
	<c path="h3d.scene.Object"/>
</f></makeObject>
		<loadAnimation public="1" set="method" line="373"><f a="?name">
	<c path="String"/>
	<c path="h3d.anim.Animation"/>
</f></loadAnimation>
		<makeAnimation set="method" line="404"><f a="a">
	<c path="hxd.fmt.hmd.Animation"/>
	<c path="h3d.anim.BufferAnimation"/>
</f></makeAnimation>
		<makeLinearAnimation set="method" line="487"><f a="a">
	<c path="hxd.fmt.hmd.Animation"/>
	<c path="h3d.anim.LinearAnimation"/>
</f></makeLinearAnimation>
		<loadSkin public="1" set="method" line="577">
			<f a="geom:skin:?optimize" v="::true">
				<c path="hxd.fmt.hmd.Geometry"/>
				<c path="h3d.anim.Skin"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ optimize : true }</e></m>
				<m n=":allow"><e>h3d.anim.Skin</e></m>
			</meta>
		</loadSkin>
		<new public="1" set="method" line="32"><f a="res:header">
	<c path="hxd.res.Resource"/>
	<c path="hxd.fmt.hmd.Data"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fmt.hmd.Reader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fmt/hmd/Reader.hx">
		<BLEND expr="Type.allEnums(h2d.BlendMode)" line="6" static="1">
			<c path="Array"><e path="h2d.BlendMode"/></c>
			<meta><m n=":value"><e>Type.allEnums(h2d.BlendMode)</e></m></meta>
		</BLEND>
		<CULLING expr="Type.allEnums(h3d.mat.Data.Face)" line="7" static="1">
			<c path="Array"><e path="h3d.mat.Face"/></c>
			<meta><m n=":value"><e>Type.allEnums(h3d.mat.Data.Face)</e></m></meta>
		</CULLING>
		<HMD_STRINGS static="1"><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></HMD_STRINGS>
		<i><c path="haxe.io.Input"/></i>
		<version><x path="Int"/></version>
		<readProperty set="method" line="16"><f a=""><e path="hxd.fmt.hmd.Property"><x path="Float"/></e></f></readProperty>
		<readProps set="method" line="29"><f a=""><c path="Array"><e path="hxd.fmt.hmd.Property"><x path="Float"/></e></c></f></readProps>
		<readName set="method" line="38"><f a=""><c path="String"/></f></readName>
		<readCachedName set="method" line="49"><f a=""><x path="Null"><c path="String"/></x></f></readCachedName>
		<readPosition set="method" line="60">
			<f a="?hasScale" v="true">
				<x path="Bool"/>
				<c path="hxd.fmt.hmd.Position"/>
			</f>
			<meta><m n=":value"><e>{ hasScale : true }</e></m></meta>
		</readPosition>
		<readBounds set="method" line="80"><f a=""><c path="h3d.col.Bounds"/></f></readBounds>
		<readSkin set="method" line="91"><f a=""><c path="hxd.fmt.hmd.Skin"/></f></readSkin>
		<readHeader public="1" set="method" line="126"><f a=""><c path="hxd.fmt.hmd.Data"/></f></readHeader>
		<read public="1" set="method" line="222"><f a=""><c path="hxd.fmt.hmd.Data"/></f></read>
		<new public="1" set="method" line="12"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fs.FileEntry" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fs/FileEntry.hx">
		<name public="1" set="null"><c path="String"/></name>
		<path public="1" get="accessor" set="null"><c path="String"/></path>
		<directory public="1" get="accessor" set="null"><c path="String"/></directory>
		<extension public="1" get="accessor" set="null"><c path="String"/></extension>
		<size public="1" get="accessor" set="null"><x path="Int"/></size>
		<isDirectory public="1" get="accessor" set="null"><x path="Bool"/></isDirectory>
		<isAvailable public="1" get="accessor" set="null"><x path="Bool"/></isAvailable>
		<getSign public="1" set="method" line="14"><f a=""><x path="Int"/></f></getSign>
		<getBytes public="1" set="method" line="16"><f a=""><c path="haxe.io.Bytes"/></f></getBytes>
		<getText public="1" set="method" line="18"><f a=""><c path="String"/></f></getText>
		<open public="1" set="method" line="20"><f a=""><x path="Void"/></f></open>
		<skip public="1" set="method" line="21"><f a="nbytes">
	<x path="Int"/>
	<x path="Void"/>
</f></skip>
		<readByte public="1" set="method" line="22"><f a=""><x path="Int"/></f></readByte>
		<read public="1" set="method" line="23"><f a="out:pos:size">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></read>
		<close public="1" set="method" line="24"><f a=""><x path="Void"/></f></close>
		<load public="1" set="method" line="26"><f a="?onReady">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></load>
		<loadBitmap public="1" set="method" line="27"><f a="onLoaded">
	<f a="">
		<x path="hxd.fs.LoadedBitmap"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadBitmap>
		<watch public="1" set="method" line="28"><f a="onChanged">
	<x path="Null"><f a=""><x path="Void"/></f></x>
	<x path="Void"/>
</f></watch>
		<exists public="1" set="method" line="29"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></exists>
		<get public="1" set="method" line="30"><f a="name">
	<c path="String"/>
	<c path="hxd.fs.FileEntry"/>
</f></get>
		<iterator public="1" set="method" line="32"><f a=""><c path="hxd.impl.ArrayIterator_hxd_fs_FileEntry"/></f></iterator>
		<get_isAvailable set="method" line="34"><f a=""><x path="Bool"/></f></get_isAvailable>
		<get_isDirectory set="method" line="35"><f a=""><x path="Bool"/></f></get_isDirectory>
		<get_size set="method" line="36"><f a=""><x path="Int"/></f></get_size>
		<get_path set="method" line="37"><f a=""><c path="String"/></f></get_path>
		<get_directory set="method" line="39"><f a=""><c path="String"/></f></get_directory>
		<get_extension set="method" line="45"><f a=""><c path="String"/></f></get_extension>
	</class>
	<class path="hxd.fs.BytesFileEntry" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fs/BytesFileSystem.hx" module="hxd.fs.BytesFileSystem">
		<extends path="hxd.fs.FileEntry"/>
		<fullPath><c path="String"/></fullPath>
		<bytes><c path="haxe.io.Bytes"/></bytes>
		<pos><x path="Int"/></pos>
		<get_path set="method" line="17" override="1"><f a=""><c path="String"/></f></get_path>
		<getSign public="1" set="method" line="21" override="1"><f a=""><x path="Int"/></f></getSign>
		<getBytes public="1" set="method" line="25" override="1"><f a=""><c path="haxe.io.Bytes"/></f></getBytes>
		<open public="1" set="method" line="29" override="1"><f a=""><x path="Void"/></f></open>
		<skip public="1" set="method" line="33" override="1"><f a="nbytes">
	<x path="Int"/>
	<x path="Void"/>
</f></skip>
		<readByte public="1" set="method" line="36" override="1"><f a=""><x path="Int"/></f></readByte>
		<read public="1" set="method" line="40" override="1"><f a="out:pos:size">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></read>
		<close public="1" set="method" line="45" override="1"><f a=""><x path="Void"/></f></close>
		<load public="1" set="method" line="48" override="1"><f a="?onReady">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></load>
		<loadBitmap public="1" set="method" line="52" override="1"><f a="onLoaded">
	<f a="">
		<x path="hxd.fs.LoadedBitmap"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadBitmap>
		<exists public="1" set="method" line="79" override="1"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></exists>
		<get public="1" set="method" line="80" override="1"><f a="name">
	<c path="String"/>
	<c path="hxd.fs.FileEntry"/>
</f></get>
		<iterator public="1" set="method" line="82" override="1"><f a=""><c path="hxd.impl.ArrayIterator_hxd_fs_FileEntry"/></f></iterator>
		<get_size set="method" line="84" override="1"><f a=""><x path="Int"/></f></get_size>
		<new public="1" set="method" line="11"><f a="path:bytes">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fs.FileSystem" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fs/FileSystem.hx" interface="1">
		<getRoot public="1" set="method"><f a=""><c path="hxd.fs.FileEntry"/></f></getRoot>
		<get public="1" set="method"><f a="path">
	<c path="String"/>
	<c path="hxd.fs.FileEntry"/>
</f></get>
		<exists public="1" set="method"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></exists>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<dir public="1" set="method"><f a="path">
	<c path="String"/>
	<c path="Array"><c path="hxd.fs.FileEntry"/></c>
</f></dir>
	</class>
	<class path="hxd.fs.BytesFileSystem" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fs/BytesFileSystem.hx">
		<implements path="hxd.fs.FileSystem"/>
		<getRoot public="1" set="method" line="93"><f a=""><c path="hxd.fs.FileEntry"/></f></getRoot>
		<getBytes set="method" line="98"><f a="path">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></getBytes>
		<exists public="1" set="method" line="103"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></exists>
		<get public="1" set="method" line="107"><f a="path">
	<c path="String"/>
	<c path="hxd.fs.BytesFileEntry"/>
</f></get>
		<dispose public="1" set="method" line="113"><f a=""><x path="Void"/></f></dispose>
		<dir public="1" set="method" line="116"><f a="path">
	<c path="String"/>
	<c path="Array"><c path="hxd.fs.FileEntry"/></c>
</f></dir>
		<new set="method" line="90"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="hxd.fs.FileInput" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fs/FileInput.hx">
		<extends path="haxe.io.Input"/>
		<f><c path="hxd.fs.FileEntry"/></f>
		<skip public="1" set="method" line="12"><f a="nbytes">
	<x path="Int"/>
	<x path="Void"/>
</f></skip>
		<readByte public="1" set="method" line="16" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="20" override="1"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="25"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="7"><f a="f">
	<c path="hxd.fs.FileEntry"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="hxd.fs.LoadedBitmapData" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fs/LoadedBitmap.hx" module="hxd.fs.LoadedBitmap"><c path="js.html.Image"/></typedef>
	<abstract path="hxd.fs.LoadedBitmap" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fs/LoadedBitmap.hx">
		<this><t path="hxd.fs.LoadedBitmapData"/></this>
		<impl><class path="hxd.fs._LoadedBitmap.LoadedBitmap_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fs/LoadedBitmap.hx" private="1" module="hxd.fs.LoadedBitmap" final="1">
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="data">
			<t path="hxd.fs.LoadedBitmapData"/>
			<x path="hxd.fs.LoadedBitmap"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<toBitmap public="1" set="method" line="17" static="1"><f a="this">
	<t path="hxd.fs.LoadedBitmapData"/>
	<c path="hxd.BitmapData"/>
</f></toBitmap>
	<toNative public="1" get="inline" set="null" line="29" static="1"><f a="this">
	<t path="hxd.fs.LoadedBitmapData"/>
	<t path="hxd.fs.LoadedBitmapData"/>
</f></toNative>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="hxd.fs._LoadedBitmap.LoadedBitmap_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fs/LoadedBitmap.hx" private="1" module="hxd.fs.LoadedBitmap" final="1">
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="data">
				<t path="hxd.fs.LoadedBitmapData"/>
				<x path="hxd.fs.LoadedBitmap"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<toBitmap public="1" set="method" line="17" static="1"><f a="this">
	<t path="hxd.fs.LoadedBitmapData"/>
	<c path="hxd.BitmapData"/>
</f></toBitmap>
		<toNative public="1" get="inline" set="null" line="29" static="1"><f a="this">
	<t path="hxd.fs.LoadedBitmapData"/>
	<t path="hxd.fs.LoadedBitmapData"/>
</f></toNative>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.fs.NotFound" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/fs/NotFound.hx">
		<path public="1"><c path="String"/></path>
		<toString set="method" line="8">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="5"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxd.impl.BufferFlags" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/Allocator.hx" module="hxd.impl.Allocator">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxd.impl._Allocator.BufferFlags_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/Allocator.hx" private="1" module="hxd.impl.Allocator" final="1">
	<Dynamic public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="hxd.impl.BufferFlags"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Dynamic>
	<UniformDynamic public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="hxd.impl.BufferFlags"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UniformDynamic>
	<RawFormat public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="hxd.impl.BufferFlags"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RawFormat>
	<RawQuads public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
		<x path="hxd.impl.BufferFlags"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RawQuads>
	<toInt public="1" get="inline" set="null" line="8" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxd.impl._Allocator.BufferFlags_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/Allocator.hx" private="1" module="hxd.impl.Allocator" final="1">
		<Dynamic public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="hxd.impl.BufferFlags"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Dynamic>
		<UniformDynamic public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="hxd.impl.BufferFlags"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UniformDynamic>
		<RawFormat public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="hxd.impl.BufferFlags"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RawFormat>
		<RawQuads public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
			<x path="hxd.impl.BufferFlags"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RawQuads>
		<toInt public="1" get="inline" set="null" line="8" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="hxd.impl.Allocator" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/Allocator.hx">
		<inst static="1"><c path="hxd.impl.Allocator"/></inst>
		<set public="1" set="method" line="76" static="1"><f a="a">
	<c path="hxd.impl.Allocator"/>
	<x path="Void"/>
</f></set>
		<get public="1" set="method" line="79" static="1"><f a=""><c path="hxd.impl.Allocator"/></f></get>
		<allocBuffer public="1" set="method" line="20"><f a="vertices:stride:flags">
	<x path="Int"/>
	<x path="Int"/>
	<x path="hxd.impl.BufferFlags"/>
	<c path="h3d.Buffer"/>
</f></allocBuffer>
		<ofFloats public="1" set="method" line="30"><f a="v:stride:flags">
	<x path="hxd.FloatBuffer"/>
	<x path="Int"/>
	<x path="hxd.impl.BufferFlags"/>
	<c path="h3d.Buffer"/>
</f></ofFloats>
		<disposeBuffer public="1" set="method" line="37"><f a="b">
	<c path="h3d.Buffer"/>
	<x path="Void"/>
</f></disposeBuffer>
		<allocIndexBuffer public="1" set="method" line="41"><f a="count">
	<x path="Int"/>
	<c path="h3d.Indexes"/>
</f></allocIndexBuffer>
		<ofIndexes public="1" set="method" line="45">
			<f a="ib:?length" v=":-1">
				<x path="hxd.IndexBuffer"/>
				<x path="Int"/>
				<c path="h3d.Indexes"/>
			</f>
			<meta><m n=":value"><e>{ length : -1 }</e></m></meta>
		</ofIndexes>
		<disposeIndexBuffer public="1" set="method" line="52"><f a="i">
	<c path="h3d.Indexes"/>
	<x path="Void"/>
</f></disposeIndexBuffer>
		<onContextLost public="1" set="method" line="56"><f a=""><x path="Void"/></f></onContextLost>
		<allocFloats public="1" set="method" line="61"><f a="count">
	<x path="Int"/>
	<x path="hxd.FloatBuffer"/>
</f></allocFloats>
		<disposeFloats public="1" set="method" line="65"><f a="f">
	<x path="hxd.FloatBuffer"/>
	<x path="Void"/>
</f></disposeFloats>
		<allocIndexes public="1" set="method" line="68"><f a="count">
	<x path="Int"/>
	<x path="hxd.IndexBuffer"/>
</f></allocIndexes>
		<disposeIndexes public="1" set="method" line="72"><f a="i">
	<x path="hxd.IndexBuffer"/>
	<x path="Void"/>
</f></disposeIndexes>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.impl.Api" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/Api.hx">
		<downcast public="1" params="T:S" get="inline" set="null" line="5" static="1"><f a="value:c">
	<c path="downcast.T"/>
	<x path="Class"><c path="downcast.S"/></x>
	<c path="downcast.S"/>
</f></downcast>
		<isOfType public="1" get="inline" set="null" line="13" static="1"><f a="v:t">
	<d/>
	<d/>
	<x path="Bool"/>
</f></isOfType>
	</class>
	<class path="hxd.impl.ArrayIterator" params="T" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/ArrayIterator.hx">
		<i><x path="Int"/></i>
		<l><x path="Int"/></l>
		<a><c path="Array"><c path="hxd.impl.ArrayIterator.T"/></c></a>
		<hasNext public="1" get="inline" set="null" line="12"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="15"><f a=""><c path="hxd.impl.ArrayIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="7"><f a="a">
	<c path="Array"><c path="hxd.impl.ArrayIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":generic"/></meta>
	</class>
	<typedef path="hxd.impl.Float32" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/Float32.hx"><x path="Float"/></typedef>
	<typedef path="hxd.impl.Serializable" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/Serializable.hx"><c path="hxd.impl._Serializable.NoSerializeSupport"/></typedef>
	<typedef path="hxd.impl.StructSerializable" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/Serializable.hx" module="hxd.impl.Serializable"><c path="hxd.impl._Serializable.NoSerializeSupport"/></typedef>
	<typedef path="hxd.impl.Float32Array" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/TypedArray.hx" module="hxd.impl.TypedArray"><c path="js.lib.Float32Array"/></typedef>
	<typedef path="hxd.impl.Uint16Array" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/TypedArray.hx" module="hxd.impl.TypedArray"><c path="js.lib.Uint16Array"/></typedef>
	<typedef path="hxd.impl.Int16Array" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/TypedArray.hx" module="hxd.impl.TypedArray"><c path="js.lib.Int16Array"/></typedef>
	<typedef path="hxd.impl.Uint8Array" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/TypedArray.hx" module="hxd.impl.TypedArray"><c path="js.lib.Uint8Array"/></typedef>
	<typedef path="hxd.impl.ArrayBuffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/TypedArray.hx" module="hxd.impl.TypedArray"><c path="js.lib.ArrayBuffer"/></typedef>
	<typedef path="hxd.impl.Uint32Array" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/TypedArray.hx" module="hxd.impl.TypedArray"><c path="js.lib.Uint32Array"/></typedef>
	<typedef path="hxd.impl.ArrayBufferView" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/TypedArray.hx" module="hxd.impl.TypedArray"><c path="js.lib.ArrayBufferView"/></typedef>
	<typedef path="hxd.impl.UInt16" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/UInt16.hx"><x path="Int"/></typedef>
	<typedef path="hxd.impl._UncheckedBytes.InnerData" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/UncheckedBytes.hx" private="1" module="hxd.impl.UncheckedBytes"><t path="hxd.impl.Uint8Array"/></typedef>
	<abstract path="hxd.impl.UncheckedBytes" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/UncheckedBytes.hx">
		<from><icast field="fromBytes"><c path="haxe.io.Bytes"/></icast></from>
		<this><t path="hxd.impl._UncheckedBytes.InnerData"/></this>
		<impl><class path="hxd.impl._UncheckedBytes.UncheckedBytes_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/UncheckedBytes.hx" private="1" module="hxd.impl.UncheckedBytes" final="1">
	<_new get="inline" set="null" line="7" static="1">
		<f a="v">
			<t path="hxd.impl._UncheckedBytes.InnerData"/>
			<x path="hxd.impl.UncheckedBytes"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get get="inline" set="null" line="11" static="1">
		<f a="this:i">
			<t path="hxd.impl._UncheckedBytes.InnerData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set get="inline" set="null" line="19" static="1">
		<f a="this:i:v">
			<t path="hxd.impl._UncheckedBytes.InnerData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<fromBytes public="1" get="inline" set="null" line="28" static="1">
		<f a="b">
			<c path="haxe.io.Bytes"/>
			<x path="hxd.impl.UncheckedBytes"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="hxd.impl._UncheckedBytes.UncheckedBytes_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/impl/UncheckedBytes.hx" private="1" module="hxd.impl.UncheckedBytes" final="1">
		<_new get="inline" set="null" line="7" static="1">
			<f a="v">
				<t path="hxd.impl._UncheckedBytes.InnerData"/>
				<x path="hxd.impl.UncheckedBytes"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get get="inline" set="null" line="11" static="1">
			<f a="this:i">
				<t path="hxd.impl._UncheckedBytes.InnerData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set get="inline" set="null" line="19" static="1">
			<f a="this:i:v">
				<t path="hxd.impl._UncheckedBytes.InnerData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<fromBytes public="1" get="inline" set="null" line="28" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<x path="hxd.impl.UncheckedBytes"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromBytes>
	</class>
	<class path="hxd.poly2tri.Edge" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/poly2tri/Edge.hx">
		<p public="1"><c path="hxd.poly2tri.Point"/></p>
		<q public="1"><c path="hxd.poly2tri.Point"/></q>
		<toString public="1" set="method" line="43"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="9"><f a="p1:p2">
	<c path="hxd.poly2tri.Point"/>
	<c path="hxd.poly2tri.Point"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="hxd.poly2tri.Point" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/poly2tri/Point.hx">
		<sortPoints public="1" set="method" line="51" static="1"><f a="points">
	<c path="Array"><c path="hxd.poly2tri.Point"/></c>
	<x path="Void"/>
</f></sortPoints>
		<cmpPoints public="1" set="method" line="56" static="1"><f a="l:r">
	<c path="hxd.poly2tri.Point"/>
	<c path="hxd.poly2tri.Point"/>
	<x path="Int"/>
</f></cmpPoints>
		<C_ID public="1" expr="0" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</C_ID>
		<id public="1"><x path="Int"/></id>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<edge_list public="1" get="accessor" set="null"><c path="Array"><c path="hxd.poly2tri.Edge"/></c></edge_list>
		<get_edge_list set="method" line="34"><f a=""><c path="Array"><c path="hxd.poly2tri.Edge"/></c></f></get_edge_list>
		<equals public="1" get="inline" set="null" line="42"><f a="that">
	<c path="hxd.poly2tri.Point"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="65"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="23"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="hxd.res._Any.SingleFileSystem" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/Any.hx" private="1" module="hxd.res.Any">
		<extends path="hxd.fs.BytesFileSystem"/>
		<path><c path="String"/></path>
		<bytes><c path="haxe.io.Bytes"/></bytes>
		<getBytes set="method" line="14" override="1"><f a="p">
	<c path="String"/>
	<x path="Null"><c path="haxe.io.Bytes"/></x>
</f></getBytes>
		<new public="1" set="method" line="8"><f a="path:bytes">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.res.Resource" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/Resource.hx">
		<LIVE_UPDATE public="1" expr="false" line="5" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</LIVE_UPDATE>
		<name public="1" get="accessor" set="null"><c path="String"/></name>
		<entry public="1" set="null"><c path="hxd.fs.FileEntry"/></entry>
		<get_name get="inline" set="null" line="14"><f a=""><c path="String"/></f></get_name>
		<toString set="method" line="18"><f a=""><c path="String"/></f></toString>
		<watch public="1" set="method" line="22"><f a="onChanged">
	<x path="Null"><f a=""><x path="Void"/></f></x>
	<x path="Void"/>
</f></watch>
		<new public="1" set="method" line="10"><f a="entry">
	<c path="hxd.fs.FileEntry"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.res.Any" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/Any.hx">
		<extends path="hxd.res.Resource"/>
		<fromBytes public="1" set="method" line="66" static="1"><f a="path:bytes">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<c path="hxd.res.Any"/>
</f></fromBytes>
		<loader><c path="hxd.res.Loader"/></loader>
		<toModel public="1" set="method" line="30"><f a=""><c path="hxd.res.Model"/></f></toModel>
		<toTexture public="1" set="method" line="34"><f a=""><c path="h3d.mat.Texture"/></f></toTexture>
		<toTile public="1" set="method" line="38"><f a=""><c path="h2d.Tile"/></f></toTile>
		<toText public="1" set="method" line="42"><f a=""><c path="String"/></f></toText>
		<toImage public="1" set="method" line="46"><f a=""><c path="hxd.res.Image"/></f></toImage>
		<toSound public="1" set="method" line="50"><f a=""><c path="hxd.res.Sound"/></f></toSound>
		<toPrefab public="1" set="method" line="54"><f a=""><c path="hxd.res.Resource"/></f></toPrefab>
		<to public="1" params="T" set="method" line="58"><f a="c">
	<x path="Class"><c path="to.T"/></x>
	<c path="to.T"/>
</f></to>
		<iterator public="1" get="inline" set="null" line="62"><f a=""><c path="hxd.impl.ArrayIterator_hxd_res_Any"/></f></iterator>
		<new public="1" set="method" line="25"><f a="loader:entry">
	<c path="hxd.res.Loader"/>
	<c path="hxd.fs.FileEntry"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>hxd.res.Loader</e></m>
		</meta>
	</class>
	<abstract path="hxd.res.ImageFormat" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/Image.hx" module="hxd.res.Image">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="hxd.res._Image.ImageFormat_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/Image.hx" private="1" module="hxd.res.Image" final="1">
	<Jpg public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
		<x path="hxd.res.ImageFormat"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Jpg>
	<Png public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
		<x path="hxd.res.ImageFormat"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Png>
	<Gif public="1" get="inline" set="null" expr="cast 2" line="7" static="1">
		<x path="hxd.res.ImageFormat"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Gif>
	<Tga public="1" get="inline" set="null" expr="cast 3" line="8" static="1">
		<x path="hxd.res.ImageFormat"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Tga>
	<Dds public="1" get="inline" set="null" expr="cast 4" line="9" static="1">
		<x path="hxd.res.ImageFormat"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Dds>
	<Raw public="1" get="inline" set="null" expr="cast 5" line="10" static="1">
		<x path="hxd.res.ImageFormat"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Raw>
	<Hdr public="1" get="inline" set="null" expr="cast 6" line="11" static="1">
		<x path="hxd.res.ImageFormat"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Hdr>
	<useAsyncDecode public="1" get="accessor" set="null" static="1"><x path="Bool"/></useAsyncDecode>
	<get_useAsyncDecode get="inline" set="null" line="19" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_useAsyncDecode>
	<toInt get="inline" set="null" line="27" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hxd.res._Image.ImageFormat_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/Image.hx" private="1" module="hxd.res.Image" final="1">
		<Jpg public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
			<x path="hxd.res.ImageFormat"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Jpg>
		<Png public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
			<x path="hxd.res.ImageFormat"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Png>
		<Gif public="1" get="inline" set="null" expr="cast 2" line="7" static="1">
			<x path="hxd.res.ImageFormat"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Gif>
		<Tga public="1" get="inline" set="null" expr="cast 3" line="8" static="1">
			<x path="hxd.res.ImageFormat"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Tga>
		<Dds public="1" get="inline" set="null" expr="cast 4" line="9" static="1">
			<x path="hxd.res.ImageFormat"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Dds>
		<Raw public="1" get="inline" set="null" expr="cast 5" line="10" static="1">
			<x path="hxd.res.ImageFormat"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Raw>
		<Hdr public="1" get="inline" set="null" expr="cast 6" line="11" static="1">
			<x path="hxd.res.ImageFormat"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Hdr>
		<useAsyncDecode public="1" get="accessor" set="null" static="1"><x path="Bool"/></useAsyncDecode>
		<get_useAsyncDecode get="inline" set="null" line="19" static="1"><f a="this">
	<x path="Int"/>
	<x path="Bool"/>
</f></get_useAsyncDecode>
		<toInt get="inline" set="null" line="27" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="hxd.res.ImageInfoFlag" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/Image.hx" module="hxd.res.Image">
		<IsCube/>
		<Dxt10Header/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="hxd.res.ImageInfo" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/Image.hx" module="hxd.res.Image">
		<width public="1" set="null" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</width>
		<height public="1" set="null" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</height>
		<mipLevels public="1" set="null" expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</mipLevels>
		<flags public="1" set="null"><x path="haxe.EnumFlags"><e path="hxd.res.ImageInfoFlag"/></x></flags>
		<dataFormat public="1" set="null"><x path="hxd.res.ImageFormat"/></dataFormat>
		<pixelFormat public="1" set="null"><e path="hxd.PixelFormat"/></pixelFormat>
		<new public="1" set="method" line="44"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>hxd.res.Image</e></m>
		</meta>
	</class>
	<class path="hxd.res.Image" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/Image.hx">
		<extends path="hxd.res.Resource"/>
		<DEFAULT_FILTER public="1" expr="Linear" line="54" static="1">
			<e path="h3d.mat.Filter"/>
			<meta><m n=":value"><e>Linear</e></m></meta>
			<haxe_doc>Specify if we will automatically convert non-power-of-two textures to power-of-two.</haxe_doc>
		</DEFAULT_FILTER>
		<DEFAULT_ASYNC public="1" expr="false" line="59" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Forces async decoding for images if available on the target platform.</haxe_doc>
		</DEFAULT_ASYNC>
		<ENABLE_AUTO_WATCH expr="true" line="61" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</ENABLE_AUTO_WATCH>
		<setupTextureFlags public="1" set="dynamic" line="509" static="1"><f a="tex">
	<c path="h3d.mat.Texture"/>
	<x path="Void"/>
</f></setupTextureFlags>
		<tex><c path="h3d.mat.Texture"/></tex>
		<inf><c path="hxd.res.ImageInfo"/></inf>
		<getFormat public="1" get="inline" set="null" line="66"><f a=""><x path="hxd.res.ImageFormat"/></f></getFormat>
		<getPixelFormat public="1" get="inline" set="null" line="70"><f a=""><e path="hxd.PixelFormat"/></f></getPixelFormat>
		<getSize public="1" get="inline" set="null" line="74"><f a=""><c path="hxd.res.ImageInfo"/></f></getSize>
		<getInfo public="1" set="method" line="78"><f a=""><c path="hxd.res.ImageInfo"/></f></getInfo>
		<getPixels public="1" set="method" line="250"><f a="?fmt:?flipY:?index">
	<e path="hxd.PixelFormat"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="hxd.Pixels"/>
</f></getPixels>
		<toBitmap public="1" set="method" line="417"><f a=""><c path="hxd.BitmapData"/></f></toBitmap>
		<watchCallb set="method" line="426"><f a=""><x path="Void"/></f></watchCallb>
		<loadTexture set="method" line="436"><f a=""><x path="Void"/></f></loadTexture>
		<toTexture public="1" set="method" line="478"><f a=""><c path="h3d.mat.Texture"/></f></toTexture>
		<toTile public="1" set="method" line="504"><f a=""><c path="h2d.Tile"/></f></toTile>
		<new public="1" set="method" line="49"><f a="entry">
	<c path="hxd.fs.FileEntry"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.res.Loader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/Loader.hx">
		<currentInstance public="1" static="1">
			<c path="hxd.res.Loader"/>
			<haxe_doc>Set when initializing hxd.Res, or manually.
		Allows code to resolve resources without compiling hxd.Res</haxe_doc>
		</currentInstance>
		<fs public="1" set="null"><c path="hxd.fs.FileSystem"/></fs>
		<cache><t path="Map">
	<c path="String"/>
	<d/>
</t></cache>
		<cleanCache public="1" set="method" line="19"><f a=""><x path="Void"/></f></cleanCache>
		<dir public="1" set="method" line="23"><f a="path">
	<c path="String"/>
	<c path="Array"><c path="hxd.res.Any"/></c>
</f></dir>
		<exists public="1" set="method" line="31"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></exists>
		<load public="1" set="method" line="35"><f a="path">
	<c path="String"/>
	<c path="hxd.res.Any"/>
</f></load>
		<loadCache public="1" params="T" set="method" line="39"><f a="path:c">
	<c path="String"/>
	<x path="Class"><c path="loadCache.T"/></x>
	<c path="loadCache.T"/>
</f></loadCache>
		<dispose public="1" set="method" line="55"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="14"><f a="fs">
	<c path="hxd.fs.FileSystem"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.res.Model" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/Model.hx">
		<extends path="hxd.res.Resource"/>
		<toHmd public="1" set="method" line="5"><f a=""><c path="hxd.fmt.hmd.Library"/></f></toHmd>
		<new public="1" set="method" line="3"><f a="entry">
	<c path="hxd.fs.FileEntry"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="hxd.res.Filter" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/NanoJpeg.hx" module="hxd.res.NanoJpeg">
		<Fast/>
		<Chromatic/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<abstract path="hxd.res._NanoJpeg.FastBytes" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/NanoJpeg.hx" private="1" module="hxd.res.NanoJpeg">
		<this><c path="haxe.io.Bytes"/></this>
		<impl><class path="hxd.res._NanoJpeg.FastBytes_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/NanoJpeg.hx" private="1" module="hxd.res.NanoJpeg" final="1">
	<_new public="1" get="inline" set="null" line="27" static="1">
		<f a="b">
			<c path="haxe.io.Bytes"/>
			<x path="hxd.res._NanoJpeg.FastBytes"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get get="inline" set="null" line="30" static="1">
		<f a="this:i">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set get="inline" set="null" line="33" static="1">
		<f a="this:i:v">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
</class></impl>
	</abstract>
	<class path="hxd.res._NanoJpeg.FastBytes_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/NanoJpeg.hx" private="1" module="hxd.res.NanoJpeg" final="1">
		<_new public="1" get="inline" set="null" line="27" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<x path="hxd.res._NanoJpeg.FastBytes"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get get="inline" set="null" line="30" static="1">
			<f a="this:i">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set get="inline" set="null" line="33" static="1">
			<f a="this:i:v">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
	</class>
	<class path="hxd.res._NanoJpeg.Component" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/NanoJpeg.hx" private="1" module="hxd.res.NanoJpeg">
		<cid public="1"><x path="Int"/></cid>
		<ssx public="1"><x path="Int"/></ssx>
		<ssy public="1"><x path="Int"/></ssy>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<stride public="1"><x path="Int"/></stride>
		<qtsel public="1"><x path="Int"/></qtsel>
		<actabsel public="1"><x path="Int"/></actabsel>
		<dctabsel public="1"><x path="Int"/></dctabsel>
		<dcpred public="1"><x path="Int"/></dcpred>
		<pixels public="1"><c path="haxe.io.Bytes"/></pixels>
		<new public="1" set="method" line="50"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.res.NanoJpeg" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/NanoJpeg.hx">
		<BLOCKSIZE get="inline" set="null" expr="64" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>64</e></m></meta>
		</BLOCKSIZE>
		<W1 get="inline" set="null" expr="2841" line="355" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2841</e></m></meta>
		</W1>
		<W2 get="inline" set="null" expr="2676" line="356" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2676</e></m></meta>
		</W2>
		<W3 get="inline" set="null" expr="2408" line="357" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2408</e></m></meta>
		</W3>
		<W5 get="inline" set="null" expr="1609" line="358" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1609</e></m></meta>
		</W5>
		<W6 get="inline" set="null" expr="1108" line="359" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1108</e></m></meta>
		</W6>
		<W7 get="inline" set="null" expr="565" line="360" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>565</e></m></meta>
		</W7>
		<CF4A get="inline" set="null" expr="-9" line="527" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-9</e></m></meta>
		</CF4A>
		<CF4B get="inline" set="null" expr="111" line="528" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>111</e></m></meta>
		</CF4B>
		<CF4C get="inline" set="null" expr="29" line="529" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>29</e></m></meta>
		</CF4C>
		<CF4D get="inline" set="null" expr="-3" line="530" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-3</e></m></meta>
		</CF4D>
		<CF3A get="inline" set="null" expr="28" line="531" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>28</e></m></meta>
		</CF3A>
		<CF3B get="inline" set="null" expr="109" line="532" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>109</e></m></meta>
		</CF3B>
		<CF3C get="inline" set="null" expr="-9" line="533" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-9</e></m></meta>
		</CF3C>
		<CF3X get="inline" set="null" expr="104" line="534" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>104</e></m></meta>
		</CF3X>
		<CF3Y get="inline" set="null" expr="27" line="535" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>27</e></m></meta>
		</CF3Y>
		<CF3Z get="inline" set="null" expr="-3" line="536" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-3</e></m></meta>
		</CF3Z>
		<CF2A get="inline" set="null" expr="139" line="537" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>139</e></m></meta>
		</CF2A>
		<CF2B get="inline" set="null" expr="-11" line="538" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-11</e></m></meta>
		</CF2B>
		<CF get="inline" set="null" line="539" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></CF>
		<njClip get="inline" set="null" line="541" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></njClip>
		<inst expr="null" line="742" static="1">
			<c path="hxd.res.NanoJpeg"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</inst>
		<decode public="1" set="method" line="743" static="1">
			<f a="bytes:?filter:?position:?size" v="::0:-1">
				<c path="haxe.io.Bytes"/>
				<e path="hxd.res.Filter"/>
				<x path="Int"/>
				<x path="Int"/>
				<a>
					<width><x path="Int"/></width>
					<pixels><c path="haxe.io.Bytes"/></pixels>
					<height><x path="Int"/></height>
				</a>
			</f>
			<meta><m n=":value"><e>{ size : -1, position : 0 }</e></m></meta>
		</decode>
		<bytes><c path="haxe.io.Bytes"/></bytes>
		<pos><x path="Int"/></pos>
		<size><x path="Int"/></size>
		<length><x path="Int"/></length>
		<width><x path="Int"/></width>
		<height><x path="Int"/></height>
		<ncomp><x path="Int"/></ncomp>
		<comps><x path="haxe.ds.Vector"><c path="hxd.res._NanoJpeg.Component"/></x></comps>
		<counts><x path="haxe.ds.Vector"><x path="Int"/></x></counts>
		<qtab><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Int"/></x></x></qtab>
		<qtused><x path="Int"/></qtused>
		<qtavail><x path="Int"/></qtavail>
		<vlctab><x path="haxe.ds.Vector"><c path="haxe.io.Bytes"/></x></vlctab>
		<block><x path="haxe.ds.Vector"><x path="Int"/></x></block>
		<njZZ><x path="haxe.ds.Vector"><x path="Int"/></x></njZZ>
		<progressive><x path="Bool"/></progressive>
		<mbsizex><x path="Int"/></mbsizex>
		<mbsizey><x path="Int"/></mbsizey>
		<mbwidth><x path="Int"/></mbwidth>
		<mbheight><x path="Int"/></mbheight>
		<rstinterval><x path="Int"/></rstinterval>
		<buf><x path="Int"/></buf>
		<bufbits><x path="Int"/></bufbits>
		<pixels><c path="haxe.io.Bytes"/></pixels>
		<filter><e path="hxd.res.Filter"/></filter>
		<alloc get="inline" set="null" line="106"><f a="nbytes">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<free get="inline" set="null" line="110"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></free>
		<njInit set="method" line="113"><f a="bytes:pos:size:filter">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="hxd.res.Filter"/>
	<x path="Void"/>
</f></njInit>
		<cleanup set="method" line="133"><f a=""><x path="Void"/></f></cleanup>
		<njSkip get="inline" set="null" line="147"><f a="count">
	<x path="Int"/>
	<x path="Void"/>
</f></njSkip>
		<syntax get="inline" set="null" line="154"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></syntax>
		<get get="inline" set="null" line="160"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<njDecode16 get="inline" set="null" line="164"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></njDecode16>
		<njByteAlign get="inline" set="null" line="168"><f a=""><x path="Void"/></f></njByteAlign>
		<njShowBits set="method" line="172"><f a="bits">
	<x path="Int"/>
	<x path="Int"/>
</f></njShowBits>
		<njSkipBits get="inline" set="null" line="204"><f a="bits">
	<x path="Int"/>
	<x path="Void"/>
</f></njSkipBits>
		<njGetBits get="inline" set="null" line="210"><f a="bits">
	<x path="Int"/>
	<x path="Int"/>
</f></njGetBits>
		<njDecodeLength get="inline" set="null" line="216"><f a=""><x path="Void"/></f></njDecodeLength>
		<njSkipMarker get="inline" set="null" line="223"><f a=""><x path="Void"/></f></njSkipMarker>
		<njDecodeSOF set="method" line="228"><f a=""><x path="Void"/></f></njDecodeSOF>
		<njDecodeDQT set="method" line="280"><f a=""><x path="Void"/></f></njDecodeDQT>
		<njDecodeDHT set="method" line="294"><f a=""><x path="Void"/></f></njDecodeDHT>
		<njDecodeDRI set="method" line="330"><f a=""><x path="Void"/></f></njDecodeDRI>
		<vlcCode><x path="Int"/></vlcCode>
		<njGetVLC get="inline" set="null" line="340"><f a="vlc">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></njGetVLC>
		<njRowIDCT get="inline" set="null" line="362"><f a="bp">
	<x path="Int"/>
	<x path="Void"/>
</f></njRowIDCT>
		<njColIDCT get="inline" set="null" line="406"><f a="bp:out:po:stride">
	<x path="Int"/>
	<x path="hxd.res._NanoJpeg.FastBytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></njColIDCT>
		<njDecodeBlock set="method" line="455"><f a="c:po">
	<c path="hxd.res._NanoJpeg.Component"/>
	<x path="Int"/>
	<x path="Void"/>
</f></njDecodeBlock>
		<notSupported set="method" line="478"><f a=""><x path="Void"/></f></notSupported>
		<njDecodeScan set="method" line="482"><f a=""><x path="Void"/></f></njDecodeScan>
		<njUpsampleH set="method" line="545"><f a="c">
	<c path="hxd.res._NanoJpeg.Component"/>
	<x path="Void"/>
</f></njUpsampleH>
		<njUpsampleV set="method" line="574"><f a="c">
	<c path="hxd.res._NanoJpeg.Component"/>
	<x path="Void"/>
</f></njUpsampleV>
		<njUpsample set="method" line="602"><f a="c">
	<c path="hxd.res._NanoJpeg.Component"/>
	<x path="Void"/>
</f></njUpsample>
		<njConvert set="method" line="632"><f a=""><c path="haxe.io.Bytes"/></f></njConvert>
		<njDecode set="method" line="702"><f a=""><a>
	<width><x path="Int"/></width>
	<pixels><c path="haxe.io.Bytes"/></pixels>
	<height><x path="Int"/></height>
</a></f></njDecode>
		<new set="method" line="88"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noDebug"/>
		</meta>
	</class>
	<typedef path="hxd.res.NotFound" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/NotFound.hx"><c path="hxd.fs.NotFound"/></typedef>
	<typedef path="hxd.res.Prefab" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/Prefab.hx"><c path="hxd.res.Resource"/></typedef>
	<enum path="hxd.res.SoundFormat" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/Sound.hx" module="hxd.res.Sound">
		<Wav/>
		<Mp3/>
		<OggVorbis/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="hxd.res.Sound" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/res/Sound.hx">
		<extends path="hxd.res.Resource"/>
		<ENABLE_AUTO_WATCH expr="true" line="11" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</ENABLE_AUTO_WATCH>
		<supportedFormat public="1" set="method" line="17" static="1"><f a="fmt">
	<e path="hxd.res.SoundFormat"/>
	<x path="Bool"/>
</f></supportedFormat>
		<startWorker public="1" set="method" line="80" static="1"><f a=""><x path="Bool"/></f></startWorker>
		<data><c path="hxd.snd.Data"/></data>
		<channel><c path="hxd.snd.Channel"/></channel>
		<lastPlay public="1" set="null" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</lastPlay>
		<getData public="1" set="method" line="30"><f a=""><c path="hxd.snd.Data"/></f></getData>
		<dispose public="1" set="method" line="60"><f a=""><x path="Void"/></f></dispose>
		<stop public="1" set="method" line="65"><f a=""><x path="Void"/></f></stop>
		<play public="1" set="method" line="72">
			<f a="?loop:?volume:?channelGroup:?soundGroup" v="false:1.::">
				<x path="Bool"/>
				<x path="Float"/>
				<c path="hxd.snd.ChannelGroup"/>
				<c path="hxd.snd.SoundGroup"/>
				<c path="hxd.snd.Channel"/>
			</f>
			<meta><m n=":value"><e>{ volume : 1., loop : false }</e></m></meta>
		</play>
		<watchCallb set="method" line="85">
			<f a=""><x path="Void"/></f>
			<meta><m n=":access"><e>hxd.snd.ChannelBase</e></m></meta>
		</watchCallb>
		<new public="1" set="method" line="9"><f a="entry">
	<c path="hxd.fs.FileEntry"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.snd.ChannelBase" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/ChannelBase.hx">
		<priority public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</priority>
		<mute public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</mute>
		<effects public="1" expr="[]">
			<c path="Array"><c path="hxd.snd.Effect"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</effects>
		<bindedEffects public="1" expr="[]">
			<c path="Array"><c path="hxd.snd.Effect"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</bindedEffects>
		<volume public="1" set="accessor" expr="1.">
			<x path="Float"/>
			<meta><m n=":value"><e>1.</e></m></meta>
		</volume>
		<currentFade><a>
	<targetVolume><x path="Float"/></targetVolume>
	<startVolume><x path="Float"/></startVolume>
	<start><x path="Float"/></start>
	<onEnd><f a=""><x path="Void"/></f></onEnd>
	<duration><x path="Float"/></duration>
</a></currentFade>
		<currentVolume><x path="Float"/></currentVolume>
		<getEffect public="1" params="T" set="method" line="18"><f a="etype">
	<x path="Class"><c path="getEffect.T"/></x>
	<c path="getEffect.T"/>
</f></getEffect>
		<set_volume set="method" line="27"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<fadeTo public="1" set="method" line="32">
			<f a="volume:?time:?onEnd" v=":1.:">
				<x path="Float"/>
				<x path="Float"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ time : 1. }</e></m></meta>
		</fadeTo>
		<updateCurrentVolume set="method" line="36"><f a="now">
	<x path="Float"/>
	<x path="Void"/>
</f></updateCurrentVolume>
		<addEffect public="1" params="T" set="method" line="52">
			<f a="e">
				<c path="addEffect.T"/>
				<c path="addEffect.T"/>
			</f>
			<meta><m n=":access"><e>hxd.snd.Manager</e></m></meta>
		</addEffect>
		<removeEffect public="1" set="method" line="60">
			<f a="e">
				<c path="hxd.snd.Effect"/>
				<x path="Void"/>
			</f>
			<meta><m n=":access"><e>hxd.snd.Manager</e></m></meta>
		</removeEffect>
		<new set="method" line="15"><f a=""><x path="Void"/></f></new>
		<meta><m n=":allow"><e>hxd.snd.Manager</e></m></meta>
	</class>
	<class path="hxd.snd.Channel" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/Channel.hx">
		<extends path="hxd.snd.ChannelBase"/>
		<ID expr="0" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ID>
		<next public="1">
			<c path="hxd.snd.Channel"/>
			<meta><m n=":noCompletion"/></meta>
		</next>
		<manager><c path="hxd.snd.Manager"/></manager>
		<source><c path="hxd.snd.Source"/></source>
		<id><x path="Int"/></id>
		<sound public="1" set="null"><c path="hxd.res.Sound"/></sound>
		<duration public="1" set="null"><x path="Float"/></duration>
		<soundGroup public="1" set="null"><c path="hxd.snd.SoundGroup"/></soundGroup>
		<channelGroup public="1" set="null"><c path="hxd.snd.ChannelGroup"/></channelGroup>
		<position public="1" set="accessor" expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</position>
		<pause public="1" set="accessor" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</pause>
		<loop public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</loop>
		<allowVirtual public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</allowVirtual>
		<audibleVolume expr="1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>1.0</e></m></meta>
		</audibleVolume>
		<lastStamp expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</lastStamp>
		<isVirtual expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</isVirtual>
		<isLoading expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</isLoading>
		<positionChanged expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</positionChanged>
		<queue expr="[]">
			<c path="Array"><c path="hxd.res.Sound"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</queue>
		<onEnd public="1" set="dynamic" line="39">
			<f a=""><x path="Void"/></f>
			<haxe_doc>onEnd() is called when a sound which does not loop has finished playing
		or when we switch buffer in a queue
		or when a sound which is streamed loops.</haxe_doc>
		</onEnd>
		<set_position set="method" line="42"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_position>
		<set_pause set="method" line="50"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_pause>
		<updateCurrentVolume set="method" line="55" override="1"><f a="now">
	<x path="Float"/>
	<x path="Void"/>
</f></updateCurrentVolume>
		<calcAudibleVolume public="1" set="method" line="72"><f a="now">
	<x path="Float"/>
	<x path="Void"/>
</f></calcAudibleVolume>
		<queueSound public="1" set="method" line="86">
			<f a="sound">
				<c path="hxd.res.Sound"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add a sound to the queue. When the current sound is finished playing, the next one will seamlessly continue.
		This will also trigger an onEnd() event.</haxe_doc>
		</queueSound>
		<stop public="1" set="method" line="90"><f a=""><x path="Void"/></f></stop>
		<isReleased public="1" set="method" line="94"><f a=""><x path="Bool"/></f></isReleased>
		<new set="method" line="29"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>hxd.snd.Manager</e></m>
		</meta>
	</class>
	<class path="hxd.snd.ChannelGroup" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/ChannelGroup.hx">
		<extends path="hxd.snd.ChannelBase"/>
		<name public="1" set="null"><c path="String"/></name>
		<new public="1" set="method" line="7"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="hxd.snd.SampleFormat" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/Data.hx" module="hxd.snd.Data">
		<UI8/>
		<I16/>
		<F32/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="hxd.snd.Data" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/Data.hx">
		<formatBytes public="1" get="inline" set="null" line="165" static="1"><f a="format">
	<e path="hxd.snd.SampleFormat"/>
	<x path="Int"/>
</f></formatBytes>
		<samples public="1" set="null"><x path="Int"/></samples>
		<samplingRate public="1" set="null"><x path="Int"/></samplingRate>
		<sampleFormat public="1" set="null"><e path="hxd.snd.SampleFormat"/></sampleFormat>
		<channels public="1" set="null"><x path="Int"/></channels>
		<duration public="1" get="accessor" set="null"><x path="Float"/></duration>
		<isLoading public="1" set="method" line="18"><f a=""><x path="Bool"/></f></isLoading>
		<decode public="1" set="method" line="22"><f a="out:outPos:sampleStart:sampleCount">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></decode>
		<resample public="1" set="method" line="45"><f a="rate:format:channels">
	<x path="Int"/>
	<e path="hxd.snd.SampleFormat"/>
	<x path="Int"/>
	<c path="hxd.snd.Data"/>
</f></resample>
		<resampleBuffer public="1" set="method" line="67">
			<f a="out:outPos:input:inPos:rate:format:channels:samples">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<e path="hxd.snd.SampleFormat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noDebug"/></meta>
		</resampleBuffer>
		<decodeBuffer set="method" line="157"><f a="out:outPos:sampleStart:sampleCount">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></decodeBuffer>
		<getBytesPerSample public="1" set="method" line="161"><f a=""><x path="Int"/></f></getBytesPerSample>
		<load public="1" set="method" line="178">
			<f a="onEnd">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Some platforms might require some data to be loaded before we can start decoding.
		Use load() and wait for onEnd to make sure that the sound data and the correct number of samples is available.
		onEnd() might be called back immediately if the data is already available.</haxe_doc>
		</load>
		<get_duration set="method" line="182"><f a=""><x path="Float"/></f></get_duration>
	</class>
	<typedef path="hxd.snd.SourceHandle" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/Driver.hx" module="hxd.snd.Driver"><c path="hxd.snd.webaudio.SourceHandle"/></typedef>
	<typedef path="hxd.snd.BufferHandle" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/Driver.hx" module="hxd.snd.Driver"><c path="hxd.snd.webaudio.BufferHandle"/></typedef>
	<class path="hxd.snd.EffectDriver" params="T" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/Driver.hx" module="hxd.snd.Driver">
		<acquire public="1" set="method" line="17"><f a=""><x path="Void"/></f></acquire>
		<release public="1" set="method" line="18"><f a=""><x path="Void"/></f></release>
		<update public="1" set="method" line="19"><f a="e">
	<c path="hxd.snd.EffectDriver.T"/>
	<x path="Void"/>
</f></update>
		<bind public="1" set="method" line="20"><f a="e:source">
	<c path="hxd.snd.EffectDriver.T"/>
	<t path="hxd.snd.SourceHandle"/>
	<x path="Void"/>
</f></bind>
		<apply public="1" set="method" line="21"><f a="e:source">
	<c path="hxd.snd.EffectDriver.T"/>
	<t path="hxd.snd.SourceHandle"/>
	<x path="Void"/>
</f></apply>
		<unbind public="1" set="method" line="22"><f a="e:source">
	<c path="hxd.snd.EffectDriver.T"/>
	<t path="hxd.snd.SourceHandle"/>
	<x path="Void"/>
</f></unbind>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="hxd.snd.DriverFeature" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/Driver.hx" module="hxd.snd.Driver">
		<MasterVolume/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="hxd.snd.Driver" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/Driver.hx" interface="1">
		<hasFeature public="1" set="method"><f a="d">
	<e path="hxd.snd.DriverFeature"/>
	<x path="Bool"/>
</f></hasFeature>
		<setMasterVolume public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></setMasterVolume>
		<setListenerParams public="1" set="method"><f a="position:direction:up:?velocity">
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
	<x path="Void"/>
</f></setListenerParams>
		<createSource public="1" set="method"><f a=""><t path="hxd.snd.SourceHandle"/></f></createSource>
		<playSource public="1" set="method"><f a="source">
	<t path="hxd.snd.SourceHandle"/>
	<x path="Void"/>
</f></playSource>
		<stopSource public="1" set="method"><f a="source">
	<t path="hxd.snd.SourceHandle"/>
	<x path="Void"/>
</f></stopSource>
		<setSourceVolume public="1" set="method"><f a="source:value">
	<t path="hxd.snd.SourceHandle"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setSourceVolume>
		<destroySource public="1" set="method"><f a="source">
	<t path="hxd.snd.SourceHandle"/>
	<x path="Void"/>
</f></destroySource>
		<createBuffer public="1" set="method"><f a=""><t path="hxd.snd.BufferHandle"/></f></createBuffer>
		<setBufferData public="1" set="method"><f a="buffer:data:size:format:channelCount:samplingRate">
	<t path="hxd.snd.BufferHandle"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<e path="hxd.snd.SampleFormat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setBufferData>
		<destroyBuffer public="1" set="method"><f a="buffer">
	<t path="hxd.snd.BufferHandle"/>
	<x path="Void"/>
</f></destroyBuffer>
		<queueBuffer public="1" set="method"><f a="source:buffer:sampleStart:endOfStream">
	<t path="hxd.snd.SourceHandle"/>
	<t path="hxd.snd.BufferHandle"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></queueBuffer>
		<unqueueBuffer public="1" set="method"><f a="source:buffer">
	<t path="hxd.snd.SourceHandle"/>
	<t path="hxd.snd.BufferHandle"/>
	<x path="Void"/>
</f></unqueueBuffer>
		<getProcessedBuffers public="1" set="method"><f a="source">
	<t path="hxd.snd.SourceHandle"/>
	<x path="Int"/>
</f></getProcessedBuffers>
		<getPlayedSampleCount public="1" set="method"><f a="source">
	<t path="hxd.snd.SourceHandle"/>
	<x path="Int"/>
</f></getPlayedSampleCount>
		<update public="1" set="method"><f a=""><x path="Void"/></f></update>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<getEffectDriver public="1" set="method"><f a="type">
	<c path="String"/>
	<c path="hxd.snd.EffectDriver"><d/></c>
</f></getEffectDriver>
	</class>
	<class path="hxd.snd.Effect" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/Effect.hx">
		<next public="1">
			<c path="hxd.snd.Effect"/>
			<meta><m n=":noCompletion"/></meta>
		</next>
		<refs><x path="Int"/></refs>
		<retainTime><x path="Float"/></retainTime>
		<lastStamp><x path="Float"/></lastStamp>
		<driver><c path="hxd.snd.EffectDriver"><d/></c></driver>
		<priority><x path="Int"/></priority>
		<applyAudibleVolumeModifier public="1" set="method" line="28"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></applyAudibleVolumeModifier>
		<getVolumeModifier public="1" set="method" line="33"><f a=""><x path="Float"/></f></getVolumeModifier>
		<new public="1" set="method" line="14"><f a="type">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>hxd.snd.Manager</e></m></meta>
	</class>
	<class path="hxd.snd.Listener" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/Listener.hx">
		<position public="1"><c path="h3d.Vector"/></position>
		<direction public="1"><c path="h3d.Vector"/></direction>
		<velocity public="1"><c path="h3d.Vector"/></velocity>
		<up public="1"><c path="h3d.Vector"/></up>
		<syncCamera public="1" set="method" line="17"><f a="cam">
	<c path="h3d.Camera"/>
	<x path="Void"/>
</f></syncCamera>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.snd.Source" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/Manager.hx" module="hxd.snd.Manager">
		<ID expr="0" line="8" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ID>
		<id public="1" set="null"><x path="Int"/></id>
		<handle public="1"><t path="hxd.snd.SourceHandle"/></handle>
		<channel public="1"><c path="hxd.snd.Channel"/></channel>
		<buffers public="1"><c path="Array"><c path="hxd.snd.Buffer"/></c></buffers>
		<volume public="1" expr="-1.0">
			<x path="Float"/>
			<meta><m n=":value"><e>-1.0</e></m></meta>
		</volume>
		<playing public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</playing>
		<start public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</start>
		<streamSound public="1"><c path="hxd.res.Sound"/></streamSound>
		<streamBuffer public="1"><c path="haxe.io.Bytes"/></streamBuffer>
		<streamStart public="1"><x path="Int"/></streamStart>
		<streamPos public="1"><x path="Int"/></streamPos>
		<dispose public="1" set="method" line="30"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="24"><f a="driver">
	<c path="hxd.snd.Driver"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>hxd.snd.Manager</e></m>
		</meta>
	</class>
	<class path="hxd.snd.Buffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/Manager.hx" module="hxd.snd.Manager">
		<handle public="1"><t path="hxd.snd.BufferHandle"/></handle>
		<sound public="1"><c path="hxd.res.Sound"/></sound>
		<isEnd public="1"><x path="Bool"/></isEnd>
		<isStream public="1"><x path="Bool"/></isStream>
		<refs public="1"><x path="Int"/></refs>
		<lastStop public="1"><x path="Float"/></lastStop>
		<start public="1"><x path="Int"/></start>
		<end public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</end>
		<samples public="1"><x path="Int"/></samples>
		<sampleRate public="1"><x path="Int"/></sampleRate>
		<dispose public="1" set="method" line="55"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method" line="49"><f a="driver">
	<c path="hxd.snd.Driver"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>hxd.snd.Manager</e></m>
		</meta>
	</class>
	<class path="hxd.snd.Manager" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/Manager.hx">
		<STREAM_DURATION public="1" expr="5." line="62" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>5.</e></m></meta>
		</STREAM_DURATION>
		<STREAM_BUFFER_SAMPLE_COUNT public="1" expr="44100" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>44100</e></m></meta>
		</STREAM_BUFFER_SAMPLE_COUNT>
		<BUFFER_QUEUE_LENGTH public="1" expr="2" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BUFFER_QUEUE_LENGTH>
		<MAX_SOURCES public="1" expr="16" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</MAX_SOURCES>
		<SOUND_BUFFER_CACHE_SIZE public="1" expr="256" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</SOUND_BUFFER_CACHE_SIZE>
		<VIRTUAL_VOLUME_THRESHOLD public="1" expr="1e-5" line="67" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1e-5</e></m></meta>
		</VIRTUAL_VOLUME_THRESHOLD>
		<BUFFER_STREAM_SPLIT public="1" expr="16" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
			<haxe_doc>Allows to decode big streaming buffers over X split frames. 0 to disable</haxe_doc>
		</BUFFER_STREAM_SPLIT>
		<instance static="1"><c path="hxd.snd.Manager"/></instance>
		<get public="1" set="method" line="147" static="1"><f a=""><c path="hxd.snd.Manager"/></f></get>
		<regEffect set="method" line="627" static="1"><f a="list:e">
	<c path="hxd.snd.Effect"/>
	<c path="hxd.snd.Effect"/>
	<c path="hxd.snd.Effect"/>
</f></regEffect>
		<masterVolume public="1"><x path="Float"/></masterVolume>
		<masterSoundGroup public="1" set="null"><c path="hxd.snd.SoundGroup"/></masterSoundGroup>
		<masterChannelGroup public="1" set="null"><c path="hxd.snd.ChannelGroup"/></masterChannelGroup>
		<listener public="1"><c path="hxd.snd.Listener"/></listener>
		<timeOffset public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</timeOffset>
		<updateEvent><c path="haxe.MainEvent"/></updateEvent>
		<cachedBytes><c path="haxe.io.Bytes"/></cachedBytes>
		<resampleBytes><c path="haxe.io.Bytes"/></resampleBytes>
		<driver><c path="hxd.snd.Driver"/></driver>
		<channels><c path="hxd.snd.Channel"/></channels>
		<sources><c path="Array"><c path="hxd.snd.Source"/></c></sources>
		<now><x path="Float"/></now>
		<soundBufferCount><x path="Int"/></soundBufferCount>
		<soundBufferMap><t path="Map">
	<c path="String"/>
	<c path="hxd.snd.Buffer"/>
</t></soundBufferMap>
		<soundBufferKeys><c path="Array"><c path="String"/></c></soundBufferKeys>
		<freeStreamBuffers><c path="Array"><c path="hxd.snd.Buffer"/></c></freeStreamBuffers>
		<effectGC><c path="Array"><c path="hxd.snd.Effect"/></c></effectGC>
		<hasMasterVolume><x path="Bool"/></hasMasterVolume>
		<suspended public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</suspended>
		<getTmpBytes set="method" line="135"><f a="size">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></getTmpBytes>
		<getResampleBytes set="method" line="141"><f a="size">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></getResampleBytes>
		<stopAll public="1" set="method" line="156"><f a=""><x path="Void"/></f></stopAll>
		<stopAllNotLooping public="1" set="method" line="161"><f a=""><x path="Void"/></f></stopAllNotLooping>
		<stopByName public="1" set="method" line="170"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></stopByName>
		<getAll public="1" set="method" line="182">
			<f a="sound">
				<c path="hxd.res.Sound"/>
				<t path="Iterator"><c path="hxd.snd.Channel"/></t>
			</f>
			<haxe_doc>Returns iterator with all active instances of a Sound at the call time.</haxe_doc>
		</getAll>
		<cleanCache public="1" set="method" line="193"><f a=""><x path="Void"/></f></cleanCache>
		<dispose public="1" set="method" line="208"><f a=""><x path="Void"/></f></dispose>
		<play public="1" set="method" line="229"><f a="sound:?channelGroup:?soundGroup">
	<c path="hxd.res.Sound"/>
	<c path="hxd.snd.ChannelGroup"/>
	<c path="hxd.snd.SoundGroup"/>
	<c path="hxd.snd.Channel"/>
</f></play>
		<updateVirtualChannels set="method" line="250"><f a="now">
	<x path="Float"/>
	<x path="Void"/>
</f></updateVirtualChannels>
		<update public="1" set="method" line="283"><f a=""><x path="Void"/></f></update>
		<progressiveDecodeBuffer set="method" line="571"><f a="s:snd:start">
	<c path="hxd.snd.Source"/>
	<c path="hxd.res.Sound"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></progressiveDecodeBuffer>
		<queueBuffer set="method" line="595"><f a="s:snd:start">
	<c path="hxd.snd.Source"/>
	<c path="hxd.res.Sound"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></queueBuffer>
		<unqueueBuffer set="method" line="618"><f a="s">
	<c path="hxd.snd.Source"/>
	<x path="Null"><c path="hxd.snd.Buffer"/></x>
</f></unqueueBuffer>
		<bindEffect set="method" line="637"><f a="c:s:e">
	<c path="hxd.snd.Channel"/>
	<c path="hxd.snd.Source"/>
	<c path="hxd.snd.Effect"/>
	<x path="Void"/>
</f></bindEffect>
		<unbindEffect set="method" line="644"><f a="c:s:e">
	<c path="hxd.snd.Channel"/>
	<c path="hxd.snd.Source"/>
	<c path="hxd.snd.Effect"/>
	<x path="Void"/>
</f></unbindEffect>
		<releaseSource set="method" line="653"><f a="s">
	<c path="hxd.snd.Source"/>
	<x path="Void"/>
</f></releaseSource>
		<targetRate><x path="Int"/></targetRate>
		<targetFormat><e path="hxd.snd.SampleFormat"/></targetFormat>
		<targetChannels><x path="Int"/></targetChannels>
		<checkTargetFormat set="method" line="674">
			<f a="dat:?forceMono" v=":false">
				<c path="hxd.snd.Data"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ forceMono : false }</e></m></meta>
		</checkTargetFormat>
		<getSoundBuffer set="method" line="694"><f a="snd:grp">
	<c path="hxd.res.Sound"/>
	<c path="hxd.snd.SoundGroup"/>
	<c path="hxd.snd.Buffer"/>
</f></getSoundBuffer>
		<fillSoundBuffer set="method" line="716">
			<f a="buf:dat:?forceMono" v="::false">
				<c path="hxd.snd.Buffer"/>
				<c path="hxd.snd.Data"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ forceMono : false }</e></m></meta>
		</fillSoundBuffer>
		<getStreamBuffer set="method" line="728"><f a="src:snd:grp:start">
	<c path="hxd.snd.Source"/>
	<c path="hxd.res.Sound"/>
	<c path="hxd.snd.SoundGroup"/>
	<x path="Int"/>
	<c path="hxd.snd.Buffer"/>
</f></getStreamBuffer>
		<sortChannel set="method" line="772"><f a="a:b">
	<c path="hxd.snd.Channel"/>
	<c path="hxd.snd.Channel"/>
	<x path="Int"/>
</f></sortChannel>
		<sortEffect set="method" line="788"><f a="a:b">
	<c path="hxd.snd.Effect"/>
	<c path="hxd.snd.Effect"/>
	<x path="Int"/>
</f></sortEffect>
		<releaseChannel set="method" line="792"><f a="c">
	<c path="hxd.snd.Channel"/>
	<x path="Void"/>
</f></releaseChannel>
		<new set="method" line="101"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.snd.Mp3Data" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/Mp3Data.hx">
		<extends path="hxd.snd.Data"/>
		<buffer><c path="haxe.io.Bytes"/></buffer>
		<onEnd><f a=""><x path="Void"/></f></onEnd>
		<isLoading public="1" set="method" line="110" override="1"><f a=""><x path="Bool"/></f></isLoading>
		<load public="1" set="method" line="114" override="1"><f a="onEnd">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></load>
		<processBuffer set="method" line="118"><f a="buf">
	<c path="js.html.audio.AudioBuffer"/>
	<x path="Void"/>
</f></processBuffer>
		<decodeBuffer set="method" line="143" override="1"><f a="out:outPos:sampleStart:sampleCount">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></decodeBuffer>
		<new public="1" set="method" line="28"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.snd.SoundGroup" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/SoundGroup.hx">
		<name public="1" set="null"><c path="String"/></name>
		<volume public="1"><x path="Float"/></volume>
		<maxAudible public="1"><x path="Int"/></maxAudible>
		<mono public="1"><x path="Bool"/></mono>
		<numAudible><x path="Int"/></numAudible>
		<lastUpdate><x path="Float"/></lastUpdate>
		<new public="1" set="method" line="13"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>hxd.snd.Manager</e></m>
		</meta>
	</class>
	<class path="hxd.snd.WavData" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/WavData.hx">
		<extends path="hxd.snd.Data"/>
		<rawData><c path="haxe.io.Bytes"/></rawData>
		<init set="method" line="13"><f a="d">
	<t path="format.wav.WAVE"/>
	<x path="Void"/>
</f></init>
		<decodeBuffer set="method" line="27" override="1"><f a="out:outPos:sampleStart:sampleCount">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></decodeBuffer>
		<new public="1" set="method" line="8"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.snd.effect.LowPass" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/effect/LowPass.hx">
		<extends path="hxd.snd.Effect"/>
		<gainHF public="1"><x path="Float"/></gainHF>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="hxd.snd.effect.Pitch" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/effect/Pitch.hx">
		<extends path="hxd.snd.Effect"/>
		<value public="1"><x path="Float"/></value>
		<new public="1" set="method" line="6">
			<f a="?value" v="1.0">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ value : 1.0 }</e></m></meta>
		</new>
	</class>
	<class path="hxd.snd.effect.Spatialization" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/effect/Spatialization.hx">
		<extends path="hxd.snd.Effect"/>
		<position public="1"><c path="h3d.Vector"/></position>
		<velocity public="1"><c path="h3d.Vector"/></velocity>
		<direction public="1"><c path="h3d.Vector"/></direction>
		<referenceDistance public="1"><x path="Float"/></referenceDistance>
		<maxDistance public="1"><x path="Null"><x path="Float"/></x></maxDistance>
		<fadeDistance public="1"><x path="Null"><x path="Float"/></x></fadeDistance>
		<rollOffFactor public="1"><x path="Float"/></rollOffFactor>
		<getVolumeModifier public="1" set="method" line="23" override="1"><f a=""><x path="Float"/></f></getVolumeModifier>
		<applyAudibleVolumeModifier public="1" set="method" line="34" override="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></applyAudibleVolumeModifier>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="hxd.snd.webaudio.BufferHandle" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/webaudio/AudioTypes.hx" module="hxd.snd.webaudio.AudioTypes">
		<inst public="1"><c path="js.html.audio.AudioBuffer"/></inst>
		<isEnd public="1"><x path="Bool"/></isEnd>
		<samples public="1"><x path="Int"/></samples>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.snd.webaudio.SourceHandle" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/webaudio/AudioTypes.hx" module="hxd.snd.webaudio.AudioTypes">
		<sampleOffset public="1"><x path="Int"/></sampleOffset>
		<playing public="1"><x path="Bool"/></playing>
		<driver public="1"><c path="hxd.snd.webaudio.Driver"/></driver>
		<lowPass public="1"><c path="js.html.audio.BiquadFilterNode"/></lowPass>
		<panner public="1"><c path="js.html.audio.PannerNode"/></panner>
		<gain public="1"><c path="js.html.audio.GainNode"/></gain>
		<destination public="1"><c path="js.html.audio.AudioNode"/></destination>
		<buffers public="1"><c path="Array"><c path="hxd.snd.webaudio.BufferPlayback"/></c></buffers>
		<pitch public="1"><x path="Float"/></pitch>
		<firstPlay public="1"><x path="Bool"/></firstPlay>
		<updateDestination public="1" set="method" line="33"><f a=""><x path="Void"/></f></updateDestination>
		<applyPitch public="1" set="method" line="51"><f a=""><x path="Void"/></f></applyPitch>
		<new public="1" set="method" line="26"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>hxd.snd.webaudio.Driver</e></m>
		</meta>
	</class>
	<class path="hxd.snd.webaudio.BufferPlayback" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/webaudio/AudioTypes.hx" module="hxd.snd.webaudio.AudioTypes">
		<FADE_SAMPLES get="inline" set="null" expr="10" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</FADE_SAMPLES>
		<buffer public="1"><c path="hxd.snd.webaudio.BufferHandle"/></buffer>
		<node public="1"><c path="js.html.audio.AudioBufferSourceNode"/></node>
		<offset public="1"><x path="Float"/></offset>
		<dirty public="1"><x path="Bool"/></dirty>
		<consumed public="1"><x path="Bool"/></consumed>
		<starts public="1"><x path="Float"/></starts>
		<ends public="1"><x path="Float"/></ends>
		<currentSample public="1" get="accessor" set="null"><x path="Int"/></currentSample>
		<lastSamples><x path="Int"/></lastSamples>
		<lastTime><x path="Float"/></lastTime>
		<get_currentSample set="method" line="83"><f a=""><x path="Int"/></f></get_currentSample>
		<set public="1" set="method" line="91"><f a="buf:grainOffset">
	<c path="hxd.snd.webaudio.BufferHandle"/>
	<x path="Float"/>
	<x path="Void"/>
</f></set>
		<start public="1" set="method" line="100"><f a="ctx:source:time">
	<c path="js.html.audio.AudioContext"/>
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Float"/>
	<x path="Float"/>
</f></start>
		<readjust public="1" set="method" line="133"><f a="time:source">
	<x path="Float"/>
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Float"/>
</f></readjust>
		<restart public="1" set="method" line="149"><f a="source">
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Void"/>
</f></restart>
		<stop public="1" set="method" line="160">
			<f a="?immediate" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ immediate : true }</e></m></meta>
		</stop>
		<onBufferConsumed set="method" line="169"><f a="e">
	<c path="js.html.Event"/>
	<x path="Void"/>
</f></onBufferConsumed>
		<clear public="1" set="method" line="177"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method" line="79"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.snd.webaudio.Context" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/webaudio/Context.hx">
		<ctx static="1"><c path="js.html.audio.AudioContext"/></ctx>
		<suspended static="1"><x path="Bool"/></suspended>
		<bufferPool static="1"><c path="Array"><c path="hxd.snd.webaudio._Context.BufferPool"/></c></bufferPool>
		<gainPool static="1"><c path="Array"><c path="js.html.audio.GainNode"/></c></gainPool>
		<destination public="1" static="1"><c path="js.html.audio.AudioNode"/></destination>
		<masterGain public="1" static="1"><c path="js.html.audio.GainNode"/></masterGain>
		<get public="1" set="method" line="21" static="1"><f a=""><c path="js.html.audio.AudioContext"/></f></get>
		<getGain public="1" get="inline" set="null" line="55" static="1"><f a=""><c path="js.html.audio.GainNode"/></f></getGain>
		<putGain public="1" get="inline" set="null" line="59" static="1"><f a="gain">
	<c path="js.html.audio.GainNode"/>
	<x path="Void"/>
</f></putGain>
		<waitForPageInput set="method" line="64" static="1"><f a=""><x path="Void"/></f></waitForPageInput>
		<resumeContext set="method" line="76" static="1"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></resumeContext>
		<getBuffer public="1" set="method" line="93" static="1">
			<f a="channels:sampleCount:rate">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.audio.AudioBuffer"/>
			</f>
			<haxe_doc>Returns free AudioBuffer instance corresponding to sample count, amount of channels and sample-rate.</haxe_doc>
		</getBuffer>
		<putBuffer public="1" set="method" line="108" static="1">
			<f a="buf">
				<c path="js.html.audio.AudioBuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Puts AudioBuufer back to it's pool.</haxe_doc>
		</putBuffer>
		<haxe_doc>Common part between webaudio and OpenAL emulator - AudioContext and masterGain.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.snd.webaudio._Context.BufferPool" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/webaudio/Context.hx" private="1" module="hxd.snd.webaudio.Context">
		<pool public="1"><c path="Array"><c path="js.html.audio.AudioBuffer"/></c></pool>
		<channels public="1"><x path="Int"/></channels>
		<samples public="1"><x path="Int"/></samples>
		<rate public="1"><x path="Int"/></rate>
		<new public="1" set="method" line="129"><f a="channels:samples:rate">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.snd.webaudio.Driver" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/webaudio/Driver.hx">
		<implements path="hxd.snd.Driver"/>
		<ctx public="1"><c path="js.html.audio.AudioContext"/></ctx>
		<masterGain public="1" get="accessor" set="null"><c path="js.html.audio.GainNode"/></masterGain>
		<destination public="1" get="accessor" set="accessor"><c path="js.html.audio.AudioNode"/></destination>
		<playbackPool><c path="Array"><c path="hxd.snd.webaudio.BufferPlayback"/></c></playbackPool>
		<getBuffer public="1" get="inline" set="null" line="26">
			<f a="channels:sampleCount:rate">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.audio.AudioBuffer"/>
			</f>
			<haxe_doc>Returns free AudioBuffer instance corresponding to sample count, amount of channels and sample-rate.</haxe_doc>
		</getBuffer>
		<putBuffer public="1" get="inline" set="null" line="33">
			<f a="buf">
				<c path="js.html.audio.AudioBuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Puts AudioBuufer back to it's pool.</haxe_doc>
		</putBuffer>
		<getGain public="1" get="inline" set="null" line="41">
			<f a=""><c path="js.html.audio.GainNode"/></f>
			<haxe_doc>Returns free Gain node</haxe_doc>
		</getGain>
		<putGain public="1" get="inline" set="null" line="45"><f a="gain">
	<c path="js.html.audio.GainNode"/>
	<x path="Void"/>
</f></putGain>
		<hasFeature public="1" set="method" line="49"><f a="d">
	<e path="hxd.snd.DriverFeature"/>
	<x path="Bool"/>
</f></hasFeature>
		<setMasterVolume public="1" set="method" line="55"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></setMasterVolume>
		<setListenerParams public="1" set="method" line="59"><f a="position:direction:up:?velocity">
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
	<c path="h3d.Vector"/>
	<x path="Void"/>
</f></setListenerParams>
		<createSource public="1" set="method" line="65"><f a=""><c path="hxd.snd.webaudio.SourceHandle"/></f></createSource>
		<playSource public="1" set="method" line="73"><f a="source">
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Void"/>
</f></playSource>
		<stopSource public="1" set="method" line="86"><f a="source">
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Void"/>
</f></stopSource>
		<setSourceVolume public="1" set="method" line="91"><f a="source:value">
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setSourceVolume>
		<destroySource public="1" set="method" line="95"><f a="source">
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Void"/>
</f></destroySource>
		<createBuffer public="1" set="method" line="109"><f a=""><c path="hxd.snd.webaudio.BufferHandle"/></f></createBuffer>
		<setBufferData public="1" set="method" line="115"><f a="buffer:data:size:format:channelCount:samplingRate">
	<c path="hxd.snd.webaudio.BufferHandle"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<e path="hxd.snd.SampleFormat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setBufferData>
		<destroyBuffer public="1" set="method" line="184"><f a="buffer">
	<c path="hxd.snd.webaudio.BufferHandle"/>
	<x path="Void"/>
</f></destroyBuffer>
		<queueBuffer public="1" set="method" line="189"><f a="source:buffer:sampleStart:endOfStream">
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<c path="hxd.snd.webaudio.BufferHandle"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></queueBuffer>
		<unqueueBuffer public="1" set="method" line="204"><f a="source:buffer">
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<c path="hxd.snd.webaudio.BufferHandle"/>
	<x path="Void"/>
</f></unqueueBuffer>
		<getProcessedBuffers public="1" set="method" line="219"><f a="source">
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Int"/>
</f></getProcessedBuffers>
		<getPlayedSampleCount public="1" set="method" line="224"><f a="source">
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Int"/>
</f></getPlayedSampleCount>
		<update public="1" set="method" line="242"><f a=""><x path="Void"/></f></update>
		<dispose public="1" set="method" line="243"><f a=""><x path="Void"/></f></dispose>
		<getEffectDriver public="1" set="method" line="247"><f a="type">
	<c path="String"/>
	<c path="hxd.snd.EffectDriver"><d/></c>
</f></getEffectDriver>
		<get_masterGain get="inline" set="null" line="257"><f a=""><c path="js.html.audio.GainNode"/></f></get_masterGain>
		<set_destination get="inline" set="null" line="258"><f a="node">
	<c path="js.html.audio.AudioNode"/>
	<c path="js.html.audio.AudioNode"/>
</f></set_destination>
		<get_destination get="inline" set="null" line="259"><f a=""><c path="js.html.audio.AudioNode"/></f></get_destination>
		<new public="1" set="method" line="17"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.snd.webaudio.LowPassDriver" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/webaudio/LowPassDriver.hx">
		<extends path="hxd.snd.EffectDriver"><c path="hxd.snd.effect.LowPass"/></extends>
		<pool><c path="Array"><c path="js.html.audio.BiquadFilterNode"/></c></pool>
		<get set="method" line="20"><f a="ctx">
	<c path="js.html.audio.AudioContext"/>
	<x path="Null"><c path="js.html.audio.BiquadFilterNode"/></x>
</f></get>
		<bind public="1" set="method" line="29" override="1"><f a="e:source">
	<c path="hxd.snd.effect.LowPass"/>
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Void"/>
</f></bind>
		<apply public="1" set="method" line="35" override="1"><f a="e:source">
	<c path="hxd.snd.effect.LowPass"/>
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Void"/>
</f></apply>
		<unbind public="1" set="method" line="42" override="1"><f a="e:source">
	<c path="hxd.snd.effect.LowPass"/>
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Void"/>
</f></unbind>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.snd.webaudio.PitchDriver" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/webaudio/PitchDriver.hx">
		<extends path="hxd.snd.EffectDriver"><c path="hxd.snd.effect.Pitch"/></extends>
		<apply public="1" set="method" line="10" override="1"><f a="e:source">
	<c path="hxd.snd.effect.Pitch"/>
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Void"/>
</f></apply>
		<unbind public="1" set="method" line="17" override="1"><f a="e:source">
	<c path="hxd.snd.effect.Pitch"/>
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Void"/>
</f></unbind>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxd.snd.webaudio.SpatializationDriver" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxd/snd/webaudio/SpatializationDriver.hx">
		<extends path="hxd.snd.EffectDriver"><c path="hxd.snd.effect.Spatialization"/></extends>
		<pool><c path="Array"><c path="js.html.audio.PannerNode"/></c></pool>
		<get set="method" line="19"><f a="ctx">
	<c path="js.html.audio.AudioContext"/>
	<x path="Null"><c path="js.html.audio.PannerNode"/></x>
</f></get>
		<bind public="1" set="method" line="27" override="1"><f a="e:source">
	<c path="hxd.snd.effect.Spatialization"/>
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Void"/>
</f></bind>
		<apply public="1" set="method" line="33" override="1"><f a="e:source">
	<c path="hxd.snd.effect.Spatialization"/>
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Void"/>
</f></apply>
		<unbind public="1" set="method" line="43" override="1"><f a="e:source">
	<c path="hxd.snd.effect.Spatialization"/>
	<c path="hxd.snd.webaudio.SourceHandle"/>
	<x path="Void"/>
</f></unbind>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="hxsl.Type" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<TVoid/>
		<TInt/>
		<TBool/>
		<TFloat/>
		<TString/>
		<TVec a="size:t">
			<x path="Int"/>
			<e path="hxsl.VecType"/>
		</TVec>
		<TMat3/>
		<TMat4/>
		<TMat3x4/>
		<TBytes a="size"><x path="Int"/></TBytes>
		<TSampler2D/>
		<TSampler2DArray/>
		<TSamplerCube/>
		<TStruct a="vl"><c path="Array"><t path="hxsl.TVar"/></c></TStruct>
		<TFun a="variants"><c path="Array"><t path="hxsl.FunType"/></c></TFun>
		<TArray a="t:size">
			<e path="hxsl.Type"/>
			<e path="hxsl.SizeDecl"/>
		</TArray>
		<TBuffer a="t:size">
			<e path="hxsl.Type"/>
			<e path="hxsl.SizeDecl"/>
		</TBuffer>
		<TChannel a="size"><x path="Int"/></TChannel>
		<TMat2/>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="hxsl.VecType" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<VInt/>
		<VFloat/>
		<VBool/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="hxsl.SizeDecl" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<SConst a="v"><x path="Int"/></SConst>
		<SVar a="v"><t path="hxsl.TVar"/></SVar>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="hxsl.FunType" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast"><a>
	<ret><e path="hxsl.Type"/></ret>
	<args><c path="Array"><a>
	<type><e path="hxsl.Type"/></type>
	<name><c path="String"/></name>
</a></c></args>
</a></typedef>
	<class path="hxsl.Error" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<t public="1" set="method" line="52" static="1"><f a="msg:pos">
	<c path="String"/>
	<t path="hxsl.Position"/>
	<d/>
</f></t>
		<msg public="1"><c path="String"/></msg>
		<pos public="1"><t path="hxsl.Position"/></pos>
		<toString public="1" set="method" line="48"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="43"><f a="msg:pos">
	<c path="String"/>
	<t path="hxsl.Position"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="hxsl.Position" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast"><t path="haxe.macro.Position"/></typedef>
	<typedef path="hxsl.Expr" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast"><a>
	<pos><t path="hxsl.Position"/></pos>
	<expr><e path="hxsl.ExprDef"/></expr>
</a></typedef>
	<typedef path="hxsl.Binop" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast"><e path="haxe.macro.Binop"/></typedef>
	<typedef path="hxsl.Unop" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast"><e path="haxe.macro.Unop"/></typedef>
	<enum path="hxsl.VarKind" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<Global/>
		<Input/>
		<Param/>
		<Var/>
		<Local/>
		<Output/>
		<Function/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="hxsl.VarQualifier" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<Const a="?max"><x path="Int"/></Const>
		<Private/>
		<Nullable/>
		<PerObject/>
		<Name a="n"><c path="String"/></Name>
		<Shared/>
		<Precision a="p"><e path="hxsl.Prec"/></Precision>
		<Range a="min:max">
			<x path="Float"/>
			<x path="Float"/>
		</Range>
		<Ignore/>
		<PerInstance a="v"><x path="Int"/></PerInstance>
		<Doc a="s"><c path="String"/></Doc>
		<Borrow a="source"><c path="String"/></Borrow>
		<Sampler a="name"><c path="String"/></Sampler>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="hxsl.Prec" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<Low/>
		<Medium/>
		<High/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<typedef path="hxsl.VarDecl" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast"><a>
	<type><x path="Null"><e path="hxsl.Type"/></x></type>
	<qualifiers><c path="Array"><e path="hxsl.VarQualifier"/></c></qualifiers>
	<name><c path="String"/></name>
	<kind><x path="Null"><e path="hxsl.VarKind"/></x></kind>
	<expr><x path="Null"><t path="hxsl.Expr"/></x></expr>
</a></typedef>
	<typedef path="hxsl.FunDecl" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast"><a>
	<ret><x path="Null"><e path="hxsl.Type"/></x></ret>
	<name><c path="String"/></name>
	<expr><t path="hxsl.Expr"/></expr>
	<args><c path="Array"><t path="hxsl.VarDecl"/></c></args>
</a></typedef>
	<enum path="hxsl.Const" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<CNull/>
		<CBool a="b"><x path="Bool"/></CBool>
		<CInt a="v"><x path="Int"/></CInt>
		<CFloat a="v"><x path="Float"/></CFloat>
		<CString a="v"><c path="String"/></CString>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="hxsl.ExprDef" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<EConst a="c"><e path="hxsl.Const"/></EConst>
		<EIdent a="i"><c path="String"/></EIdent>
		<EParenthesis a="e"><t path="hxsl.Expr"/></EParenthesis>
		<EField a="e:f">
			<t path="hxsl.Expr"/>
			<c path="String"/>
		</EField>
		<EBinop a="op:e1:e2">
			<t path="hxsl.Binop"/>
			<t path="hxsl.Expr"/>
			<t path="hxsl.Expr"/>
		</EBinop>
		<EUnop a="op:e1">
			<t path="hxsl.Unop"/>
			<t path="hxsl.Expr"/>
		</EUnop>
		<ECall a="e:args">
			<t path="hxsl.Expr"/>
			<c path="Array"><t path="hxsl.Expr"/></c>
		</ECall>
		<EBlock a="el"><c path="Array"><t path="hxsl.Expr"/></c></EBlock>
		<EVars a="v"><c path="Array"><t path="hxsl.VarDecl"/></c></EVars>
		<EFunction a="f"><t path="hxsl.FunDecl"/></EFunction>
		<EIf a="econd:eif:eelse">
			<t path="hxsl.Expr"/>
			<t path="hxsl.Expr"/>
			<x path="Null"><t path="hxsl.Expr"/></x>
		</EIf>
		<EDiscard/>
		<EFor a="v:loop:block">
			<c path="String"/>
			<t path="hxsl.Expr"/>
			<t path="hxsl.Expr"/>
		</EFor>
		<EReturn a="?e"><x path="Null"><t path="hxsl.Expr"/></x></EReturn>
		<EBreak/>
		<EContinue/>
		<EArray a="e:eindex">
			<t path="hxsl.Expr"/>
			<t path="hxsl.Expr"/>
		</EArray>
		<EArrayDecl a="el"><c path="Array"><t path="hxsl.Expr"/></c></EArrayDecl>
		<ESwitch a="e:cases:def">
			<t path="hxsl.Expr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="hxsl.Expr"/></c></values>
	<expr><t path="hxsl.Expr"/></expr>
</a></c>
			<x path="Null"><t path="hxsl.Expr"/></x>
		</ESwitch>
		<EWhile a="cond:loop:normalWhile">
			<t path="hxsl.Expr"/>
			<t path="hxsl.Expr"/>
			<x path="Bool"/>
		</EWhile>
		<EMeta a="name:args:e">
			<c path="String"/>
			<c path="Array"><t path="hxsl.Expr"/></c>
			<t path="hxsl.Expr"/>
		</EMeta>
	</enum>
	<typedef path="hxsl.TVar" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast"><a>
	<type><e path="hxsl.Type"/></type>
	<qualifiers>
		<x path="Null"><c path="Array"><e path="hxsl.VarQualifier"/></c></x>
		<meta><m n=":optional"/></meta>
	</qualifiers>
	<parent>
		<x path="Null"><t path="hxsl.TVar"/></x>
		<meta><m n=":optional"/></meta>
	</parent>
	<name><c path="String"/></name>
	<kind><e path="hxsl.VarKind"/></kind>
	<id><x path="Int"/></id>
</a></typedef>
	<typedef path="hxsl.TFunction" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast"><a>
	<ret><e path="hxsl.Type"/></ret>
	<ref><t path="hxsl.TVar"/></ref>
	<kind><e path="hxsl.FunctionKind"/></kind>
	<expr><t path="hxsl.TExpr"/></expr>
	<args><c path="Array"><t path="hxsl.TVar"/></c></args>
</a></typedef>
	<enum path="hxsl.FunctionKind" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<Vertex/>
		<Fragment/>
		<Init/>
		<Helper/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="hxsl.TGlobal" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<Radians/>
		<Degrees/>
		<Sin/>
		<Cos/>
		<Tan/>
		<Asin/>
		<Acos/>
		<Atan/>
		<Pow/>
		<Exp/>
		<Log/>
		<Exp2/>
		<Log2/>
		<Sqrt/>
		<Inversesqrt/>
		<Abs/>
		<Sign/>
		<Floor/>
		<Ceil/>
		<Fract/>
		<Mod/>
		<Min/>
		<Max/>
		<Clamp/>
		<Mix/>
		<Step/>
		<Smoothstep/>
		<Length/>
		<Distance/>
		<Dot/>
		<Cross/>
		<Normalize/>
		<LReflect/>
		<Texture/>
		<TextureLod/>
		<Texel/>
		<TextureSize/>
		<ToInt/>
		<ToFloat/>
		<ToBool/>
		<Vec2/>
		<Vec3/>
		<Vec4/>
		<IVec2/>
		<IVec3/>
		<IVec4/>
		<BVec2/>
		<BVec3/>
		<BVec4/>
		<Mat2/>
		<Mat3/>
		<Mat4/>
		<Mat3x4/>
		<Saturate/>
		<Pack/>
		<Unpack/>
		<PackNormal/>
		<UnpackNormal/>
		<ScreenToUv/>
		<UvToScreen/>
		<DFdx/>
		<DFdy/>
		<Fwidth/>
		<ChannelRead/>
		<ChannelReadLod/>
		<ChannelFetch/>
		<ChannelTextureSize/>
		<Trace/>
		<VertexID/>
		<InstanceID/>
		<FragCoord/>
		<FrontFacing/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="hxsl.Component" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<X/>
		<Y/>
		<Z/>
		<W/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="hxsl.TExprDef" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<TConst a="c"><e path="hxsl.Const"/></TConst>
		<TVar a="v"><t path="hxsl.TVar"/></TVar>
		<TGlobal a="g"><e path="hxsl.TGlobal"/></TGlobal>
		<TParenthesis a="e"><t path="hxsl.TExpr"/></TParenthesis>
		<TBlock a="el"><c path="Array"><t path="hxsl.TExpr"/></c></TBlock>
		<TBinop a="op:e1:e2">
			<t path="hxsl.Binop"/>
			<t path="hxsl.TExpr"/>
			<t path="hxsl.TExpr"/>
		</TBinop>
		<TUnop a="op:e1">
			<t path="hxsl.Unop"/>
			<t path="hxsl.TExpr"/>
		</TUnop>
		<TVarDecl a="v:?init">
			<t path="hxsl.TVar"/>
			<t path="hxsl.TExpr"/>
		</TVarDecl>
		<TCall a="e:args">
			<t path="hxsl.TExpr"/>
			<c path="Array"><t path="hxsl.TExpr"/></c>
		</TCall>
		<TSwiz a="e:regs">
			<t path="hxsl.TExpr"/>
			<c path="Array"><e path="hxsl.Component"/></c>
		</TSwiz>
		<TIf a="econd:eif:eelse">
			<t path="hxsl.TExpr"/>
			<t path="hxsl.TExpr"/>
			<x path="Null"><t path="hxsl.TExpr"/></x>
		</TIf>
		<TDiscard/>
		<TReturn a="?e"><t path="hxsl.TExpr"/></TReturn>
		<TFor a="v:it:loop">
			<t path="hxsl.TVar"/>
			<t path="hxsl.TExpr"/>
			<t path="hxsl.TExpr"/>
		</TFor>
		<TContinue/>
		<TBreak/>
		<TArray a="e:index">
			<t path="hxsl.TExpr"/>
			<t path="hxsl.TExpr"/>
		</TArray>
		<TArrayDecl a="el"><c path="Array"><t path="hxsl.TExpr"/></c></TArrayDecl>
		<TSwitch a="e:cases:def">
			<t path="hxsl.TExpr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="hxsl.TExpr"/></c></values>
	<expr><t path="hxsl.TExpr"/></expr>
</a></c>
			<x path="Null"><t path="hxsl.TExpr"/></x>
		</TSwitch>
		<TWhile a="e:loop:normalWhile">
			<t path="hxsl.TExpr"/>
			<t path="hxsl.TExpr"/>
			<x path="Bool"/>
		</TWhile>
		<TMeta a="m:args:e">
			<c path="String"/>
			<c path="Array"><e path="hxsl.Const"/></c>
			<t path="hxsl.TExpr"/>
		</TMeta>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="hxsl.TExpr" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast"><a>
	<t><e path="hxsl.Type"/></t>
	<p><t path="hxsl.Position"/></p>
	<e><e path="hxsl.TExprDef"/></e>
</a></typedef>
	<typedef path="hxsl.ShaderData" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast"><a>
	<vars><c path="Array"><t path="hxsl.TVar"/></c></vars>
	<name><c path="String"/></name>
	<funs><c path="Array"><t path="hxsl.TFunction"/></c></funs>
</a></typedef>
	<class path="hxsl.Tools" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<UID expr="0" line="296" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</UID>
		<SWIZ public="1" expr="Component.createAll()" line="298" static="1">
			<c path="Array"><e path="hxsl.Component"/></c>
			<meta><m n=":value"><e>Component.createAll()</e></m></meta>
		</SWIZ>
		<MAX_CHANNELS_BITS public="1" expr="3" line="299" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</MAX_CHANNELS_BITS>
		<allocVarId public="1" set="method" line="301" static="1"><f a=""><x path="Int"/></f></allocVarId>
		<getName public="1" set="method" line="311" static="1"><f a="v">
	<t path="hxsl.TVar"/>
	<c path="String"/>
</f></getName>
		<getDoc public="1" set="method" line="322" static="1"><f a="v">
	<t path="hxsl.TVar"/>
	<c path="String"/>
</f></getDoc>
		<getConstBits public="1" set="method" line="333" static="1"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Int"/>
</f></getConstBits>
		<isConst public="1" set="method" line="357" static="1"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Bool"/>
</f></isConst>
		<isStruct public="1" set="method" line="369" static="1"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Bool"/>
</f></isStruct>
		<isArray public="1" set="method" line="373" static="1"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Bool"/>
</f></isArray>
		<hasQualifier public="1" set="method" line="377" static="1"><f a="v:q">
	<t path="hxsl.TVar"/>
	<e path="hxsl.VarQualifier"/>
	<x path="Bool"/>
</f></hasQualifier>
		<hasBorrowQualifier public="1" set="method" line="385" static="1"><f a="v:path">
	<t path="hxsl.TVar"/>
	<c path="String"/>
	<x path="Bool"/>
</f></hasBorrowQualifier>
		<isSampler public="1" set="method" line="395" static="1"><f a="t">
	<e path="hxsl.Type"/>
	<x path="Bool"/>
</f></isSampler>
		<toString public="1" set="method" line="404" static="1"><f a="t">
	<e path="hxsl.Type"/>
	<c path="String"/>
</f></toString>
		<toType public="1" set="method" line="421" static="1"><f a="t">
	<e path="hxsl.VecType"/>
	<e path="hxsl.Type"/>
</f></toType>
		<hasSideEffect public="1" set="method" line="429" static="1"><f a="e">
	<t path="hxsl.TExpr"/>
	<x path="Bool"/>
</f></hasSideEffect>
		<iter public="1" set="method" line="476" static="1"><f a="e:f">
	<t path="hxsl.TExpr"/>
	<f a="">
		<t path="hxsl.TExpr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<map public="1" set="method" line="505" static="1"><f a="e:f">
	<t path="hxsl.TExpr"/>
	<f a="">
		<t path="hxsl.TExpr"/>
		<t path="hxsl.TExpr"/>
	</f>
	<t path="hxsl.TExpr"/>
</f></map>
		<size public="1" set="method" line="527" static="1"><f a="t">
	<e path="hxsl.Type"/>
	<x path="Int"/>
</f></size>
		<evalConst public="1" set="method" line="548" static="1"><f a="e">
	<t path="hxsl.TExpr"/>
	<d/>
</f></evalConst>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.Tools2" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast">
		<toString public="1" set="method" line="573" static="1"><f a="g">
	<e path="hxsl.TGlobal"/>
	<c path="String"/>
</f></toString>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.Tools3" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast"><toString public="1" set="method" line="582" static="1"><f a="s">
	<t path="hxsl.ShaderData"/>
	<c path="String"/>
</f></toString></class>
	<class path="hxsl.Tools4" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Ast.hx" module="hxsl.Ast"><toString public="1" set="method" line="590" static="1"><f a="e">
	<t path="hxsl.TExpr"/>
	<c path="String"/>
</f></toString></class>
	<class path="hxsl.BatchShader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/BatchShader.hx">
		<extends path="hxsl.Shader"/>
		<SRC expr="&quot;HXSLEGh4c2wuQmF0Y2hTaGFkZXICAQtCYXRjaF9Db3VudAECAAEAAAABAAIMQmF0Y2hfQnVmZmVyEAUMAQIAAAA&quot;" line="5" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"HXSLEGh4c2wuQmF0Y2hTaGFkZXICAQtCYXRjaF9Db3VudAECAAEAAAABAAIMQmF0Y2hfQnVmZmVyEAUMAQIAAAA"</e></m>
				<m n=":keep"/>
			</meta>
		</SRC>
		<_SHADER static="1">
			<c path="hxsl.SharedShader"/>
			<meta><m n=":keep"/></meta>
		</_SHADER>
		<Batch_Count public="1" get="accessor" set="accessor"><x path="Int"/></Batch_Count>
		<Batch_Count__ expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
			</meta>
		</Batch_Count__>
		<get_Batch_Count get="inline" set="null" line="174">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_Batch_Count>
		<set_Batch_Count get="inline" set="null" line="193">
			<f a="_v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_Batch_Count>
		<Batch_Buffer public="1" get="accessor" set="accessor"><t path="hxsl.Buffer"/></Batch_Buffer>
		<Batch_Buffer__>
			<t path="hxsl.Buffer"/>
			<meta><m n=":noCompletion"/></meta>
		</Batch_Buffer__>
		<get_Batch_Buffer get="inline" set="null" line="174">
			<f a=""><t path="hxsl.Buffer"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_Batch_Buffer>
		<set_Batch_Buffer get="inline" set="null" line="191">
			<f a="_v">
				<t path="hxsl.Buffer"/>
				<t path="hxsl.Buffer"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set_Batch_Buffer>
		<updateConstants public="1" set="method" line="270" override="1"><f a="globals">
	<c path="hxsl.Globals"/>
	<x path="Void"/>
</f></updateConstants>
		<getParamValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<d/>
</f></getParamValue>
		<getParamFloatValue public="1" set="method" line="5" override="1"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></getParamFloatValue>
		<clone public="1" set="method" line="5" override="1"><f a=""><c path="hxsl.Shader"/></f></clone>
		<new public="1" set="method" line="3"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":src"><e><![CDATA[{
	@const(65536) var Batch_Count:Int;
	@param var Batch_Buffer:Buffer<Vec4,Batch_Count>;
}]]></e></m>
			<m n=":build"><e>hxsl.Macros.buildShader()</e></m>
			<m n=":autoBuild"><e>hxsl.Macros.buildShader()</e></m>
		</meta>
	</class>
	<class path="hxsl.SearchMap" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Cache.hx" module="hxsl.Cache">
		<linked public="1"><c path="hxsl.RuntimeShader"/></linked>
		<next public="1"><t path="Map">
	<x path="Int"/>
	<c path="hxsl.SearchMap"/>
</t></next>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.Cache" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Cache.hx">
		<INST static="1"><c path="hxsl.Cache"/></INST>
		<get public="1" set="method" line="594" static="1"><f a=""><c path="hxsl.Cache"/></f></get>
		<set public="1" set="method" line="601" static="1"><f a="c">
	<c path="hxsl.Cache"/>
	<x path="Void"/>
</f></set>
		<clear public="1" set="method" line="605" static="1"><f a=""><x path="Void"/></f></clear>
		<linkCache><c path="hxsl.SearchMap"/></linkCache>
		<linkShaders><t path="Map">
	<c path="String"/>
	<c path="hxsl.Shader"/>
</t></linkShaders>
		<batchShaders><t path="Map">
	<x path="Int"/>
	<c path="hxsl.SharedShader"/>
</t></batchShaders>
		<byID><t path="Map">
	<c path="String"/>
	<c path="hxsl.RuntimeShader"/>
</t></byID>
		<constsToGlobal public="1"><x path="Bool"/></constsToGlobal>
		<getLinkShader public="1" set="method" line="36">
			<f a="vars">
				<c path="Array"><e path="hxsl.Output"/></c>
				<x path="Null"><c path="hxsl.Shader"/></x>
			</f>
			<haxe_doc>Creates a shader that generate the output requested.</haxe_doc>
		</getLinkShader>
		<link public="1" set="method" line="154">
			<f a="shaders:batchMode">
				<c path="hxsl.ShaderList"/>
				<x path="Bool"/>
				<c path="hxsl.RuntimeShader"/>
			</f>
			<meta><m n=":noDebug"/></meta>
		</link>
		<compileRuntimeShader set="method" line="171"><f a="shaders:batchMode">
	<c path="hxsl.ShaderList"/>
	<x path="Bool"/>
	<c path="hxsl.RuntimeShader"/>
</f></compileRuntimeShader>
		<buildRuntimeShader set="method" line="342"><f a="vertex:fragment:paramVars">
	<t path="hxsl.ShaderData"/>
	<t path="hxsl.ShaderData"/>
	<t path="Map">
		<x path="Int"/>
		<a>
			<instance><x path="Int"/></instance>
			<index><x path="Int"/></index>
		</a>
	</t>
	<c path="hxsl.RuntimeShader"/>
</f></buildRuntimeShader>
		<initGlobals set="method" line="358"><f a="r:s">
	<c path="hxsl.RuntimeShader"/>
	<c path="hxsl.RuntimeShaderData"/>
	<x path="Void"/>
</f></initGlobals>
		<getPath set="method" line="372"><f a="v">
	<t path="hxsl.TVar"/>
	<c path="String"/>
</f></getPath>
		<flattenShader set="method" line="378"><f a="s:kind:params">
	<t path="hxsl.ShaderData"/>
	<e path="hxsl.FunctionKind"/>
	<t path="Map">
		<x path="Int"/>
		<a>
			<instance><x path="Int"/></instance>
			<index><x path="Int"/></index>
		</a>
	</t>
	<c path="hxsl.RuntimeShaderData"/>
</f></flattenShader>
		<makeBatchShader public="1" set="method" line="460"><f a="rt">
	<c path="hxsl.RuntimeShader"/>
	<c path="hxsl.BatchShader"/>
</f></makeBatchShader>
		<createBatchShader set="method" line="471"><f a="rt">
	<c path="hxsl.RuntimeShader"/>
	<c path="hxsl.SharedShader"/>
</f></createBatchShader>
		<new set="method" line="25"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="hxsl.Channel" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Channel.hx">
		<Unknown/>
		<R/>
		<G/>
		<B/>
		<A/>
		<PackedFloat/>
		<PackedNormal/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<typedef path="hxsl.ChannelTexture" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/ChannelTexture.hx"><a>
	<texture><t path="hxsl.ChannelTextureType"/></texture>
	<channel><e path="hxsl.Channel"/></channel>
</a></typedef>
	<class path="hxsl.Clone" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Clone.hx">
		<shaderData public="1" set="method" line="75" static="1"><f a="s">
	<t path="hxsl.ShaderData"/>
	<t path="hxsl.ShaderData"/>
</f></shaderData>
		<varMap public="1"><t path="Map">
	<x path="Int"/>
	<t path="hxsl.TVar"/>
</t></varMap>
		<tvar public="1" set="method" line="12"><f a="v">
	<t path="hxsl.TVar"/>
	<t path="hxsl.TVar"/>
</f></tvar>
		<tfun public="1" set="method" line="28"><f a="f">
	<t path="hxsl.TFunction"/>
	<t path="hxsl.TFunction"/>
</f></tfun>
		<ttype public="1" set="method" line="38"><f a="t">
	<e path="hxsl.Type"/>
	<e path="hxsl.Type"/>
</f></ttype>
		<texpr public="1" set="method" line="51"><f a="e">
	<t path="hxsl.TExpr"/>
	<t path="hxsl.TExpr"/>
</f></texpr>
		<shader public="1" set="method" line="67"><f a="s">
	<t path="hxsl.ShaderData"/>
	<t path="hxsl.ShaderData"/>
</f></shader>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl._Dce.Exit" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Dce.hx" private="1" module="hxsl.Dce"><new public="1" set="method" line="5"><f a=""><x path="Void"/></f></new></class>
	<class path="hxsl._Dce.VarDeps" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Dce.hx" private="1" module="hxsl.Dce">
		<v public="1"><t path="hxsl.TVar"/></v>
		<keep public="1"><x path="Bool"/></keep>
		<used public="1"><x path="Bool"/></used>
		<deps public="1"><t path="Map">
	<x path="Int"/>
	<c path="hxsl._Dce.VarDeps"/>
</t></deps>
		<new public="1" set="method" line="14"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.Dce" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Dce.hx">
		<used><t path="Map">
	<x path="Int"/>
	<c path="hxsl._Dce.VarDeps"/>
</t></used>
		<channelVars><c path="Array"><t path="hxsl.TVar"/></c></channelVars>
		<markAsKeep><x path="Bool"/></markAsKeep>
		<debug get="inline" set="null" line="30"><f a="msg:?pos">
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></debug>
		<dce public="1" set="method" line="37"><f a="vertex:fragment">
	<t path="hxsl.ShaderData"/>
	<t path="hxsl.ShaderData"/>
	<a>
		<vertex><t path="hxsl.ShaderData"/></vertex>
		<fragment><t path="hxsl.ShaderData"/></fragment>
	</a>
</f></dce>
		<get set="method" line="107"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Null"><c path="hxsl._Dce.VarDeps"/></x>
</f></get>
		<markRec set="method" line="116"><f a="v">
	<c path="hxsl._Dce.VarDeps"/>
	<x path="Void"/>
</f></markRec>
		<link set="method" line="124"><f a="v:writeTo">
	<t path="hxsl.TVar"/>
	<c path="Array"><c path="hxsl._Dce.VarDeps"/></c>
	<x path="Void"/>
</f></link>
		<check set="method" line="141"><f a="e:writeTo:isAffected">
	<t path="hxsl.TExpr"/>
	<c path="Array"><c path="hxsl._Dce.VarDeps"/></c>
	<c path="Array"><c path="hxsl._Dce.VarDeps"/></c>
	<x path="Void"/>
</f></check>
		<checkBranches set="method" line="203"><f a="e">
	<t path="hxsl.TExpr"/>
	<x path="Void"/>
</f></checkBranches>
		<mapExpr set="method" line="214"><f a="e:isVar">
	<t path="hxsl.TExpr"/>
	<x path="Bool"/>
	<t path="hxsl.TExpr"/>
</f></mapExpr>
		<new public="1" set="method" line="27"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.Eval" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Eval.hx">
		<varMap public="1"><t path="Map">
	<t path="hxsl.TVar"/>
	<t path="hxsl.TVar"/>
</t></varMap>
		<inlineCalls public="1"><x path="Bool"/></inlineCalls>
		<unrollLoops public="1"><x path="Bool"/></unrollLoops>
		<eliminateConditionals public="1"><x path="Bool"/></eliminateConditionals>
		<constants><t path="Map">
	<x path="Int"/>
	<e path="hxsl.TExprDef"/>
</t></constants>
		<funMap><t path="Map">
	<t path="hxsl.TVar"/>
	<t path="hxsl.TFunction"/>
</t></funMap>
		<curFun><t path="hxsl.TFunction"/></curFun>
		<setConstant public="1" set="method" line="25"><f a="v:c">
	<t path="hxsl.TVar"/>
	<e path="hxsl.Const"/>
	<x path="Void"/>
</f></setConstant>
		<mapVar set="method" line="29"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Null"><a>
	<type><e path="hxsl.Type"/></type>
	<qualifiers>
		<x path="Null"><c path="Array"><e path="hxsl.VarQualifier"/></c></x>
		<meta><m n=":optional"/></meta>
	</qualifiers>
	<parent>
		<x path="Null"><t path="hxsl.TVar"/></x>
		<meta><m n=":optional"/></meta>
	</parent>
	<name><c path="String"/></name>
	<kind><e path="hxsl.VarKind"/></kind>
	<id><x path="Int"/></id>
</a></x>
</f></mapVar>
		<checkSamplerRec set="method" line="73"><f a="t">
	<e path="hxsl.Type"/>
	<x path="Bool"/>
</f></checkSamplerRec>
		<needsInline set="method" line="91"><f a="f">
	<t path="hxsl.TFunction"/>
	<x path="Bool"/>
</f></needsInline>
		<eval public="1" set="method" line="98"><f a="s">
	<t path="hxsl.ShaderData"/>
	<t path="hxsl.ShaderData"/>
</f></eval>
		<markReturn><x path="Bool"/></markReturn>
		<hasReturn set="method" line="126"><f a="e">
	<t path="hxsl.TExpr"/>
	<x path="Bool"/>
</f></hasReturn>
		<hasReturnLoop set="method" line="132"><f a="e">
	<t path="hxsl.TExpr"/>
	<x path="Void"/>
</f></hasReturnLoop>
		<handleReturn set="method" line="141">
			<f a="e:?isFinal" v=":false">
				<t path="hxsl.TExpr"/>
				<x path="Bool"/>
				<t path="hxsl.TExpr"/>
			</f>
			<meta><m n=":value"><e>{ isFinal : false }</e></m></meta>
		</handleReturn>
		<handleReturnDef set="method" line="181"><f a="e">
	<t path="hxsl.TExpr"/>
	<t path="hxsl.TExpr"/>
</f></handleReturnDef>
		<evalCall set="method" line="185"><f a="g:args:oldArgs:pos">
	<e path="hxsl.TGlobal"/>
	<c path="Array"><t path="hxsl.TExpr"/></c>
	<c path="Array"><t path="hxsl.TExpr"/></c>
	<t path="hxsl.Position"/>
	<e path="hxsl.TExprDef"/>
</f></evalCall>
		<constantsToString set="method" line="238"><f a=""><c path="String"/></f></constantsToString>
		<ifBlock set="method" line="242"><f a="e">
	<t path="hxsl.TExpr"/>
	<t path="hxsl.TExpr"/>
</f></ifBlock>
		<evalExpr set="method" line="248">
			<f a="e:?isVal" v=":true">
				<t path="hxsl.TExpr"/>
				<x path="Bool"/>
				<t path="hxsl.TExpr"/>
			</f>
			<meta><m n=":value"><e>{ isVal : true }</e></m></meta>
		</evalExpr>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Evaluator : will substitute some variables (usually constants) by their runtime value and will
	evaluate and reduce the expression, unroll loops, etc.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl._Flatten.Alloc" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Flatten.hx" private="1" module="hxsl.Flatten">
		<t public="1"><e path="hxsl.VecType"/></t>
		<pos public="1"><x path="Int"/></pos>
		<size public="1"><x path="Int"/></size>
		<g public="1"><t path="hxsl.TVar"/></g>
		<v public="1"><x path="Null"><t path="hxsl.TVar"/></x></v>
		<new public="1" set="method" line="10"><f a="g:t:pos:size">
	<t path="hxsl.TVar"/>
	<e path="hxsl.VecType"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="hxsl.ARead" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Flatten.hx" module="hxsl.Flatten">
		<AIndex a="a"><c path="hxsl._Flatten.Alloc"/></AIndex>
		<AOffset a="a:stride:delta">
			<c path="hxsl._Flatten.Alloc"/>
			<x path="Int"/>
			<t path="hxsl.TExpr"/>
		</AOffset>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="hxsl.Flatten" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Flatten.hx">
		<globals><c path="Array"><t path="hxsl.TVar"/></c></globals>
		<params><c path="Array"><t path="hxsl.TVar"/></c></params>
		<outVars><c path="Array"><t path="hxsl.TVar"/></c></outVars>
		<varMap><t path="Map">
	<t path="hxsl.TVar"/>
	<c path="hxsl._Flatten.Alloc"/>
</t></varMap>
		<econsts><t path="hxsl.TExpr"/></econsts>
		<consts public="1"><c path="Array"><x path="Float"/></c></consts>
		<allocData public="1"><t path="Map">
	<t path="hxsl.TVar"/>
	<c path="Array"><c path="hxsl._Flatten.Alloc"/></c>
</t></allocData>
		<flatten public="1" set="method" line="36"><f a="s:kind:constsToGlobal">
	<t path="hxsl.ShaderData"/>
	<e path="hxsl.FunctionKind"/>
	<x path="Bool"/>
	<t path="hxsl.ShaderData"/>
</f></flatten>
		<mapFun set="method" line="94"><f a="f:mapExpr">
	<t path="hxsl.TFunction"/>
	<f a="">
		<t path="hxsl.TExpr"/>
		<t path="hxsl.TExpr"/>
	</f>
	<t path="hxsl.TFunction"/>
</f></mapFun>
		<mapExpr set="method" line="104"><f a="e">
	<t path="hxsl.TExpr"/>
	<t path="hxsl.TExpr"/>
</f></mapExpr>
		<mapConsts set="method" line="137"><f a="e">
	<t path="hxsl.TExpr"/>
	<t path="hxsl.TExpr"/>
</f></mapConsts>
		<allocConst set="method" line="200"><f a="v:p">
	<x path="Float"/>
	<t path="hxsl.Position"/>
	<t path="hxsl.TExpr"/>
</f></allocConst>
		<allocConsts set="method" line="209"><f a="va:p">
	<c path="Array"><x path="Float"/></c>
	<t path="hxsl.Position"/>
	<t path="hxsl.TExpr"/>
</f></allocConsts>
		<mkInt get="inline" set="null" line="250"><f a="v:pos">
	<x path="Int"/>
	<t path="hxsl.Position"/>
	<a>
		<t><e path="hxsl.Type"/></t>
		<p><t path="hxsl.Position"/></p>
		<e><e path="hxsl.TExprDef"/></e>
	</a>
</f></mkInt>
		<readIndex get="inline" set="null" line="254"><f a="a:index:pos">
	<c path="hxsl._Flatten.Alloc"/>
	<x path="Int"/>
	<t path="hxsl.Position"/>
	<t path="hxsl.TExpr"/>
</f></readIndex>
		<readOffset get="inline" set="null" line="259"><f a="a:stride:delta:index:pos">
	<c path="hxsl._Flatten.Alloc"/>
	<x path="Int"/>
	<t path="hxsl.TExpr"/>
	<x path="Int"/>
	<t path="hxsl.Position"/>
	<t path="hxsl.TExpr"/>
</f></readOffset>
		<access set="method" line="265"><f a="a:t:pos:acc">
	<c path="hxsl._Flatten.Alloc"/>
	<e path="hxsl.Type"/>
	<t path="hxsl.Position"/>
	<e path="hxsl.ARead"/>
	<t path="hxsl.TExpr"/>
</f></access>
		<toInt set="method" line="323"><f a="e">
	<t path="hxsl.TExpr"/>
	<t path="hxsl.TExpr"/>
</f></toInt>
		<optimize set="method" line="328"><f a="e">
	<t path="hxsl.TExpr"/>
	<a>
		<t><e path="hxsl.Type"/></t>
		<p><t path="hxsl.Position"/></p>
		<e><e path="hxsl.TExprDef"/></e>
	</a>
</f></optimize>
		<packTextures set="method" line="353"><f a="name:vars:t">
	<c path="String"/>
	<c path="Array"><t path="hxsl.TVar"/></c>
	<e path="hxsl.Type"/>
	<c path="Array"><c path="hxsl._Flatten.Alloc"/></c>
</f></packTextures>
		<packBuffers set="method" line="404"><f a="vars">
	<c path="Array"><t path="hxsl.TVar"/></c>
	<x path="Void"/>
</f></packBuffers>
		<pack set="method" line="423"><f a="name:kind:vars:t">
	<c path="String"/>
	<e path="hxsl.VarKind"/>
	<c path="Array"><t path="hxsl.TVar"/></c>
	<e path="hxsl.VecType"/>
	<t path="hxsl.TVar"/>
</f></pack>
		<varSize set="method" line="475"><f a="v:t">
	<e path="hxsl.Type"/>
	<e path="hxsl.VecType"/>
	<x path="Int"/>
</f></varSize>
		<gatherVar set="method" line="487"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Void"/>
</f></gatherVar>
		<new public="1" set="method" line="33"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="hxsl.GlobalSlot" params="T" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Globals.hx" module="hxsl.Globals">
		<this><x path="Int"/></this>
		<impl><class path="hxsl._Globals.GlobalSlot_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Globals.hx" private="1" module="hxsl.Globals" final="1">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="name">
			<c path="String"/>
			<x path="hxsl.GlobalSlot"><c path="hxsl.GlobalSlot.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<toInt public="1" get="inline" set="null" line="8" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
	<set public="1" get="inline" set="null" line="11" static="1"><f a="this:globals:v">
	<x path="Int"/>
	<c path="hxsl.Globals"/>
	<c path="hxsl.GlobalSlot.T"/>
	<x path="Void"/>
</f></set>
	<get public="1" get="inline" set="null" line="14" static="1"><f a="this:globals">
	<x path="Int"/>
	<c path="hxsl.Globals"/>
	<c path="hxsl.GlobalSlot.T"/>
</f></get>
</class></impl>
	</abstract>
	<class path="hxsl._Globals.GlobalSlot_Impl_" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Globals.hx" private="1" module="hxsl.Globals" final="1">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="name">
				<c path="String"/>
				<x path="hxsl.GlobalSlot"><c path="hxsl.GlobalSlot.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<toInt public="1" get="inline" set="null" line="8" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
		<set public="1" get="inline" set="null" line="11" static="1"><f a="this:globals:v">
	<x path="Int"/>
	<c path="hxsl.Globals"/>
	<c path="hxsl.GlobalSlot.T"/>
	<x path="Void"/>
</f></set>
		<get public="1" get="inline" set="null" line="14" static="1"><f a="this:globals">
	<x path="Int"/>
	<c path="hxsl.Globals"/>
	<c path="hxsl.GlobalSlot.T"/>
</f></get>
	</class>
	<class path="hxsl.Globals" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Globals.hx">
		<ALL static="1"><c path="Array"><c path="String"/></c></ALL>
		<MAP static="1"><t path="Map">
	<c path="String"/>
	<x path="Int"/>
</t></MAP>
		<allocID public="1" set="method" line="62" static="1"><f a="path">
	<c path="String"/>
	<x path="Int"/>
</f></allocID>
		<getIDName public="1" set="method" line="79" static="1"><f a="id">
	<x path="Int"/>
	<c path="String"/>
</f></getIDName>
		<map><t path="Map">
	<x path="Int"/>
	<d/>
</t></map>
		<channels expr="[]">
			<c path="Array"><c path="h3d.mat.Texture"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</channels>
		<maxChannels><x path="Int"/></maxChannels>
		<set public="1" set="method" line="29"><f a="path:v">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></set>
		<get public="1" set="method" line="33"><f a="path">
	<c path="String"/>
	<d/>
</f></get>
		<fastSet public="1" get="inline" set="null" line="37"><f a="id:v">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></fastSet>
		<fastGet public="1" get="inline" set="null" line="41"><f a="id">
	<x path="Int"/>
	<d/>
</f></fastGet>
		<resetChannels public="1" get="inline" set="null" line="45"><f a=""><x path="Void"/></f></resetChannels>
		<allocChannelID public="1" set="method" line="49"><f a="t">
	<c path="h3d.mat.Texture"/>
	<x path="Int"/>
</f></allocChannelID>
		<new public="1" set="method" line="25"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="js.Boot" params="" file="/usr/local/lib/haxe/std/js/Boot.hx">
		<getClass set="method" line="41" static="1">
			<f a="o">
				<x path="Null"><d/></x>
				<x path="Null"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getClass>
		<__string_rec set="method" line="58" static="1">
			<f a="o:s">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><x path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></hasOwnProperty>
					<_hx_index set="null"><x path="Int"/></_hx_index>
					<__enum__ set="null"><x path="Bool"/></__enum__>
				</a>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
		</__string_rec>
		<__interfLoop set="method" line="143" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="162" static="1">
			<f a="o:cl">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__instanceof>
		<__downcastCheck set="method" line="206" static="1"><f a="o:cl">
	<d/>
	<x path="Class"><d/></x>
	<x path="Bool"/>
</f></__downcastCheck>
		<__cast set="method" line="214" static="1">
			<f a="o:t">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":ifFeature"><e>"typed_cast"</e></m></meta>
		</__cast>
		<__toStr static="1"><c path="js.lib.Function"/></__toStr>
		<__nativeClassName set="method" line="228" static="1"><f a="o">
	<d/>
	<c path="String"/>
</f></__nativeClassName>
		<__isNativeObj set="method" line="238" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></__isNativeObj>
		<__resolveNativeClass set="method" line="243" static="1"><f a="name">
	<c path="String"/>
	<x path="Null"><d/></x>
</f></__resolveNativeClass>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="hxsl.GlslOut" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/GlslOut.hx">
		<KWD_LIST expr="[&quot;input&quot;, &quot;output&quot;, &quot;discard&quot;, &quot;dvec2&quot;, &quot;dvec3&quot;, &quot;dvec4&quot;, &quot;hvec2&quot;, &quot;hvec3&quot;, &quot;hvec4&quot;, &quot;fvec2&quot;, &quot;fvec3&quot;, &quot;fvec4&quot;, &quot;int&quot;, &quot;float&quot;, &quot;bool&quot;, &quot;long&quot;, &quot;short&quot;, &quot;double&quot;, &quot;half&quot;, &quot;fixed&quot;, &quot;unsigned&quot;, &quot;superp&quot;, &quot;lowp&quot;, &quot;mediump&quot;, &quot;highp&quot;, &quot;precision&quot;, &quot;invariant&quot;, &quot;discard&quot;, &quot;struct&quot;, &quot;asm&quot;, &quot;union&quot;, &quot;template&quot;, &quot;this&quot;, &quot;packed&quot;, &quot;goto&quot;, &quot;sizeof&quot;, &quot;namespace&quot;, &quot;noline&quot;, &quot;volatile&quot;, &quot;external&quot;, &quot;flat&quot;, &quot;input&quot;, &quot;output&quot;, &quot;out&quot;, &quot;attribute&quot;, &quot;const&quot;, &quot;uniform&quot;, &quot;varying&quot;, &quot;inout&quot;, &quot;void&quot;]" line="6" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["input", "output", "discard", "dvec2", "dvec3", "dvec4", "hvec2", "hvec3", "hvec4", "fvec2", "fvec3", "fvec4", "int", "float", "bool", "long", "short", "double", "half", "fixed", "unsigned", "superp", "lowp", "mediump", "highp", "precision", "invariant", "discard", "struct", "asm", "union", "template", "this", "packed", "goto", "sizeof", "namespace", "noline", "volatile", "external", "flat", "input", "output", "out", "attribute", "const", "uniform", "varying", "inout", "void"]</e></m></meta>
		</KWD_LIST>
		<KWDS expr="[for (k  in  KWD_LIST) k =&gt; true]" line="15" static="1">
			<x path="haxe.ds.Map">
				<c path="String"/>
				<x path="Bool"/>
			</x>
			<meta><m n=":value"><e><![CDATA[[for (k  in  KWD_LIST) k => true]]]></e></m></meta>
		</KWDS>
		<GLOBALS expr="{
	var m = new Map();
	for (g  in  hxsl.Ast.TGlobal.createAll()) {
		var n = &quot;&quot; + g;
		n = n.charAt(0).toLowerCase() + n.substr(1);
		m.set(g, n);
	};
	m.set(ToInt, &quot;int&quot;);
	m.set(ToFloat, &quot;float&quot;);
	m.set(ToBool, &quot;bool&quot;);
	m.set(LReflect, &quot;reflect&quot;);
	m.set(Mat3x4, &quot;_mat3x4&quot;);
	m.set(VertexID, &quot;gl_VertexID&quot;);
	m.set(InstanceID, &quot;gl_InstanceID&quot;);
	m.set(IVec2, &quot;ivec2&quot;);
	m.set(IVec3, &quot;ivec3&quot;);
	m.set(IVec4, &quot;ivec4&quot;);
	m.set(BVec2, &quot;bvec2&quot;);
	m.set(BVec3, &quot;bvec3&quot;);
	m.set(BVec4, &quot;bvec4&quot;);
	m.set(FragCoord, &quot;gl_FragCoord&quot;);
	m.set(FrontFacing, &quot;gl_FrontFacing&quot;);
	for (g  in  m) KWDS.set(g, true);
	m;
}" line="16" static="1">
			<x path="haxe.ds.Map">
				<e path="hxsl.TGlobal"/>
				<c path="String"/>
			</x>
			<meta><m n=":value"><e>{
	var m = new Map();
	for (g  in  hxsl.Ast.TGlobal.createAll()) {
		var n = "" + g;
		n = n.charAt(0).toLowerCase() + n.substr(1);
		m.set(g, n);
	};
	m.set(ToInt, "int");
	m.set(ToFloat, "float");
	m.set(ToBool, "bool");
	m.set(LReflect, "reflect");
	m.set(Mat3x4, "_mat3x4");
	m.set(VertexID, "gl_VertexID");
	m.set(InstanceID, "gl_InstanceID");
	m.set(IVec2, "ivec2");
	m.set(IVec3, "ivec3");
	m.set(IVec4, "ivec4");
	m.set(BVec2, "bvec2");
	m.set(BVec3, "bvec3");
	m.set(BVec4, "bvec4");
	m.set(FragCoord, "gl_FragCoord");
	m.set(FrontFacing, "gl_FrontFacing");
	for (g  in  m) KWDS.set(g, true);
	m;
}</e></m></meta>
		</GLOBALS>
		<MAT34 expr="&quot;struct _mat3x4 { vec4 a; vec4 b; vec4 c; };&quot;" line="42" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"struct _mat3x4 { vec4 a; vec4 b; vec4 c; };"</e></m></meta>
		</MAT34>
		<compile public="1" set="method" line="714" static="1"><f a="s">
	<t path="hxsl.ShaderData"/>
	<c path="String"/>
</f></compile>
		<buf><c path="StringBuf"/></buf>
		<exprIds expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</exprIds>
		<exprValues><c path="Array"><c path="String"/></c></exprValues>
		<locals><t path="Map">
	<x path="Int"/>
	<t path="hxsl.TVar"/>
</t></locals>
		<decls><c path="Array"><c path="String"/></c></decls>
		<isVertex><x path="Bool"/></isVertex>
		<allNames><t path="Map">
	<c path="String"/>
	<x path="Int"/>
</t></allNames>
		<outIndexes><t path="Map">
	<x path="Int"/>
	<x path="Int"/>
</t></outIndexes>
		<isES get="accessor" set="null"><x path="Bool"/></isES>
		<isES2 get="accessor" set="null"><x path="Bool"/></isES2>
		<uniformBuffer expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</uniformBuffer>
		<outIndex expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</outIndex>
		<varNames public="1"><t path="Map">
	<x path="Int"/>
	<c path="String"/>
</t></varNames>
		<glES public="1"><x path="Null"><x path="Float"/></x></glES>
		<version public="1"><x path="Null"><x path="Int"/></x></version>
		<intelDriverFix><x path="Bool"/></intelDriverFix>
		<get_isES get="inline" set="null" line="76"><f a=""><x path="Bool"/></f></get_isES>
		<get_isES2 get="inline" set="null" line="77"><f a=""><x path="Bool"/></f></get_isES2>
		<add get="inline" set="null" line="79"><f a="v">
	<d/>
	<x path="Void"/>
</f></add>
		<ident get="inline" set="null" line="83"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Void"/>
</f></ident>
		<decl set="method" line="87"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></decl>
		<addType set="method" line="96"><f a="t">
	<e path="hxsl.Type"/>
	<x path="Void"/>
</f></addType>
		<addVar set="method" line="164"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Void"/>
</f></addVar>
		<addValue set="method" line="192"><f a="e:tabs">
	<t path="hxsl.TExpr"/>
	<c path="String"/>
	<x path="Void"/>
</f></addValue>
		<addBlock set="method" line="229"><f a="e:tabs">
	<t path="hxsl.TExpr"/>
	<c path="String"/>
	<x path="Void"/>
</f></addBlock>
		<getFunName set="method" line="233"><f a="g:args:rt">
	<e path="hxsl.TGlobal"/>
	<c path="Array"><t path="hxsl.TExpr"/></c>
	<e path="hxsl.Type"/>
	<c path="String"/>
</f></getFunName>
		<addExpr set="method" line="296"><f a="e:tabs">
	<t path="hxsl.TExpr"/>
	<c path="String"/>
	<x path="Void"/>
</f></addExpr>
		<varName set="method" line="552"><f a="v">
	<t path="hxsl.TVar"/>
	<c path="String"/>
</f></varName>
		<newLine set="method" line="580"><f a="e">
	<t path="hxsl.TExpr"/>
	<x path="Void"/>
</f></newLine>
		<isBlock set="method" line="587"><f a="e">
	<t path="hxsl.TExpr"/>
	<x path="Bool"/>
</f></isBlock>
		<initVar set="method" line="598"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Void"/>
</f></initVar>
		<initVars set="method" line="636"><f a="s">
	<t path="hxsl.ShaderData"/>
	<x path="Void"/>
</f></initVars>
		<run public="1" set="method" line="650"><f a="s">
	<t path="hxsl.ShaderData"/>
	<c path="String"/>
</f></run>
		<new public="1" set="method" line="71"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl._Linker.AllocatedVar" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Linker.hx" private="1" module="hxsl.Linker">
		<id public="1"><x path="Int"/></id>
		<v public="1"><t path="hxsl.TVar"/></v>
		<path public="1"><c path="String"/></path>
		<merged public="1"><c path="Array"><t path="hxsl.TVar"/></c></merged>
		<kind public="1"><x path="Null"><e path="hxsl.FunctionKind"/></x></kind>
		<parent public="1"><c path="hxsl._Linker.AllocatedVar"/></parent>
		<rootShaderName public="1"><c path="String"/></rootShaderName>
		<instanceIndex public="1"><x path="Int"/></instanceIndex>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl._Linker.ShaderInfos" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Linker.hx" private="1" module="hxsl.Linker">
		<UID expr="0" line="18" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</UID>
		<uid public="1"><x path="Int"/></uid>
		<name public="1"><c path="String"/></name>
		<priority public="1"><x path="Int"/></priority>
		<body public="1"><t path="hxsl.TExpr"/></body>
		<usedFunctions public="1"><c path="Array"><t path="hxsl.TFunction"/></c></usedFunctions>
		<deps public="1"><t path="Map">
	<c path="hxsl._Linker.ShaderInfos"/>
	<x path="Bool"/>
</t></deps>
		<read public="1"><t path="Map">
	<x path="Int"/>
	<c path="hxsl._Linker.AllocatedVar"/>
</t></read>
		<write public="1"><t path="Map">
	<x path="Int"/>
	<c path="hxsl._Linker.AllocatedVar"/>
</t></write>
		<processed public="1"><t path="Map">
	<x path="Int"/>
	<x path="Bool"/>
</t></processed>
		<vertex public="1"><x path="Null"><x path="Bool"/></x></vertex>
		<onStack public="1"><x path="Bool"/></onStack>
		<hasDiscard public="1"><x path="Bool"/></hasDiscard>
		<marked public="1"><x path="Null"><x path="Bool"/></x></marked>
		<new public="1" set="method" line="32"><f a="n:v">
	<c path="String"/>
	<x path="Null"><x path="Bool"/></x>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.Linker" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Linker.hx">
		<allVars public="1"><c path="Array"><c path="hxsl._Linker.AllocatedVar"/></c></allVars>
		<varMap><t path="Map">
	<c path="String"/>
	<c path="hxsl._Linker.AllocatedVar"/>
</t></varMap>
		<curShader><c path="hxsl._Linker.ShaderInfos"/></curShader>
		<shaders><c path="Array"><c path="hxsl._Linker.ShaderInfos"/></c></shaders>
		<varIdMap><t path="Map">
	<x path="Int"/>
	<x path="Int"/>
</t></varIdMap>
		<locals><t path="Map">
	<x path="Int"/>
	<x path="Bool"/>
</t></locals>
		<curInstance><x path="Int"/></curInstance>
		<batchMode><x path="Bool"/></batchMode>
		<isBatchShader><x path="Bool"/></isBatchShader>
		<debugDepth expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</debugDepth>
		<debug get="inline" set="null" line="60"><f a="msg:?pos">
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></debug>
		<error set="method" line="68"><f a="msg:p">
	<c path="String"/>
	<t path="hxsl.Position"/>
	<d/>
</f></error>
		<mergeVar set="method" line="72"><f a="path:v:v2:p:shaderName">
	<c path="String"/>
	<t path="hxsl.TVar"/>
	<t path="hxsl.TVar"/>
	<t path="hxsl.Position"/>
	<c path="String"/>
	<x path="Void"/>
</f></mergeVar>
		<allocVar set="method" line="104"><f a="v:p:?shaderName:?path:?parent">
	<t path="hxsl.TVar"/>
	<t path="hxsl.Position"/>
	<c path="String"/>
	<c path="String"/>
	<c path="hxsl._Linker.AllocatedVar"/>
	<c path="hxsl._Linker.AllocatedVar"/>
</f></allocVar>
		<mapExprVar set="method" line="178"><f a="e">
	<t path="hxsl.TExpr"/>
	<a>
		<t><e path="hxsl.Type"/></t>
		<p><t path="hxsl.Position"/></p>
		<e><e path="hxsl.TExprDef"/></e>
	</a>
</f></mapExprVar>
		<addShader set="method" line="231"><f a="name:vertex:e:p">
	<c path="String"/>
	<x path="Null"><x path="Bool"/></x>
	<t path="hxsl.TExpr"/>
	<x path="Int"/>
	<c path="hxsl._Linker.ShaderInfos"/>
</f></addShader>
		<sortByPriorityDesc set="method" line="242"><f a="s1:s2">
	<c path="hxsl._Linker.ShaderInfos"/>
	<c path="hxsl._Linker.ShaderInfos"/>
	<x path="Int"/>
</f></sortByPriorityDesc>
		<buildDependency set="method" line="248"><f a="s:v:isWritten">
	<c path="hxsl._Linker.ShaderInfos"/>
	<c path="hxsl._Linker.AllocatedVar"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></buildDependency>
		<initDependencies set="method" line="276"><f a="s">
	<c path="hxsl._Linker.ShaderInfos"/>
	<x path="Void"/>
</f></initDependencies>
		<collect set="method" line="299"><f a="cur:out:vertex">
	<c path="hxsl._Linker.ShaderInfos"/>
	<c path="Array"><c path="hxsl._Linker.ShaderInfos"/></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></collect>
		<uniqueLocals set="method" line="321"><f a="expr:locals">
	<t path="hxsl.TExpr"/>
	<t path="Map">
		<c path="String"/>
		<x path="Bool"/>
	</t>
	<x path="Void"/>
</f></uniqueLocals>
		<link public="1" set="method" line="340"><f a="shadersData">
	<c path="Array"><t path="hxsl.ShaderData"/></c>
	<t path="hxsl.ShaderData"/>
</f></link>
		<new public="1" set="method" line="56">
			<f a="?batchMode" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ batchMode : false }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="hxsl.Output" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Output.hx">
		<Const a="v"><x path="Float"/></Const>
		<Value a="v:?size">
			<c path="String"/>
			<x path="Int"/>
		</Value>
		<PackNormal a="v"><e path="hxsl.Output"/></PackNormal>
		<PackFloat a="v"><e path="hxsl.Output"/></PackFloat>
		<Vec2 a="a"><c path="Array"><e path="hxsl.Output"/></c></Vec2>
		<Vec3 a="a"><c path="Array"><e path="hxsl.Output"/></c></Vec3>
		<Vec4 a="a"><c path="Array"><e path="hxsl.Output"/></c></Vec4>
		<Swiz a="a:swiz">
			<e path="hxsl.Output"/>
			<c path="Array"><e path="hxsl.Component"/></c>
		</Swiz>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="hxsl.Printer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Printer.hx">
		<SWIZ expr="[&quot;x&quot;, &quot;y&quot;, &quot;z&quot;, &quot;w&quot;]" line="132" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["x", "y", "z", "w"]</e></m></meta>
		</SWIZ>
		<opStr public="1" set="method" line="305" static="1"><f a="op">
	<t path="hxsl.Binop"/>
	<c path="String"/>
</f></opStr>
		<toString public="1" set="method" line="336" static="1">
			<f a="e:?varId" v=":false">
				<t path="hxsl.TExpr"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ varId : false }</e></m></meta>
		</toString>
		<shaderToString public="1" set="method" line="340" static="1">
			<f a="s:?varId" v=":false">
				<t path="hxsl.ShaderData"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ varId : false }</e></m></meta>
		</shaderToString>
		<check public="1" set="method" line="344" static="1"><f a="s:?from">
	<t path="hxsl.ShaderData"/>
	<c path="Array"><t path="hxsl.ShaderData"/></c>
	<x path="Void"/>
</f></check>
		<buffer><c path="StringBuf"/></buffer>
		<varId><x path="Bool"/></varId>
		<add get="inline" set="null" line="13"><f a="v">
	<d/>
	<x path="Void"/>
</f></add>
		<shaderString public="1" set="method" line="17"><f a="s">
	<t path="hxsl.ShaderData"/>
	<c path="String"/>
</f></shaderString>
		<varString public="1" set="method" line="32"><f a="v">
	<t path="hxsl.TVar"/>
	<c path="String"/>
</f></varString>
		<funString public="1" set="method" line="38"><f a="f">
	<t path="hxsl.TFunction"/>
	<c path="String"/>
</f></funString>
		<exprString public="1" set="method" line="44"><f a="e">
	<t path="hxsl.TExpr"/>
	<c path="String"/>
</f></exprString>
		<addVar set="method" line="50">
			<f a="v:defKind:?tabs:?parent" v="::&quot;&quot;:">
				<t path="hxsl.TVar"/>
				<e path="hxsl.VarKind"/>
				<c path="String"/>
				<t path="hxsl.TVar"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tabs : "" }</e></m></meta>
		</addVar>
		<addFun set="method" line="106"><f a="f">
	<t path="hxsl.TFunction"/>
	<x path="Void"/>
</f></addFun>
		<addVarName set="method" line="122"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Void"/>
</f></addVarName>
		<addConst set="method" line="134"><f a="c">
	<e path="hxsl.Const"/>
	<x path="Void"/>
</f></addConst>
		<addExpr set="method" line="144"><f a="e:tabs">
	<t path="hxsl.TExpr"/>
	<c path="String"/>
	<x path="Void"/>
</f></addExpr>
		<new public="1" set="method" line="9">
			<f a="?varId" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ varId : false }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.AllocParam" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/RuntimeShader.hx" module="hxsl.RuntimeShader">
		<name public="1"><c path="String"/></name>
		<pos public="1"><x path="Int"/></pos>
		<instance public="1"><x path="Int"/></instance>
		<index public="1"><x path="Int"/></index>
		<type public="1"><e path="hxsl.Type"/></type>
		<perObjectGlobal public="1"><c path="hxsl.AllocGlobal"/></perObjectGlobal>
		<next public="1"><c path="hxsl.AllocParam"/></next>
		<clone public="1" set="method" line="18">
			<f a="?resetGID" v="false">
				<x path="Bool"/>
				<c path="hxsl.AllocParam"/>
			</f>
			<meta><m n=":value"><e>{ resetGID : false }</e></m></meta>
		</clone>
		<new public="1" set="method" line="11"><f a="name:pos:instance:index:type">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="hxsl.Type"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.AllocGlobal" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/RuntimeShader.hx" module="hxsl.RuntimeShader">
		<pos public="1"><x path="Int"/></pos>
		<gid public="1"><x path="Int"/></gid>
		<path public="1"><c path="String"/></path>
		<type public="1"><e path="hxsl.Type"/></type>
		<next public="1"><c path="hxsl.AllocGlobal"/></next>
		<clone public="1" set="method" line="38">
			<f a="?resetGID" v="false">
				<x path="Bool"/>
				<c path="hxsl.AllocGlobal"/>
			</f>
			<meta><m n=":value"><e>{ resetGID : false }</e></m></meta>
		</clone>
		<new public="1" set="method" line="32"><f a="pos:path:type">
	<x path="Int"/>
	<c path="String"/>
	<e path="hxsl.Type"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.RuntimeShaderData" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/RuntimeShader.hx" module="hxsl.RuntimeShader">
		<vertex public="1"><x path="Bool"/></vertex>
		<data public="1"><t path="hxsl.ShaderData"/></data>
		<code public="1"><c path="String"/></code>
		<params public="1"><c path="hxsl.AllocParam"/></params>
		<paramsSize public="1"><x path="Int"/></paramsSize>
		<globals public="1"><c path="hxsl.AllocGlobal"/></globals>
		<globalsSize public="1"><x path="Int"/></globalsSize>
		<textures public="1"><c path="hxsl.AllocParam"/></textures>
		<texturesCount public="1"><x path="Int"/></texturesCount>
		<buffers public="1"><c path="hxsl.AllocParam"/></buffers>
		<bufferCount public="1"><x path="Int"/></bufferCount>
		<consts public="1"><c path="Array"><x path="Float"/></c></consts>
		<new public="1" set="method" line="59"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.ShaderInstanceDesc" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/RuntimeShader.hx" module="hxsl.RuntimeShader">
		<shader public="1"><c path="hxsl.SharedShader"/></shader>
		<bits public="1"><x path="Int"/></bits>
		<index public="1"><x path="Int"/></index>
		<new public="1" set="method" line="67"><f a="shader:bits">
	<c path="hxsl.SharedShader"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.RuntimeShader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/RuntimeShader.hx">
		<UID expr="0" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</UID>
		<id public="1"><x path="Int"/></id>
		<vertex public="1"><c path="hxsl.RuntimeShaderData"/></vertex>
		<fragment public="1"><c path="hxsl.RuntimeShaderData"/></fragment>
		<globals public="1"><t path="Map">
	<x path="Int"/>
	<x path="Bool"/>
</t></globals>
		<signature public="1">
			<c path="String"/>
			<haxe_doc>Signature of the resulting HxSL code.
		Several shaders with the different specification might still get the same resulting signature.</haxe_doc>
		</signature>
		<batchMode public="1"><x path="Bool"/></batchMode>
		<spec public="1"><a>
	<signature><c path="String"/></signature>
	<instances><c path="Array"><c path="hxsl.ShaderInstanceDesc"/></c></instances>
</a></spec>
		<hasGlobal public="1" get="inline" set="null" line="93"><f a="gid">
	<x path="Int"/>
	<x path="Bool"/>
</f></hasGlobal>
		<new public="1" set="method" line="89"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.Serializer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Serializer.hx">
		<TVECS expr="new Map()" line="101" static="1">
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<e path="hxsl.Type"/>
			</x>
			<meta><m n=":value"><e>new Map()</e></m></meta>
		</TVECS>
		<BOPS expr="{
	var ops = Binop.createAll();
	ops.insert(OpAssignOp(null).getIndex(), null);
	ops;
}" line="308" static="1">
			<c path="Array"><e path="haxe.macro.Binop"/></c>
			<meta><m n=":value"><e>{
	var ops = Binop.createAll();
	ops.insert(OpAssignOp(null).getIndex(), null);
	ops;
}</e></m></meta>
		</BOPS>
		<UNOPS expr="Unop.createAll()" line="313" static="1">
			<c path="Array"><e path="haxe.macro.Unop"/></c>
			<meta><m n=":value"><e>Unop.createAll()</e></m></meta>
		</UNOPS>
		<TGLOBALS expr="hxsl.TGlobal.createAll()" line="314" static="1">
			<c path="Array"><e path="hxsl.TGlobal"/></c>
			<meta><m n=":value"><e>hxsl.TGlobal.createAll()</e></m></meta>
		</TGLOBALS>
		<TSWIZ expr="new Map()" line="315" static="1">
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<c path="Array"><e path="hxsl.Component"/></c>
			</x>
			<meta><m n=":value"><e>new Map()</e></m></meta>
		</TSWIZ>
		<REGS expr="[X, Y, Z, W]" line="316" static="1">
			<c path="Array"><e path="hxsl.Component"/></c>
			<meta><m n=":value"><e>[X, Y, Z, W]</e></m></meta>
		</REGS>
		<VKINDS expr="VarKind.createAll()" line="368" static="1">
			<c path="Array"><e path="hxsl.VarKind"/></c>
			<meta><m n=":value"><e>VarKind.createAll()</e></m></meta>
		</VKINDS>
		<PRECS expr="Prec.createAll()" line="369" static="1">
			<c path="Array"><e path="hxsl.Prec"/></c>
			<meta><m n=":value"><e>Prec.createAll()</e></m></meta>
		</PRECS>
		<FKIND expr="FunctionKind.createAll()" line="414" static="1">
			<c path="Array"><e path="hxsl.FunctionKind"/></c>
			<meta><m n=":value"><e>FunctionKind.createAll()</e></m></meta>
		</FKIND>
		<SIGN expr="0x8B741D" line="426" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8B741D</e></m></meta>
		</SIGN>
		<run public="1" set="method" line="455" static="1"><f a="s">
	<t path="hxsl.ShaderData"/>
	<c path="String"/>
</f></run>
		<out><c path="haxe.io.BytesBuffer"/></out>
		<input><c path="haxe.io.BytesInput"/></input>
		<varMap><t path="Map">
	<x path="Int"/>
	<t path="hxsl.TVar"/>
</t></varMap>
		<idMap><t path="Map">
	<x path="Int"/>
	<x path="Int"/>
</t></idMap>
		<typeIdMap><t path="Map">
	<e path="hxsl.Type"/>
	<x path="Int"/>
</t></typeIdMap>
		<types><c path="Array"><e path="hxsl.Type"/></c></types>
		<uid expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</uid>
		<tid expr="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</tid>
		<writeArr params="T" get="inline" set="null" line="18"><f a="arr:f">
	<c path="Array"><c path="writeArr.T"/></c>
	<f a="">
		<c path="writeArr.T"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></writeArr>
		<readArr params="T" get="inline" set="null" line="23"><f a="f">
	<f a=""><c path="readArr.T"/></f>
	<c path="Array"><c path="readArr.T"/></c>
</f></readArr>
		<readVarInt set="method" line="27"><f a=""><x path="Int"/></f></readVarInt>
		<writeVarInt set="method" line="36"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></writeVarInt>
		<writeID set="method" line="51"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></writeID>
		<readID get="inline" set="null" line="61"><f a=""><x path="Int"/></f></readID>
		<writeTID set="method" line="65"><f a="t">
	<e path="hxsl.Type"/>
	<x path="Bool"/>
</f></writeTID>
		<writeType set="method" line="77"><f a="t">
	<e path="hxsl.Type"/>
	<x path="Void"/>
</f></writeType>
		<readType set="method" line="103"><f a=""><e path="hxsl.Type"/></f></readType>
		<writeString set="method" line="150"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeString>
		<readString set="method" line="156"><f a=""><c path="String"/></f></readString>
		<writeVar set="method" line="162"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Void"/>
</f></writeVar>
		<writeFun set="method" line="195"><f a="f">
	<t path="hxsl.TFunction"/>
	<x path="Void"/>
</f></writeFun>
		<writeConst set="method" line="203"><f a="c">
	<e path="hxsl.Const"/>
	<x path="Void"/>
</f></writeConst>
		<writeExpr set="method" line="214"><f a="e">
	<t path="hxsl.TExpr"/>
	<x path="Void"/>
</f></writeExpr>
		<readConst set="method" line="297"><f a=""><e path="hxsl.Const"/></f></readConst>
		<readExpr set="method" line="318"><f a=""><t path="hxsl.TExpr"/></f></readExpr>
		<readVar set="method" line="371"><f a=""><t path="hxsl.TVar"/></f></readVar>
		<readFun set="method" line="416"><f a=""><t path="hxsl.TFunction"/></f></readFun>
		<unserialize public="1" set="method" line="428"><f a="data">
	<c path="String"/>
	<t path="hxsl.ShaderData"/>
</f></unserialize>
		<serialize public="1" set="method" line="441"><f a="s">
	<t path="hxsl.ShaderData"/>
	<c path="String"/>
</f></serialize>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.ShaderList" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/ShaderList.hx">
		<addSort public="1" set="method" line="20" static="1"><f a="s:shaders">
	<c path="hxsl.Shader"/>
	<c path="hxsl.ShaderList"/>
	<c path="hxsl.ShaderList"/>
</f></addSort>
		<s public="1"><c path="hxsl.Shader"/></s>
		<next public="1"><c path="hxsl.ShaderList"/></next>
		<clone public="1" set="method" line="10"><f a=""><x path="Null"><c path="hxsl.ShaderList"/></x></f></clone>
		<iterator public="1" get="inline" set="null" line="13"><f a=""><c path="hxsl._ShaderList.ShaderIterator"/></f></iterator>
		<iterateTo public="1" get="inline" set="null" line="16"><f a="s">
	<c path="hxsl.ShaderList"/>
	<c path="hxsl._ShaderList.ShaderIterator"/>
</f></iterateTo>
		<new public="1" set="method" line="6"><f a="s:?n">
	<c path="hxsl.Shader"/>
	<c path="hxsl.ShaderList"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl._ShaderList.ShaderIterator" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/ShaderList.hx" private="1" module="hxsl.ShaderList">
		<l><c path="hxsl.ShaderList"/></l>
		<last><c path="hxsl.ShaderList"/></last>
		<hasNext public="1" get="inline" set="null" line="43"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="46"><f a=""><c path="hxsl.Shader"/></f></next>
		<new public="1" get="inline" set="null" line="39"><f a="l:last">
	<c path="hxsl.ShaderList"/>
	<c path="hxsl.ShaderList"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.ShaderInstance" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/SharedShader.hx" module="hxsl.SharedShader">
		<id public="1"><x path="Int"/></id>
		<shader public="1"><t path="hxsl.ShaderData"/></shader>
		<params public="1"><t path="Map">
	<x path="Int"/>
	<x path="Int"/>
</t></params>
		<new public="1" set="method" line="8"><f a="shader">
	<t path="hxsl.ShaderData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.ShaderGlobal" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/SharedShader.hx" module="hxsl.SharedShader">
		<v public="1"><t path="hxsl.TVar"/></v>
		<globalId public="1"><x path="Int"/></globalId>
		<new public="1" set="method" line="18"><f a="v:gid">
	<t path="hxsl.TVar"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.ShaderConst" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/SharedShader.hx" module="hxsl.SharedShader">
		<v public="1"><t path="hxsl.TVar"/></v>
		<pos public="1"><x path="Int"/></pos>
		<bits public="1"><x path="Int"/></bits>
		<globalId public="1"><x path="Int"/></globalId>
		<next public="1"><c path="hxsl.ShaderConst"/></next>
		<new public="1" set="method" line="30"><f a="v:pos:bits">
	<t path="hxsl.TVar"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.SharedShader" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/SharedShader.hx">
		<UNROLL_LOOPS public="1" expr="false" line="39" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</UNROLL_LOOPS>
		<data public="1"><t path="hxsl.ShaderData"/></data>
		<globals public="1"><c path="Array"><c path="hxsl.ShaderGlobal"/></c></globals>
		<consts public="1"><c path="hxsl.ShaderConst"/></consts>
		<instanceCache><t path="Map">
	<x path="Int"/>
	<c path="hxsl.ShaderInstance"/>
</t></instanceCache>
		<paramsCount><x path="Int"/></paramsCount>
		<initialize set="method" line="57"><f a=""><x path="Void"/></f></initialize>
		<getInstance public="1" get="inline" set="null" line="63"><f a="constBits">
	<x path="Int"/>
	<x path="Null"><c path="hxsl.ShaderInstance"/></x>
</f></getInstance>
		<makeInstance set="method" line="68"><f a="constBits">
	<x path="Int"/>
	<c path="hxsl.ShaderInstance"/>
</f></makeInstance>
		<addSelfParam set="method" line="95"><f a="i:v">
	<c path="hxsl.ShaderInstance"/>
	<t path="hxsl.TVar"/>
	<x path="Void"/>
</f></addSelfParam>
		<addParam set="method" line="108"><f a="eval:i:v">
	<c path="hxsl.Eval"/>
	<c path="hxsl.ShaderInstance"/>
	<t path="hxsl.TVar"/>
	<x path="Void"/>
</f></addParam>
		<browseVar set="method" line="121"><f a="v:?path">
	<t path="hxsl.TVar"/>
	<c path="String"/>
	<x path="Void"/>
</f></browseVar>
		<new public="1" set="method" line="47"><f a="src">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl._Splitter.VarProps" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Splitter.hx" private="1" module="hxsl.Splitter">
		<v public="1"><t path="hxsl.TVar"/></v>
		<read public="1"><x path="Int"/></read>
		<write public="1"><x path="Int"/></write>
		<local public="1"><x path="Bool"/></local>
		<requireInit public="1"><x path="Bool"/></requireInit>
		<new public="1" set="method" line="10"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hxsl.Splitter" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Splitter.hx">
		<vars><t path="Map">
	<x path="Int"/>
	<c path="hxsl._Splitter.VarProps"/>
</t></vars>
		<varNames><t path="Map">
	<c path="String"/>
	<t path="hxsl.TVar"/>
</t></varNames>
		<varMap><t path="Map">
	<t path="hxsl.TVar"/>
	<t path="hxsl.TVar"/>
</t></varMap>
		<split public="1" set="method" line="26"><f a="s">
	<t path="hxsl.ShaderData"/>
	<a>
		<vertex><t path="hxsl.ShaderData"/></vertex>
		<fragment><t path="hxsl.ShaderData"/></fragment>
	</a>
</f></split>
		<addExpr set="method" line="184"><f a="f:e">
	<t path="hxsl.TFunction"/>
	<t path="hxsl.TExpr"/>
	<x path="Void"/>
</f></addExpr>
		<checkVar set="method" line="193"><f a="v:vertex:vvars:p">
	<c path="hxsl._Splitter.VarProps"/>
	<x path="Bool"/>
	<t path="Map">
		<x path="Int"/>
		<c path="hxsl._Splitter.VarProps"/>
	</t>
	<t path="hxsl.Position"/>
	<x path="Void"/>
</f></checkVar>
		<mapVars set="method" line="206"><f a="e">
	<t path="hxsl.TExpr"/>
	<t path="hxsl.TExpr"/>
</f></mapVars>
		<get set="method" line="222"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Null"><c path="hxsl._Splitter.VarProps"/></x>
</f></get>
		<uniqueName set="method" line="248"><f a="v">
	<t path="hxsl.TVar"/>
	<x path="Void"/>
</f></uniqueName>
		<checkExpr set="method" line="265"><f a="e">
	<t path="hxsl.TExpr"/>
	<x path="Void"/>
</f></checkExpr>
		<new public="1" set="method" line="23"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="hxsl.Vec" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Types.hx" module="hxsl.Types"><c path="h3d.Vector"/></typedef>
	<typedef path="hxsl.IVec" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Types.hx" module="hxsl.Types"><c path="Array"><x path="Int"/></c></typedef>
	<typedef path="hxsl.BVec" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Types.hx" module="hxsl.Types"><c path="Array"><x path="Bool"/></c></typedef>
	<typedef path="hxsl.Matrix" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Types.hx" module="hxsl.Types"><c path="h3d.Matrix"/></typedef>
	<typedef path="hxsl.Texture" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Types.hx" module="hxsl.Types"><c path="h3d.mat.Texture"/></typedef>
	<typedef path="hxsl.Sampler2D" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Types.hx" module="hxsl.Types"><c path="h3d.mat.Texture"/></typedef>
	<typedef path="hxsl.Sampler2DArray" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Types.hx" module="hxsl.Types"><c path="h3d.mat.TextureArray"/></typedef>
	<typedef path="hxsl.SamplerCube" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Types.hx" module="hxsl.Types"><c path="h3d.mat.Texture"/></typedef>
	<typedef path="hxsl.ChannelTextureType" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Types.hx" module="hxsl.Types"><c path="h3d.mat.Texture"/></typedef>
	<typedef path="hxsl.Buffer" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Types.hx" module="hxsl.Types"><c path="h3d.Buffer"/></typedef>
	<class path="hxsl.ChannelTools" params="" file="/usr/local/lib/haxeLibrary/heaps/1,9,1/hxsl/Types.hx" module="hxsl.Types"><isPackedFormat public="1" get="inline" set="null" line="15" static="1"><f a="c">
	<t path="hxsl.ChannelTextureType"/>
	<x path="Bool"/>
</f></isPackedFormat></class>
	<class path="js.html.EventTarget" params="" file="/usr/local/lib/haxe/std/js/html/EventTarget.hx" extern="1">
		<addEventListener public="1" set="method">
			<f a="type:listener:?options:?wantsUntrusted">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="haxe.extern.EitherType">
					<t path="js.html.AddEventListenerOptions"/>
					<x path="Bool"/>
				</x>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Register an event handler of a specific event type on the `EventTarget`.
		@throws DOMError</haxe_doc>
			<overloads><addEventListener public="1" set="method">
	<f a="type:listener:?options:?wantsUntrusted">
		<c path="String"/>
		<t path="js.html.EventListener"/>
		<x path="haxe.extern.EitherType">
			<t path="js.html.AddEventListenerOptions"/>
			<x path="Bool"/>
		</x>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Register an event handler of a specific event type on the `EventTarget`.
		@throws DOMError</haxe_doc>
</addEventListener></overloads>
		</addEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?options">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="haxe.extern.EitherType">
					<t path="js.html.EventListenerOptions"/>
					<x path="Bool"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an event listener from the `EventTarget`.
		@throws DOMError</haxe_doc>
			<overloads><removeEventListener public="1" set="method">
	<f a="type:listener:?options">
		<c path="String"/>
		<t path="js.html.EventListener"/>
		<x path="haxe.extern.EitherType">
			<t path="js.html.EventListenerOptions"/>
			<x path="Bool"/>
		</x>
		<x path="Void"/>
	</f>
	<haxe_doc>Removes an event listener from the `EventTarget`.
		@throws DOMError</haxe_doc>
</removeEventListener></overloads>
		</removeEventListener>
		<dispatchEvent public="1" set="method">
			<f a="event">
				<c path="js.html.Event"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Dispatch an event to this `EventTarget`.
		@throws DOMError</haxe_doc>
		</dispatchEvent>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`EventTarget` is an interface implemented by objects that can receive events and may have listeners for them.

	Documentation [EventTarget](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EventTarget>]]></haxe_doc>
		<meta><m n=":native"><e>"EventTarget"</e></m></meta>
	</class>
	<class path="js.html.AbortSignal" params="" file="/usr/local/lib/haxe/std/js/html/AbortSignal.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<aborted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that indicates whether the request(s) the signal is communicating with is/are aborted (`true`) or not (`false`).</haxe_doc>
		</aborted>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Invoked when an `abort_(dom_abort_api)` event fires, i.e. when the DOM request(s) the signal is communicating with is/are aborted.</haxe_doc>
		</onabort>
		<haxe_doc><![CDATA[The `AbortSignal` interface represents a signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an `AbortController` object.

	Documentation [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal>]]></haxe_doc>
		<meta><m n=":native"><e>"AbortSignal"</e></m></meta>
	</class>
	<typedef path="js.html.AddEventListenerOptions" params="" file="/usr/local/lib/haxe/std/js/html/AddEventListenerOptions.hx"><a>
	<passive>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</passive>
	<once>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</once>
	<capture>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</capture>
</a></typedef>
	<abstract path="js.html.AlignSetting" params="" file="/usr/local/lib/haxe/std/js/html/AlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AlignSetting.AlignSetting_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/AlignSetting.hx" private="1" module="js.html.AlignSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Node" params="" file="/usr/local/lib/haxe/std/js/html/Node.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ELEMENT_NODE public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ELEMENT_NODE>
		<ATTRIBUTE_NODE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</ATTRIBUTE_NODE>
		<TEXT_NODE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TEXT_NODE>
		<CDATA_SECTION_NODE public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</CDATA_SECTION_NODE>
		<ENTITY_REFERENCE_NODE public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ENTITY_REFERENCE_NODE>
		<ENTITY_NODE public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</ENTITY_NODE>
		<PROCESSING_INSTRUCTION_NODE public="1" get="inline" set="null" expr="7" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</PROCESSING_INSTRUCTION_NODE>
		<COMMENT_NODE public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</COMMENT_NODE>
		<DOCUMENT_NODE public="1" get="inline" set="null" expr="9" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</DOCUMENT_NODE>
		<DOCUMENT_TYPE_NODE public="1" get="inline" set="null" expr="10" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</DOCUMENT_TYPE_NODE>
		<DOCUMENT_FRAGMENT_NODE public="1" get="inline" set="null" expr="11" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</DOCUMENT_FRAGMENT_NODE>
		<NOTATION_NODE public="1" get="inline" set="null" expr="12" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</NOTATION_NODE>
		<DOCUMENT_POSITION_DISCONNECTED public="1" get="inline" set="null" expr="1" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DOCUMENT_POSITION_DISCONNECTED>
		<DOCUMENT_POSITION_PRECEDING public="1" get="inline" set="null" expr="2" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOCUMENT_POSITION_PRECEDING>
		<DOCUMENT_POSITION_FOLLOWING public="1" get="inline" set="null" expr="4" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</DOCUMENT_POSITION_FOLLOWING>
		<DOCUMENT_POSITION_CONTAINS public="1" get="inline" set="null" expr="8" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</DOCUMENT_POSITION_CONTAINS>
		<DOCUMENT_POSITION_CONTAINED_BY public="1" get="inline" set="null" expr="16" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOCUMENT_POSITION_CONTAINED_BY>
		<DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC public="1" get="inline" set="null" expr="32" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>
		<nodeType public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> representing the type of the node. Possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    Name
		    Value
		   </tr>
		   <tr>
		    <td><code>ELEMENT_NODE</code></td>
		    <td><code>1</code></td>
		   </tr>
		   <tr>
		    <td><code>ATTRIBUTE_NODE</code> <em>(deprecated)</em></td>
		    <td><code>2</code></td>
		   </tr>
		   <tr>
		    <td><code>TEXT_NODE</code></td>
		    <td><code>3</code></td>
		   </tr>
		   <tr>
		    <td><code>CDATA_SECTION_NODE</code> <em>(deprecated)</em></td>
		    <td><code>4</code></td>
		   </tr>
		   <tr>
		    <td><code>ENTITY_REFERENCE_NODE</code> <em>(deprecated)</em></td>
		    <td><code>5</code></td>
		   </tr>
		   <tr>
		    <td><code>ENTITY_NODE</code> <em>(deprecated)</em></td>
		    <td><code>6</code></td>
		   </tr>
		   <tr>
		    <td><code>PROCESSING_INSTRUCTION_NODE</code></td>
		    <td><code>7</code></td>
		   </tr>
		   <tr>
		    <td><code>COMMENT_NODE</code></td>
		    <td><code>8</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_NODE</code></td>
		    <td><code>9</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_TYPE_NODE</code></td>
		    <td><code>10</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_FRAGMENT_NODE</code></td>
		    <td><code>11</code></td>
		   </tr>
		   <tr>
		    <td><code>NOTATION_NODE</code> <em>(deprecated)</em></td>
		    <td><code>12</code></td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</nodeType>
		<nodeName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the name of the `Node`. The structure of the name will differ with the node type. E.g. An `HTMLElement` will contain the name of the corresponding tag, like `'audio'` for an `HTMLAudioElement`, a `Text` node will have the `'#text'` string, or a `Document` node will have the `'#document'` string.</haxe_doc>
		</nodeName>
		<baseURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the base URL. The concept of base URL changes from one language to another; in HTML, it corresponds to the protocol, the domain name and the directory structure, that is all until the last `'/'`.</haxe_doc>
		</baseURI>
		<isConnected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a boolean indicating whether or not the Node is connected (directly or indirectly) to the context object, e.g. the `Document` object in the case of the normal DOM, or the `ShadowRoot` in the case of a shadow DOM.</haxe_doc>
		</isConnected>
		<ownerDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns the `Document` that this node belongs to. If the node is itself a document, returns `null`.</haxe_doc>
		</ownerDocument>
		<parentNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` that is the parent of this node. If there is no such node, like if this node is the top of the tree or if doesn't participate in a tree, this property returns `null`.</haxe_doc>
		</parentNode>
		<parentElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns an `Element` that is the parent of this node. If the node has no parent, or if that parent is not an `Element`, this property returns `null`.</haxe_doc>
		</parentElement>
		<childNodes public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Returns a live `NodeList` containing all the children of this node. `NodeList` being live means that if the children of the `Node` change, the `NodeList` object is automatically updated.</haxe_doc>
		</childNodes>
		<firstChild public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the first direct child node of the node, or `null` if the node has no child.</haxe_doc>
		</firstChild>
		<lastChild public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the last direct child node of the node, or `null` if the node has no child.</haxe_doc>
		</lastChild>
		<previousSibling public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the previous node in the tree, or `null` if there isn't such node.</haxe_doc>
		</previousSibling>
		<nextSibling public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the next node in the tree, or `null` if there isn't such node.</haxe_doc>
		</nextSibling>
		<nodeValue public="1">
			<c path="String"/>
			<haxe_doc>Returns / Sets the value of the current node</haxe_doc>
		</nodeValue>
		<textContent public="1">
			<c path="String"/>
			<haxe_doc>Returns / Sets the textual content of an element and all its descendants.</haxe_doc>
		</textContent>
		<getRootNode public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.GetRootNodeOptions"/></x>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Returns the context object's root which optionally includes the shadow root if it is available. </haxe_doc>
		</getRootNode>
		<hasChildNodes public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if the element has any child nodes, or not.</haxe_doc>
		</hasChildNodes>
		<insertBefore public="1" set="method">
			<f a="node:child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Inserts a `Node` before the reference node as a child of a specified parent node.
		@throws DOMError</haxe_doc>
		</insertBefore>
		<appendChild public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Adds the specified childNode argument as the last child to the current node.
		
		 If the argument referenced an existing node on the DOM tree, the node will be detached from its current position and attached at the new position.
		@throws DOMError</haxe_doc>
		</appendChild>
		<replaceChild public="1" set="method">
			<f a="node:child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Replaces one child `Node` of the current one with the second one given in parameter.
		@throws DOMError</haxe_doc>
		</replaceChild>
		<removeChild public="1" set="method">
			<f a="child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Removes a child node from the current element, which must be a child of the current node.
		@throws DOMError</haxe_doc>
		</removeChild>
		<normalize public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clean up all the text nodes under this element (merge adjacent, remove empty).</haxe_doc>
		</normalize>
		<cloneNode public="1" set="method">
			<f a="?deep" v="false">
				<x path="Bool"/>
				<c path="js.html.Node"/>
			</f>
			<meta><m n=":value"><e>{ deep : false }</e></m></meta>
			<haxe_doc>Clone a `Node`, and optionally, all of its contents. By default, it clones the content of the node.
		@throws DOMError</haxe_doc>
		</cloneNode>
		<isSameNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` value indicating whether or not the two nodes are the same (that is, they reference the same object).</haxe_doc>
		</isSameNode>
		<isEqualNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` which indicates whether or not two nodes are of the same type and all their defining data points match.</haxe_doc>
		</isEqualNode>
		<compareDocumentPosition public="1" set="method">
			<f a="other">
				<c path="js.html.Node"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares the position of the current node against another node in any other document.</haxe_doc>
		</compareDocumentPosition>
		<contains public="1" set="method">
			<f a="other">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` value indicating whether a node is a descendant of a given node or not.</haxe_doc>
		</contains>
		<lookupPrefix public="1" set="method">
			<f a="namespace">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString` containing the prefix for a given namespace URI, if present, and `null` if not. When multiple prefixes are possible, the result is implementation-dependent.</haxe_doc>
		</lookupPrefix>
		<lookupNamespaceURI public="1" set="method">
			<f a="prefix">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Accepts a prefix and returns the namespace URI associated with it on the given node if found (and `null` if not). Supplying `null` for the prefix will return the default namespace.</haxe_doc>
		</lookupNamespaceURI>
		<isDefaultNamespace public="1" set="method">
			<f a="namespace">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Accepts a namespace URI as an argument and returns a `Boolean` with a value of `true` if the namespace is the default namespace on the given node or `false` if not.</haxe_doc>
		</isDefaultNamespace>
		<haxe_doc><![CDATA[`Node` is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.

	Documentation [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Node$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Node>]]></haxe_doc>
		<meta><m n=":native"><e>"Node"</e></m></meta>
	</class>
	<class path="js.html.DOMElement" params="" file="/usr/local/lib/haxe/std/js/html/DOMElement.hx" extern="1">
		<extends path="js.html.Node"/>
		<namespaceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>The namespace URI of the element, or `null` if it is no namespace.
		 
		 Note: In Firefox 3.5 and earlier, HTML elements are in no namespace. In later versions, HTML elements are in the `http://www.w3.org/1999/xhtml` namespace in both HTML and XML trees. `1.9.2`</haxe_doc>
		</namespaceURI>
		<prefix public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace prefix of the element, or `null` if no prefix is specified.</haxe_doc>
		</prefix>
		<localName public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the local part of the qualified name of the element.</haxe_doc>
		</localName>
		<tagName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `String` with the name of the tag for the given element.</haxe_doc>
		</tagName>
		<id public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the id of the element.</haxe_doc>
		</id>
		<className public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the class of the element.</haxe_doc>
		</className>
		<classList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` containing the list of class attributes.</haxe_doc>
		</classList>
		<attributes public="1" set="null">
			<c path="js.html.NamedNodeMap"/>
			<haxe_doc>Returns a `NamedNodeMap` object containing the assigned attributes of the corresponding HTML element.</haxe_doc>
		</attributes>
		<title public="1"><c path="String"/></title>
		<lang public="1"><c path="String"/></lang>
		<dir public="1"><c path="String"/></dir>
		<dataset public="1" set="null"><c path="js.html.DOMStringMap"/></dataset>
		<innerText public="1"><c path="String"/></innerText>
		<itemScope public="1"><x path="Bool"/></itemScope>
		<itemType public="1" set="null"><c path="js.html.DOMTokenList"/></itemType>
		<itemId public="1"><c path="String"/></itemId>
		<itemRef public="1" set="null"><c path="js.html.DOMTokenList"/></itemRef>
		<itemProp public="1" set="null"><c path="js.html.DOMTokenList"/></itemProp>
		<properties public="1" set="null"><c path="js.html.HTMLPropertiesCollection"/></properties>
		<itemValue public="1"><d/></itemValue>
		<hidden public="1"><x path="Bool"/></hidden>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<accessKey public="1"><c path="String"/></accessKey>
		<accessKeyLabel public="1" set="null"><c path="String"/></accessKeyLabel>
		<draggable public="1"><x path="Bool"/></draggable>
		<contentEditable public="1"><c path="String"/></contentEditable>
		<isContentEditable public="1" set="null"><x path="Bool"/></isContentEditable>
		<contextMenu public="1" set="null"><c path="js.html.MenuElement"/></contextMenu>
		<spellcheck public="1"><x path="Bool"/></spellcheck>
		<style public="1" set="null"><c path="js.html.CSSStyleDeclaration"/></style>
		<oncopy public="1"><x path="haxe.Function"/></oncopy>
		<oncut public="1"><x path="haxe.Function"/></oncut>
		<onpaste public="1"><x path="haxe.Function"/></onpaste>
		<offsetParent public="1" set="null"><c path="js.html.Element"/></offsetParent>
		<offsetTop public="1" set="null"><x path="Int"/></offsetTop>
		<offsetLeft public="1" set="null"><x path="Int"/></offsetLeft>
		<offsetWidth public="1" set="null"><x path="Int"/></offsetWidth>
		<offsetHeight public="1" set="null"><x path="Int"/></offsetHeight>
		<scrollTop public="1">
			<x path="Int"/>
			<haxe_doc>A `Number` representing number of pixels the top of the document is scrolled vertically.</haxe_doc>
		</scrollTop>
		<scrollLeft public="1">
			<x path="Int"/>
			<haxe_doc>Is a `Number` representing the left scroll offset of the element.</haxe_doc>
		</scrollLeft>
		<scrollWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the scroll view width of the element.</haxe_doc>
		</scrollWidth>
		<scrollHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the scroll view height of an element.</haxe_doc>
		</scrollHeight>
		<clientTop public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the width of the top border of the element.</haxe_doc>
		</clientTop>
		<clientLeft public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the width of the left border of the element.</haxe_doc>
		</clientLeft>
		<clientWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the inner width of the element.</haxe_doc>
		</clientWidth>
		<clientHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the inner height of the element.</haxe_doc>
		</clientHeight>
		<scrollTopMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the maximum top scroll offset possible for the element.</haxe_doc>
		</scrollTopMax>
		<scrollLeftMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the maximum left scroll offset possible for the element.</haxe_doc>
		</scrollLeftMax>
		<innerHTML public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the markup of the element's content.</haxe_doc>
		</innerHTML>
		<outerHTML public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string.</haxe_doc>
		</outerHTML>
		<shadowRoot public="1" set="null">
			<c path="js.html.ShadowRoot"/>
			<haxe_doc>Returns the open shadow root that is hosted by the element, or null if no open shadow root is present.</haxe_doc>
		</shadowRoot>
		<assignedSlot public="1" set="null"><c path="js.html.SlotElement"/></assignedSlot>
		<slot public="1">
			<c path="String"/>
			<haxe_doc>Returns the name of the shadow DOM slot the element is inserted in.</haxe_doc>
		</slot>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handling code for the `wheel` event. This is now implemented on `GlobalEventHandlers.onwheel`.</haxe_doc>
		</onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handler for the `gotpointercapture` event type.</haxe_doc>
		</ongotpointercapture>
		<onlostpointercapture public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Returns the event handler for the `lostpointercapture` event type.</haxe_doc>
		</onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<previousElementSibling public="1" set="null"><c path="js.html.Element"/></previousElementSibling>
		<nextElementSibling public="1" set="null"><c path="js.html.Element"/></nextElementSibling>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<getAttributeNames public="1" set="method">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an array of attribute names from the current element.</haxe_doc>
		</getAttributeNames>
		<getAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the value of the named attribute from the current node and returns it as an `Object`.</haxe_doc>
		</getAttribute>
		<getAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the value of the attribute with the specified name and namespace, from the current node and returns it as an `Object`.</haxe_doc>
		</getAttributeNS>
		<toggleAttribute public="1" set="method">
			<f a="name:?force">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Toggles a boolean attribute, removing it if it is present and adding it if it is not present, on the specified element.
		@throws DOMError</haxe_doc>
		</toggleAttribute>
		<setAttribute public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of a named attribute of the current node.
		@throws DOMError</haxe_doc>
		</setAttribute>
		<setAttributeNS public="1" set="method">
			<f a="namespace:name:value">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNS>
		<removeAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</removeAttribute>
		<removeAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</removeAttributeNS>
		<hasAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if the element has the specified attribute or not.</haxe_doc>
		</hasAttribute>
		<hasAttributeNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if the element has the specified attribute, in the specified namespace, or not.</haxe_doc>
		</hasAttributeNS>
		<hasAttributes public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if the element has one or more HTML attributes present.</haxe_doc>
		</hasAttributes>
		<closest public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the `Element` which is the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter.
		@throws DOMError</haxe_doc>
		</closest>
		<matches public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating whether or not the element would be selected by the specified selector string.
		@throws DOMError</haxe_doc>
		</matches>
		<webkitMatchesSelector public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</webkitMatchesSelector>
		<getElementsByTagName public="1" set="method">
			<f a="localName">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` containing all descendant elements, of a particular tag name, from the current element.</haxe_doc>
		</getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` containing all descendant elements, of a particular tag name and namespace, from the current element.
		@throws DOMError</haxe_doc>
		</getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method">
			<f a="classNames">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a live `HTMLCollection` that contains all descendants of the current element that possess the list of classes given in the parameter.</haxe_doc>
		</getElementsByClassName>
		<insertAdjacentElement public="1" set="method">
			<f a="where:element">
				<c path="String"/>
				<c path="js.html.Element"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Inserts a given element node at a given position relative to the element it is invoked upon.
		@throws DOMError</haxe_doc>
		</insertAdjacentElement>
		<insertAdjacentText public="1" set="method">
			<f a="where:data">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a given text node at a given position relative to the element it is invoked upon.
		@throws DOMError</haxe_doc>
		</insertAdjacentText>
		<setPointerCapture public="1" set="method">
			<f a="pointerId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Designates a specific element as the capture target of future pointer events.
		@throws DOMError</haxe_doc>
		</setPointerCapture>
		<releasePointerCapture public="1" set="method">
			<f a="pointerId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Releases (stops) pointer capture that was previously set for a specific `PointerEvent`.
		@throws DOMError</haxe_doc>
		</releasePointerCapture>
		<hasPointerCapture public="1" set="method"><f a="pointerId">
	<x path="Int"/>
	<x path="Bool"/>
</f></hasPointerCapture>
		<setCapture public="1" set="method">
			<f a="?retargetToElement" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ retargetToElement : false }</e></m></meta>
			<haxe_doc>Sets up mouse event capture, redirecting all mouse events to this element.</haxe_doc>
		</setCapture>
		<releaseCapture public="1" set="method"><f a=""><x path="Void"/></f></releaseCapture>
		<getAttributeNode public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Retrieves the node representation of the named attribute from the current node and returns it as an `Attr`.</haxe_doc>
		</getAttributeNode>
		<setAttributeNode public="1" set="method">
			<f a="newAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Sets the node representation of the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNode>
		<removeAttributeNode public="1" set="method">
			<f a="oldAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the node representation of the named attribute from the current node.
		@throws DOMError</haxe_doc>
		</removeAttributeNode>
		<getAttributeNodeNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Retrieves the node representation of the attribute with the specified name and namespace, from the current node and returns it as an `Attr`.</haxe_doc>
		</getAttributeNodeNS>
		<setAttributeNodeNS public="1" set="method">
			<f a="newAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Sets the node representation of the attribute with the specified name and namespace, from the current node.
		@throws DOMError</haxe_doc>
		</setAttributeNodeNS>
		<click public="1" set="method"><f a=""><x path="Void"/></f></click>
		<focus public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blur>
		<getClientRects public="1" set="method">
			<f a=""><c path="js.html.DOMRectList"/></f>
			<haxe_doc>Returns a collection of rectangles that indicate the bounding rectangles for each line of text in a client.</haxe_doc>
		</getClientRects>
		<getBoundingClientRect public="1" set="method">
			<f a=""><c path="js.html.DOMRect"/></f>
			<haxe_doc>Returns the size of an element and its position relative to the viewport.</haxe_doc>
		</getBoundingClientRect>
		<scrollIntoView public="1" set="method">
			<f a="?arg">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the page until the element gets into the view.</haxe_doc>
			<overloads><scrollIntoView public="1" set="method">
	<f a="?arg">
		<x path="Null"><t path="js.html.ScrollIntoViewOptions"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the page until the element gets into the view.</haxe_doc>
</scrollIntoView></overloads>
		</scrollIntoView>
		<scroll public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scroll public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scroll></overloads>
		</scroll>
		<scrollTo public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scrollTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scrollTo></overloads>
		</scrollTo>
		<scrollBy public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><scrollBy public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scrollBy></overloads>
		</scrollBy>
		<insertAdjacentHTML public="1" set="method">
			<f a="position:text">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Parses the text as HTML or XML and inserts the resulting nodes into the tree in the position given.
		@throws DOMError</haxe_doc>
		</insertAdjacentHTML>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Node` which matches the specified selector string relative to the element.
		@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>Returns a `NodeList` of nodes which match the specified selector string relative to the element.
		@throws DOMError</haxe_doc>
		</querySelectorAll>
		<attachShadow public="1" set="method">
			<f a="shadowRootInitDict">
				<t path="js.html.ShadowRootInit"/>
				<c path="js.html.ShadowRoot"/>
			</f>
			<haxe_doc>Attatches a shadow DOM tree to the specified element and returns a reference to its `ShadowRoot`.
		@throws DOMError</haxe_doc>
		</attachShadow>
		<requestFullscreen public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Asynchronously asks the browser to make the element full-screen.
		@throws DOMError</haxe_doc>
		</requestFullscreen>
		<requestPointerLock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Allows to asynchronously ask for the pointer to be locked on the given element.</haxe_doc>
		</requestPointerLock>
		<animate public="1" set="method">
			<f a="keyframes:?options">
				<d/>
				<x path="Float"/>
				<c path="js.html.Animation"/>
			</f>
			<haxe_doc>A shortcut method to create and run an animation on an element. Returns the created Animation object instance.
		@throws DOMError</haxe_doc>
			<overloads><animate public="1" set="method">
	<f a="keyframes:?options">
		<d/>
		<x path="Null"><t path="js.html.KeyframeAnimationOptions"/></x>
		<c path="js.html.Animation"/>
	</f>
	<haxe_doc>A shortcut method to create and run an animation on an element. Returns the created Animation object instance.
		@throws DOMError</haxe_doc>
</animate></overloads>
		</animate>
		<getAnimations public="1" set="method">
			<f a="?filter">
				<x path="Null"><t path="js.html.AnimationFilter"/></x>
				<c path="Array"><c path="js.html.Animation"/></c>
			</f>
			<haxe_doc>Returns an array of Animation objects currently active on the element.</haxe_doc>
		</getAnimations>
		<before public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<prepend public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<haxe_doc><![CDATA[`Element` is the most general base class from which all objects in a `Document` inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from `Element`.

	Documentation [Element](https://developer.mozilla.org/en-US/docs/Web/API/Element) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Element$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Element>]]></haxe_doc>
		<meta><m n=":native"><e>"Element"</e></m></meta>
	</class>
	<class path="js.html.Element" params="" file="/usr/local/lib/haxe/std/js/html/Element.hx" extern="1">
		<extends path="js.html.DOMElement"/>
		<click public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sends a mouse click event to the element.</haxe_doc>
		</click>
		<focus public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Makes the element the current keyboard focus.
		@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes keyboard focus from the currently focused element.
		@throws DOMError</haxe_doc>
		</blur>
		<haxe_doc><![CDATA[The `HTMLElement` interface represents any HTML element. Some elements directly implement this interface, others implement it via an interface that inherits it.

	Documentation [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLElement"</e></m></meta>
	</class>
	<class path="js.html.AnchorElement" params="" file="/usr/local/lib/haxe/std/js/html/AnchorElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, indicating where to display the linked resource.</haxe_doc>
		</target>
		<download public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.</haxe_doc>
		</download>
		<ping public="1"><c path="String"/></ping>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `rel` HTML attribute, specifying the relationship of the target object to the linked object.</haxe_doc>
		</rel>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use.</haxe_doc>
		</referrerPolicy>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` that reflects the `rel` HTML attribute, as a list of tokens.</haxe_doc>
		</relList>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `hreflang` HTML attribute, indicating the language of the linked resource.</haxe_doc>
		</hreflang>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, indicating the MIME type of the linked resource.</haxe_doc>
		</type>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being a synonym for the `Node.textContent` property.</haxe_doc>
		</text>
		<coords public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing a comma-separated list of coordinates.</haxe_doc>
		</coords>
		<charset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the character encoding of the linked resource.</haxe_doc>
		</charset>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the anchor name.</haxe_doc>
		</name>
		<rev public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing that the `rev` HTML attribute, specifying the relationship of the link object to the target object.
		 Note: Currently the W3C HTML 5.2 spec states that `rev` is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.</haxe_doc>
		</rev>
		<shape public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the shape of the active area.</haxe_doc>
		</shape>
		<href public="1"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1"><c path="String"/></protocol>
		<username public="1"><c path="String"/></username>
		<password public="1"><c path="String"/></password>
		<host public="1"><c path="String"/></host>
		<hostname public="1"><c path="String"/></hostname>
		<port public="1"><c path="String"/></port>
		<pathname public="1"><c path="String"/></pathname>
		<search public="1"><c path="String"/></search>
		<hash public="1"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `HTMLAnchorElement` interface represents hyperlink elements and provides special properties and methods (beyond those of the regular `HTMLElement` object interface that they inherit from) for manipulating the layout and presentation of such elements.

	Documentation [HTMLAnchorElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAnchorElement"</e></m></meta>
	</class>
	<class path="js.html.Animation" params="" file="/usr/local/lib/haxe/std/js/html/Animation.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<id public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the `String` used to identify the animation.</haxe_doc>
		</id>
		<effect public="1">
			<c path="js.html.AnimationEffect"/>
			<haxe_doc>Gets and sets the `AnimationEffectReadOnly` associated with this animation. This will usually be a `KeyframeEffect` object.</haxe_doc>
		</effect>
		<timeline public="1">
			<c path="js.html.AnimationTimeline"/>
			<haxe_doc>Gets or sets the `AnimationTimeline` associated with this animation.</haxe_doc>
		</timeline>
		<startTime public="1">
			<x path="Float"/>
			<haxe_doc>Gets or sets the scheduled time when an animation's playback should begin.</haxe_doc>
		</startTime>
		<currentTime public="1">
			<x path="Float"/>
			<haxe_doc>The current time value of the animation in milliseconds, whether running or paused. If the animation lacks a `AnimationTimeline`, is inactive or hasn't been played yet, its value is `null`.</haxe_doc>
		</currentTime>
		<playbackRate public="1">
			<x path="Float"/>
			<haxe_doc>Gets or sets the playback rate of the animation.</haxe_doc>
		</playbackRate>
		<playState public="1" set="null">
			<x path="js.html.AnimationPlayState"/>
			<haxe_doc>Returns an enumerated value describing the playback state of an animation.</haxe_doc>
		</playState>
		<pending public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the animation is currently waiting for an asynchronous operation such as initiating playback or pausing a running animation.</haxe_doc>
		</pending>
		<ready public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.Animation"/></c>
			<haxe_doc>Returns the current ready Promise for this animation.</haxe_doc>
		</ready>
		<finished public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.Animation"/></c>
			<haxe_doc>Returns the current finished Promise for this animation.</haxe_doc>
		</finished>
		<onfinish public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Gets and sets the event handler for the `finish` event.</haxe_doc>
		</onfinish>
		<oncancel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Gets and sets the event handler for the `cancel` event.</haxe_doc>
		</oncancel>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears all `KeyframeEffect` caused by this animation and aborts its playback.</haxe_doc>
		</cancel>
		<finish public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Seeks either end of an animation, depending on whether the animation is playing or reversing.
		@throws DOMError</haxe_doc>
		</finish>
		<play public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Starts or resumes playing of an animation, or begins the animation again if it previously finished.
		@throws DOMError</haxe_doc>
		</play>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Suspends playing of an animation.
		@throws DOMError</haxe_doc>
		</pause>
		<updatePlaybackRate public="1" set="method">
			<f a="playbackRate">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the speed of an animation after first synchronizing its playback position.</haxe_doc>
		</updatePlaybackRate>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Reverses playback direction, stopping at the start of the animation. If the animation is finished or unplayed, it will play from end to beginning.
		@throws DOMError</haxe_doc>
		</reverse>
		<new public="1" set="method">
			<f a="?effect:?timeline">
				<c path="js.html.AnimationEffect"/>
				<c path="js.html.AnimationTimeline"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Animation` interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.

	Documentation [Animation](https://developer.mozilla.org/en-US/docs/Web/API/Animation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Animation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Animation>]]></haxe_doc>
		<meta><m n=":native"><e>"Animation"</e></m></meta>
	</class>
	<class path="js.html.AnimationEffect" params="" file="/usr/local/lib/haxe/std/js/html/AnimationEffect.hx" extern="1">
		<getTiming public="1" set="method"><f a=""><t path="js.html.EffectTiming"/></f></getTiming>
		<getComputedTiming public="1" set="method"><f a=""><t path="js.html.ComputedEffectTiming"/></f></getComputedTiming>
		<updateTiming public="1" set="method">
			<f a="?timing">
				<x path="Null"><t path="js.html.OptionalEffectTiming"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</updateTiming>
		<haxe_doc><![CDATA[The `AnimationEffect` interface of the Web Animations API defines current and future animation effects like `KeyframeEffect`, which can be passed to `Animation` objects for playing, and `KeyframeEffectReadOnly` (which is used by CSS Animations and Transitions).

	Documentation [AnimationEffect](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationEffect"</e></m></meta>
	</class>
	<typedef path="js.html.AnimationFilter" params="" file="/usr/local/lib/haxe/std/js/html/AnimationFilter.hx"><a><subtree>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</subtree></a></typedef>
	<abstract path="js.html.AnimationPlayState" params="" file="/usr/local/lib/haxe/std/js/html/AnimationPlayState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AnimationPlayState.AnimationPlayState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/AnimationPlayState.hx" private="1" module="js.html.AnimationPlayState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.AnimationTimeline" params="" file="/usr/local/lib/haxe/std/js/html/AnimationTimeline.hx" extern="1">
		<currentTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the time value in milliseconds for this timeline or `null` if this timeline is inactive.</haxe_doc>
		</currentTime>
		<haxe_doc><![CDATA[The `AnimationTimeline` interface of the Web Animations API represents the timeline of an animation. This interface exists to define timeline features (inherited by `DocumentTimeline` and future timeline types) and is not itself directly used by developers. Anywhere you see `AnimationTimeline`, you should use `DocumentTimeline` or any other timeline type instead.

	Documentation [AnimationTimeline](https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationTimeline"</e></m></meta>
	</class>
	<class path="js.html.AreaElement" params="" file="/usr/local/lib/haxe/std/js/html/AreaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<alt public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `alt` HTML attribute, containing alternative text for the element.</haxe_doc>
		</alt>
		<coords public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `coords` HTML attribute, containing coordinates to define the hot-spot region.</haxe_doc>
		</coords>
		<shape public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `shape` HTML attribute, indicating the shape of the hot-spot, limited to known values.</haxe_doc>
		</shape>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, indicating the browsing context in which to open the linked resource.</haxe_doc>
		</target>
		<download public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.</haxe_doc>
		</download>
		<ping public="1"><c path="String"/></ping>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `rel` HTML attribute, indicating relationships of the current document to the linked resource.</haxe_doc>
		</rel>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use when fetching the linked resource.</haxe_doc>
		</referrerPolicy>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` that reflects the `rel` HTML attribute, indicating relationships of the current document to the linked resource, as a list of tokens.</haxe_doc>
		</relList>
		<noHref public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` flag indicating if the area is inactive (`true`) or active (`false`).</haxe_doc>
		</noHref>
		<href public="1"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1"><c path="String"/></protocol>
		<username public="1"><c path="String"/></username>
		<password public="1"><c path="String"/></password>
		<host public="1"><c path="String"/></host>
		<hostname public="1"><c path="String"/></hostname>
		<port public="1"><c path="String"/></port>
		<pathname public="1"><c path="String"/></pathname>
		<search public="1"><c path="String"/></search>
		<hash public="1"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `HTMLAreaElement` interface provides special properties and methods (beyond those of the regular object `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of area elements.

	Documentation [HTMLAreaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAreaElement"</e></m></meta>
	</class>
	<typedef path="js.html.AssignedNodesOptions" params="" file="/usr/local/lib/haxe/std/js/html/AssignedNodesOptions.hx"><a><flatten>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</flatten></a></typedef>
	<class path="js.html.Attr" params="" file="/usr/local/lib/haxe/std/js/html/Attr.hx" extern="1">
		<extends path="js.html.Node"/>
		<localName public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the local part of the qualified name of the attribute.</haxe_doc>
		</localName>
		<value public="1">
			<c path="String"/>
			<haxe_doc>The attribute's value.</haxe_doc>
		</value>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The attribute's name.</haxe_doc>
		</name>
		<namespaceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace URI of the attribute, or `null` if there is no namespace.</haxe_doc>
		</namespaceURI>
		<prefix public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the namespace prefix of the attribute, or `null` if no prefix is specified.</haxe_doc>
		</prefix>
		<specified public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>This property always returns `true`. Originally, it returned `true `if the attribute was explicitly specified in the source code or by a script, and `false` if its value came from the default one defined in the document's DTD.</haxe_doc>
		</specified>
		<ownerElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>The element holding the attribute.
		
			
			Note: DOM Level 4 removed this property. The assumption was that since you get an `Attr` object from an `Element`, you should already know the associated element.
		
			As that doesn't hold true in cases like `Attr` objects being returned by `Document.evaluate`, the DOM Living Standard reintroduced the property.
		
			Gecko outputs a deprecation note starting from Gecko 7.0 `7.0`. This note was removed again in Gecko 49.0 `49.0`.</haxe_doc>
		</ownerElement>
		<haxe_doc><![CDATA[This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., `Element.getAttribute()`, but certain functions (e.g., `Element.getAttributeNode()`) or means of iterating give `Attr` types.

	Documentation [Attr](https://developer.mozilla.org/en-US/docs/Web/API/Attr) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Attr$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Attr>]]></haxe_doc>
		<meta><m n=":native"><e>"Attr"</e></m></meta>
	</class>
	<class path="js.html.MediaElement" params="" file="/usr/local/lib/haxe/std/js/html/MediaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<NETWORK_EMPTY public="1" get="inline" set="null" expr="0" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NETWORK_EMPTY>
		<NETWORK_IDLE public="1" get="inline" set="null" expr="1" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</NETWORK_IDLE>
		<NETWORK_LOADING public="1" get="inline" set="null" expr="2" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</NETWORK_LOADING>
		<NETWORK_NO_SOURCE public="1" get="inline" set="null" expr="3" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</NETWORK_NO_SOURCE>
		<HAVE_NOTHING public="1" get="inline" set="null" expr="0" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</HAVE_NOTHING>
		<HAVE_METADATA public="1" get="inline" set="null" expr="1" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</HAVE_METADATA>
		<HAVE_CURRENT_DATA public="1" get="inline" set="null" expr="2" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</HAVE_CURRENT_DATA>
		<HAVE_FUTURE_DATA public="1" get="inline" set="null" expr="3" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HAVE_FUTURE_DATA>
		<HAVE_ENOUGH_DATA public="1" get="inline" set="null" expr="4" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</HAVE_ENOUGH_DATA>
		<error public="1" set="null">
			<c path="js.html.MediaError"/>
			<haxe_doc>Returns a `MediaError` object for the most recent error, or `null` if there has not been an error.</haxe_doc>
		</error>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, which contains the URL of a media resource to use.</haxe_doc>
		</src>
		<currentSrc public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` with the absolute URL of the chosen media resource.</haxe_doc>
		</currentSrc>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the CORS setting for this media element.</haxe_doc>
		</crossOrigin>
		<networkState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned short` (enumeration) indicating the current state of fetching the media over the network.</haxe_doc>
		</networkState>
		<preload public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `preload` HTML attribute, indicating what data should be preloaded, if any. Possible values are: `none`, `metadata`, `auto`.</haxe_doc>
		</preload>
		<buffered public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the `buffered` property is accessed.</haxe_doc>
		</buffered>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned short` (enumeration) indicating the readiness state of the media.</haxe_doc>
		</readyState>
		<seeking public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media is in the process of seeking to a new position.</haxe_doc>
		</seeking>
		<currentTime public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the current playback time in seconds. Setting this value seeks the media to the new time.</haxe_doc>
		</currentTime>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` indicating the length of the media in seconds, or 0 if no media data is available.</haxe_doc>
		</duration>
		<paused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media element is paused.</haxe_doc>
		</paused>
		<defaultPlaybackRate public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the default playback rate for the media.</haxe_doc>
		</defaultPlaybackRate>
		<playbackRate public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` that indicates the rate at which the media is being played back. </haxe_doc>
		</playbackRate>
		<played public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that contains the ranges of the media source that the browser has played, if any.</haxe_doc>
		</played>
		<seekable public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that contains the time ranges that the user is able to seek to, if any.</haxe_doc>
		</seekable>
		<ended public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media element has finished playing.</haxe_doc>
		</ended>
		<autoplay public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that reflects the `autoplay` HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.
		 Sites which automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so it should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control.</haxe_doc>
		</autoplay>
		<loop public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `loop` HTML attribute, which indicates whether the media element should start over when it reaches the end.</haxe_doc>
		</loop>
		<controls public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `controls` HTML attribute, indicating whether user interface items for controlling the resource should be displayed.</haxe_doc>
		</controls>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).</haxe_doc>
		</volume>
		<muted public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that determines whether audio is muted. `true` if the audio is muted and `false` otherwise.</haxe_doc>
		</muted>
		<defaultMuted public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `muted` HTML attribute, which indicates whether the media element's audio output should be muted by default.</haxe_doc>
		</defaultMuted>
		<audioTracks public="1" set="null">
			<c path="js.html.AudioTrackList"/>
			<haxe_doc>A `AudioTrackList` that lists the `AudioTrack` objects contained in the element.</haxe_doc>
		</audioTracks>
		<videoTracks public="1" set="null">
			<c path="js.html.VideoTrackList"/>
			<haxe_doc>Returns the list of `VideoTrack` objects contained in the element.

		 Gecko supports only single track playback, and the parsing of tracks' metadata is only available for media with the Ogg container format.</haxe_doc>
		</videoTracks>
		<textTracks public="1" set="null">
			<c path="js.html.TextTrackList"/>
			<haxe_doc>Returns the list of `TextTrack` objects contained in the element.</haxe_doc>
		</textTracks>
		<srcObject public="1">
			<c path="js.html.MediaStream"/>
			<haxe_doc>Is a `MediaStream` representing the media to play or that has played in the current `HTMLMediaElement`, or `null` if not assigned.</haxe_doc>
		</srcObject>
		<mediaKeys public="1" set="null">
			<c path="js.html.eme.MediaKeys"/>
			<haxe_doc>Returns a `MediaKeys` object or `null`. MediaKeys is a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.</haxe_doc>
		</mediaKeys>
		<onencrypted public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when the media is encrypted.</haxe_doc>
		</onencrypted>
		<onwaitingforkey public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when playback is blocked while waiting for an encryption key.</haxe_doc>
		</onwaitingforkey>
		<load public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resets the media element and restarts the media resource. Any pending events are discarded. How much media data is fetched is still affected by the `preload` attribute. This method can be useful for releasing resources after any `src` attribute and `source` element descendants have been removed. Otherwise, it is usually unnecessary to use this method, unless required to rescan `source` element children after dynamic changes.</haxe_doc>
		</load>
		<canPlayType public="1" set="method">
			<f a="type">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Determines whether the specified media type can be played back.</haxe_doc>
		</canPlayType>
		<fastSeek public="1" set="method">
			<f a="time">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Directly seeks to the given time.
		@throws DOMError</haxe_doc>
		</fastSeek>
		<play public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Begins playback of the media.
		@throws DOMError</haxe_doc>
		</play>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Pauses the media playback.
		@throws DOMError</haxe_doc>
		</pause>
		<addTextTrack public="1" set="method">
			<f a="kind:?label:?language" v=":&quot;&quot;:&quot;&quot;">
				<x path="js.html.TextTrackKind"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.TextTrack"/>
			</f>
			<meta><m n=":value"><e>{ language : "", label : "" }</e></m></meta>
			<haxe_doc>Adds a text track (such as a track for subtitles) to a media element.</haxe_doc>
		</addTextTrack>
		<setMediaKeys public="1" set="method">
			<f a="mediaKeys">
				<c path="js.html.eme.MediaKeys"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns `Promise`. Sets the `MediaKeys` keys to use when decrypting media during playback.</haxe_doc>
		</setMediaKeys>
		<haxe_doc><![CDATA[The `HTMLMediaElement` interface adds to `HTMLElement` the properties and methods needed to support basic media-related capabilities that are common to audio and video.

	Documentation [HTMLMediaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMediaElement"</e></m></meta>
	</class>
	<class path="js.html.AudioElement" params="" file="/usr/local/lib/haxe/std/js/html/AudioElement.hx" extern="1">
		<extends path="js.html.MediaElement"/>
		<haxe_doc><![CDATA[The `HTMLAudioElement` interface provides access to the properties of `audio` elements, as well as methods to manipulate them. It derives from the `HTMLMediaElement` interface.

	Documentation [HTMLAudioElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAudioElement"</e></m></meta>
	</class>
	<class path="js.html.MediaStreamTrack" params="" file="/usr/local/lib/haxe/std/js/html/MediaStreamTrack.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` set to `"audio"` if the track is an audio track and to `"video"`, if it is a video track. It doesn't change if the track is deassociated from its source.</haxe_doc>
		</kind>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing a unique identifier (GUID) for the track; it is generated by the browser.</haxe_doc>
		</id>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing a user agent-assigned label that identifies the track source, as in `"internal microphone"`. The string may be left empty and is empty as long as no source has been connected. When the track is deassociated from its source, the label is not changed.</haxe_doc>
		</label>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>A Boolean whose value of `true` if the track is enabled, that is allowed to render the media source stream; or `false` if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.
		 Note: You can implement standard "mute" functionality by setting `enabled` to `false`. The `muted` property refers to a condition in which there's no media because of a technical issue.</haxe_doc>
		</enabled>
		<muted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a Boolean value indicating whether the track is unable to provide media data due to a technical issue.
		 Note: You can implement standard "mute" functionality by setting `enabled` to `false`, and unmute the media by setting it back to `true` again.</haxe_doc>
		</muted>
		<onmute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `mute` event is fired on the object, that is when the streaming is terminating.</haxe_doc>
		</onmute>
		<onunmute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `unmute` event is fired on the object, that is when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onunmute>
		<readyState public="1" set="null">
			<x path="js.html.MediaStreamTrackState"/>
			<haxe_doc>Returns an enumerated value giving the status of the track. This will be one of the following values:

		  `"live"` which indicates that an input is connected and does its best-effort in providing real-time data. In that case, the output of data can be switched on or off using the `MediaStreamTrack.enabled` attribute.
		  `"ended"` which indicates that the input is not giving any more data and will never provide new data.</haxe_doc>
		</readyState>
		<onended public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `ended_(MediaStream)` event is fired on the object, that is when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onended>
		<clone public="1" set="method">
			<f a=""><c path="js.html.MediaStreamTrack"/></f>
			<haxe_doc>Returns a duplicate of the `MediaStreamTrack`.</haxe_doc>
		</clone>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops playing the source associated to the track, both the source and the track are deassociated. The track state is set to `ended`.</haxe_doc>
		</stop>
		<getConstraints public="1" set="method">
			<f a=""><t path="js.html.MediaTrackConstraints"/></f>
			<haxe_doc>Returns a `MediaTrackConstraints` object containing the currently set constraints for the track; the returned value matches the constraints last set using `MediaStreamTrack.applyConstraints`.</haxe_doc>
		</getConstraints>
		<getSettings public="1" set="method">
			<f a=""><t path="js.html.MediaTrackSettings"/></f>
			<haxe_doc>Returns a `MediaTrackSettings` object containing the current values of each of the `MediaStreamTrack`'s constrainable properties.</haxe_doc>
		</getSettings>
		<applyConstraints public="1" set="method">
			<f a="?constraints">
				<x path="Null"><t path="js.html.MediaTrackConstraints"/></x>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Lets the application specify the ideal and/or ranges of acceptable values for any number of the available constrainable properties of the `MediaStreamTrack`.
		@throws DOMError</haxe_doc>
		</applyConstraints>
		<haxe_doc><![CDATA[The `MediaStreamTrack` interface represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.

	Documentation [MediaStreamTrack](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioStreamTrack" params="" file="/usr/local/lib/haxe/std/js/html/AudioStreamTrack.hx" extern="1">
		<extends path="js.html.MediaStreamTrack"/>
		<meta><m n=":native"><e>"AudioStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioTrack" params="" file="/usr/local/lib/haxe/std/js/html/AudioTrack.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which uniquely identifies the track within the media. This ID can be used to locate a specific track within an audio track list by calling `AudioTrackList.getTrackById()`. The ID can also be used as the fragment part of the URL if the media supports seeking by media fragment per the Media Fragments URI specification.</haxe_doc>
		</id>
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` specifying the category into which the track falls. For example, the main audio track would have a `kind` of `"main"`.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` providing a human-readable label for the track. For example, an audio commentary track for a movie might have a `label` of `"Commentary with director John Q. Public and actors John Doe and Jane Eod."` This string is empty if no label is provided.</haxe_doc>
		</label>
		<language public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` specifying the audio track's primary language, or an empty string if unknown. The language is specified as a BCP 47 ({{RFC(5646)}}) language code, such as `"en-US"` or `"pt-BR"`.</haxe_doc>
		</language>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>A Boolean value which controls whether or not the audio track's sound is enabled. Setting this value to `false` mutes the track's audio.</haxe_doc>
		</enabled>
		<haxe_doc><![CDATA[The `AudioTrack` interface represents a single audio track from one of the HTML media elements, `audio` or `video`. 

	Documentation [AudioTrack](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioTrackList" params="" file="/usr/local/lib/haxe/std/js/html/AudioTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of tracks in the list.</haxe_doc>
		</length>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.AudioTrack"/>
</f></getTrackById>
		<haxe_doc><![CDATA[The `AudioTrackList` interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate `AudioTrack` object in the list.

	Documentation [AudioTrackList](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.AutoKeyword" params="" file="/usr/local/lib/haxe/std/js/html/AutoKeyword.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AutoKeyword.AutoKeyword_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/AutoKeyword.hx" private="1" module="js.html.AutoKeyword" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.BRElement" params="" file="/usr/local/lib/haxe/std/js/html/BRElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<clear public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the flow of text around floating objects.</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `HTMLBRElement` interface represents a HTML line break element (`br`). It inherits from `HTMLElement`.

	Documentation [HTMLBRElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBRElement"</e></m></meta>
	</class>
	<class path="js.html.BarProp" params="" file="/usr/local/lib/haxe/std/js/html/BarProp.hx" extern="1">
		<visible public="1"><x path="Bool"/></visible>
		<meta><m n=":native"><e>"BarProp"</e></m></meta>
	</class>
	<class path="js.html.BaseElement" params="" file="/usr/local/lib/haxe/std/js/html/BaseElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `href` HTML attribute, containing a base URL for relative URLs in the document.</haxe_doc>
		</href>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, containing a default target browsing context or frame for elements that do not have a target reference specified.</haxe_doc>
		</target>
		<haxe_doc><![CDATA[The `HTMLBaseElement` interface contains the base URI for a document. This object inherits all of the properties and methods as described in the `HTMLElement` interface.

	Documentation [HTMLBaseElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBaseElement"</e></m></meta>
	</class>
	<class path="js.html.Blob" params="" file="/usr/local/lib/haxe/std/js/html/Blob.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The size, in bytes, of the data contained in the `Blob` object.</haxe_doc>
		</size>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>A string indicating the MIME type of the data contained in the `Blob`. If the type is unknown, this string is empty.</haxe_doc>
		</type>
		<slice public="1" set="method">
			<f a="?start:?end:?contentType">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="js.html.Blob"/>
			</f>
			<haxe_doc>Returns a new `Blob` object containing the data in the specified range of bytes of the source `Blob`.
		@throws DOMError</haxe_doc>
		</slice>
		<new public="1" set="method">
			<f a="?blobParts:?options">
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.lib.ArrayBuffer"/>
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<x path="haxe.extern.EitherType">
			<c path="js.html.Blob"/>
			<c path="String"/>
		</x>
	</x>
</x></c>
				<x path="Null"><t path="js.html.BlobPropertyBag"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `Blob` object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The `File` interface is based on `Blob`, inheriting blob functionality and expanding it to support files on the user's system.

	Documentation [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Blob$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Blob>]]></haxe_doc>
		<meta><m n=":native"><e>"Blob"</e></m></meta>
	</class>
	<typedef path="js.html.BlobPropertyBag" params="" file="/usr/local/lib/haxe/std/js/html/BlobPropertyBag.hx"><a>
	<type>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<endings>
		<x path="Null"><x path="js.html.EndingTypes"/></x>
		<meta><m n=":optional"/></meta>
	</endings>
</a></typedef>
	<class path="js.html.BodyElement" params="" file="/usr/local/lib/haxe/std/js/html/BodyElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the foreground color of text.</haxe_doc>
		</text>
		<link public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of unvisited links.</haxe_doc>
		</link>
		<vLink public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of visited links.</haxe_doc>
		</vLink>
		<aLink public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of active hyperlinks.</haxe_doc>
		</aLink>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the background color for the document.</haxe_doc>
		</bgColor>
		<background public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the description of the location of the background image resource. Note that this is not an URI, though some older version of some browsers do expect it.</haxe_doc>
		</background>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<haxe_doc><![CDATA[The `HTMLBodyElement` interface provides special properties (beyond those of the regular `HTMLElement` interface they also inherit) for manipulating body elements.

	Documentation [HTMLBodyElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBodyElement"</e></m></meta>
	</class>
	<class path="js.html.ButtonElement" params="" file="/usr/local/lib/haxe/std/js/html/ButtonElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether or not the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified.</haxe_doc>
		</autofocus>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether or not the control is disabled, meaning that it does not accept any clicks.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Is a `HTMLFormElement` reflecting the form that this button is associated with. If the button is a descendant of a form element, then this attribute is the ID of that form element.
		
			If the button is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the `null` value if none matches.</haxe_doc>
		</form>
		<formAction public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the URI of a resource that processes information submitted by the button. If specified, this attribute overrides the `action` attribute of the `form` element that owns this element.</haxe_doc>
		</formAction>
		<formEnctype public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the type of content that is used to submit the form to the server. If specified, this attribute overrides the `enctype` attribute of the `form` element that owns this element.</haxe_doc>
		</formEnctype>
		<formMethod public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the HTTP method that the browser uses to submit the form. If specified, this attribute overrides the `method` attribute of the `form` element that owns this element.</haxe_doc>
		</formMethod>
		<formNoValidate public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that the form is not to be validated when it is submitted. If specified, this attribute overrides the `novalidate` attribute of the `form` element that owns this element.</haxe_doc>
		</formNoValidate>
		<formTarget public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting a name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the `target` attribute of the `form` element that owns this element.</haxe_doc>
		</formTarget>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the object when submitted with a form. {{HTMLVersionInline(5)}} If specified, it must not be the empty string.</haxe_doc>
		</name>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Is a `DOMString` indicating the behavior of the button. This is an enumerated attribute with the following possible values:
			
				`"submit"`: The button submits the form. This is the default value if the attribute is not specified, {{HTMLVersionInline(5)}} or if it is dynamically changed to an empty or invalid value.
				`"reset"`: The button resets the form.
				`"button"`: The button does nothing.
				`"menu"`: The button displays a menu. <em>(experimental)</em>]]></haxe_doc>
		</type>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the current form control value of the button.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the button is a candidate for constraint validation. It is `false` if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>Is a `ValidityState` representing the validity states that this button is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Is a `NodeList` that represents a list of `label` elements that are labels for this button.</haxe_doc>
		</labels>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLButtonElement` interface provides properties and methods (beyond the `button` object interface it also has available to them by inheritance) for manipulating the layout and presentation of button elements.

	Documentation [HTMLButtonElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLButtonElement"</e></m></meta>
	</class>
	<class path="js.html.CharacterData" params="" file="/usr/local/lib/haxe/std/js/html/CharacterData.hx" extern="1">
		<extends path="js.html.Node"/>
		<data public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the textual data contained in this object.</haxe_doc>
		</data>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` representing the size of the string contained in `CharacterData.data`.</haxe_doc>
		</length>
		<previousElementSibling public="1" set="null"><c path="js.html.Element"/></previousElementSibling>
		<nextElementSibling public="1" set="null"><c path="js.html.Element"/></nextElementSibling>
		<substringData public="1" set="method">
			<f a="offset:count">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString` containing the part of `CharacterData.data` of the specified length and starting at the specified offset.
		@throws DOMError</haxe_doc>
		</substringData>
		<appendData public="1" set="method">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the given `DOMString` to the `CharacterData.data` string; when this method returns, `data` contains the concatenated `DOMString`.
		@throws DOMError</haxe_doc>
		</appendData>
		<insertData public="1" set="method">
			<f a="offset:data">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the specified characters, at the specified offset, in the `CharacterData.data` string; when this method returns, `data` contains the modified `DOMString`.
		@throws DOMError</haxe_doc>
		</insertData>
		<deleteData public="1" set="method">
			<f a="offset:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the specified amount of characters, starting at the specified offset, from the `CharacterData.data` string; when this method returns, `data` contains the shortened `DOMString`.
		@throws DOMError</haxe_doc>
		</deleteData>
		<replaceData public="1" set="method">
			<f a="offset:count:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Replaces the specified amount of characters, starting at the specified offset, with the specified `DOMString`; when this method returns, `data` contains the modified `DOMString`.
		@throws DOMError</haxe_doc>
		</replaceData>
		<before public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<haxe_doc><![CDATA[The `CharacterData` abstract interface represents a `Node` object that contains characters. This is an abstract interface, meaning there aren't any object of type `CharacterData`: it is implemented by other interfaces, like `Text`, '. In XML, the character sequence '--' cannot be used within a comment.">`Comment`, or `ProcessingInstruction` which aren't abstract.

	Documentation [CharacterData](https://developer.mozilla.org/en-US/docs/Web/API/CharacterData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CharacterData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CharacterData>]]></haxe_doc>
		<meta><m n=":native"><e>"CharacterData"</e></m></meta>
	</class>
	<class path="js.html.Text" params="" file="/usr/local/lib/haxe/std/js/html/Text.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<wholeText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the text of all `Text` nodes logically adjacent to this `Node`, concatenated in document order.</haxe_doc>
		</wholeText>
		<splitText public="1" set="method">
			<f a="offset">
				<x path="Int"/>
				<c path="js.html.Text"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</splitText>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<new public="1" set="method">
			<f a="?data" v="&quot;&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ data : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Text` interface represents the textual content of `Element` or `Attr`.  If an element has no markup within its content, it has a single child implementing `Text` that contains the element's text.  However, if the element contains markup, it is parsed into information items and `Text` nodes that form its children.

	Documentation [Text](https://developer.mozilla.org/en-US/docs/Web/API/Text) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Text$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Text>]]></haxe_doc>
		<meta><m n=":native"><e>"Text"</e></m></meta>
	</class>
	<class path="js.html.CDATASection" params="" file="/usr/local/lib/haxe/std/js/html/CDATASection.hx" extern="1">
		<extends path="js.html.Text"/>
		<haxe_doc><![CDATA[The `CDATASection` interface represents a CDATA section that can be used within XML to include extended portions of unescaped text. The symbols `` and `&amp;` don’t need escaping as they normally do when inside a CDATA section.

	Documentation [CDATASection](https://developer.mozilla.org/en-US/docs/Web/API/CDATASection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CDATASection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CDATASection>]]></haxe_doc>
		<meta><m n=":native"><e>"CDATASection"</e></m></meta>
	</class>
	<abstract path="js.html.CSSBoxType" params="" file="/usr/local/lib/haxe/std/js/html/CSSBoxType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CSSBoxType.CSSBoxType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/CSSBoxType.hx" private="1" module="js.html.CSSBoxType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.CSSRule" params="" file="/usr/local/lib/haxe/std/js/html/CSSRule.hx" extern="1">
		<STYLE_RULE public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</STYLE_RULE>
		<CHARSET_RULE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CHARSET_RULE>
		<IMPORT_RULE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</IMPORT_RULE>
		<MEDIA_RULE public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</MEDIA_RULE>
		<FONT_FACE_RULE public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</FONT_FACE_RULE>
		<PAGE_RULE public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</PAGE_RULE>
		<NAMESPACE_RULE public="1" get="inline" set="null" expr="10" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</NAMESPACE_RULE>
		<KEYFRAMES_RULE public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</KEYFRAMES_RULE>
		<KEYFRAME_RULE public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</KEYFRAME_RULE>
		<COUNTER_STYLE_RULE public="1" get="inline" set="null" expr="11" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</COUNTER_STYLE_RULE>
		<SUPPORTS_RULE public="1" get="inline" set="null" expr="12" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</SUPPORTS_RULE>
		<FONT_FEATURE_VALUES_RULE public="1" get="inline" set="null" expr="14" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</FONT_FEATURE_VALUES_RULE>
		<type public="1" set="null"><x path="Int"/></type>
		<cssText public="1"><c path="String"/></cssText>
		<parentRule public="1" set="null"><c path="js.html.CSSRule"/></parentRule>
		<parentStyleSheet public="1" set="null"><c path="js.html.CSSStyleSheet"/></parentStyleSheet>
		<haxe_doc><![CDATA[The `CSSRule` interface represents a single CSS rule. There are several types of rules, listed in the Type constants section below.

	Documentation [CSSRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSRule"</e></m></meta>
	</class>
	<class path="js.html.CSSRuleList" params="" file="/usr/local/lib/haxe/std/js/html/CSSRuleList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.CSSRule"/>
</f></item>
		<haxe_doc><![CDATA[A `CSSRuleList` is an (indirect-modify only) array-like object containing an ordered collection of `CSSRule` objects.

	Documentation [CSSRuleList](https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSRuleList"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleDeclaration" params="" file="/usr/local/lib/haxe/std/js/html/CSSStyleDeclaration.hx" extern="1">
		<cssText public="1"><c path="String"/></cssText>
		<length public="1" set="null"><x path="Int"/></length>
		<parentRule public="1" set="null"><c path="js.html.CSSRule"/></parentRule>
		<alignContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-content" CSS property.</haxe_doc>
		</alignContent>
		<alignItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-items" CSS property.</haxe_doc>
		</alignItems>
		<alignSelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-self" CSS property.</haxe_doc>
		</alignSelf>
		<alignmentAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "alignment-adjust" CSS property.</haxe_doc>
		</alignmentAdjust>
		<alignmentBaseline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "alignment-baseline" CSS property.</haxe_doc>
		</alignmentBaseline>
		<all public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "all" CSS property.</haxe_doc>
		</all>
		<anchorPoint public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "anchor-point" CSS property.</haxe_doc>
		</anchorPoint>
		<animation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation" CSS property.</haxe_doc>
		</animation>
		<animationDelay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-delay" CSS property.</haxe_doc>
		</animationDelay>
		<animationDirection public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-direction" CSS property.</haxe_doc>
		</animationDirection>
		<animationDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-duration" CSS property.</haxe_doc>
		</animationDuration>
		<animationFillMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-fill-mode" CSS property.</haxe_doc>
		</animationFillMode>
		<animationIterationCount public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-iteration-count" CSS property.</haxe_doc>
		</animationIterationCount>
		<animationName public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-name" CSS property.</haxe_doc>
		</animationName>
		<animationPlayState public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-play-state" CSS property.</haxe_doc>
		</animationPlayState>
		<animationTimingFunction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-timing-function" CSS property.</haxe_doc>
		</animationTimingFunction>
		<azimuth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "azimuth" CSS property.</haxe_doc>
		</azimuth>
		<backfaceVisibility public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "backface-visibility" CSS property.</haxe_doc>
		</backfaceVisibility>
		<background public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background" CSS property.</haxe_doc>
		</background>
		<backgroundAttachment public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-attachment" CSS property.</haxe_doc>
		</backgroundAttachment>
		<backgroundBlendMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-blend-mode" CSS property.</haxe_doc>
		</backgroundBlendMode>
		<backgroundClip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-clip" CSS property.</haxe_doc>
		</backgroundClip>
		<backgroundColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-color" CSS property.</haxe_doc>
		</backgroundColor>
		<backgroundImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-image" CSS property.</haxe_doc>
		</backgroundImage>
		<backgroundOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-origin" CSS property.</haxe_doc>
		</backgroundOrigin>
		<backgroundPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position" CSS property.</haxe_doc>
		</backgroundPosition>
		<backgroundPositionX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position-x" CSS property.</haxe_doc>
		</backgroundPositionX>
		<backgroundPositionY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position-y" CSS property.</haxe_doc>
		</backgroundPositionY>
		<backgroundRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat" CSS property.</haxe_doc>
		</backgroundRepeat>
		<backgroundRepeatX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat-x" CSS property.</haxe_doc>
		</backgroundRepeatX>
		<backgroundRepeatY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat-y" CSS property.</haxe_doc>
		</backgroundRepeatY>
		<backgroundSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-size" CSS property.</haxe_doc>
		</backgroundSize>
		<baselineShift public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "baseline-shift" CSS property.</haxe_doc>
		</baselineShift>
		<binding public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "binding" CSS property.</haxe_doc>
		</binding>
		<bleed public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bleed" CSS property.</haxe_doc>
		</bleed>
		<blockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "block-size" CSS property.</haxe_doc>
		</blockSize>
		<bookmarkLabel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-label" CSS property.</haxe_doc>
		</bookmarkLabel>
		<bookmarkLevel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-level" CSS property.</haxe_doc>
		</bookmarkLevel>
		<bookmarkState public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-state" CSS property.</haxe_doc>
		</bookmarkState>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border" CSS property.</haxe_doc>
		</border>
		<borderBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end" CSS property.</haxe_doc>
		</borderBlockEnd>
		<borderBlockEndColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-color" CSS property.</haxe_doc>
		</borderBlockEndColor>
		<borderBlockEndStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-style" CSS property.</haxe_doc>
		</borderBlockEndStyle>
		<borderBlockEndWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-end-width" CSS property.</haxe_doc>
		</borderBlockEndWidth>
		<borderBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start" CSS property.</haxe_doc>
		</borderBlockStart>
		<borderBlockStartColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-color" CSS property.</haxe_doc>
		</borderBlockStartColor>
		<borderBlockStartStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-style" CSS property.</haxe_doc>
		</borderBlockStartStyle>
		<borderBlockStartWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-block-start-width" CSS property.</haxe_doc>
		</borderBlockStartWidth>
		<borderBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom" CSS property.</haxe_doc>
		</borderBottom>
		<borderBottomColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-color" CSS property.</haxe_doc>
		</borderBottomColor>
		<borderBottomLeftRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-left-radius" CSS property.</haxe_doc>
		</borderBottomLeftRadius>
		<borderBottomRightRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-right-radius" CSS property.</haxe_doc>
		</borderBottomRightRadius>
		<borderBottomStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-style" CSS property.</haxe_doc>
		</borderBottomStyle>
		<borderBottomWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-width" CSS property.</haxe_doc>
		</borderBottomWidth>
		<borderCollapse public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-collapse" CSS property.</haxe_doc>
		</borderCollapse>
		<borderColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-color" CSS property.</haxe_doc>
		</borderColor>
		<borderImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image" CSS property.</haxe_doc>
		</borderImage>
		<borderImageOutset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-outset" CSS property.</haxe_doc>
		</borderImageOutset>
		<borderImageRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-repeat" CSS property.</haxe_doc>
		</borderImageRepeat>
		<borderImageSlice public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-slice" CSS property.</haxe_doc>
		</borderImageSlice>
		<borderImageSource public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-source" CSS property.</haxe_doc>
		</borderImageSource>
		<borderImageWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-width" CSS property.</haxe_doc>
		</borderImageWidth>
		<borderInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end" CSS property.</haxe_doc>
		</borderInlineEnd>
		<borderInlineEndColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-color" CSS property.</haxe_doc>
		</borderInlineEndColor>
		<borderInlineEndStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-style" CSS property.</haxe_doc>
		</borderInlineEndStyle>
		<borderInlineEndWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-end-width" CSS property.</haxe_doc>
		</borderInlineEndWidth>
		<borderInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start" CSS property.</haxe_doc>
		</borderInlineStart>
		<borderInlineStartColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-color" CSS property.</haxe_doc>
		</borderInlineStartColor>
		<borderInlineStartStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-style" CSS property.</haxe_doc>
		</borderInlineStartStyle>
		<borderInlineStartWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-inline-start-width" CSS property.</haxe_doc>
		</borderInlineStartWidth>
		<borderLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left" CSS property.</haxe_doc>
		</borderLeft>
		<borderLeftColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-color" CSS property.</haxe_doc>
		</borderLeftColor>
		<borderLeftStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-style" CSS property.</haxe_doc>
		</borderLeftStyle>
		<borderLeftWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-width" CSS property.</haxe_doc>
		</borderLeftWidth>
		<borderRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-radius" CSS property.</haxe_doc>
		</borderRadius>
		<borderRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right" CSS property.</haxe_doc>
		</borderRight>
		<borderRightColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-color" CSS property.</haxe_doc>
		</borderRightColor>
		<borderRightStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-style" CSS property.</haxe_doc>
		</borderRightStyle>
		<borderRightWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-width" CSS property.</haxe_doc>
		</borderRightWidth>
		<borderSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-spacing" CSS property.</haxe_doc>
		</borderSpacing>
		<borderStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-style" CSS property.</haxe_doc>
		</borderStyle>
		<borderTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top" CSS property.</haxe_doc>
		</borderTop>
		<borderTopColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-color" CSS property.</haxe_doc>
		</borderTopColor>
		<borderTopLeftRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-left-radius" CSS property.</haxe_doc>
		</borderTopLeftRadius>
		<borderTopRightRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-right-radius" CSS property.</haxe_doc>
		</borderTopRightRadius>
		<borderTopStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-style" CSS property.</haxe_doc>
		</borderTopStyle>
		<borderTopWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-width" CSS property.</haxe_doc>
		</borderTopWidth>
		<borderWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-width" CSS property.</haxe_doc>
		</borderWidth>
		<bottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bottom" CSS property.</haxe_doc>
		</bottom>
		<boxDecorationBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-decoration-break" CSS property.</haxe_doc>
		</boxDecorationBreak>
		<boxShadow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-shadow" CSS property.</haxe_doc>
		</boxShadow>
		<boxSizing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-sizing" CSS property.</haxe_doc>
		</boxSizing>
		<boxSnap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-snap" CSS property.</haxe_doc>
		</boxSnap>
		<boxSuppress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-suppress" CSS property.</haxe_doc>
		</boxSuppress>
		<breakAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-after" CSS property.</haxe_doc>
		</breakAfter>
		<breakBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-before" CSS property.</haxe_doc>
		</breakBefore>
		<breakInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-inside" CSS property.</haxe_doc>
		</breakInside>
		<bufferedRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "buffered-rendering" CSS property.</haxe_doc>
		</bufferedRendering>
		<captionSide public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "caption-side" CSS property.</haxe_doc>
		</captionSide>
		<caretColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "caret-color" CSS property.</haxe_doc>
		</caretColor>
		<chains public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "chains" CSS property.</haxe_doc>
		</chains>
		<clear public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clear" CSS property.</haxe_doc>
		</clear>
		<clip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip" CSS property.</haxe_doc>
		</clip>
		<clipPath public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip-path" CSS property.</haxe_doc>
		</clipPath>
		<clipRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip-rule" CSS property.</haxe_doc>
		</clipRule>
		<color public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color" CSS property.</haxe_doc>
		</color>
		<colorAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-adjust" CSS property.</haxe_doc>
		</colorAdjust>
		<colorInterpolation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-interpolation" CSS property.</haxe_doc>
		</colorInterpolation>
		<colorInterpolationFilters public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-interpolation-filters" CSS property.</haxe_doc>
		</colorInterpolationFilters>
		<colorRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-rendering" CSS property.</haxe_doc>
		</colorRendering>
		<columnCount public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-count" CSS property.</haxe_doc>
		</columnCount>
		<columnFill public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-fill" CSS property.</haxe_doc>
		</columnFill>
		<columnGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-gap" CSS property.</haxe_doc>
		</columnGap>
		<columnRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule" CSS property.</haxe_doc>
		</columnRule>
		<columnRuleColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-color" CSS property.</haxe_doc>
		</columnRuleColor>
		<columnRuleStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-style" CSS property.</haxe_doc>
		</columnRuleStyle>
		<columnRuleWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-width" CSS property.</haxe_doc>
		</columnRuleWidth>
		<columnSpan public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-span" CSS property.</haxe_doc>
		</columnSpan>
		<columnWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-width" CSS property.</haxe_doc>
		</columnWidth>
		<columns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "columns" CSS property.</haxe_doc>
		</columns>
		<contain public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "contain" CSS property.</haxe_doc>
		</contain>
		<content public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "content" CSS property.</haxe_doc>
		</content>
		<counterIncrement public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-increment" CSS property.</haxe_doc>
		</counterIncrement>
		<counterReset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-reset" CSS property.</haxe_doc>
		</counterReset>
		<counterSet public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-set" CSS property.</haxe_doc>
		</counterSet>
		<crop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "crop" CSS property.</haxe_doc>
		</crop>
		<cssFloat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "css-float" CSS property.</haxe_doc>
		</cssFloat>
		<cue public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue" CSS property.</haxe_doc>
		</cue>
		<cueAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue-after" CSS property.</haxe_doc>
		</cueAfter>
		<cueBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue-before" CSS property.</haxe_doc>
		</cueBefore>
		<cursor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cursor" CSS property.</haxe_doc>
		</cursor>
		<cx public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cx" CSS property.</haxe_doc>
		</cx>
		<cy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cy" CSS property.</haxe_doc>
		</cy>
		<d public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "d" CSS property.</haxe_doc>
		</d>
		<direction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "direction" CSS property.</haxe_doc>
		</direction>
		<display public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display" CSS property.</haxe_doc>
		</display>
		<displayInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-inside" CSS property.</haxe_doc>
		</displayInside>
		<displayList public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-list" CSS property.</haxe_doc>
		</displayList>
		<displayOutside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-outside" CSS property.</haxe_doc>
		</displayOutside>
		<dominantBaseline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "dominant-baseline" CSS property.</haxe_doc>
		</dominantBaseline>
		<elevation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "elevation" CSS property.</haxe_doc>
		</elevation>
		<emptyCells public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "empty-cells" CSS property.</haxe_doc>
		</emptyCells>
		<fill public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill" CSS property.</haxe_doc>
		</fill>
		<fillOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill-opacity" CSS property.</haxe_doc>
		</fillOpacity>
		<fillRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "fill-rule" CSS property.</haxe_doc>
		</fillRule>
		<filter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "filter" CSS property.</haxe_doc>
		</filter>
		<flex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex" CSS property.</haxe_doc>
		</flex>
		<flexBasis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-basis" CSS property.</haxe_doc>
		</flexBasis>
		<flexDirection public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-direction" CSS property.</haxe_doc>
		</flexDirection>
		<flexFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-flow" CSS property.</haxe_doc>
		</flexFlow>
		<flexGrow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-grow" CSS property.</haxe_doc>
		</flexGrow>
		<flexShrink public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-shrink" CSS property.</haxe_doc>
		</flexShrink>
		<flexWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-wrap" CSS property.</haxe_doc>
		</flexWrap>
		<float public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "float" CSS property.</haxe_doc>
		</float>
		<floatOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "float-offset" CSS property.</haxe_doc>
		</floatOffset>
		<floodColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flood-color" CSS property.</haxe_doc>
		</floodColor>
		<floodOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flood-opacity" CSS property.</haxe_doc>
		</floodOpacity>
		<flowFrom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flow-from" CSS property.</haxe_doc>
		</flowFrom>
		<flowInto public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flow-into" CSS property.</haxe_doc>
		</flowInto>
		<font public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font" CSS property.</haxe_doc>
		</font>
		<fontDisplay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-display" CSS property.</haxe_doc>
		</fontDisplay>
		<fontFamily public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-family" CSS property.</haxe_doc>
		</fontFamily>
		<fontFeatureSettings public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-feature-settings" CSS property.</haxe_doc>
		</fontFeatureSettings>
		<fontKerning public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-kerning" CSS property.</haxe_doc>
		</fontKerning>
		<fontLanguageOverride public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-language-override" CSS property.</haxe_doc>
		</fontLanguageOverride>
		<fontOpticalSizing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-optical-sizing" CSS property.</haxe_doc>
		</fontOpticalSizing>
		<fontSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-size" CSS property.</haxe_doc>
		</fontSize>
		<fontSizeAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-size-adjust" CSS property.</haxe_doc>
		</fontSizeAdjust>
		<fontStretch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-stretch" CSS property.</haxe_doc>
		</fontStretch>
		<fontStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-style" CSS property.</haxe_doc>
		</fontStyle>
		<fontSynthesis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-synthesis" CSS property.</haxe_doc>
		</fontSynthesis>
		<fontVariant public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant" CSS property.</haxe_doc>
		</fontVariant>
		<fontVariantAlternates public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-alternates" CSS property.</haxe_doc>
		</fontVariantAlternates>
		<fontVariantCaps public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-caps" CSS property.</haxe_doc>
		</fontVariantCaps>
		<fontVariantEastAsian public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-east-asian" CSS property.</haxe_doc>
		</fontVariantEastAsian>
		<fontVariantLigatures public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-ligatures" CSS property.</haxe_doc>
		</fontVariantLigatures>
		<fontVariantNumeric public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-numeric" CSS property.</haxe_doc>
		</fontVariantNumeric>
		<fontVariantPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-position" CSS property.</haxe_doc>
		</fontVariantPosition>
		<fontVariationSettings public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variation-settings" CSS property.</haxe_doc>
		</fontVariationSettings>
		<fontWeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-weight" CSS property.</haxe_doc>
		</fontWeight>
		<gap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "gap" CSS property.</haxe_doc>
		</gap>
		<grid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid" CSS property.</haxe_doc>
		</grid>
		<gridArea public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-area" CSS property.</haxe_doc>
		</gridArea>
		<gridAutoColumns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-columns" CSS property.</haxe_doc>
		</gridAutoColumns>
		<gridAutoFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-flow" CSS property.</haxe_doc>
		</gridAutoFlow>
		<gridAutoRows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-rows" CSS property.</haxe_doc>
		</gridAutoRows>
		<gridColumn public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column" CSS property.</haxe_doc>
		</gridColumn>
		<gridColumnEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-end" CSS property.</haxe_doc>
		</gridColumnEnd>
		<gridColumnGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-gap" CSS property.</haxe_doc>
		</gridColumnGap>
		<gridColumnStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-start" CSS property.</haxe_doc>
		</gridColumnStart>
		<gridGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-gap" CSS property.</haxe_doc>
		</gridGap>
		<gridRow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row" CSS property.</haxe_doc>
		</gridRow>
		<gridRowEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-end" CSS property.</haxe_doc>
		</gridRowEnd>
		<gridRowGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-gap" CSS property.</haxe_doc>
		</gridRowGap>
		<gridRowStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-start" CSS property.</haxe_doc>
		</gridRowStart>
		<gridTemplate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template" CSS property.</haxe_doc>
		</gridTemplate>
		<gridTemplateAreas public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-areas" CSS property.</haxe_doc>
		</gridTemplateAreas>
		<gridTemplateColumns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-columns" CSS property.</haxe_doc>
		</gridTemplateColumns>
		<gridTemplateRows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-rows" CSS property.</haxe_doc>
		</gridTemplateRows>
		<hangingPunctuation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "hanging-punctuation" CSS property.</haxe_doc>
		</hangingPunctuation>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "height" CSS property.</haxe_doc>
		</height>
		<hyphens public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "hyphens" CSS property.</haxe_doc>
		</hyphens>
		<icon public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "icon" CSS property.</haxe_doc>
		</icon>
		<imageOrientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-orientation" CSS property.</haxe_doc>
		</imageOrientation>
		<imageRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-rendering" CSS property.</haxe_doc>
		</imageRendering>
		<imageResolution public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-resolution" CSS property.</haxe_doc>
		</imageResolution>
		<imeMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ime-mode" CSS property.</haxe_doc>
		</imeMode>
		<initialLetters public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "initial-letters" CSS property.</haxe_doc>
		</initialLetters>
		<inlineBoxAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "inline-box-align" CSS property.</haxe_doc>
		</inlineBoxAlign>
		<inlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "inline-size" CSS property.</haxe_doc>
		</inlineSize>
		<isolation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "isolation" CSS property.</haxe_doc>
		</isolation>
		<justifyContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-content" CSS property.</haxe_doc>
		</justifyContent>
		<justifyItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-items" CSS property.</haxe_doc>
		</justifyItems>
		<justifySelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-self" CSS property.</haxe_doc>
		</justifySelf>
		<left public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "left" CSS property.</haxe_doc>
		</left>
		<letterSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "letter-spacing" CSS property.</haxe_doc>
		</letterSpacing>
		<lightingColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "lighting-color" CSS property.</haxe_doc>
		</lightingColor>
		<lineBoxContain public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-box-contain" CSS property.</haxe_doc>
		</lineBoxContain>
		<lineBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-break" CSS property.</haxe_doc>
		</lineBreak>
		<lineGrid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-grid" CSS property.</haxe_doc>
		</lineGrid>
		<lineHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-height" CSS property.</haxe_doc>
		</lineHeight>
		<lineSnap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-snap" CSS property.</haxe_doc>
		</lineSnap>
		<lineStacking public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking" CSS property.</haxe_doc>
		</lineStacking>
		<lineStackingRuby public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-ruby" CSS property.</haxe_doc>
		</lineStackingRuby>
		<lineStackingShift public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-shift" CSS property.</haxe_doc>
		</lineStackingShift>
		<lineStackingStrategy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-strategy" CSS property.</haxe_doc>
		</lineStackingStrategy>
		<listStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style" CSS property.</haxe_doc>
		</listStyle>
		<listStyleImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-image" CSS property.</haxe_doc>
		</listStyleImage>
		<listStylePosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-position" CSS property.</haxe_doc>
		</listStylePosition>
		<listStyleType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-type" CSS property.</haxe_doc>
		</listStyleType>
		<margin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin" CSS property.</haxe_doc>
		</margin>
		<marginBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-block-end" CSS property.</haxe_doc>
		</marginBlockEnd>
		<marginBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-block-start" CSS property.</haxe_doc>
		</marginBlockStart>
		<marginBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-bottom" CSS property.</haxe_doc>
		</marginBottom>
		<marginInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-inline-end" CSS property.</haxe_doc>
		</marginInlineEnd>
		<marginInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-inline-start" CSS property.</haxe_doc>
		</marginInlineStart>
		<marginLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-left" CSS property.</haxe_doc>
		</marginLeft>
		<marginRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-right" CSS property.</haxe_doc>
		</marginRight>
		<marginTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-top" CSS property.</haxe_doc>
		</marginTop>
		<marker public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker" CSS property.</haxe_doc>
		</marker>
		<markerEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-end" CSS property.</haxe_doc>
		</markerEnd>
		<markerMid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-mid" CSS property.</haxe_doc>
		</markerMid>
		<markerOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-offset" CSS property.</haxe_doc>
		</markerOffset>
		<markerSide public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-side" CSS property.</haxe_doc>
		</markerSide>
		<markerStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-start" CSS property.</haxe_doc>
		</markerStart>
		<marks public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marks" CSS property.</haxe_doc>
		</marks>
		<mask public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask" CSS property.</haxe_doc>
		</mask>
		<maskBox public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box" CSS property.</haxe_doc>
		</maskBox>
		<maskBoxOutset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-outset" CSS property.</haxe_doc>
		</maskBoxOutset>
		<maskBoxRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-repeat" CSS property.</haxe_doc>
		</maskBoxRepeat>
		<maskBoxSlice public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-slice" CSS property.</haxe_doc>
		</maskBoxSlice>
		<maskBoxSource public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-source" CSS property.</haxe_doc>
		</maskBoxSource>
		<maskBoxWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-width" CSS property.</haxe_doc>
		</maskBoxWidth>
		<maskClip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-clip" CSS property.</haxe_doc>
		</maskClip>
		<maskComposite public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-composite" CSS property.</haxe_doc>
		</maskComposite>
		<maskImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-image" CSS property.</haxe_doc>
		</maskImage>
		<maskMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-mode" CSS property.</haxe_doc>
		</maskMode>
		<maskOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-origin" CSS property.</haxe_doc>
		</maskOrigin>
		<maskPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position" CSS property.</haxe_doc>
		</maskPosition>
		<maskPositionX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position-x" CSS property.</haxe_doc>
		</maskPositionX>
		<maskPositionY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position-y" CSS property.</haxe_doc>
		</maskPositionY>
		<maskRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-repeat" CSS property.</haxe_doc>
		</maskRepeat>
		<maskSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-size" CSS property.</haxe_doc>
		</maskSize>
		<maskSourceType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-source-type" CSS property.</haxe_doc>
		</maskSourceType>
		<maskType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-type" CSS property.</haxe_doc>
		</maskType>
		<maxBlockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-block-size" CSS property.</haxe_doc>
		</maxBlockSize>
		<maxHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-height" CSS property.</haxe_doc>
		</maxHeight>
		<maxInlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-inline-size" CSS property.</haxe_doc>
		</maxInlineSize>
		<maxLines public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-lines" CSS property.</haxe_doc>
		</maxLines>
		<maxWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-width" CSS property.</haxe_doc>
		</maxWidth>
		<maxZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-zoom" CSS property.</haxe_doc>
		</maxZoom>
		<minBlockSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-block-size" CSS property.</haxe_doc>
		</minBlockSize>
		<minHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-height" CSS property.</haxe_doc>
		</minHeight>
		<minInlineSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-inline-size" CSS property.</haxe_doc>
		</minInlineSize>
		<minWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-width" CSS property.</haxe_doc>
		</minWidth>
		<minZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-zoom" CSS property.</haxe_doc>
		</minZoom>
		<mixBlendMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mix-blend-mode" CSS property.</haxe_doc>
		</mixBlendMode>
		<moveTo public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "move-to" CSS property.</haxe_doc>
		</moveTo>
		<navDown public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-down" CSS property.</haxe_doc>
		</navDown>
		<navIndex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-index" CSS property.</haxe_doc>
		</navIndex>
		<navLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-left" CSS property.</haxe_doc>
		</navLeft>
		<navRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-right" CSS property.</haxe_doc>
		</navRight>
		<navUp public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-up" CSS property.</haxe_doc>
		</navUp>
		<objectFit public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "object-fit" CSS property.</haxe_doc>
		</objectFit>
		<objectPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "object-position" CSS property.</haxe_doc>
		</objectPosition>
		<offset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset" CSS property.</haxe_doc>
		</offset>
		<offsetBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-block-end" CSS property.</haxe_doc>
		</offsetBlockEnd>
		<offsetBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-block-start" CSS property.</haxe_doc>
		</offsetBlockStart>
		<offsetDistance public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-distance" CSS property.</haxe_doc>
		</offsetDistance>
		<offsetInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-inline-end" CSS property.</haxe_doc>
		</offsetInlineEnd>
		<offsetInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-inline-start" CSS property.</haxe_doc>
		</offsetInlineStart>
		<offsetPath public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-path" CSS property.</haxe_doc>
		</offsetPath>
		<offsetRotate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "offset-rotate" CSS property.</haxe_doc>
		</offsetRotate>
		<opacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "opacity" CSS property.</haxe_doc>
		</opacity>
		<order public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "order" CSS property.</haxe_doc>
		</order>
		<orientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "orientation" CSS property.</haxe_doc>
		</orientation>
		<orphans public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "orphans" CSS property.</haxe_doc>
		</orphans>
		<outline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline" CSS property.</haxe_doc>
		</outline>
		<outlineColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-color" CSS property.</haxe_doc>
		</outlineColor>
		<outlineOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-offset" CSS property.</haxe_doc>
		</outlineOffset>
		<outlineStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-style" CSS property.</haxe_doc>
		</outlineStyle>
		<outlineWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-width" CSS property.</haxe_doc>
		</outlineWidth>
		<overflow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow" CSS property.</haxe_doc>
		</overflow>
		<overflowAnchor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-anchor" CSS property.</haxe_doc>
		</overflowAnchor>
		<overflowWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-wrap" CSS property.</haxe_doc>
		</overflowWrap>
		<overflowX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-x" CSS property.</haxe_doc>
		</overflowX>
		<overflowY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-y" CSS property.</haxe_doc>
		</overflowY>
		<overscrollBehavior public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior" CSS property.</haxe_doc>
		</overscrollBehavior>
		<overscrollBehaviorX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior-x" CSS property.</haxe_doc>
		</overscrollBehaviorX>
		<overscrollBehaviorY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overscroll-behavior-y" CSS property.</haxe_doc>
		</overscrollBehaviorY>
		<padding public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding" CSS property.</haxe_doc>
		</padding>
		<paddingBlockEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-block-end" CSS property.</haxe_doc>
		</paddingBlockEnd>
		<paddingBlockStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-block-start" CSS property.</haxe_doc>
		</paddingBlockStart>
		<paddingBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-bottom" CSS property.</haxe_doc>
		</paddingBottom>
		<paddingInlineEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-inline-end" CSS property.</haxe_doc>
		</paddingInlineEnd>
		<paddingInlineStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-inline-start" CSS property.</haxe_doc>
		</paddingInlineStart>
		<paddingLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-left" CSS property.</haxe_doc>
		</paddingLeft>
		<paddingRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-right" CSS property.</haxe_doc>
		</paddingRight>
		<paddingTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-top" CSS property.</haxe_doc>
		</paddingTop>
		<page public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page" CSS property.</haxe_doc>
		</page>
		<pageBreakAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-after" CSS property.</haxe_doc>
		</pageBreakAfter>
		<pageBreakBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-before" CSS property.</haxe_doc>
		</pageBreakBefore>
		<pageBreakInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-inside" CSS property.</haxe_doc>
		</pageBreakInside>
		<pagePolicy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-policy" CSS property.</haxe_doc>
		</pagePolicy>
		<paintOrder public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "paint-order" CSS property.</haxe_doc>
		</paintOrder>
		<pause public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause" CSS property.</haxe_doc>
		</pause>
		<pauseAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause-after" CSS property.</haxe_doc>
		</pauseAfter>
		<pauseBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause-before" CSS property.</haxe_doc>
		</pauseBefore>
		<perspective public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "perspective" CSS property.</haxe_doc>
		</perspective>
		<perspectiveOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "perspective-origin" CSS property.</haxe_doc>
		</perspectiveOrigin>
		<pitch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pitch" CSS property.</haxe_doc>
		</pitch>
		<pitchRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pitch-range" CSS property.</haxe_doc>
		</pitchRange>
		<placeContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-content" CSS property.</haxe_doc>
		</placeContent>
		<placeItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-items" CSS property.</haxe_doc>
		</placeItems>
		<placeSelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "place-self" CSS property.</haxe_doc>
		</placeSelf>
		<playDuring public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "play-during" CSS property.</haxe_doc>
		</playDuring>
		<pointerEvents public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pointer-events" CSS property.</haxe_doc>
		</pointerEvents>
		<position public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "position" CSS property.</haxe_doc>
		</position>
		<presentationLevel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "presentation-level" CSS property.</haxe_doc>
		</presentationLevel>
		<quotes public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "quotes" CSS property.</haxe_doc>
		</quotes>
		<r public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "r" CSS property.</haxe_doc>
		</r>
		<regionFragment public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "region-fragment" CSS property.</haxe_doc>
		</regionFragment>
		<resize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "resize" CSS property.</haxe_doc>
		</resize>
		<rest public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest" CSS property.</haxe_doc>
		</rest>
		<restAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest-after" CSS property.</haxe_doc>
		</restAfter>
		<restBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest-before" CSS property.</haxe_doc>
		</restBefore>
		<richness public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "richness" CSS property.</haxe_doc>
		</richness>
		<right public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "right" CSS property.</haxe_doc>
		</right>
		<rotation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rotation" CSS property.</haxe_doc>
		</rotation>
		<rotationPoint public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rotation-point" CSS property.</haxe_doc>
		</rotationPoint>
		<rowGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "row-gap" CSS property.</haxe_doc>
		</rowGap>
		<rubyAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-align" CSS property.</haxe_doc>
		</rubyAlign>
		<rubyMerge public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-merge" CSS property.</haxe_doc>
		</rubyMerge>
		<rubyPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-position" CSS property.</haxe_doc>
		</rubyPosition>
		<rx public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rx" CSS property.</haxe_doc>
		</rx>
		<ry public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ry" CSS property.</haxe_doc>
		</ry>
		<scrollBehavior public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-behavior" CSS property.</haxe_doc>
		</scrollBehavior>
		<scrollSnapCoordinate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-coordinate" CSS property.</haxe_doc>
		</scrollSnapCoordinate>
		<scrollSnapDestination public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-destination" CSS property.</haxe_doc>
		</scrollSnapDestination>
		<scrollSnapPointsX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-points-x" CSS property.</haxe_doc>
		</scrollSnapPointsX>
		<scrollSnapPointsY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-points-y" CSS property.</haxe_doc>
		</scrollSnapPointsY>
		<scrollSnapType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type" CSS property.</haxe_doc>
		</scrollSnapType>
		<scrollSnapTypeX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type-x" CSS property.</haxe_doc>
		</scrollSnapTypeX>
		<scrollSnapTypeY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "scroll-snap-type-y" CSS property.</haxe_doc>
		</scrollSnapTypeY>
		<shapeImageThreshold public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-image-threshold" CSS property.</haxe_doc>
		</shapeImageThreshold>
		<shapeMargin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-margin" CSS property.</haxe_doc>
		</shapeMargin>
		<shapeOutside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-outside" CSS property.</haxe_doc>
		</shapeOutside>
		<shapeRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-rendering" CSS property.</haxe_doc>
		</shapeRendering>
		<size public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "size" CSS property.</haxe_doc>
		</size>
		<speak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak" CSS property.</haxe_doc>
		</speak>
		<speakAs public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-as" CSS property.</haxe_doc>
		</speakAs>
		<speakHeader public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-header" CSS property.</haxe_doc>
		</speakHeader>
		<speakNumeral public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-numeral" CSS property.</haxe_doc>
		</speakNumeral>
		<speakPunctuation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-punctuation" CSS property.</haxe_doc>
		</speakPunctuation>
		<speechRate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speech-rate" CSS property.</haxe_doc>
		</speechRate>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "src" CSS property.</haxe_doc>
		</src>
		<stopColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stop-color" CSS property.</haxe_doc>
		</stopColor>
		<stopOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stop-opacity" CSS property.</haxe_doc>
		</stopOpacity>
		<stress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stress" CSS property.</haxe_doc>
		</stress>
		<stringSet public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "string-set" CSS property.</haxe_doc>
		</stringSet>
		<stroke public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke" CSS property.</haxe_doc>
		</stroke>
		<strokeDasharray public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-dasharray" CSS property.</haxe_doc>
		</strokeDasharray>
		<strokeDashoffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-dashoffset" CSS property.</haxe_doc>
		</strokeDashoffset>
		<strokeLinecap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-linecap" CSS property.</haxe_doc>
		</strokeLinecap>
		<strokeLinejoin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-linejoin" CSS property.</haxe_doc>
		</strokeLinejoin>
		<strokeMiterlimit public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-miterlimit" CSS property.</haxe_doc>
		</strokeMiterlimit>
		<strokeOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-opacity" CSS property.</haxe_doc>
		</strokeOpacity>
		<strokeWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stroke-width" CSS property.</haxe_doc>
		</strokeWidth>
		<tabSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "tab-size" CSS property.</haxe_doc>
		</tabSize>
		<tableLayout public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "table-layout" CSS property.</haxe_doc>
		</tableLayout>
		<textAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-align" CSS property.</haxe_doc>
		</textAlign>
		<textAlignLast public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-align-last" CSS property.</haxe_doc>
		</textAlignLast>
		<textAnchor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-anchor" CSS property.</haxe_doc>
		</textAnchor>
		<textCombineUpright public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-combine-upright" CSS property.</haxe_doc>
		</textCombineUpright>
		<textDecoration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration" CSS property.</haxe_doc>
		</textDecoration>
		<textDecorationColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-color" CSS property.</haxe_doc>
		</textDecorationColor>
		<textDecorationLine public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-line" CSS property.</haxe_doc>
		</textDecorationLine>
		<textDecorationSkip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-skip" CSS property.</haxe_doc>
		</textDecorationSkip>
		<textDecorationSkipInk public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-skip-ink" CSS property.</haxe_doc>
		</textDecorationSkipInk>
		<textDecorationStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-style" CSS property.</haxe_doc>
		</textDecorationStyle>
		<textEmphasis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis" CSS property.</haxe_doc>
		</textEmphasis>
		<textEmphasisColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-color" CSS property.</haxe_doc>
		</textEmphasisColor>
		<textEmphasisPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-position" CSS property.</haxe_doc>
		</textEmphasisPosition>
		<textEmphasisStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-style" CSS property.</haxe_doc>
		</textEmphasisStyle>
		<textHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-height" CSS property.</haxe_doc>
		</textHeight>
		<textIndent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-indent" CSS property.</haxe_doc>
		</textIndent>
		<textJustify public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-justify" CSS property.</haxe_doc>
		</textJustify>
		<textOrientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-orientation" CSS property.</haxe_doc>
		</textOrientation>
		<textOverflow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-overflow" CSS property.</haxe_doc>
		</textOverflow>
		<textRendering public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-rendering" CSS property.</haxe_doc>
		</textRendering>
		<textShadow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-shadow" CSS property.</haxe_doc>
		</textShadow>
		<textSizeAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-size-adjust" CSS property.</haxe_doc>
		</textSizeAdjust>
		<textSpaceCollapse public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-space-collapse" CSS property.</haxe_doc>
		</textSpaceCollapse>
		<textTransform public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-transform" CSS property.</haxe_doc>
		</textTransform>
		<textUnderlinePosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-underline-position" CSS property.</haxe_doc>
		</textUnderlinePosition>
		<textWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-wrap" CSS property.</haxe_doc>
		</textWrap>
		<top public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "top" CSS property.</haxe_doc>
		</top>
		<touchAction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "touch-action" CSS property.</haxe_doc>
		</touchAction>
		<transform public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform" CSS property.</haxe_doc>
		</transform>
		<transformBox public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-box" CSS property.</haxe_doc>
		</transformBox>
		<transformOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-origin" CSS property.</haxe_doc>
		</transformOrigin>
		<transformStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-style" CSS property.</haxe_doc>
		</transformStyle>
		<transition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition" CSS property.</haxe_doc>
		</transition>
		<transitionDelay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-delay" CSS property.</haxe_doc>
		</transitionDelay>
		<transitionDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-duration" CSS property.</haxe_doc>
		</transitionDuration>
		<transitionProperty public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-property" CSS property.</haxe_doc>
		</transitionProperty>
		<transitionTimingFunction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-timing-function" CSS property.</haxe_doc>
		</transitionTimingFunction>
		<unicodeBidi public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "unicode-bidi" CSS property.</haxe_doc>
		</unicodeBidi>
		<unicodeRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "unicode-range" CSS property.</haxe_doc>
		</unicodeRange>
		<userSelect public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "user-select" CSS property.</haxe_doc>
		</userSelect>
		<userZoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "user-zoom" CSS property.</haxe_doc>
		</userZoom>
		<vectorEffect public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "vector-effect" CSS property.</haxe_doc>
		</vectorEffect>
		<verticalAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "vertical-align" CSS property.</haxe_doc>
		</verticalAlign>
		<visibility public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "visibility" CSS property.</haxe_doc>
		</visibility>
		<voiceBalance public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-balance" CSS property.</haxe_doc>
		</voiceBalance>
		<voiceDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-duration" CSS property.</haxe_doc>
		</voiceDuration>
		<voiceFamily public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-family" CSS property.</haxe_doc>
		</voiceFamily>
		<voicePitch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-pitch" CSS property.</haxe_doc>
		</voicePitch>
		<voiceRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-range" CSS property.</haxe_doc>
		</voiceRange>
		<voiceRate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-rate" CSS property.</haxe_doc>
		</voiceRate>
		<voiceStress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-stress" CSS property.</haxe_doc>
		</voiceStress>
		<voiceVolume public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-volume" CSS property.</haxe_doc>
		</voiceVolume>
		<volume public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "volume" CSS property.</haxe_doc>
		</volume>
		<whiteSpace public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "white-space" CSS property.</haxe_doc>
		</whiteSpace>
		<widows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "widows" CSS property.</haxe_doc>
		</widows>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "width" CSS property.</haxe_doc>
		</width>
		<willChange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "will-change" CSS property.</haxe_doc>
		</willChange>
		<wordBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-break" CSS property.</haxe_doc>
		</wordBreak>
		<wordSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-spacing" CSS property.</haxe_doc>
		</wordSpacing>
		<wordWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-wrap" CSS property.</haxe_doc>
		</wordWrap>
		<wrapFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "wrap-flow" CSS property.</haxe_doc>
		</wrapFlow>
		<wrapThrough public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "wrap-through" CSS property.</haxe_doc>
		</wrapThrough>
		<writingMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "writing-mode" CSS property.</haxe_doc>
		</writingMode>
		<x public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "x" CSS property.</haxe_doc>
		</x>
		<y public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "y" CSS property.</haxe_doc>
		</y>
		<zIndex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "z-index" CSS property.</haxe_doc>
		</zIndex>
		<zoom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "zoom" CSS property.</haxe_doc>
		</zoom>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<getPropertyValue public="1" set="method">
			<f a="property">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getPropertyValue>
		<getPropertyPriority public="1" set="method"><f a="property">
	<c path="String"/>
	<c path="String"/>
</f></getPropertyPriority>
		<setProperty public="1" set="method">
			<f a="property:value:?priority" v="::&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setProperty>
		<removeProperty public="1" set="method">
			<f a="property">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeProperty>
		<haxe_doc><![CDATA[`CSSStyleDeclaration` represents a collection of CSS property-value pairs. It is used in a few APIs:

	Documentation [CSSStyleDeclaration](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleDeclaration"</e></m></meta>
	</class>
	<class path="js.html.StyleSheet" params="" file="/usr/local/lib/haxe/std/js/html/StyleSheet.hx" extern="1">
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the style sheet language for this style sheet.</haxe_doc>
		</type>
		<href public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the location of the stylesheet.</haxe_doc>
		</href>
		<ownerNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` associating this style sheet with the current document.</haxe_doc>
		</ownerNode>
		<parentStyleSheet public="1" set="null">
			<c path="js.html.StyleSheet"/>
			<haxe_doc>Returns a `StyleSheet` including this one, if any; returns `null` if there aren't any.</haxe_doc>
		</parentStyleSheet>
		<title public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the advisory title of the current style sheet.</haxe_doc>
		</title>
		<media public="1" set="null">
			<c path="js.html.MediaList"/>
			<haxe_doc>Returns a `MediaList` representing the intended destination medium for style information.</haxe_doc>
		</media>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` representing whether the current stylesheet has been applied or not.</haxe_doc>
		</disabled>
		<haxe_doc><![CDATA[An object implementing the `StyleSheet` interface represents a single style sheet. CSS style sheets will further implement the more specialized `CSSStyleSheet` interface.

	Documentation [StyleSheet](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet>]]></haxe_doc>
		<meta><m n=":native"><e>"StyleSheet"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleSheet" params="" file="/usr/local/lib/haxe/std/js/html/CSSStyleSheet.hx" extern="1">
		<extends path="js.html.StyleSheet"/>
		<ownerRule public="1" set="null">
			<c path="js.html.CSSRule"/>
			<haxe_doc>If this style sheet is imported into the document using an `@import` rule, the `ownerRule` property will return that `CSSImportRule`, otherwise it returns `null`.</haxe_doc>
		</ownerRule>
		<cssRules public="1" set="null">
			<c path="js.html.CSSRuleList"/>
			<haxe_doc>Returns a live `CSSRuleList`, listing the `CSSRule` objects in the style sheet.
		
		 This is normally used to access individual rules like this:
		
		 `   styleSheet.cssRules[i] // where i = 0..cssRules.length-1`
		
		 To add or remove items in `cssRules`, use the `CSSStyleSheet`'s `deleteRule()` and `insertRule()` methods, described below.</haxe_doc>
		</cssRules>
		<insertRule public="1" set="method">
			<f a="rule:?index" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ index : 0 }</e></m></meta>
			<haxe_doc>Inserts a new rule at the specified position in the style sheet, given the textual representation of the rule.
		@throws DOMError</haxe_doc>
		</insertRule>
		<deleteRule public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a rule at the specified position from the style sheet.
		@throws DOMError</haxe_doc>
		</deleteRule>
		<haxe_doc><![CDATA[The `CSSStyleSheet` interface represents a single CSS style sheet. It inherits properties and methods from its parent, `StyleSheet`.

	Documentation [CSSStyleSheet](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleSheet"</e></m></meta>
	</class>
	<class path="js.html.Cache" params="" file="/usr/local/lib/haxe/std/js/html/Cache.hx" extern="1">
		<match public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<overloads><match public="1" set="method"><f a="request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="js.html.Response"/></c>
</f></match></overloads>
		</match>
		<matchAll public="1" set="method">
			<f a="?request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Response"/></c></c>
			</f>
			<overloads><matchAll public="1" set="method"><f a="?request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="Array"><c path="js.html.Response"/></c></c>
</f></matchAll></overloads>
		</matchAll>
		<add public="1" set="method">
			<f a="request">
				<c path="js.html.Request"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><add public="1" set="method"><f a="request">
	<c path="String"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></add></overloads>
		</add>
		<addAll public="1" set="method"><f a="requests">
	<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.Request"/>
	<c path="String"/>
</x></c>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></addAll>
		<put public="1" set="method">
			<f a="request:response">
				<c path="js.html.Request"/>
				<c path="js.html.Response"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<overloads><put public="1" set="method"><f a="request:response">
	<c path="String"/>
	<c path="js.html.Response"/>
	<c path="js.lib.Promise"><x path="Void"/></c>
</f></put></overloads>
		</put>
		<delete public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<overloads><delete public="1" set="method"><f a="request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><x path="Bool"/></c>
</f></delete></overloads>
		</delete>
		<keys public="1" set="method">
			<f a="?request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Request"/></c></c>
			</f>
			<overloads><keys public="1" set="method"><f a="?request:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
	<c path="js.lib.Promise"><c path="Array"><c path="js.html.Request"/></c></c>
</f></keys></overloads>
		</keys>
		<haxe_doc><![CDATA[The `Cache` interface provides a storage mechanism for `Request` / `Response` object pairs that are cached, for example as part of the `ServiceWorker` life cycle. Note that the `Cache` interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.

	Documentation [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Cache$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Cache>]]></haxe_doc>
		<meta><m n=":native"><e>"Cache"</e></m></meta>
	</class>
	<typedef path="js.html.CacheQueryOptions" params="" file="/usr/local/lib/haxe/std/js/html/CacheQueryOptions.hx"><a>
	<ignoreVary>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreVary>
	<ignoreSearch>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreSearch>
	<ignoreMethod>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ignoreMethod>
	<cacheName>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</cacheName>
</a></typedef>
	<class path="js.html.CacheStorage" params="" file="/usr/local/lib/haxe/std/js/html/CacheStorage.hx" extern="1">
		<match public="1" set="method">
			<f a="request:?options">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<haxe_doc>Checks if a given `Request` is a key in any of the `Cache` objects that the `CacheStorage` object tracks, and returns a `Promise` that resolves to that match.</haxe_doc>
			<overloads><match public="1" set="method">
	<f a="request:?options">
		<c path="String"/>
		<x path="Null"><t path="js.html.CacheQueryOptions"/></x>
		<c path="js.lib.Promise"><c path="js.html.Response"/></c>
	</f>
	<haxe_doc>Checks if a given `Request` is a key in any of the `Cache` objects that the `CacheStorage` object tracks, and returns a `Promise` that resolves to that match.</haxe_doc>
</match></overloads>
		</match>
		<has public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if a `Cache` object matching the `cacheName` exists.</haxe_doc>
		</has>
		<open public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><c path="js.html.Cache"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to the `Cache` object matching the `cacheName` (a new cache is created if it doesn't already exist.)</haxe_doc>
		</open>
		<delete public="1" set="method">
			<f a="cacheName">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Finds the `Cache` object matching the `cacheName`, and if found, deletes the `Cache` object and returns a `Promise` that resolves to `true`. If no `Cache` object is found, it returns `false`.</haxe_doc>
		</delete>
		<keys public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="String"/></c></c></f>
			<haxe_doc>Returns a `Promise` that will resolve with an array containing strings corresponding to all of the named `Cache` objects tracked by the `CacheStorage`. Use this method to iterate over a list of all the `Cache` objects.</haxe_doc>
		</keys>
		<new public="1" set="method">
			<f a="namespace:principal">
				<x path="js.html.CacheStorageNamespace"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `CacheStorage` interface represents the storage for `Cache` objects.

	Documentation [CacheStorage](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage>]]></haxe_doc>
		<meta><m n=":native"><e>"CacheStorage"</e></m></meta>
	</class>
	<abstract path="js.html.CacheStorageNamespace" params="" file="/usr/local/lib/haxe/std/js/html/CacheStorageNamespace.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CacheStorageNamespace.CacheStorageNamespace_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/CacheStorageNamespace.hx" private="1" module="js.html.CacheStorageNamespace" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.MediaStream" params="" file="/usr/local/lib/haxe/std/js/html/MediaStream.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing 36 characters denoting a universally unique identifier (UUID) for the object.</haxe_doc>
		</id>
		<active public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value that returns `true` if the `MediaStream` is active, or `false` otherwise.</haxe_doc>
		</active>
		<onaddtrack public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when an `addtrack` event is fired when a new `MediaStreamTrack` object is added.</haxe_doc>
		</onaddtrack>
		<onremovetrack public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` containing the action to perform when a `removetrack` event is fired when a  `MediaStreamTrack` object is removed from it.</haxe_doc>
		</onremovetrack>
		<currentTime public="1" set="null"><x path="Float"/></currentTime>
		<getAudioTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.AudioStreamTrack"/></c></f>
			<haxe_doc>Returns a list of the `MediaStreamTrack` objects stored in the MediaStream` object that have their kind` attribute set to "audio"`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getAudioTracks>
		<getVideoTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.VideoStreamTrack"/></c></f>
			<haxe_doc>Returns a list of the `MediaStreamTrack` objects stored in the `MediaStream` object that have their `kind` attribute set to `"video"`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getVideoTracks>
		<getTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.MediaStreamTrack"/></c></f>
			<haxe_doc>Returns a list of all `MediaStreamTrack` objects stored in the `MediaStream` object, regardless of the value of the `kind` attribute. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getTracks>
		<getTrackById public="1" set="method">
			<f a="trackId">
				<c path="String"/>
				<c path="js.html.MediaStreamTrack"/>
			</f>
			<haxe_doc>Returns the track whose ID corresponds to the one given in parameters, trackid`. If no parameter is given, or if no track with that ID does exist, it returns null`. If several tracks have the same ID, it returns the first one.</haxe_doc>
		</getTrackById>
		<addTrack public="1" set="method">
			<f a="track">
				<c path="js.html.MediaStreamTrack"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores a copy of the `MediaStreamTrack` given as argument. If the track has already been added to the `MediaStream` object, nothing happens.</haxe_doc>
		</addTrack>
		<removeTrack public="1" set="method">
			<f a="track">
				<c path="js.html.MediaStreamTrack"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the `MediaStreamTrack` given as argument. If the track is not part of the MediaStream` object, nothing happens.</haxe_doc>
		</removeTrack>
		<clone public="1" set="method">
			<f a=""><c path="js.html.MediaStream"/></f>
			<haxe_doc>Returns a clone of the `MediaStream` object. The clone will, however, have a unique value for `MediaStream.id`.</haxe_doc>
		</clone>
		<new public="1" set="method">
			<f a="tracks">
				<c path="Array"><c path="js.html.MediaStreamTrack"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="stream">
						<c path="js.html.MediaStream"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `MediaStream` interface represents a stream of media content. A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of `MediaStreamTrack`.

	Documentation [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStream>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStream"</e></m></meta>
	</class>
	<class path="js.html.CanvasCaptureMediaStream" params="" file="/usr/local/lib/haxe/std/js/html/CanvasCaptureMediaStream.hx" extern="1">
		<extends path="js.html.MediaStream"/>
		<canvas public="1" set="null"><c path="js.html.CanvasElement"/></canvas>
		<requestFrame public="1" set="method"><f a=""><x path="Void"/></f></requestFrame>
		<meta><m n=":native"><e>"CanvasCaptureMediaStream"</e></m></meta>
	</class>
	<class path="js.html.CanvasElement" params="" file="/usr/local/lib/haxe/std/js/html/CanvasElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a positive `integer` reflecting the `width` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `300` is used.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a positive `integer` reflecting the `height` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `150` is used.</haxe_doc>
		</height>
		<getContext public="1" set="method">
			<f a="contextId:?contextOptions">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Returns a drawing context on the canvas, or null if the context ID is not supported. A drawing context lets you draw on the canvas. Calling getContext with `"2d"` returns a `CanvasRenderingContext2D` object, whereas calling it with `"webgl"` (or `"experimental-webgl"`) returns a `WebGLRenderingContext` object. This context is only available on browsers that implement WebGL.
		@throws DOMError</haxe_doc>
		</getContext>
		<toDataURL public="1" set="method">
			<f a="?type:?encoderOptions" v="&quot;&quot;:">
				<c path="String"/>
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ type : "" }</e></m></meta>
			<haxe_doc>Returns a data-URL containing a representation of the image in the format specified by the `type` parameter (defaults to `png`). The returned image is in a resolution of 96dpi.
		@throws DOMError</haxe_doc>
		</toDataURL>
		<toBlob public="1" set="method">
			<f a="callback:?type:?encoderOptions" v=":&quot;&quot;:">
				<f a="">
					<c path="js.html.Blob"/>
					<x path="Void"/>
				</f>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ type : "" }</e></m></meta>
			<haxe_doc>Creates a `Blob` object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent.
		@throws DOMError</haxe_doc>
		</toBlob>
		<captureStream public="1" set="method">
			<f a="?frameRate">
				<x path="Float"/>
				<c path="js.html.CanvasCaptureMediaStream"/>
			</f>
			<haxe_doc>Returns a `CanvasCaptureMediaStream` that is a real-time video capture of the surface of the canvas.
		@throws DOMError</haxe_doc>
		</captureStream>
		<getContext2d public="1" get="inline" set="null" line="73">
			<f a="?attribs">
				<a/>
				<c path="js.html.CanvasRenderingContext2D"/>
			</f>
			<haxe_doc>Shorthand for getting a CanvasRenderingContext2D.</haxe_doc>
		</getContext2d>
		<getContextWebGL public="1" get="inline" set="null" line="77">
			<f a="?attribs">
				<x path="Null"><t path="js.html.webgl.ContextAttributes"/></x>
				<c path="js.html.webgl.RenderingContext"/>
			</f>
			<haxe_doc>Shorthand for getting a js.html.webgl.RenderingContext.</haxe_doc>
		</getContextWebGL>
		<getContextWebGL2 public="1" get="inline" set="null" line="81">
			<f a="?attribs">
				<x path="Null"><t path="js.html.webgl.ContextAttributes"/></x>
				<c path="js.html.webgl.WebGL2RenderingContext"/>
			</f>
			<haxe_doc>Shorthand for getting a js.html.webgl.WebGL2RenderingContext.</haxe_doc>
		</getContextWebGL2>
		<haxe_doc><![CDATA[The `HTMLCanvasElement` interface provides properties and methods for manipulating the layout and presentation of canvas elements. The `HTMLCanvasElement` interface also inherits the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLCanvasElement"</e></m></meta>
	</class>
	<class path="js.html._CanvasElement.CanvasUtil" params="" file="/usr/local/lib/haxe/std/js/html/CanvasElement.hx" private="1" module="js.html.CanvasElement">
		<getContextWebGL public="1" set="method" line="87" static="1"><f a="canvas:attribs">
	<c path="js.html.CanvasElement"/>
	<a/>
	<c path="js.html.webgl.RenderingContext"/>
</f></getContextWebGL>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="js.html.CanvasGradient" params="" file="/usr/local/lib/haxe/std/js/html/CanvasGradient.hx" extern="1">
		<addColorStop public="1" set="method">
			<f a="offset:color">
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a new stop, defined by an `offset` and a `color`, to the gradient. If the offset is not between `0` and `1` an `INDEX_SIZE_ERR` is raised, if the color can't be parsed as a CSS `color`, a `SYNTAX_ERR` is raised.
		@throws DOMError</haxe_doc>
		</addColorStop>
		<haxe_doc><![CDATA[The `CanvasGradient` interface represents an opaque object describing a gradient. It is returned by the methods `CanvasRenderingContext2D.createLinearGradient()` or `CanvasRenderingContext2D.createRadialGradient()`.

	Documentation [CanvasGradient](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasGradient"</e></m></meta>
	</class>
	<class path="js.html.CanvasPattern" params="" file="/usr/local/lib/haxe/std/js/html/CanvasPattern.hx" extern="1">
		<setTransform public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies an `SVGMatrix` representing a linear transform to the pattern.</haxe_doc>
		</setTransform>
		<haxe_doc><![CDATA[The `CanvasPattern` interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the `CanvasRenderingContext2D.createPattern()` method.

	Documentation [CanvasPattern](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasPattern"</e></m></meta>
	</class>
	<class path="js.html.CanvasRenderingContext2D" params="" file="/usr/local/lib/haxe/std/js/html/CanvasRenderingContext2D.hx" extern="1">
		<canvas public="1" set="null"><c path="js.html.CanvasElement"/></canvas>
		<globalAlpha public="1"><x path="Float"/></globalAlpha>
		<globalCompositeOperation public="1"><c path="String"/></globalCompositeOperation>
		<strokeStyle public="1"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.CanvasGradient"/>
		<c path="js.html.CanvasPattern"/>
	</x>
</x></strokeStyle>
		<fillStyle public="1"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.CanvasGradient"/>
		<c path="js.html.CanvasPattern"/>
	</x>
</x></fillStyle>
		<filter public="1"><c path="String"/></filter>
		<imageSmoothingEnabled public="1"><x path="Bool"/></imageSmoothingEnabled>
		<lineWidth public="1"><x path="Float"/></lineWidth>
		<lineCap public="1"><c path="String"/></lineCap>
		<lineJoin public="1"><c path="String"/></lineJoin>
		<miterLimit public="1"><x path="Float"/></miterLimit>
		<lineDashOffset public="1"><x path="Float"/></lineDashOffset>
		<shadowOffsetX public="1"><x path="Float"/></shadowOffsetX>
		<shadowOffsetY public="1"><x path="Float"/></shadowOffsetY>
		<shadowBlur public="1"><x path="Float"/></shadowBlur>
		<shadowColor public="1"><c path="String"/></shadowColor>
		<font public="1"><c path="String"/></font>
		<textAlign public="1"><c path="String"/></textAlign>
		<textBaseline public="1"><c path="String"/></textBaseline>
		<drawImage public="1" set="method">
			<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
				<c path="js.html.ImageElement"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.svg.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.CanvasElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.VideoElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
						<c path="js.html.ImageBitmap"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<c path="js.html.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<c path="js.html.ImageElement"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
			</overloads>
		</drawImage>
		<beginPath public="1" set="method"><f a=""><x path="Void"/></f></beginPath>
		<fill public="1" set="method">
			<f a="path:?winding" v=":NONZERO">
				<c path="js.html.Path2D"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><fill public="1" set="method">
	<f a="?winding" v="NONZERO">
		<x path="js.html.CanvasWindingRule"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</fill></overloads>
		</fill>
		<stroke public="1" set="method">
			<f a="path">
				<c path="js.html.Path2D"/>
				<x path="Void"/>
			</f>
			<overloads><stroke public="1" set="method"><f a=""><x path="Void"/></f></stroke></overloads>
		</stroke>
		<clip public="1" set="method">
			<f a="path:?winding" v=":NONZERO">
				<c path="js.html.Path2D"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><clip public="1" set="method">
	<f a="?winding" v="NONZERO">
		<x path="js.html.CanvasWindingRule"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</clip></overloads>
		</clip>
		<isPointInPath public="1" set="method">
			<f a="path:x:y:?winding" v=":::NONZERO">
				<c path="js.html.Path2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
			<overloads><isPointInPath public="1" set="method">
	<f a="x:y:?winding" v="::NONZERO">
		<x path="Float"/>
		<x path="Float"/>
		<x path="js.html.CanvasWindingRule"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":value"><e>{ winding : NONZERO }</e></m></meta>
</isPointInPath></overloads>
		</isPointInPath>
		<isPointInStroke public="1" set="method">
			<f a="path:x:y">
				<c path="js.html.Path2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<overloads><isPointInStroke public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isPointInStroke></overloads>
		</isPointInStroke>
		<createLinearGradient public="1" set="method"><f a="x0:y0:x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.CanvasGradient"/>
</f></createLinearGradient>
		<createRadialGradient public="1" set="method">
			<f a="x0:y0:r0:x1:y1:r1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.CanvasGradient"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createRadialGradient>
		<createPattern public="1" set="method">
			<f a="image:repetition">
				<c path="js.html.ImageElement"/>
				<c path="String"/>
				<c path="js.html.CanvasPattern"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.svg.ImageElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.CanvasElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.VideoElement"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
				<createPattern public="1" set="method">
					<f a="image:repetition">
						<c path="js.html.ImageBitmap"/>
						<c path="String"/>
						<c path="js.html.CanvasPattern"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createPattern>
			</overloads>
		</createPattern>
		<addHitRegion public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.HitRegionOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</addHitRegion>
		<removeHitRegion public="1" set="method"><f a="id">
	<c path="String"/>
	<x path="Void"/>
</f></removeHitRegion>
		<clearHitRegions public="1" set="method"><f a=""><x path="Void"/></f></clearHitRegions>
		<createImageData public="1" set="method">
			<f a="imagedata">
				<c path="js.html.ImageData"/>
				<c path="js.html.ImageData"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><createImageData public="1" set="method">
	<f a="sw:sh">
		<x path="Float"/>
		<x path="Float"/>
		<c path="js.html.ImageData"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</createImageData></overloads>
		</createImageData>
		<getImageData public="1" set="method">
			<f a="sx:sy:sw:sh">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.ImageData"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getImageData>
		<putImageData public="1" set="method">
			<f a="imagedata:dx:dy:dirtyX:dirtyY:dirtyWidth:dirtyHeight">
				<c path="js.html.ImageData"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><putImageData public="1" set="method">
	<f a="imagedata:dx:dy">
		<c path="js.html.ImageData"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</putImageData></overloads>
		</putImageData>
		<setLineDash public="1" set="method">
			<f a="segments">
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setLineDash>
		<getLineDash public="1" set="method"><f a=""><c path="Array"><x path="Float"/></c></f></getLineDash>
		<closePath public="1" set="method"><f a=""><x path="Void"/></f></closePath>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadraticCurveTo public="1" set="method"><f a="cpx:cpy:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadraticCurveTo>
		<bezierCurveTo public="1" set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bezierCurveTo>
		<arcTo public="1" set="method">
			<f a="x1:y1:x2:y2:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arcTo>
		<rect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rect>
		<arc public="1" set="method">
			<f a="x:y:radius:startAngle:endAngle:?anticlockwise" v=":::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arc>
		<ellipse public="1" set="method">
			<f a="x:y:radiusX:radiusY:rotation:startAngle:endAngle:?anticlockwise" v=":::::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</ellipse>
		<clearRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearRect>
		<fillRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillRect>
		<strokeRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></strokeRect>
		<save public="1" set="method"><f a=""><x path="Void"/></f></save>
		<restore public="1" set="method"><f a=""><x path="Void"/></f></restore>
		<fillText public="1" set="method">
			<f a="text:x:y:?maxWidth">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</fillText>
		<strokeText public="1" set="method">
			<f a="text:x:y:?maxWidth">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</strokeText>
		<measureText public="1" set="method">
			<f a="text">
				<c path="String"/>
				<c path="js.html.TextMetrics"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</measureText>
		<scale public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</scale>
		<rotate public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</rotate>
		<translate public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</translate>
		<transform public="1" set="method">
			<f a="a:b:c:d:e:f">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</transform>
		<setTransform public="1" set="method">
			<f a="a:b:c:d:e:f">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setTransform>
		<resetTransform public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</resetTransform>
		<drawFocusIfNeeded public="1" set="method">
			<f a="element">
				<c path="js.html.Element"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</drawFocusIfNeeded>
		<drawCustomFocusRing public="1" set="method"><f a="element">
	<c path="js.html.Element"/>
	<x path="Bool"/>
</f></drawCustomFocusRing>
		<haxe_doc><![CDATA[To get an object of this interface, call `getContext()` on a `canvas element`, supplying "2d" as the argument:

	Documentation [CanvasRenderingContext2D](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasRenderingContext2D"</e></m></meta>
	</class>
	<abstract path="js.html.CanvasWindingRule" params="" file="/usr/local/lib/haxe/std/js/html/CanvasWindingRule.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CanvasWindingRule.CanvasWindingRule_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/CanvasWindingRule.hx" private="1" module="js.html.CanvasWindingRule" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.CaretPosition" params="" file="/usr/local/lib/haxe/std/js/html/CaretPosition.hx" extern="1">
		<offsetNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` containing the found node at the caret's position.</haxe_doc>
		</offsetNode>
		<offset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the character offset in the caret position node.</haxe_doc>
		</offset>
		<getClientRect public="1" set="method"><f a=""><c path="js.html.DOMRect"/></f></getClientRect>
		<haxe_doc><![CDATA[The `CaretPosition` interface represents the caret postion, an indicator for the text insertion point. You can get a `CaretPosition` using the `document.caretPositionFromPoint` method.

	Documentation [CaretPosition](https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition>]]></haxe_doc>
		<meta><m n=":native"><e>"CaretPosition"</e></m></meta>
	</class>
	<typedef path="js.html.ChannelPixelLayout" params="" file="/usr/local/lib/haxe/std/js/html/ChannelPixelLayout.hx"><a>
	<width><x path="Int"/></width>
	<stride><x path="Int"/></stride>
	<skip><x path="Int"/></skip>
	<offset><x path="Int"/></offset>
	<height><x path="Int"/></height>
	<dataType><x path="js.html.ChannelPixelLayoutDataType"/></dataType>
</a></typedef>
	<abstract path="js.html.ChannelPixelLayoutDataType" params="" file="/usr/local/lib/haxe/std/js/html/ChannelPixelLayoutDataType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ChannelPixelLayoutDataType.ChannelPixelLayoutDataType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ChannelPixelLayoutDataType.hx" private="1" module="js.html.ChannelPixelLayoutDataType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Clipboard" params="" file="/usr/local/lib/haxe/std/js/html/Clipboard.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<read public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.DataTransfer"/></c></f>
			<haxe_doc>Requests arbitrary data (such as images) from the clipboard, returning a `Promise`. When the data has been retrieved, the promise is resolved with a `DataTransfer` object that provides the data.
		@throws DOMError</haxe_doc>
		</read>
		<readText public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>Requests text from the system clipboard; returns a `Promise` which is resolved with a `DOMString` containing the clipboard's text once it's available.
		@throws DOMError</haxe_doc>
		</readText>
		<write public="1" set="method">
			<f a="data">
				<c path="js.html.DataTransfer"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Writes arbitrary data to the system clipboard. This asynchronous operation signals that it's finished by resolving the returned `Promise`.
		@throws DOMError</haxe_doc>
		</write>
		<writeText public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Writes text to the system clipboard, returning a `Promise` which is resolved once the text is fully copied into the clipboard.
		@throws DOMError</haxe_doc>
		</writeText>
		<haxe_doc><![CDATA[The `Clipboard` interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard.

	Documentation [Clipboard](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Clipboard>]]></haxe_doc>
		<meta><m n=":native"><e>"Clipboard"</e></m></meta>
	</class>
	<class path="js.html.Comment" params="" file="/usr/local/lib/haxe/std/js/html/Comment.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<new public="1" set="method">
			<f a="?data" v="&quot;&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ data : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Comment` interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view. Comments are represented in HTML and XML as content between '`!--`' and '`--`'. In XML, the character sequence '`--`' cannot be used within a comment.

	Documentation [Comment](https://developer.mozilla.org/en-US/docs/Web/API/Comment) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Comment$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Comment>]]></haxe_doc>
		<meta><m n=":native"><e>"Comment"</e></m></meta>
	</class>
	<abstract path="js.html.CompositeOperation" params="" file="/usr/local/lib/haxe/std/js/html/CompositeOperation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CompositeOperation.CompositeOperation_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/CompositeOperation.hx" private="1" module="js.html.CompositeOperation" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ComputedEffectTiming" params="" file="/usr/local/lib/haxe/std/js/html/ComputedEffectTiming.hx"><a>
	<progress>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</progress>
	<localTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</localTime>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</endTime>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<currentIteration>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</currentIteration>
	<activeDuration>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</activeDuration>
</a></typedef>
	<class path="js.html.ConsoleInstance" params="" file="/usr/local/lib/haxe/std/js/html/ConsoleInstance.hx" extern="1" interface="1">
		<assert public="1" set="method">
			<f a="?condition:data" v="false:">
				<x path="Bool"/>
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ condition : false }</e></m></meta>
			<haxe_doc>Log a message and stack trace to console if the first argument is `false`.</haxe_doc>
		</assert>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear the console.</haxe_doc>
		</clear>
		<count public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Log the number of times this line has been called with the given label.</haxe_doc>
		</count>
		<countReset public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Resets the value of the counter with the given label.</haxe_doc>
		</countReset>
		<debug public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a message to the console with the log level `"debug"`.
		 Note: Starting with Chromium 58 this method only appears in Chromium browser consoles when level "Verbose" is selected.</haxe_doc>
		</debug>
		<error public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs an error message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</error>
		<info public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Informative logging of information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</info>
		<log public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>For general output of logging information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</log>
		<table public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays tabular data as a table.</haxe_doc>
		</table>
		<trace public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a stack trace.</haxe_doc>
		</trace>
		<warn public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a warning message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</warn>
		<dir public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects.</haxe_doc>
		</dir>
		<dirxml public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not possible.</haxe_doc>
		</dirxml>
		<group public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. To move back out a level, call `groupEnd()`.</haxe_doc>
		</group>
		<groupCollapsed public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. However, unlike `group()` this starts with the inline group collapsed requiring the use of a disclosure button to expand it. To move back out a level, call `groupEnd()`.</haxe_doc>
		</groupCollapsed>
		<groupEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Exits the current inline group.</haxe_doc>
		</groupEnd>
		<time public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.</haxe_doc>
		</time>
		<timeLog public="1" set="method">
			<f a="?label:data" v="&quot;default&quot;:">
				<c path="String"/>
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Logs the value of the specified timer to the console.</haxe_doc>
		</timeLog>
		<timeEnd public="1" set="method">
			<f a="?label" v="&quot;default&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "default" }</e></m></meta>
			<haxe_doc>Stops the specified timer and logs the elapsed time in seconds since it started.</haxe_doc>
		</timeEnd>
		<exception public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>An alias for `error()`.</haxe_doc>
		</exception>
		<timeStamp public="1" set="method">
			<f a="?data">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a marker to the browser's Timeline or Waterfall tool.</haxe_doc>
		</timeStamp>
		<profile public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts the browser's built-in profiler (for example, the Firefox performance tool). You can specify an optional name for the profile.</haxe_doc>
		</profile>
		<profileEnd public="1" set="method">
			<f a="data">
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Stops the profiler. You can see the resulting profile in the browser's performance tool (for example, the Firefox performance tool).</haxe_doc>
		</profileEnd>
		<haxe_doc><![CDATA[The `Console` object provides access to the browser's debugging console (e.g. the Web Console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.

	Documentation [Console](https://developer.mozilla.org/en-US/docs/Web/API/Console) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Console$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Console>]]></haxe_doc>
	</class>
	<typedef path="js.html.ConstrainBooleanParameters" params="" file="/usr/local/lib/haxe/std/js/html/ConstrainBooleanParameters.hx"><a>
	<ideal>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainDOMStringParameters" params="" file="/usr/local/lib/haxe/std/js/html/ConstrainDOMStringParameters.hx"><a>
	<ideal>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainDoubleRange" params="" file="/usr/local/lib/haxe/std/js/html/ConstrainDoubleRange.hx"><a>
	<min>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</min>
	<max>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</max>
	<ideal>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConstrainLongRange" params="" file="/usr/local/lib/haxe/std/js/html/ConstrainLongRange.hx"><a>
	<min>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</min>
	<max>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</max>
	<ideal>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</ideal>
	<exact>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</exact>
</a></typedef>
	<typedef path="js.html.ConvertCoordinateOptions" params="" file="/usr/local/lib/haxe/std/js/html/ConvertCoordinateOptions.hx"><a>
	<toBox>
		<x path="Null"><x path="js.html.CSSBoxType"/></x>
		<meta><m n=":optional"/></meta>
	</toBox>
	<fromBox>
		<x path="Null"><x path="js.html.CSSBoxType"/></x>
		<meta><m n=":optional"/></meta>
	</fromBox>
</a></typedef>
	<typedef path="js.html.Coordinates" params="" file="/usr/local/lib/haxe/std/js/html/Coordinates.hx">
		<a>
			<speed set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the velocity of the device in meters per second. This value can be `null`.</haxe_doc>
			</speed>
			<longitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's longitude in decimal degrees.</haxe_doc>
			</longitude>
			<latitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's latitude in decimal degrees.</haxe_doc>
			</latitude>
			<heading set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the direction in which the device is traveling. This value, specified in degrees, indicates how far off from heading true north the device is. `0` degrees represents true north, and the direction is determined clockwise (which means that east is `90` degrees and west is `270` degrees). If `speed` is `0`, `heading` is `NaN`. If the device is unable to provide `heading` information, this value is `null`.</haxe_doc>
			</heading>
			<altitudeAccuracy set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the accuracy of the `altitude` expressed in meters. This value can be `null`.</haxe_doc>
			</altitudeAccuracy>
			<altitude set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the position's altitude in meters, relative to sea level. This value can be `null` if the implementation cannot provide the data.</haxe_doc>
			</altitude>
			<accuracy set="null">
				<x path="Float"/>
				<haxe_doc>Returns a `double` representing the accuracy of the `latitude` and `longitude` properties, expressed in meters.</haxe_doc>
			</accuracy>
		</a>
		<haxe_doc><![CDATA[The `Coordinates` interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.

	Documentation [Coordinates](https://developer.mozilla.org/en-US/docs/Web/API/Coordinates) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Coordinates$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Coordinates>]]></haxe_doc>
	</typedef>
	<class path="js.html.Crypto" params="" file="/usr/local/lib/haxe/std/js/html/Crypto.hx" extern="1">
		<subtle public="1" set="null">
			<c path="js.html.SubtleCrypto"/>
			<haxe_doc>Returns a `SubtleCrypto` object providing access to common cryptographic primitives, like hashing, signing, encryption or decryption.</haxe_doc>
		</subtle>
		<getRandomValues public="1" set="method">
			<f a="array">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.ArrayBufferView"/>
			</f>
			<haxe_doc>Fills the passed `TypedArray` with cryptographically sound random values.
		@throws DOMError</haxe_doc>
		</getRandomValues>
		<haxe_doc><![CDATA[The `Crypto` interface represents basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.

	Documentation [Crypto](https://developer.mozilla.org/en-US/docs/Web/API/Crypto) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Crypto$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Crypto>]]></haxe_doc>
		<meta><m n=":native"><e>"Crypto"</e></m></meta>
	</class>
	<class path="js.html.CryptoKey" params="" file="/usr/local/lib/haxe/std/js/html/CryptoKey.hx" extern="1">
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns an enumerated value representing the type of the key, a secret key (for symmetric algorithm), a public or a private key (for an asymmetric algorithm)</haxe_doc>
		</type>
		<extractable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` indicating if the raw information may be exported to the application or not.</haxe_doc>
		</extractable>
		<algorithm public="1" set="null">
			<d/>
			<haxe_doc>Returns an opaque object representing a particular cipher the key has to be used with.</haxe_doc>
		</algorithm>
		<usages public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>Returns an array of enumerated values indicating what the key can be used for.</haxe_doc>
		</usages>
		<haxe_doc><![CDATA[The `CryptoKey` interface represents a cryptographic key derived from a specific key algorithm.

	Documentation [CryptoKey](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey>]]></haxe_doc>
		<meta><m n=":native"><e>"CryptoKey"</e></m></meta>
	</class>
	<class path="js.html.DListElement" params="" file="/usr/local/lib/haxe/std/js/html/DListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced.</haxe_doc>
		</compact>
		<haxe_doc><![CDATA[The `HTMLDListElement` interface provides special properties (beyond those of the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating definition list elements.

	Documentation [HTMLDListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDListElement"</e></m></meta>
	</class>
	<class path="js.html.DOMException" params="" file="/usr/local/lib/haxe/std/js/html/DOMException.hx" extern="1">
		<INDEX_SIZE_ERR public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</INDEX_SIZE_ERR>
		<DOMSTRING_SIZE_ERR public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOMSTRING_SIZE_ERR>
		<HIERARCHY_REQUEST_ERR public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HIERARCHY_REQUEST_ERR>
		<WRONG_DOCUMENT_ERR public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</WRONG_DOCUMENT_ERR>
		<INVALID_CHARACTER_ERR public="1" get="inline" set="null" expr="5" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</INVALID_CHARACTER_ERR>
		<NO_DATA_ALLOWED_ERR public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</NO_DATA_ALLOWED_ERR>
		<NO_MODIFICATION_ALLOWED_ERR public="1" get="inline" set="null" expr="7" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</NO_MODIFICATION_ALLOWED_ERR>
		<NOT_FOUND_ERR public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</NOT_FOUND_ERR>
		<NOT_SUPPORTED_ERR public="1" get="inline" set="null" expr="9" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</NOT_SUPPORTED_ERR>
		<INUSE_ATTRIBUTE_ERR public="1" get="inline" set="null" expr="10" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</INUSE_ATTRIBUTE_ERR>
		<INVALID_STATE_ERR public="1" get="inline" set="null" expr="11" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</INVALID_STATE_ERR>
		<SYNTAX_ERR public="1" get="inline" set="null" expr="12" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</SYNTAX_ERR>
		<INVALID_MODIFICATION_ERR public="1" get="inline" set="null" expr="13" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</INVALID_MODIFICATION_ERR>
		<NAMESPACE_ERR public="1" get="inline" set="null" expr="14" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</NAMESPACE_ERR>
		<INVALID_ACCESS_ERR public="1" get="inline" set="null" expr="15" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</INVALID_ACCESS_ERR>
		<VALIDATION_ERR public="1" get="inline" set="null" expr="16" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</VALIDATION_ERR>
		<TYPE_MISMATCH_ERR public="1" get="inline" set="null" expr="17" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</TYPE_MISMATCH_ERR>
		<SECURITY_ERR public="1" get="inline" set="null" expr="18" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</SECURITY_ERR>
		<NETWORK_ERR public="1" get="inline" set="null" expr="19" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</NETWORK_ERR>
		<ABORT_ERR public="1" get="inline" set="null" expr="20" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</ABORT_ERR>
		<URL_MISMATCH_ERR public="1" get="inline" set="null" expr="21" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</URL_MISMATCH_ERR>
		<QUOTA_EXCEEDED_ERR public="1" get="inline" set="null" expr="22" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</QUOTA_EXCEEDED_ERR>
		<TIMEOUT_ERR public="1" get="inline" set="null" expr="23" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</TIMEOUT_ERR>
		<INVALID_NODE_TYPE_ERR public="1" get="inline" set="null" expr="24" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>24</e></m></meta>
		</INVALID_NODE_TYPE_ERR>
		<DATA_CLONE_ERR public="1" get="inline" set="null" expr="25" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DATA_CLONE_ERR>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that contains one of the strings associated with an error name.</haxe_doc>
		</name>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a message or description associated with the given error name.</haxe_doc>
		</message>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `short` that contains one of the `Error codes`, or `0` if none match. This field is used for historical reasons. New DOM exceptions don't use this anymore: they put this info in the `DOMException.name` attribute.</haxe_doc>
		</code>
		<result public="1" set="null"><x path="Int"/></result>
		<filename public="1" set="null"><c path="String"/></filename>
		<lineNumber public="1" set="null"><x path="Int"/></lineNumber>
		<columnNumber public="1" set="null"><x path="Int"/></columnNumber>
		<data public="1" set="null"><d/></data>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method">
			<f a="?message:?name" v="&quot;&quot;:">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMException` interface represents an abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API.

	Documentation [DOMException](https://developer.mozilla.org/en-US/docs/Web/API/DOMException) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMException$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMException>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMException"</e></m></meta>
	</class>
	<class path="js.html.DOMImplementation" params="" file="/usr/local/lib/haxe/std/js/html/DOMImplementation.hx" extern="1">
		<hasFeature public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if a given feature is supported or not. This function is unreliable and kept for compatibility purpose alone: except for SVG-related queries, it always returns `true`. Old browsers are very inconsistent in their behavior.</haxe_doc>
		</hasFeature>
		<createDocumentType public="1" set="method">
			<f a="qualifiedName:publicId:systemId">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.DocumentType"/>
			</f>
			<haxe_doc>Creates and returns a `DocumentType`.
		@throws DOMError</haxe_doc>
		</createDocumentType>
		<createDocument public="1" set="method">
			<f a="namespace:qualifiedName:?doctype">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.DocumentType"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>Creates and returns an `XMLDocument`.
		@throws DOMError</haxe_doc>
		</createDocument>
		<createHTMLDocument public="1" set="method">
			<f a="?title">
				<c path="String"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>Creates and returns an HTML `Document`.
		@throws DOMError</haxe_doc>
		</createHTMLDocument>
		<haxe_doc><![CDATA[The `DOMImplementation` interface represent an object providing methods which are not dependent on any particular document. Such an object is returned by the `Document.implementation` property.

	Documentation [DOMImplementation](https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMImplementation"</e></m></meta>
	</class>
	<class path="js.html.DOMPointReadOnly" params="" file="/usr/local/lib/haxe/std/js/html/DOMPointReadOnly.hx" extern="1">
		<fromPoint public="1" set="method" static="1"><f a="?other">
	<x path="Null"><t path="js.html.DOMPointInit"/></x>
	<c path="js.html.DOMPointReadOnly"/>
</f></fromPoint>
		<x public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's horizontal coordinate, `x`.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's vertical coordinate, `y`.</haxe_doc>
		</y>
		<z public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's depth coordinate, `z`.</haxe_doc>
		</z>
		<w public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The point's perspective value, `w`.</haxe_doc>
		</w>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a JSON representation of the `DOMPointReadOnly` object.</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="?x:?y:?z:?w" v="0.0:0.0:0.0:1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1.0, z : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMPointReadOnly` interface specifies the coordinate and perspective fields used by `DOMPoint` to define a 2D or 3D point in a coordinate system.

	Documentation [DOMPointReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMPointReadOnly"</e></m></meta>
	</class>
	<class path="js.html.DOMPoint" params="" file="/usr/local/lib/haxe/std/js/html/DOMPoint.hx" extern="1">
		<extends path="js.html.DOMPointReadOnly"/>
		<fromPoint public="1" set="method" static="1"><f a="?other">
	<x path="Null"><t path="js.html.DOMPointInit"/></x>
	<c path="js.html.DOMPoint"/>
</f></fromPoint>
		<new public="1" set="method">
			<f a="?x:?y:?z:?w" v="0.0:0.0:0.0:1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1.0, z : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `DOMPoint` object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value.

	Documentation [DOMPoint](https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMPoint"</e></m></meta>
	</class>
	<typedef path="js.html.DOMPointInit" params="" file="/usr/local/lib/haxe/std/js/html/DOMPointInit.hx">
		<a>
			<z>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point value which gives the point's z-coordinate, which is (assuming no transformations that alter the situation) the depth coordinate; positive values are closer to the user and negative values retreat back into the screen. The default value is 0.</haxe_doc>
			</z>
			<y>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point number providing the point's y-coordinate. This is the vertical coordinate, and barring any transforms applied to the coordinate system, positive values are downward and negative values upward toward the top of the screen. The default is 0.</haxe_doc>
			</y>
			<x>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An unrestricted floating-point value indicating the x-coordinate of the point in space. This is generally the horizontal coordinate, with positive values being to the right and negative values to the left. The default value is 0.</haxe_doc>
			</x>
			<w>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The point's w perspective value given as an unrestricted floating-point number. The default is 1.</haxe_doc>
			</w>
		</a>
		<haxe_doc><![CDATA[The `DOMPointInit` dictionary is used to provide the values of the coordinates and perspective when creating and JSONifying a `DOMPoint` or `DOMPointReadOnly` object.

	Documentation [DOMPointInit](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPointInit>]]></haxe_doc>
	</typedef>
	<class path="js.html.DOMQuad" params="" file="/usr/local/lib/haxe/std/js/html/DOMQuad.hx" extern="1">
		<p1 public="1" set="null">
			<c path="js.html.DOMPoint"/>
			<haxe_doc>are `DOMPoint` objects for each of the `DOMQuad` object's four corners.</haxe_doc>
		</p1>
		<p2 public="1" set="null"><c path="js.html.DOMPoint"/></p2>
		<p3 public="1" set="null"><c path="js.html.DOMPoint"/></p3>
		<p4 public="1" set="null"><c path="js.html.DOMPoint"/></p4>
		<bounds public="1" set="null"><c path="js.html.DOMRectReadOnly"/></bounds>
		<getBounds public="1" set="method">
			<f a=""><c path="js.html.DOMRectReadOnly"/></f>
			<haxe_doc>Returns a `DOMRect` object with the coordinates and dimensions of the `DOMQuad` object.</haxe_doc>
		</getBounds>
		<toJSON public="1" set="method">
			<f a=""><t path="js.html.DOMQuadJSON"/></f>
			<haxe_doc>Returns a JSON representation of the `DOMQuad` object.</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="rect">
				<c path="js.html.DOMRectReadOnly"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?p1:?p2:?p3:?p4">
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Null"><t path="js.html.DOMPointInit"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[A `DOMQuad` is a collection of four `DOMPoint`s defining the corners of an arbitrary quadrilateral. Returning `DOMQuad`s lets `getBoxQuads()` return accurate information even when arbitrary 2D or 3D transforms are present. It has a handy `bounds` attribute returning a `DOMRectReadOnly` for those cases where you just want an axis-aligned bounding rectangle.

	Documentation [DOMQuad](https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMQuad>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMQuad"</e></m></meta>
	</class>
	<typedef path="js.html.DOMQuadJSON" params="" file="/usr/local/lib/haxe/std/js/html/DOMQuadJSON.hx"><a>
	<p4>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p4>
	<p3>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p3>
	<p2>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p2>
	<p1>
		<x path="Null"><c path="js.html.DOMPoint"/></x>
		<meta><m n=":optional"/></meta>
	</p1>
</a></typedef>
	<class path="js.html.DOMRectReadOnly" params="" file="/usr/local/lib/haxe/std/js/html/DOMRectReadOnly.hx" extern="1">
		<x public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The x coordinate of the `DOMRect`'s origin.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The y coordinate of the `DOMRect`'s origin.</haxe_doc>
		</y>
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The width of the `DOMRect`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The height of the `DOMRect`.</haxe_doc>
		</height>
		<top public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the top coordinate value of the `DOMRect` (usually the same as `y`.)</haxe_doc>
		</top>
		<right public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the right coordinate value of the `DOMRect` (usually the same as `x + width`).</haxe_doc>
		</right>
		<bottom public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the bottom coordinate value of the `DOMRect` (usually the same as y + height).</haxe_doc>
		</bottom>
		<left public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the left coordinate value of the `DOMRect` (usually the same as `x`).</haxe_doc>
		</left>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0.0:0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0.0, width : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMRectReadOnly` interface specifies the standard properties used by `DOMRect` to define a rectangle.

	Documentation [DOMRectReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMRectReadOnly"</e></m></meta>
	</class>
	<class path="js.html.DOMRect" params="" file="/usr/local/lib/haxe/std/js/html/DOMRect.hx" extern="1">
		<extends path="js.html.DOMRectReadOnly"/>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0.0:0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0.0, width : 0.0, y : 0.0, x : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `DOMRect` represents a rectangle.

	Documentation [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMRect>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMRect"</e></m></meta>
	</class>
	<class path="js.html.DOMRectList" params="" file="/usr/local/lib/haxe/std/js/html/DOMRectList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.DOMRect"/>
</f></item>
		<meta><m n=":native"><e>"DOMRectList"</e></m></meta>
	</class>
	<class path="js.html.DOMStringList" params="" file="/usr/local/lib/haxe/std/js/html/DOMStringList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the length of the list,</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString`.</haxe_doc>
		</item>
		<contains public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `Boolean` indicating if the given string is in the list</haxe_doc>
		</contains>
		<haxe_doc><![CDATA[A type returned by some APIs which contains a list of DOMString (strings).

	Documentation [DOMStringList](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMStringList"</e></m></meta>
	</class>
	<class path="js.html.DOMStringMap" params="" file="/usr/local/lib/haxe/std/js/html/DOMStringMap.hx" extern="1">
		<haxe_doc><![CDATA[Used by the `dataset` HTML attribute to represent data for custom attributes added to elements.

	Documentation [DOMStringMap](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMStringMap"</e></m></meta>
	</class>
	<class path="js.html.DOMTokenList" params="" file="/usr/local/lib/haxe/std/js/html/DOMTokenList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `integer` representing the number of objects stored in the object.</haxe_doc>
		</length>
		<value public="1">
			<c path="String"/>
			<haxe_doc>The value of the list as a `DOMString`.</haxe_doc>
		</value>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns an item in the list by its index (returns undefined if the number is greater than or equal to the length of the list).</haxe_doc>
		</item>
		<contains public="1" set="method">
			<f a="token">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the list contains the given token, otherwise `false`.</haxe_doc>
		</contains>
		<add public="1" set="method">
			<f a="tokens">
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the given token to the list.
		@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method">
			<f a="tokens">
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the specified token from the list.
		@throws DOMError</haxe_doc>
		</remove>
		<replace public="1" set="method">
			<f a="token:newToken">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Replaces an existing token with a new token.
		@throws DOMError</haxe_doc>
		</replace>
		<toggle public="1" set="method">
			<f a="token:?force">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a given token from the list and returns false. If token doesn't exist it's added and the function returns `true`.
		@throws DOMError</haxe_doc>
		</toggle>
		<supports public="1" set="method">
			<f a="token">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given token is in the associated attribute's supported tokens.
		@throws DOMError</haxe_doc>
		</supports>
		<haxe_doc><![CDATA[The `DOMTokenList` interface represents a set of space-separated tokens. Such a set is returned by `Element.classList`, `HTMLLinkElement.relList`, `HTMLAnchorElement.relList`, `HTMLAreaElement.relList`, `HTMLIframeElement.sandbox`, or `HTMLOutputElement.htmlFor`. It is indexed beginning with `0` as with JavaScript `Array` objects. `DOMTokenList` is always case-sensitive.

	Documentation [DOMTokenList](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMTokenList"</e></m></meta>
	</class>
	<class path="js.html.DataListElement" params="" file="/usr/local/lib/haxe/std/js/html/DataListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<options public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Is a `HTMLCollection` representing a collection of the contained option elements.</haxe_doc>
		</options>
		<haxe_doc><![CDATA[The `HTMLDataListElement` interface provides special properties (beyond the `HTMLElement` object interface it also has available to it by inheritance) to manipulate `datalist` elements and their content.

	Documentation [HTMLDataListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDataListElement"</e></m></meta>
	</class>
	<class path="js.html.DataTransfer" params="" file="/usr/local/lib/haxe/std/js/html/DataTransfer.hx" extern="1">
		<dropEffect public="1">
			<c path="String"/>
			<haxe_doc>Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be `none`, `copy`, `link` or `move`.</haxe_doc>
		</dropEffect>
		<effectAllowed public="1">
			<c path="String"/>
			<haxe_doc>Provides all of the types of operations that are possible. Must be one of `none`, `copy`, `copyLink`, `copyMove`, `link`, `linkMove`, `move`, `all` or `uninitialized`.</haxe_doc>
		</effectAllowed>
		<items public="1" set="null">
			<c path="js.html.DataTransferItemList"/>
			<haxe_doc>Gives a `DataTransferItemList` object which is a list of all of the drag data.</haxe_doc>
		</items>
		<types public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>An array of `DOMString` giving the formats that were set in the `dragstart` event.</haxe_doc>
		</types>
		<files public="1" set="null">
			<c path="js.html.FileList"/>
			<haxe_doc>Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.</haxe_doc>
		</files>
		<setDragImage public="1" set="method">
			<f a="image:x:y">
				<c path="js.html.Element"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the image to be used for dragging if a custom one is desired.</haxe_doc>
		</setDragImage>
		<getData public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the data for a given type, or an empty string if data for that type does not exist or the data transfer contains no data.
		@throws DOMError</haxe_doc>
		</getData>
		<setData public="1" set="method">
			<f a="format:data">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the data for a given type. If data for the type does not exist, it is added at the end, such that the last item in the types list will be the new format. If data for the type already exists, the existing data is replaced in the same position.
		@throws DOMError</haxe_doc>
		</setData>
		<clearData public="1" set="method">
			<f a="?format">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the data associated with a given type. The type argument is optional. If the type is empty or not specified, the data associated with all types is removed. If data for the specified type does not exist, or the data transfer contains no data, this method will have no effect.
		@throws DOMError</haxe_doc>
		</clearData>
		<addElement public="1" set="method">
			<f a="element">
				<c path="js.html.Element"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the drag source to the given element.
		@throws DOMError</haxe_doc>
		</addElement>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DataTransfer` object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.

	Documentation [DataTransfer](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransfer"</e></m></meta>
	</class>
	<class path="js.html.DataTransferItem" params="" file="/usr/local/lib/haxe/std/js/html/DataTransferItem.hx" extern="1">
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>The kind of drag data item, `string` or `file`.</haxe_doc>
		</kind>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The drag data item's type, typically a MIME type.</haxe_doc>
		</type>
		<getAsString public="1" set="method">
			<f a="callback">
				<f a="">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Invokes the specified callback with the drag data item string as its argument.
		@throws DOMError</haxe_doc>
		</getAsString>
		<getAsFile public="1" set="method">
			<f a=""><c path="js.html.File"/></f>
			<haxe_doc>Returns the `File` object associated with the drag data item (or null if the drag item is not a file).
		@throws DOMError</haxe_doc>
		</getAsFile>
		<haxe_doc><![CDATA[The `DataTransferItem` object represents one drag data item. During a drag operation, each `drag event` has a `dataTransfer` property which contains a `list` of drag data items. Each item in the list is a `DataTransferItem` object.

	Documentation [DataTransferItem](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransferItem"</e></m></meta>
	</class>
	<class path="js.html.DataTransferItemList" params="" file="/usr/local/lib/haxe/std/js/html/DataTransferItemList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` that is the number of drag items in the list.</haxe_doc>
		</length>
		<add public="1" set="method">
			<f a="data">
				<c path="js.html.File"/>
				<c path="js.html.DataTransferItem"/>
			</f>
			<haxe_doc>Adds an item (either a `File` object or a `DOMString`) to the drag item list and returns a `DataTransferItem` object for the new item.
		@throws DOMError</haxe_doc>
			<overloads><add public="1" set="method">
	<f a="data:type">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.DataTransferItem"/>
	</f>
	<haxe_doc>Adds an item (either a `File` object or a `DOMString`) to the drag item list and returns a `DataTransferItem` object for the new item.
		@throws DOMError</haxe_doc>
</add></overloads>
		</add>
		<remove public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the drag item from the list at the given index.
		@throws DOMError</haxe_doc>
		</remove>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all of the drag items from the list.
		@throws DOMError</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `DataTransferItemList` object is a list of `DataTransferItem` objects representing items being dragged. During a drag operation, each `DragEvent` has a `dataTransfer` property and that property is a `DataTransferItemList`.

	Documentation [DataTransferItemList](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransferItemList"</e></m></meta>
	</class>
	<class path="js.html.DetailsElement" params="" file="/usr/local/lib/haxe/std/js/html/DetailsElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<open public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `boolean` reflecting the `open` HTML attribute, indicating whether or not the element’s contents (not counting the `summary`) is to be shown to the user.</haxe_doc>
		</open>
		<haxe_doc><![CDATA[The `HTMLDetailsElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `details` elements.

	Documentation [HTMLDetailsElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDetailsElement"</e></m></meta>
	</class>
	<abstract path="js.html.DirectionSetting" params="" file="/usr/local/lib/haxe/std/js/html/DirectionSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._DirectionSetting.DirectionSetting_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/DirectionSetting.hx" private="1" module="js.html.DirectionSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Directory" params="" file="/usr/local/lib/haxe/std/js/html/Directory.hx" extern="1">
		<name public="1" set="null"><c path="String"/></name>
		<path public="1" set="null"><c path="String"/></path>
		<getFilesAndDirectories public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.File"/>
	<c path="js.html.Directory"/>
</x></c></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFilesAndDirectories>
		<getFiles public="1" set="method">
			<f a="?recursiveFlag" v="false">
				<x path="Bool"/>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.File"/></c></c>
			</f>
			<meta><m n=":value"><e>{ recursiveFlag : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFiles>
		<new public="1" set="method">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Directory"</e></m></meta>
	</class>
	<class path="js.html.DirectoryElement" params="" file="/usr/local/lib/haxe/std/js/html/DirectoryElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1"><x path="Bool"/></compact>
		<meta><m n=":native"><e>"HTMLDirectoryElement"</e></m></meta>
	</class>
	<class path="js.html.DivElement" params="" file="/usr/local/lib/haxe/std/js/html/DivElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLDivElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating div elements.

	Documentation [HTMLDivElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDivElement"</e></m></meta>
	</class>
	<class path="js.html.Document" params="" file="/usr/local/lib/haxe/std/js/html/Document.hx" extern="1">
		<extends path="js.html.Node"/>
		<implementation public="1" set="null">
			<c path="js.html.DOMImplementation"/>
			<haxe_doc>Returns the DOM implementation associated with the current document.</haxe_doc>
		</implementation>
		<URL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the document location as a string.</haxe_doc>
		</URL>
		<documentURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the document location as a string.</haxe_doc>
		</documentURI>
		<compatMode public="1" set="null">
			<c path="String"/>
			<haxe_doc>Indicates whether the document is rendered in quirks or strict mode.</haxe_doc>
		</compatMode>
		<characterSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the character set being used by the document.</haxe_doc>
		</characterSet>
		<charset public="1" set="null">
			<c path="String"/>
			<haxe_doc>Alias of `Document.characterSet`. Use this property instead.</haxe_doc>
		</charset>
		<inputEncoding public="1" set="null">
			<c path="String"/>
			<haxe_doc>Alias of `Document.characterSet`. Use this property instead.</haxe_doc>
		</inputEncoding>
		<contentType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the Content-Type from the MIME Header of the current document.</haxe_doc>
		</contentType>
		<doctype public="1" set="null">
			<c path="js.html.DocumentType"/>
			<haxe_doc>Returns the Document Type Definition (DTD) of the current document.</haxe_doc>
		</doctype>
		<documentElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the `Element` that is a direct child of the document. For HTML documents, this is normally the `HTMLElement` element.</haxe_doc>
		</documentElement>
		<location public="1" set="null">
			<c path="js.html.Location"/>
			<haxe_doc>Returns the URI of the current document.</haxe_doc>
		</location>
		<referrer public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the URI of the page that linked to this page.</haxe_doc>
		</referrer>
		<lastModified public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the date on which the document was last modified.</haxe_doc>
		</lastModified>
		<readyState public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns loading status of the document.</haxe_doc>
		</readyState>
		<title public="1">
			<c path="String"/>
			<haxe_doc>Sets or gets the title of the current document.</haxe_doc>
		</title>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets directionality (rtl/ltr) of the document.</haxe_doc>
		</dir>
		<body public="1">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the `body` or `frameset` node of the current document.</haxe_doc>
		</body>
		<head public="1" set="null">
			<c path="js.html.HeadElement"/>
			<haxe_doc>Returns the `head` element of the current document.</haxe_doc>
		</head>
		<images public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the images in the current document.</haxe_doc>
		</images>
		<embeds public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the embedded `embed` elements within the current document.</haxe_doc>
		</embeds>
		<plugins public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the available plugins.</haxe_doc>
		</plugins>
		<links public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of all the hyperlinks in the document.</haxe_doc>
		</links>
		<forms public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of the `form` elements within the current document.</haxe_doc>
		</forms>
		<scripts public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns all the `script` elements on the document.</haxe_doc>
		</scripts>
		<defaultView public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the window object.</haxe_doc>
		</defaultView>
		<onreadystatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `readystatechange` event.</haxe_doc>
		</onreadystatechange>
		<onbeforescriptexecute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `beforescriptexecute` event.</haxe_doc>
		</onbeforescriptexecute>
		<onafterscriptexecute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `afterscriptexecute` event.</haxe_doc>
		</onafterscriptexecute>
		<onselectionchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `selectionchange` event is raised.</haxe_doc>
		</onselectionchange>
		<currentScript public="1" set="null"><c path="js.html.Element"/></currentScript>
		<anchors public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a list of all of the anchors in the document.</haxe_doc>
		</anchors>
		<applets public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns an ordered list of the applets within a document.</haxe_doc>
		</applets>
		<fullscreen public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>`true` when the document is in `Using_full-screen_mode`.</haxe_doc>
		</fullscreen>
		<fullscreenEnabled public="1" set="null"><x path="Bool"/></fullscreenEnabled>
		<onfullscreenchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `fullscreenchange` event is raised.</haxe_doc>
		</onfullscreenchange>
		<onfullscreenerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `fullscreenerror` event is raised.</haxe_doc>
		</onfullscreenerror>
		<onpointerlockchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `pointerlockchange` event.</haxe_doc>
		</onpointerlockchange>
		<onpointerlockerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `pointerlockerror` event.</haxe_doc>
		</onpointerlockerror>
		<hidden public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>…</haxe_doc>
		</hidden>
		<visibilityState public="1" set="null">
			<x path="js.html.VisibilityState"/>
			<haxe_doc>Returns a `string` denoting the visibility state of the document. Possible values are `visible`,  `hidden`,  `prerender`, and `unloaded`.</haxe_doc>
		</visibilityState>
		<onvisibilitychange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `visibilitychange` event is raised.</haxe_doc>
		</onvisibilitychange>
		<selectedStyleSheetSet public="1">
			<c path="String"/>
			<haxe_doc>Returns which style sheet set is currently in use.</haxe_doc>
		</selectedStyleSheetSet>
		<lastStyleSheetSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the name of the style sheet set that was last enabled. Has the value `null` until the style sheet is changed by setting the value of `document.selectedStyleSheetSet`.</haxe_doc>
		</lastStyleSheetSet>
		<preferredStyleSheetSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the preferred style sheet set as specified by the page author.</haxe_doc>
		</preferredStyleSheetSet>
		<styleSheetSets public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>Returns a list of the style sheet sets available on the document.</haxe_doc>
		</styleSheetSets>
		<scrollingElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns a reference to the `Element` that scrolls the document.</haxe_doc>
		</scrollingElement>
		<timeline public="1" set="null">
			<c path="js.html.DocumentTimeline"/>
			<haxe_doc>…</haxe_doc>
		</timeline>
		<rootElement public="1" set="null"><c path="js.html.svg.SVGElement"/></rootElement>
		<oncopy public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `copy` event.</haxe_doc>
		</oncopy>
		<oncut public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `cut` event.</haxe_doc>
		</oncut>
		<onpaste public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `paste` event.</haxe_doc>
		</onpaste>
		<activeElement public="1" set="null"><c path="js.html.Element"/></activeElement>
		<styleSheets public="1" set="null"><c path="js.html.StyleSheetList"/></styleSheets>
		<pointerLockElement public="1" set="null"><c path="js.html.Element"/></pointerLockElement>
		<fullscreenElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>The element that's currently in full screen mode for this document.</haxe_doc>
		</fullscreenElement>
		<fonts public="1" set="null"><c path="js.html.FontFaceSet"/></fonts>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `wheel` event.</haxe_doc>
		</onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1"><x path="haxe.Function"/></ongotpointercapture>
		<onlostpointercapture public="1"><x path="haxe.Function"/></onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<getElementsByTagName public="1" set="method">
			<f a="localName">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given tag name.</haxe_doc>
		</getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method">
			<f a="namespace:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given tag name and namespace.
		@throws DOMError</haxe_doc>
		</getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method">
			<f a="classNames">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given class name.</haxe_doc>
		</getElementsByClassName>
		<getElementById public="1" set="method"><f a="elementId">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></getElementById>
		<createElement public="1" set="method">
			<f a="localName:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.ElementCreationOptions"/></x>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Creates a new element with the given tag name.
		@throws DOMError</haxe_doc>
			<overloads><createElement public="1" set="method">
	<f a="localName:?options">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.Element"/>
	</f>
	<haxe_doc>Creates a new element with the given tag name.
		@throws DOMError</haxe_doc>
</createElement></overloads>
		</createElement>
		<createElementNS public="1" set="method">
			<f a="namespace:qualifiedName:?options">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.ElementCreationOptions"/></x>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Creates a new element with the given tag name and namespace URI.
		@throws DOMError</haxe_doc>
			<overloads><createElementNS public="1" set="method">
	<f a="namespace:qualifiedName:?options">
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.Element"/>
	</f>
	<haxe_doc>Creates a new element with the given tag name and namespace URI.
		@throws DOMError</haxe_doc>
</createElementNS></overloads>
		</createElementNS>
		<createDocumentFragment public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Creates a new document fragment.</haxe_doc>
		</createDocumentFragment>
		<createTextNode public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.Text"/>
			</f>
			<haxe_doc>Creates a text node.</haxe_doc>
		</createTextNode>
		<createComment public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.Comment"/>
			</f>
			<haxe_doc>Creates a new comment node and returns it.</haxe_doc>
		</createComment>
		<createProcessingInstruction public="1" set="method">
			<f a="target:data">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.ProcessingInstruction"/>
			</f>
			<haxe_doc>Creates a new `ProcessingInstruction` object.
		@throws DOMError</haxe_doc>
		</createProcessingInstruction>
		<importNode public="1" set="method">
			<f a="node:?deep" v=":false">
				<c path="js.html.Node"/>
				<x path="Bool"/>
				<c path="js.html.Node"/>
			</f>
			<meta><m n=":value"><e>{ deep : false }</e></m></meta>
			<haxe_doc>Returns a clone of a node from an external document.
		@throws DOMError</haxe_doc>
		</importNode>
		<adoptNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Adopt node from an external document.
		@throws DOMError</haxe_doc>
		</adoptNode>
		<createEvent public="1" set="method">
			<f a="interface_">
				<c path="String"/>
				<c path="js.html.Event"/>
			</f>
			<haxe_doc>Creates an event object.
		@throws DOMError</haxe_doc>
		</createEvent>
		<createRange public="1" set="method">
			<f a=""><c path="js.html.Range"/></f>
			<haxe_doc>Creates a `Range` object.
		@throws DOMError</haxe_doc>
		</createRange>
		<createNodeIterator public="1" set="method">
			<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeIterator"/>
			</f>
			<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
			<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
			<overloads>
				<createNodeIterator public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<x path="haxe.Function"/>
						<c path="js.html.NodeIterator"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
				</createNodeIterator>
				<createNodeIterator public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<c path="js.html.NodeFilter"/>
						<c path="js.html.NodeIterator"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `NodeIterator` object.
		@throws DOMError</haxe_doc>
				</createNodeIterator>
			</overloads>
		</createNodeIterator>
		<createTreeWalker public="1" set="method">
			<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.TreeWalker"/>
			</f>
			<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
			<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
			<overloads>
				<createTreeWalker public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<x path="haxe.Function"/>
						<c path="js.html.TreeWalker"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
				</createTreeWalker>
				<createTreeWalker public="1" set="method">
					<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
						<c path="js.html.Node"/>
						<x path="Int"/>
						<c path="js.html.NodeFilter"/>
						<c path="js.html.TreeWalker"/>
					</f>
					<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
					<haxe_doc>Creates a `TreeWalker` object.
		@throws DOMError</haxe_doc>
				</createTreeWalker>
			</overloads>
		</createTreeWalker>
		<createCDATASection public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.CDATASection"/>
			</f>
			<haxe_doc>Creates a new CDATA node and returns it.
		@throws DOMError</haxe_doc>
		</createCDATASection>
		<createAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Creates a new `Attr` object and returns it.
		@throws DOMError</haxe_doc>
		</createAttribute>
		<createAttributeNS public="1" set="method">
			<f a="namespace:name">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Creates a new attribute node in a given namespace and returns it.
		@throws DOMError</haxe_doc>
		</createAttributeNS>
		<getElementsByName public="1" set="method"><f a="elementName">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></getElementsByName>
		<hasFocus public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the focus is currently located anywhere inside the specified document.
		@throws DOMError</haxe_doc>
		</hasFocus>
		<releaseCapture public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the current mouse capture if it's on an element in this document.</haxe_doc>
		</releaseCapture>
		<exitFullscreen public="1" set="method"><f a=""><x path="Void"/></f></exitFullscreen>
		<exitPointerLock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Release the pointer lock.</haxe_doc>
		</exitPointerLock>
		<enableStyleSheetsForSet public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables the style sheets for the specified style sheet set.</haxe_doc>
		</enableStyleSheetsForSet>
		<caretPositionFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.CaretPosition"/>
</f></caretPositionFromPoint>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelectorAll>
		<getAnimations public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Animation"/></c></f>
			<haxe_doc>Returns an array of all `Animation` objects currently in effect, whose target elements are descendants of the `document`.</haxe_doc>
		</getAnimations>
		<createTouch public="1" set="method">
			<f a="?view:?target:?identifier:?pageX:?pageY:?screenX:?screenY:?clientX:?clientY:?radiusX:?radiusY:?rotationAngle:?force" v="::0:0:0:0:0:0:0:0:0:0.0:0.0">
				<c path="js.html.Window"/>
				<c path="js.html.EventTarget"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.Touch"/>
			</f>
			<meta><m n=":value"><e>{ force : 0.0, rotationAngle : 0.0, radiusY : 0, radiusX : 0, clientY : 0, clientX : 0, screenY : 0, screenX : 0, pageY : 0, pageX : 0, identifier : 0 }</e></m></meta>
			<haxe_doc>Creates a `Touch` object.</haxe_doc>
		</createTouch>
		<createTouchList public="1" set="method">
			<f a="touches">
				<c path="Array"><c path="js.html.Touch"/></c>
				<c path="js.html.TouchList"/>
			</f>
			<haxe_doc>Creates a `TouchList` object.</haxe_doc>
			<overloads>
				<createTouchList public="1" set="method">
					<f a="touch:touches">
						<c path="js.html.Touch"/>
						<t path="haxe.extern.Rest"><c path="js.html.Touch"/></t>
						<c path="js.html.TouchList"/>
					</f>
					<haxe_doc>Creates a `TouchList` object.</haxe_doc>
				</createTouchList>
				<createTouchList public="1" set="method">
					<f a=""><c path="js.html.TouchList"/></f>
					<haxe_doc>Creates a `TouchList` object.</haxe_doc>
				</createTouchList>
			</overloads>
		</createTouchList>
		<getSelection public="1" set="method">
			<f a=""><c path="js.html.Selection"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getSelection>
		<elementFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.Element"/>
</f></elementFromPoint>
		<elementsFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="js.html.Element"/></c>
</f></elementsFromPoint>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
				<convertQuadFromNode public="1" set="method">
					<f a="quad:from:?options">
						<c path="js.html.DOMQuad"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertQuadFromNode>
			</overloads>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
				<convertRectFromNode public="1" set="method">
					<f a="rect:from:?options">
						<c path="js.html.DOMRectReadOnly"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMQuad"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertRectFromNode>
			</overloads>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.Text"/>
				<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.Element"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
				<convertPointFromNode public="1" set="method">
					<f a="point:from:?options">
						<t path="js.html.DOMPointInit"/>
						<c path="js.html.HTMLDocument"/>
						<x path="Null"><t path="js.html.ConvertCoordinateOptions"/></x>
						<c path="js.html.DOMPoint"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</convertPointFromNode>
			</overloads>
		</convertPointFromNode>
		<prepend public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<createExpression public="1" set="method">
			<f a="expression:?resolver">
				<c path="String"/>
				<f a="">
					<c path="String"/>
					<x path="Null"><c path="String"/></x>
				</f>
				<c path="js.html.XPathExpression"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createExpression public="1" set="method">
					<f a="expression:?resolver">
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.html.XPathExpression"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createExpression>
				<createExpression public="1" set="method">
					<f a="expression:?resolver">
						<c path="String"/>
						<x path="Null"><t path="js.html.XPathNSResolver"/></x>
						<c path="js.html.XPathExpression"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createExpression>
			</overloads>
		</createExpression>
		<createNSResolver public="1" set="method"><f a="nodeResolver">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></createNSResolver>
		<evaluate public="1" set="method">
			<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
				<c path="String"/>
				<c path="js.html.Node"/>
				<f a="">
					<c path="String"/>
					<x path="Null"><c path="String"/></x>
				</f>
				<x path="Int"/>
				<d/>
				<c path="js.html.XPathResult"/>
			</f>
			<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<evaluate public="1" set="method">
					<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
						<c path="String"/>
						<c path="js.html.Node"/>
						<x path="haxe.Function"/>
						<x path="Int"/>
						<d/>
						<c path="js.html.XPathResult"/>
					</f>
					<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</evaluate>
				<evaluate public="1" set="method">
					<f a="expression:contextNode:?resolver:?type:?result" v=":::0:">
						<c path="String"/>
						<c path="js.html.Node"/>
						<x path="Null"><t path="js.html.XPathNSResolver"/></x>
						<x path="Int"/>
						<d/>
						<c path="js.html.XPathResult"/>
					</f>
					<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</evaluate>
			</overloads>
		</evaluate>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Document` interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.`HTMLElement`

	Documentation [Document](https://developer.mozilla.org/en-US/docs/Web/API/Document) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Document$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Document>]]></haxe_doc>
		<meta><m n=":native"><e>"Document"</e></m></meta>
	</class>
	<class path="js.html.DocumentFragment" params="" file="/usr/local/lib/haxe/std/js/html/DocumentFragment.hx" extern="1">
		<extends path="js.html.Node"/>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<getElementById public="1" set="method">
			<f a="elementId">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Element` node within the DocumentFragment`, in document order, that matches the specified ID.</haxe_doc>
		</getElementById>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Element` node within the `DocumentFragment`, in document order, that matches the specified selectors.
		@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>Returns a `NodeList` of all the `Element` nodes within the `DocumentFragment` that match the specified selectors.
		@throws DOMError</haxe_doc>
		</querySelectorAll>
		<prepend public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</prepend></overloads>
		</prepend>
		<append public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DocumentFragment` interface represents a minimal document object that has no parent. It is used as a lightweight version of `Document` that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made.

	Documentation [DocumentFragment](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentFragment"</e></m></meta>
	</class>
	<class path="js.html.DocumentTimeline" params="" file="/usr/local/lib/haxe/std/js/html/DocumentTimeline.hx" extern="1">
		<extends path="js.html.AnimationTimeline"/>
		<new public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.DocumentTimelineOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DocumentTimeline` interface of the the Web Animations API represents animation timelines, including the default document timeline (accessed via `Document.timeline`).

	Documentation [DocumentTimeline](https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentTimeline"</e></m></meta>
	</class>
	<typedef path="js.html.DocumentTimelineOptions" params="" file="/usr/local/lib/haxe/std/js/html/DocumentTimelineOptions.hx"><a><originTime>
	<x path="Null"><x path="Float"/></x>
	<meta><m n=":optional"/></meta>
</originTime></a></typedef>
	<class path="js.html.DocumentType" params="" file="/usr/local/lib/haxe/std/js/html/DocumentType.hx" extern="1">
		<extends path="js.html.Node"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"html"` for `!DOCTYPE HTML`.</haxe_doc>
		</name>
		<publicId public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"-//W3C//DTD HTML 4.01//EN"`, empty string for HTML5.</haxe_doc>
		</publicId>
		<systemId public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString`, eg `"http://www.w3.org/TR/html4/strict.dtd"`, empty string for HTML5.</haxe_doc>
		</systemId>
		<before public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><before public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</before></overloads>
		</before>
		<after public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><after public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</after></overloads>
		</after>
		<replaceWith public="1" set="method">
			<f a="nodes">
				<t path="haxe.extern.Rest"><c path="js.html.Node"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="nodes">
		<t path="haxe.extern.Rest"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<haxe_doc><![CDATA[The `DocumentType` interface represents a `Node` containing a doctype.

	Documentation [DocumentType](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentType>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentType"</e></m></meta>
	</class>
	<typedef path="js.html.EffectTiming" params="" file="/usr/local/lib/haxe/std/js/html/EffectTiming.hx">
		<a>
			<iterations>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
			</iterations>
			<iterationStart>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
			</iterationStart>
			<fill>
				<x path="Null"><x path="js.html.FillMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
			</fill>
			<endDelay>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
			</endDelay>
			<easing>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
			</easing>
			<duration>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
			</duration>
			<direction>
				<x path="Null"><x path="js.html.PlaybackDirection"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
			</direction>
			<delay>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
			</delay>
		</a>
		<haxe_doc><![CDATA[The `EffectTiming` dictionary, part of the Web Animations API, is used by `Element.animate()`, `KeyframeEffectReadOnly()`, and `KeyframeEffect()` to describe timing properties for animation effects. These properties are all optional, although without setting a `duration` the animation will not play.

	Documentation [EffectTiming](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.ElementCreationOptions" params="" file="/usr/local/lib/haxe/std/js/html/ElementCreationOptions.hx"><a><is>
	<x path="Null"><c path="String"/></x>
	<meta><m n=":optional"/></meta>
</is></a></typedef>
	<class path="js.html.EmbedElement" params="" file="/usr/local/lib/haxe/std/js/html/EmbedElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the address of the resource.</haxe_doc>
		</src>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, containing the type of the resource.</haxe_doc>
		</type>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, containing the displayed width of the resource.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `height` HTML attribute, containing the displayed height of the resource.</haxe_doc>
		</height>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"center"`, and `"justify"`.</haxe_doc>
		</align>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the embedded object.</haxe_doc>
		</name>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLEmbedElement` interface, which provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `embed` elements.

	Documentation [HTMLEmbedElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLEmbedElement"</e></m></meta>
	</class>
	<abstract path="js.html.EndingTypes" params="" file="/usr/local/lib/haxe/std/js/html/EndingTypes.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._EndingTypes.EndingTypes_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/EndingTypes.hx" private="1" module="js.html.EndingTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Event" params="" file="/usr/local/lib/haxe/std/js/html/Event.hx" extern="1">
		<NONE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<CAPTURING_PHASE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</CAPTURING_PHASE>
		<AT_TARGET public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</AT_TARGET>
		<BUBBLING_PHASE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</BUBBLING_PHASE>
		<ALT_MASK public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ALT_MASK>
		<CONTROL_MASK public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CONTROL_MASK>
		<SHIFT_MASK public="1" get="inline" set="null" expr="4" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SHIFT_MASK>
		<META_MASK public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</META_MASK>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of the event (case-insensitive).</haxe_doc>
		</type>
		<target public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>A reference to the target to which the event was originally dispatched.</haxe_doc>
		</target>
		<currentTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent; it's possible this has been changed along the way through retargeting.</haxe_doc>
		</currentTarget>
		<eventPhase public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Indicates which phase of the event flow is being processed.</haxe_doc>
		</eventPhase>
		<bubbles public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean indicating whether the event bubbles up through the DOM or not.</haxe_doc>
		</bubbles>
		<cancelable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean indicating whether the event is cancelable.</haxe_doc>
		</cancelable>
		<returnValue public="1">
			<x path="Bool"/>
			<haxe_doc>A historical property introduced by Internet Explorer and eventually adopted into the DOM specification in order to ensure existing sites continue to work. Ideally, you should try to use `Event.preventDefault()` and `Event.defaultPrevented` instead, but you can use `returnValue` if you choose to do so.</haxe_doc>
		</returnValue>
		<defaultPrevented public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not `event.preventDefault()` has been called on the event.</haxe_doc>
		</defaultPrevented>
		<composed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.</haxe_doc>
		</composed>
		<isTrusted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the event was initiated by the browser (after a user click for instance) or by a script (using an event creation method, like event.initEvent).</haxe_doc>
		</isTrusted>
		<timeStamp public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The time at which the event was created (in milliseconds). By specification, this value is time since epoch, but in reality browsers' definitions vary; in addition, work is underway to change this to be a `DOMHighResTimeStamp` instead.</haxe_doc>
		</timeStamp>
		<cancelBubble public="1">
			<x path="Bool"/>
			<haxe_doc>A historical alias to `Event.stopPropagation()`. Setting its value to `true` before returning from an event handler prevents propagation of the event.</haxe_doc>
		</cancelBubble>
		<originalTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The original target of the event, before any retargetings (Mozilla-specific).</haxe_doc>
		</originalTarget>
		<explicitOriginalTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The explicit original target of the event (Mozilla-specific).</haxe_doc>
		</explicitOriginalTarget>
		<composedPath public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.EventTarget"/></c></f>
			<haxe_doc>Returns the event’s path (objects on which listeners will be invoked). This does not include nodes in shadow trees if the shadow root was created with its `ShadowRoot.mode` closed.</haxe_doc>
		</composedPath>
		<stopPropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops the propagation of events further along in the DOM.</haxe_doc>
		</stopPropagation>
		<stopImmediatePropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>For this particular event, no other listener will be called. Neither those attached on the same element, nor those attached on elements which will be traversed later (in capture phase, for instance)</haxe_doc>
		</stopImmediatePropagation>
		<preventDefault public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels the event (if it is cancelable).</haxe_doc>
		</preventDefault>
		<initEvent public="1" set="method">
			<f a="type:?bubbles:?cancelable" v=":false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
			<haxe_doc>Initializes the value of an Event created. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.EventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Event` interface represents any event which takes place in the DOM; some are user-generated (such as mouse or keyboard events), while others are generated by APIs (such as events that indicate an animation has finished running, a video has been paused, and so forth). There are many types of events, some of which use other interfaces based on the main `Event` interface. `Event` itself contains the properties and methods which are common to all events.

	Documentation [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Event$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Event>]]></haxe_doc>
		<meta><m n=":native"><e>"Event"</e></m></meta>
	</class>
	<typedef path="js.html.EventInit" params="" file="/usr/local/lib/haxe/std/js/html/EventInit.hx"><a>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.EventListener" params="" file="/usr/local/lib/haxe/std/js/html/EventListener.hx">
		<a><handleEvent set="method">
	<f a="event">
		<c path="js.html.Event"/>
		<x path="Void"/>
	</f>
	<haxe_doc>A function that is called whenever an event of the specified type occurs.</haxe_doc>
</handleEvent></a>
		<haxe_doc><![CDATA[The `EventListener` interface represents an object that can handle an event dispatched by an `EventTarget` object.

	Documentation [EventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventListener) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EventListener$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EventListener>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.EventListenerOptions" params="" file="/usr/local/lib/haxe/std/js/html/EventListenerOptions.hx"><a><capture>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</capture></a></typedef>
	<typedef path="js.html.EventModifierInit" params="" file="/usr/local/lib/haxe/std/js/html/EventModifierInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.FetchObserver" params="" file="/usr/local/lib/haxe/std/js/html/FetchObserver.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<state public="1" set="null"><x path="js.html.FetchState"/></state>
		<onstatechange public="1"><x path="haxe.Function"/></onstatechange>
		<onrequestprogress public="1"><x path="haxe.Function"/></onrequestprogress>
		<onresponseprogress public="1"><x path="haxe.Function"/></onresponseprogress>
		<meta><m n=":native"><e>"FetchObserver"</e></m></meta>
	</class>
	<abstract path="js.html.FetchState" params="" file="/usr/local/lib/haxe/std/js/html/FetchState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FetchState.FetchState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/FetchState.hx" private="1" module="js.html.FetchState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FieldSetElement" params="" file="/usr/local/lib/haxe/std/js/html/FieldSetElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `disabled` HTML attribute, indicating whether the user can interact with the control.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormControlsCollection` or `HTMLCollection` referencing the containing form element, if this element is in a form.
		
		 If the field set is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the `null` value if none matches.</haxe_doc>
		</form>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name of the field set, used for submitting the form.</haxe_doc>
		</name>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The `DOMString` `"fieldset"`.</haxe_doc>
		</type>
		<elements public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>The elements belonging to this field set. The type of this property depends on the version of the spec that is implemented by the browser.</haxe_doc>
		</elements>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` `false`, because `fieldset` objects are never candidates for constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` representing the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the element does not satisfy (if any). This is the empty string if the element is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Always returns `true` because `fieldset` objects are never candidates for constraint validation.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the field set. If this message is not the empty string, then the field set is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLFieldSetElement` interface has special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of field-set elements.

	Documentation [HTMLFieldSetElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFieldSetElement"</e></m></meta>
	</class>
	<class path="js.html.File" params="" file="/usr/local/lib/haxe/std/js/html/File.hx" extern="1">
		<extends path="js.html.Blob"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the name of the file referenced by the `File` object.</haxe_doc>
		</name>
		<lastModified public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).</haxe_doc>
		</lastModified>
		<new public="1" set="method">
			<f a="fileBits:fileName:?options">
				<c path="Array"><x path="haxe.extern.EitherType">
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<c path="js.lib.ArrayBuffer"/>
	</x>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Blob"/>
		<c path="String"/>
	</x>
</x></c>
				<c path="String"/>
				<x path="Null"><t path="js.html.FilePropertyBag"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `File` interface provides information about files and allows JavaScript in a web page to access their content.

	Documentation [File](https://developer.mozilla.org/en-US/docs/Web/API/File) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/File$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/File>]]></haxe_doc>
		<meta><m n=":native"><e>"File"</e></m></meta>
	</class>
	<class path="js.html.FileList" params="" file="/usr/local/lib/haxe/std/js/html/FileList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.File"/>
</f></item>
		<haxe_doc><![CDATA[An object of this type is returned by the `files` property of the HTML `input` element; this lets you access the list of files selected with the `input type="file"` element. It's also used for a list of files dropped into web content when using the drag and drop API; see the `DataTransfer` object for details on this usage.

	Documentation [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileList>]]></haxe_doc>
		<meta><m n=":native"><e>"FileList"</e></m></meta>
	</class>
	<typedef path="js.html.FilePropertyBag" params="" file="/usr/local/lib/haxe/std/js/html/FilePropertyBag.hx"><a>
	<type>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<lastModified>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</lastModified>
</a></typedef>
	<abstract path="js.html.FillMode" params="" file="/usr/local/lib/haxe/std/js/html/FillMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FillMode.FillMode_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/FillMode.hx" private="1" module="js.html.FillMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FontElement" params="" file="/usr/local/lib/haxe/std/js/html/FontElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<color public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `color` HTML attribute, containing either a named color or a color specified in the hexadecimal #RRGGBB format.</haxe_doc>
		</color>
		<face public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `face` HTML attribute, containing a comma-separated list of one or more font names.</haxe_doc>
		</face>
		<size public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `size` HTML attribute, containing either a font size number ranging from 1 to 7 or a relative size to the `size` attribute of the `basefont` element, for example -2 or +1.</haxe_doc>
		</size>
		<haxe_doc><![CDATA[Implements the document object model (DOM) representation of the font element. The HTML Font Element `font` defines the font size, font face and color of text.

	Documentation [HTMLFontElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFontElement"</e></m></meta>
	</class>
	<class path="js.html.FontFace" params="" file="/usr/local/lib/haxe/std/js/html/FontFace.hx" extern="1">
		<family public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the family of the font. It is equivalent to the `@font-face/font-family` descriptor.</haxe_doc>
		</family>
		<style public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the style of the font. It is equivalent to the `@font-face/font-style` descriptor.</haxe_doc>
		</style>
		<weight public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the weight of the font. It is equivalent to the `@font-face/font-weight` descriptor.</haxe_doc>
		</weight>
		<stretch public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains how the font stretches. It is equivalent to the `@font-face/font-stretch` descriptor.</haxe_doc>
		</stretch>
		<unicodeRange public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the range of code encompassed the font. It is equivalent to the `@font-face/unicode-range` descriptor.</haxe_doc>
		</unicodeRange>
		<variant public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the variant of the font. It is equivalent to the `@font-face/font-variant` descriptor.</haxe_doc>
		</variant>
		<featureSettings public="1">
			<c path="String"/>
			<haxe_doc>Is a `CSSOMString` that contains the features of the font. It is equivalent to the `@font-face/font-feature-settings`descriptor.</haxe_doc>
		</featureSettings>
		<status public="1" set="null">
			<x path="js.html.FontFaceLoadStatus"/>
			<haxe_doc>Returns an enumerated value indicating the status of the font. It can be one of the following: `"unloaded"`, `"loading"`, `"loaded"`, or `"error"`.</haxe_doc>
		</status>
		<loaded public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.FontFace"/></c>
			<haxe_doc>Returns a `Promise` to a `FontFace` that fulfills when the font is completely loaded and rejects when an error happens.</haxe_doc>
		</loaded>
		<load public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FontFace"/></c></f>
			<haxe_doc>Loads the font, returning a `Promise` to a `FontFace` that fulfills when the font is completely loaded and rejects when an error happens.
		@throws DOMError</haxe_doc>
		</load>
		<new public="1" set="method">
			<f a="family:source:?descriptors">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="family:source:?descriptors">
						<c path="String"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
						<c path="js.html.FontFace"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="family:source:?descriptors">
						<c path="String"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Null"><t path="js.html.FontFaceDescriptors"/></x>
						<c path="js.html.FontFace"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `FontFace` interface represents a single usable font face. It allows control of the source of the font face, being a URL to an external resource, or a buffer; it also allows control of when the font face is loaded and its current status.

	Documentation [FontFace](https://developer.mozilla.org/en-US/docs/Web/API/FontFace) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FontFace$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FontFace>]]></haxe_doc>
		<meta><m n=":native"><e>"FontFace"</e></m></meta>
	</class>
	<typedef path="js.html.FontFaceDescriptors" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceDescriptors.hx"><a>
	<weight>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</weight>
	<variationSettings>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</variationSettings>
	<variant>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</variant>
	<unicodeRange>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</unicodeRange>
	<style>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</style>
	<stretch>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</stretch>
	<featureSettings>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</featureSettings>
	<display>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</display>
</a></typedef>
	<abstract path="js.html.FontFaceLoadStatus" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceLoadStatus.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FontFaceLoadStatus.FontFaceLoadStatus_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceLoadStatus.hx" private="1" module="js.html.FontFaceLoadStatus" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FontFaceSet" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceSet.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<size public="1" set="null"><x path="Int"/></size>
		<onloading public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loading` is fired, indicating a font-face set has started loading.</haxe_doc>
		</onloading>
		<onloadingdone public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loadingdone` is fired, indicating that a font face set has finished loading.</haxe_doc>
		</onloadingdone>
		<onloadingerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever an event of type `loadingerror` is fired, indicating that an error occurred whilst loading a font-face set.</haxe_doc>
		</onloadingerror>
		<ready public="1" set="null"><c path="js.lib.Promise"><x path="Void"/></c></ready>
		<status public="1" set="null">
			<x path="js.html.FontFaceSetLoadStatus"/>
			<haxe_doc>Indicates the font-face's loading status. It will be one of `'loading'` or `'loaded'`.</haxe_doc>
		</status>
		<add public="1" set="method">
			<f a="font">
				<c path="js.html.FontFace"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<has public="1" set="method"><f a="font">
	<c path="js.html.FontFace"/>
	<x path="Bool"/>
</f></has>
		<delete public="1" set="method"><f a="font">
	<c path="js.html.FontFace"/>
	<x path="Bool"/>
</f></delete>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<entries public="1" set="method"><f a=""><t path="js.html.FontFaceSetIterator"/></f></entries>
		<values public="1" set="method"><f a=""><t path="js.html.FontFaceSetIterator"/></f></values>
		<forEach public="1" set="method">
			<f a="cb:?thisArg">
				<f a="::">
					<c path="js.html.FontFace"/>
					<c path="js.html.FontFace"/>
					<c path="js.html.FontFaceSet"/>
					<x path="Void"/>
				</f>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<load public="1" set="method">
			<f a="font:?text" v=":&quot; &quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.FontFace"/></c></c>
			</f>
			<meta><m n=":value"><e>{ text : " " }</e></m></meta>
		</load>
		<check public="1" set="method">
			<f a="font:?text" v=":&quot; &quot;">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ text : " " }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</check>
		<haxe_doc><![CDATA[The `FontFaceSet` interface of the CSS Font Loading API manages the loading of font-faces and querying of their download status.

	Documentation [FontFaceSet](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet>]]></haxe_doc>
		<meta><m n=":native"><e>"FontFaceSet"</e></m></meta>
	</class>
	<typedef path="js.html.FontFaceSetIterator" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceSetIterator.hx"><a><next set="method">
	<f a=""><t path="js.html.FontFaceSetIteratorResult"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<typedef path="js.html.FontFaceSetIteratorResult" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceSetIteratorResult.hx"><a>
	<value><d/></value>
	<done><x path="Bool"/></done>
</a></typedef>
	<abstract path="js.html.FontFaceSetLoadStatus" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceSetLoadStatus.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FontFaceSetLoadStatus.FontFaceSetLoadStatus_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/FontFaceSetLoadStatus.hx" private="1" module="js.html.FontFaceSetLoadStatus" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.FormData" params="" file="/usr/local/lib/haxe/std/js/html/FormData.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a new value onto an existing key inside a `FormData` object, or adds the key if it does not already exist.
		@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="name:value:?filename">
		<c path="String"/>
		<c path="js.html.Blob"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Appends a new value onto an existing key inside a `FormData` object, or adds the key if it does not already exist.
		@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a key/value pair from a `FormData` object.</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Blob"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Directory"/>
						<c path="String"/>
					</x>
				</x>
			</f>
			<haxe_doc>Returns the first value associated with a given key from within a `FormData` object.</haxe_doc>
		</get>
		<getAll public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.Blob"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Directory"/>
		<c path="String"/>
	</x>
</x></c>
			</f>
			<haxe_doc>Returns an array of all the values associated with a given key from within a `FormData`.</haxe_doc>
		</getAll>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean stating whether a `FormData` object contains a certain key/value pair.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a new value for an existing key inside a `FormData `object, or adds the key/value if it does not already exist.
		@throws DOMError</haxe_doc>
			<overloads><set public="1" set="method">
	<f a="name:value:?filename">
		<c path="String"/>
		<c path="js.html.Blob"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Sets a new value for an existing key inside a `FormData `object, or adds the key/value if it does not already exist.
		@throws DOMError</haxe_doc>
</set></overloads>
		</set>
		<entries public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.FormDataIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?form">
				<c path="js.html.FormElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `FormData` interface provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the `XMLHttpRequest.send()` method. It uses the same format a form would use if the encoding type were set to `"multipart/form-data"`.

	Documentation [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FormData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FormData>]]></haxe_doc>
		<meta><m n=":native"><e>"FormData"</e></m></meta>
	</class>
	<typedef path="js.html.FormDataIterator" params="" file="/usr/local/lib/haxe/std/js/html/FormDataIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.FormElement" params="" file="/usr/local/lib/haxe/std/js/html/FormElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<acceptCharset public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `accept-charset` HTML attribute, representing the character encoding that the server accepts.</haxe_doc>
		</acceptCharset>
		<action public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `action` HTML attribute, containing the URI of a program that processes the information submitted by the form.</haxe_doc>
		</action>
		<autocomplete public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `autocomplete` HTML attribute, indicating whether the controls in this form can have their values automatically populated by the browser.</haxe_doc>
		</autocomplete>
		<enctype public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `enctype` HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms.</haxe_doc>
		</enctype>
		<encoding public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `enctype` HTML attribute, indicating the type of content that is used to transmit the form to the server. Only specified values can be set. The two properties are synonyms.</haxe_doc>
		</encoding>
		<method public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `method` HTML attribute, indicating the HTTP method used to submit the form. Only specified values can be set.</haxe_doc>
		</method>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `name` HTML attribute, containing the name of the form.</haxe_doc>
		</name>
		<noValidate public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the value of the form's  `novalidate` HTML attribute, indicating whether the form should not be validated.</haxe_doc>
		</noValidate>
		<target public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form's `target` HTML attribute, indicating where to display the results received from submitting the form.</haxe_doc>
		</target>
		<elements public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>A `HTMLFormControlsCollection` holding all form controls belonging to this form element.</haxe_doc>
		</elements>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting  the number of controls in the form.</haxe_doc>
		</length>
		<submit public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Submits the form to the server.
		@throws DOMError</haxe_doc>
		</submit>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resets the form to its initial state.</haxe_doc>
		</reset>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the element's child controls are subject to constraint validation and satisfy those contraints; returns `false` if some controls do not satisfy their constraints. Fires an event named `invalid` at any control that does not satisfy its constraints; such controls are considered invalid if the event is not canceled. It is up to the programmer to decide how to respond to `false`.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns `true` if the element's child controls satisfy their validation constraints. When `false` is returned, cancelable `invalid` events are fired for each invalid child and validation problems are reported to the user.</haxe_doc>
		</reportValidity>
		<haxe_doc><![CDATA[The `HTMLFormElement` interface represents a `form` element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.

	Documentation [HTMLFormElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFormElement"</e></m></meta>
	</class>
	<class path="js.html.FrameElement" params="" file="/usr/local/lib/haxe/std/js/html/FrameElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1"><c path="String"/></name>
		<scrolling public="1"><c path="String"/></scrolling>
		<src public="1"><c path="String"/></src>
		<frameBorder public="1"><c path="String"/></frameBorder>
		<longDesc public="1"><c path="String"/></longDesc>
		<noResize public="1"><x path="Bool"/></noResize>
		<contentDocument public="1" set="null"><c path="js.html.HTMLDocument"/></contentDocument>
		<contentWindow public="1" set="null"><c path="js.html.Window"/></contentWindow>
		<marginHeight public="1"><c path="String"/></marginHeight>
		<marginWidth public="1"><c path="String"/></marginWidth>
		<meta><m n=":native"><e>"HTMLFrameElement"</e></m></meta>
	</class>
	<class path="js.html.FrameSetElement" params="" file="/usr/local/lib/haxe/std/js/html/FrameSetElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cols public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` structured as a comma-seperated list specifing the width of each column inside a frameset.</haxe_doc>
		</cols>
		<rows public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` structured as a comma-seperated list specifing the height of each column inside a frameset.</haxe_doc>
		</rows>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<haxe_doc><![CDATA[The `HTMLFrameSetElement` interface provides special properties (beyond those of the regular `HTMLElement` interface they also inherit) for manipulating `frameset` elements.

	Documentation [HTMLFrameSetElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFrameSetElement"</e></m></meta>
	</class>
	<class path="js.html.Gamepad" params="" file="/usr/local/lib/haxe/std/js/html/Gamepad.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing identifying information about the controller.</haxe_doc>
		</id>
		<index public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An integer that is auto-incremented to be unique for each device currently connected to the system.</haxe_doc>
		</index>
		<mapping public="1" set="null">
			<x path="js.html.GamepadMappingType"/>
			<haxe_doc>A string indicating whether the browser has remapped the controls on the device to a known layout.</haxe_doc>
		</mapping>
		<connected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean indicating whether the gamepad is still connected to the system.</haxe_doc>
		</connected>
		<buttons public="1" set="null">
			<c path="Array"><c path="js.html.GamepadButton"/></c>
			<haxe_doc>An array of `gamepadButton` objects representing the buttons present on the device.</haxe_doc>
		</buttons>
		<axes public="1" set="null">
			<c path="Array"><x path="Float"/></c>
			<haxe_doc>An array representing the controls with axes present on the device (e.g. analog thumb sticks).</haxe_doc>
		</axes>
		<timestamp public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the last time the data for this gamepad was updated.</haxe_doc>
		</timestamp>
		<haxe_doc><![CDATA[The `Gamepad` interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.

	Documentation [Gamepad](https://developer.mozilla.org/en-US/docs/Web/API/Gamepad) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Gamepad$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Gamepad>]]></haxe_doc>
		<meta><m n=":native"><e>"Gamepad"</e></m></meta>
	</class>
	<class path="js.html.GamepadButton" params="" file="/usr/local/lib/haxe/std/js/html/GamepadButton.hx" extern="1">
		<pressed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean value indicating whether the button is currently pressed (`true`) or unpressed (`false`).</haxe_doc>
		</pressed>
		<touched public="1" set="null"><x path="Bool"/></touched>
		<value public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A double value used to represent the current state of analog buttons, such as the triggers on many modern gamepads. The values are normalized to the range 0.0 —1.0, with 0.0 representing a button that is not pressed, and 1.0 representing a button that is fully pressed.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `GamepadButton` interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.

	Documentation [GamepadButton](https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton>]]></haxe_doc>
		<meta><m n=":native"><e>"GamepadButton"</e></m></meta>
	</class>
	<abstract path="js.html.GamepadMappingType" params="" file="/usr/local/lib/haxe/std/js/html/GamepadMappingType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._GamepadMappingType.GamepadMappingType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/GamepadMappingType.hx" private="1" module="js.html.GamepadMappingType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.Geolocation" params="" file="/usr/local/lib/haxe/std/js/html/Geolocation.hx">
		<a>
			<watchPosition set="method">
				<f a="successCallback:?errorCallback:?options">
					<f a="">
						<t path="js.html.Position"/>
						<x path="Void"/>
					</f>
					<f a="">
						<c path="js.html.PositionError"/>
						<x path="Void"/>
					</f>
					<t path="js.html.PositionOptions"/>
					<x path="Int"/>
				</f>
				<haxe_doc>Returns a `long` value representing the newly established callback function to be invoked whenever the device location changes.
		@throws DOMError</haxe_doc>
			</watchPosition>
			<getCurrentPosition set="method">
				<f a="successCallback:?errorCallback:?options">
					<f a="">
						<t path="js.html.Position"/>
						<x path="Void"/>
					</f>
					<f a="">
						<c path="js.html.PositionError"/>
						<x path="Void"/>
					</f>
					<t path="js.html.PositionOptions"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Determines the device's current location and gives back a `Position` object with the data.
		@throws DOMError</haxe_doc>
			</getCurrentPosition>
			<clearWatch set="method">
				<f a="watchId">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes the particular handler previously installed using `watchPosition()`.</haxe_doc>
			</clearWatch>
		</a>
		<haxe_doc><![CDATA[The `Geolocation` interface represents an object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.

	Documentation [Geolocation](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Geolocation>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.GetNotificationOptions" params="" file="/usr/local/lib/haxe/std/js/html/GetNotificationOptions.hx"><a><tag>
	<x path="Null"><c path="String"/></x>
	<meta><m n=":optional"/></meta>
</tag></a></typedef>
	<typedef path="js.html.GetRootNodeOptions" params="" file="/usr/local/lib/haxe/std/js/html/GetRootNodeOptions.hx"><a><composed>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</composed></a></typedef>
	<class path="js.html.HRElement" params="" file="/usr/local/lib/haxe/std/js/html/HRElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1"><c path="String"/></align>
		<color public="1"><c path="String"/></color>
		<noShade public="1"><x path="Bool"/></noShade>
		<size public="1"><c path="String"/></size>
		<width public="1"><c path="String"/></width>
		<haxe_doc><![CDATA[The `HTMLHRElement` interface provides special properties (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating `hr` elements.

	Documentation [HTMLHRElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHRElement"</e></m></meta>
	</class>
	<class path="js.html.HTMLAllCollection" params="" file="/usr/local/lib/haxe/std/js/html/HTMLAllCollection.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Node"/>
					<c path="js.html.HTMLCollection"/>
				</x>
			</f>
			<overloads><item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Node"/>
</f></item></overloads>
		</item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Node"/>
		<c path="js.html.HTMLCollection"/>
	</x>
</f></namedItem>
		<meta><m n=":native"><e>"HTMLAllCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLCollection" params="" file="/usr/local/lib/haxe/std/js/html/HTMLCollection.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of items in the collection.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the specific node at the given zero-based `index` into the list. Returns `null` if the `index` is out of range.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the specific node whose ID or, as a fallback, name matches the string specified by `name`. Matching by name is only done as a last resort, only in HTML, and only if the referenced element supports the `name` attribute. Returns `null` if no node exists by the given name.</haxe_doc>
		</namedItem>
		<haxe_doc><![CDATA[The `HTMLCollection` interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.

	Documentation [HTMLCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLDocument" params="" file="/usr/local/lib/haxe/std/js/html/HTMLDocument.hx" extern="1">
		<extends path="js.html.Document"/>
		<domain public="1"><c path="String"/></domain>
		<cookie public="1"><c path="String"/></cookie>
		<designMode public="1"><c path="String"/></designMode>
		<fgColor public="1"><c path="String"/></fgColor>
		<linkColor public="1"><c path="String"/></linkColor>
		<vlinkColor public="1"><c path="String"/></vlinkColor>
		<alinkColor public="1"><c path="String"/></alinkColor>
		<bgColor public="1"><c path="String"/></bgColor>
		<all public="1" set="null"><c path="js.html.HTMLAllCollection"/></all>
		<open public="1" set="method">
			<f a="url:name:features:?replace" v=":::false">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
			</f>
			<meta><m n=":value"><e>{ replace : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="?type:?replace" v=":&quot;&quot;">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.HTMLDocument"/>
	</f>
	<meta><m n=":value"><e>{ replace : "" }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</close>
		<write public="1" set="method">
			<f a="text">
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</write>
		<writeln public="1" set="method">
			<f a="text">
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</writeln>
		<execCommand public="1" set="method">
			<f a="commandId:?showUI:?value" v=":false:&quot;&quot;">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ value : "", showUI : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</execCommand>
		<queryCommandEnabled public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandEnabled>
		<queryCommandIndeterm public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandIndeterm>
		<queryCommandState public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandState>
		<queryCommandSupported public="1" set="method"><f a="commandId">
	<c path="String"/>
	<x path="Bool"/>
</f></queryCommandSupported>
		<queryCommandValue public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandValue>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<captureEvents public="1" set="method"><f a=""><x path="Void"/></f></captureEvents>
		<releaseEvents public="1" set="method"><f a=""><x path="Void"/></f></releaseEvents>
		<createTableCellElement public="1" get="inline" set="null" line="70">
			<f a=""><c path="js.html.TableCellElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<td>` element.]]></haxe_doc>
		</createTableCellElement>
		<createSelectElement public="1" get="inline" set="null" line="72">
			<f a=""><c path="js.html.SelectElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<select>` element.]]></haxe_doc>
		</createSelectElement>
		<createFontElement public="1" get="inline" set="null" line="74">
			<f a=""><c path="js.html.FontElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<font>` element.]]></haxe_doc>
		</createFontElement>
		<createDListElement public="1" get="inline" set="null" line="76">
			<f a=""><c path="js.html.DListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<dl>` element.]]></haxe_doc>
		</createDListElement>
		<createFrameElement public="1" get="inline" set="null" line="78">
			<f a=""><c path="js.html.FrameElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<frame>` element.]]></haxe_doc>
		</createFrameElement>
		<createOListElement public="1" get="inline" set="null" line="80">
			<f a=""><c path="js.html.OListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<ol>` element.]]></haxe_doc>
		</createOListElement>
		<createLIElement public="1" get="inline" set="null" line="82">
			<f a=""><c path="js.html.LIElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<li>` element.]]></haxe_doc>
		</createLIElement>
		<createHRElement public="1" get="inline" set="null" line="84">
			<f a=""><c path="js.html.HRElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<hr>` element.]]></haxe_doc>
		</createHRElement>
		<createParamElement public="1" get="inline" set="null" line="86">
			<f a=""><c path="js.html.ParamElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<param>` element.]]></haxe_doc>
		</createParamElement>
		<createLabelElement public="1" get="inline" set="null" line="88">
			<f a=""><c path="js.html.LabelElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<label>` element.]]></haxe_doc>
		</createLabelElement>
		<createTrackElement public="1" get="inline" set="null" line="90">
			<f a=""><c path="js.html.TrackElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<track>` element.]]></haxe_doc>
		</createTrackElement>
		<createDivElement public="1" get="inline" set="null" line="92">
			<f a=""><c path="js.html.DivElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<div>` element.]]></haxe_doc>
		</createDivElement>
		<createTitleElement public="1" get="inline" set="null" line="94">
			<f a=""><c path="js.html.TitleElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<title>` element.]]></haxe_doc>
		</createTitleElement>
		<createAnchorElement public="1" get="inline" set="null" line="96">
			<f a=""><c path="js.html.AnchorElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<a>` element.]]></haxe_doc>
		</createAnchorElement>
		<createStyleElement public="1" get="inline" set="null" line="98">
			<f a=""><c path="js.html.StyleElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<style>` element.]]></haxe_doc>
		</createStyleElement>
		<createEmbedElement public="1" get="inline" set="null" line="100">
			<f a=""><c path="js.html.EmbedElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<embed>` element.]]></haxe_doc>
		</createEmbedElement>
		<createMeterElement public="1" get="inline" set="null" line="102">
			<f a=""><c path="js.html.MeterElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<meter>` element.]]></haxe_doc>
		</createMeterElement>
		<createPictureElement public="1" get="inline" set="null" line="104">
			<f a=""><c path="js.html.PictureElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<picture>` element.]]></haxe_doc>
		</createPictureElement>
		<createPreElement public="1" get="inline" set="null" line="106">
			<f a=""><c path="js.html.PreElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<pre>` element.]]></haxe_doc>
		</createPreElement>
		<createTableSectionElement public="1" get="inline" set="null" line="108">
			<f a=""><c path="js.html.TableSectionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<thead>` element.]]></haxe_doc>
		</createTableSectionElement>
		<createHeadElement public="1" get="inline" set="null" line="110">
			<f a=""><c path="js.html.HeadElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<head>` element.]]></haxe_doc>
		</createHeadElement>
		<createOptGroupElement public="1" get="inline" set="null" line="112">
			<f a=""><c path="js.html.OptGroupElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<optgroup>` element.]]></haxe_doc>
		</createOptGroupElement>
		<createAudioElement public="1" get="inline" set="null" line="114">
			<f a=""><c path="js.html.AudioElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<audio>` element.]]></haxe_doc>
		</createAudioElement>
		<createVideoElement public="1" get="inline" set="null" line="116">
			<f a=""><c path="js.html.VideoElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<video>` element.]]></haxe_doc>
		</createVideoElement>
		<createLegendElement public="1" get="inline" set="null" line="118">
			<f a=""><c path="js.html.LegendElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<legend>` element.]]></haxe_doc>
		</createLegendElement>
		<createUListElement public="1" get="inline" set="null" line="120">
			<f a=""><c path="js.html.UListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<ul>` element.]]></haxe_doc>
		</createUListElement>
		<createDirectoryElement public="1" get="inline" set="null" line="122">
			<f a=""><c path="js.html.DirectoryElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<dir>` element.]]></haxe_doc>
		</createDirectoryElement>
		<createTableElement public="1" get="inline" set="null" line="124">
			<f a=""><c path="js.html.TableElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<table>` element.]]></haxe_doc>
		</createTableElement>
		<createSlotElement public="1" get="inline" set="null" line="126">
			<f a=""><c path="js.html.SlotElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<slot>` element.]]></haxe_doc>
		</createSlotElement>
		<createSourceElement public="1" get="inline" set="null" line="128">
			<f a=""><c path="js.html.SourceElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<source>` element.]]></haxe_doc>
		</createSourceElement>
		<createLinkElement public="1" get="inline" set="null" line="130">
			<f a=""><c path="js.html.LinkElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<link>` element.]]></haxe_doc>
		</createLinkElement>
		<createIFrameElement public="1" get="inline" set="null" line="132">
			<f a=""><c path="js.html.IFrameElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<iframe>` element.]]></haxe_doc>
		</createIFrameElement>
		<createMediaElement public="1" get="inline" set="null" line="134">
			<f a=""><c path="js.html.MediaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<media>` element.]]></haxe_doc>
		</createMediaElement>
		<createMapElement public="1" get="inline" set="null" line="136">
			<f a=""><c path="js.html.MapElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<map>` element.]]></haxe_doc>
		</createMapElement>
		<createFormElement public="1" get="inline" set="null" line="138">
			<f a=""><c path="js.html.FormElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<form>` element.]]></haxe_doc>
		</createFormElement>
		<createOptionElement public="1" get="inline" set="null" line="140">
			<f a=""><c path="js.html.OptionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<option>` element.]]></haxe_doc>
		</createOptionElement>
		<createMetaElement public="1" get="inline" set="null" line="142">
			<f a=""><c path="js.html.MetaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<meta>` element.]]></haxe_doc>
		</createMetaElement>
		<createObjectElement public="1" get="inline" set="null" line="144">
			<f a=""><c path="js.html.ObjectElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<object>` element.]]></haxe_doc>
		</createObjectElement>
		<createTableCaptionElement public="1" get="inline" set="null" line="146">
			<f a=""><c path="js.html.TableCaptionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<caption>` element.]]></haxe_doc>
		</createTableCaptionElement>
		<createImageElement public="1" get="inline" set="null" line="148">
			<f a=""><c path="js.html.ImageElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<img>` element.]]></haxe_doc>
		</createImageElement>
		<createTextAreaElement public="1" get="inline" set="null" line="150">
			<f a=""><c path="js.html.TextAreaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<textarea>` element.]]></haxe_doc>
		</createTextAreaElement>
		<createScriptElement public="1" get="inline" set="null" line="152">
			<f a=""><c path="js.html.ScriptElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<script>` element.]]></haxe_doc>
		</createScriptElement>
		<createDataListElement public="1" get="inline" set="null" line="154">
			<f a=""><c path="js.html.DataListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<datalist>` element.]]></haxe_doc>
		</createDataListElement>
		<createModElement public="1" get="inline" set="null" line="156">
			<f a=""><c path="js.html.ModElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<mod>` element.]]></haxe_doc>
		</createModElement>
		<createOutputElement public="1" get="inline" set="null" line="158">
			<f a=""><c path="js.html.OutputElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<output>` element.]]></haxe_doc>
		</createOutputElement>
		<createAreaElement public="1" get="inline" set="null" line="160">
			<f a=""><c path="js.html.AreaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<area>` element.]]></haxe_doc>
		</createAreaElement>
		<createProgressElement public="1" get="inline" set="null" line="162">
			<f a=""><c path="js.html.ProgressElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<progress>` element.]]></haxe_doc>
		</createProgressElement>
		<createButtonElement public="1" get="inline" set="null" line="164">
			<f a=""><c path="js.html.ButtonElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<button>` element.]]></haxe_doc>
		</createButtonElement>
		<createFieldSetElement public="1" get="inline" set="null" line="166">
			<f a=""><c path="js.html.FieldSetElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<fieldset>` element.]]></haxe_doc>
		</createFieldSetElement>
		<createMenuElement public="1" get="inline" set="null" line="168">
			<f a=""><c path="js.html.MenuElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<menu>` element.]]></haxe_doc>
		</createMenuElement>
		<createBRElement public="1" get="inline" set="null" line="170">
			<f a=""><c path="js.html.BRElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<br>` element.]]></haxe_doc>
		</createBRElement>
		<createSpanElement public="1" get="inline" set="null" line="172">
			<f a=""><c path="js.html.SpanElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<span>` element.]]></haxe_doc>
		</createSpanElement>
		<createDetailsElement public="1" get="inline" set="null" line="174">
			<f a=""><c path="js.html.DetailsElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<details>` element.]]></haxe_doc>
		</createDetailsElement>
		<createBodyElement public="1" get="inline" set="null" line="176">
			<f a=""><c path="js.html.BodyElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<body>` element.]]></haxe_doc>
		</createBodyElement>
		<createInputElement public="1" get="inline" set="null" line="178">
			<f a=""><c path="js.html.InputElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<input>` element.]]></haxe_doc>
		</createInputElement>
		<createBaseElement public="1" get="inline" set="null" line="180">
			<f a=""><c path="js.html.BaseElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<base>` element.]]></haxe_doc>
		</createBaseElement>
		<createQuoteElement public="1" get="inline" set="null" line="182">
			<f a=""><c path="js.html.QuoteElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<quote>` element.]]></haxe_doc>
		</createQuoteElement>
		<createFrameSetElement public="1" get="inline" set="null" line="184">
			<f a=""><c path="js.html.FrameSetElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<frameset>` element.]]></haxe_doc>
		</createFrameSetElement>
		<createCanvasElement public="1" get="inline" set="null" line="186">
			<f a=""><c path="js.html.CanvasElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<canvas>` element.]]></haxe_doc>
		</createCanvasElement>
		<createParagraphElement public="1" get="inline" set="null" line="188">
			<f a=""><c path="js.html.ParagraphElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<p>` element.]]></haxe_doc>
		</createParagraphElement>
		<createTableColElement public="1" get="inline" set="null" line="190">
			<f a=""><c path="js.html.TableColElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<col>` element.]]></haxe_doc>
		</createTableColElement>
		<createTableRowElement public="1" get="inline" set="null" line="192">
			<f a=""><c path="js.html.TableRowElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<tr>` element.]]></haxe_doc>
		</createTableRowElement>
		<createHtmlElement public="1" get="inline" set="null" line="194">
			<f a=""><c path="js.html.HtmlElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<html>` element.]]></haxe_doc>
		</createHtmlElement>
		<haxe_doc><![CDATA[`HTMLDocument` is an abstract interface which extends the `Document` interface to add HTML-specific features to the document object. It represents the root of the HTML document, within which its entire DOM hierarchy resides.

	Documentation [HTMLDocument](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDocument"</e></m></meta>
	</class>
	<class path="js.html.HTMLOptionsCollection" params="" file="/usr/local/lib/haxe/std/js/html/HTMLOptionsCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<selectedIndex public="1"><x path="Int"/></selectedIndex>
		<add public="1" set="method">
			<f a="element:?before">
				<x path="haxe.extern.EitherType">
					<c path="js.html.OptionElement"/>
					<c path="js.html.OptGroupElement"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="Int"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</remove>
		<haxe_doc><![CDATA[`HTMLOptionsCollection` is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the "options" property of select.

	Documentation [HTMLOptionsCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptionsCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLPropertiesCollection" params="" file="/usr/local/lib/haxe/std/js/html/HTMLPropertiesCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<names public="1" set="null"><c path="js.html.DOMStringList"/></names>
		<namedItem public="1" set="method" override="1"><f a="name">
	<c path="String"/>
	<c path="js.html.PropertyNodeList"/>
</f></namedItem>
		<meta><m n=":native"><e>"HTMLPropertiesCollection"</e></m></meta>
	</class>
	<class path="js.html.HeadElement" params="" file="/usr/local/lib/haxe/std/js/html/HeadElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLHeadElement` interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLHeadElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHeadElement"</e></m></meta>
	</class>
	<class path="js.html.Headers" params="" file="/usr/local/lib/haxe/std/js/html/Headers.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.
		@throws DOMError</haxe_doc>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a header from a `Headers` object.
		@throws DOMError</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `ByteString` sequence of all the values of a header within a `Headers` object with a given name.
		@throws DOMError</haxe_doc>
		</get>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean stating whether a `Headers` object contains a certain header.
		@throws DOMError</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.
		@throws DOMError</haxe_doc>
		</set>
		<entries public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing you to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.HeadersIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing you to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Executes a provided function once for each array element.
		@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?init">
				<c path="js.html.Headers"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?init">
						<c path="Array"><c path="Array"><c path="String"/></c></c>
						<c path="js.html.Headers"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?init">
						<x path="haxe.DynamicAccess"><c path="String"/></x>
						<c path="js.html.Headers"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Headers` interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A `Headers` object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like `append()` (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.

	Documentation [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Headers$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Headers>]]></haxe_doc>
		<meta><m n=":native"><e>"Headers"</e></m></meta>
	</class>
	<typedef path="js.html.HeadersIterator" params="" file="/usr/local/lib/haxe/std/js/html/HeadersIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.History" params="" file="/usr/local/lib/haxe/std/js/html/History.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `Integer` representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns `1`.</haxe_doc>
		</length>
		<scrollRestoration public="1">
			<x path="js.html.ScrollRestoration"/>
			<haxe_doc>Allows web applications to explicitly set default scroll restoration behavior on history navigation. This property can be either `auto` or `manual`.</haxe_doc>
		</scrollRestoration>
		<state public="1" set="null">
			<d/>
			<haxe_doc>Returns an `any` value representing the state at the top of the history stack. This is a way to look at the state without having to wait for a `popstate` event.</haxe_doc>
		</state>
		<go public="1" set="method">
			<f a="?delta" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ delta : 0 }</e></m></meta>
			<haxe_doc>Loads a page from the session history, identified by its relative location to the current page, for example -1 for the previous page or 1  for the next page. If you specify an out-of-bounds value (for instance, specifying -1 when there are no previously-visited pages in the session history), this method silently has no effect. Calling `go()` without parameters or a value of 0 reloads the current page. Internet Explorer lets you also specify a string to go to a specific page in the history list.
		@throws DOMError</haxe_doc>
		</go>
		<back public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Goes to the previous page in session history, the same action as when the user clicks the browser's Back button. Equivalent to `history.go(-1)`.
		 Calling this method to go back beyond the first page in the session history has no effect and doesn't raise an exception.
		 
		@throws DOMError</haxe_doc>
		</back>
		<forward public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Goes to the next page in session history, the same action as when the user clicks the browser's Forward button; this is equivalent to `history.go(1)`.
		 Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception.
		 
		@throws DOMError</haxe_doc>
		</forward>
		<pushState public="1" set="method">
			<f a="data:title:?url">
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes the given data onto the session history stack with the specified title and, if provided, URL. The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.  Note that Firefox currently ignores the title parameter; for more information, see manipulating the browser history.
		@throws DOMError</haxe_doc>
		</pushState>
		<replaceState public="1" set="method">
			<f a="data:title:?url">
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Updates the most recent entry on the history stack to have the specified data, title, and, if provided, URL. The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.  Note that Firefox currently ignores the title parameter; for more information, see manipulating the browser history.
		@throws DOMError</haxe_doc>
		</replaceState>
		<haxe_doc><![CDATA[The `History` interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.

	Documentation [History](https://developer.mozilla.org/en-US/docs/Web/API/History) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/History$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/History>]]></haxe_doc>
		<meta><m n=":native"><e>"History"</e></m></meta>
	</class>
	<typedef path="js.html.HitRegionOptions" params="" file="/usr/local/lib/haxe/std/js/html/HitRegionOptions.hx"><a>
	<path>
		<x path="Null"><c path="js.html.Path2D"/></x>
		<meta><m n=":optional"/></meta>
	</path>
	<id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</id>
	<control>
		<x path="Null"><c path="js.html.Element"/></x>
		<meta><m n=":optional"/></meta>
	</control>
</a></typedef>
	<class path="js.html.HtmlElement" params="" file="/usr/local/lib/haxe/std/js/html/HtmlElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<version public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the version of the HTML Document Type Definition (DTD) that governs this document. This property should not be used any more as it is non-conforming. Simply omit it.</haxe_doc>
		</version>
		<haxe_doc><![CDATA[The `HTMLHtmlElement` interface serves as the root node for a given HTML document.  This object inherits the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLHtmlElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHtmlElement"</e></m></meta>
	</class>
	<class path="js.html.IFrameElement" params="" file="/usr/local/lib/haxe/std/js/html/IFrameElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the address of the content to be embedded.</haxe_doc>
		</src>
		<srcdoc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the content to display in the frame.</haxe_doc>
		</srcdoc>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `name` HTML attribute, containing a name by which to refer to the frame.</haxe_doc>
		</name>
		<sandbox public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMSettableTokenList` that reflects the `sandbox` HTML attribute, indicating extra restrictions on the behavior of the nested content.</haxe_doc>
		</sandbox>
		<allowFullscreen public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the inline frame is willing to be placed into full screen mode. See Using full-screen mode for details.</haxe_doc>
		</allowFullscreen>
		<allowPaymentRequest public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the Payment Request API may be invoked inside a cross-origin iframe.</haxe_doc>
		</allowPaymentRequest>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, indicating the width of the frame.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, indicating the height of the frame.</haxe_doc>
		</height>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerPolicy` HTML attribute indicating which referrer to use when fetching the linked resource.</haxe_doc>
		</referrerPolicy>
		<contentDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document`, the active document in the inline frame's nested browsing context.</haxe_doc>
		</contentDocument>
		<contentWindow public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy`, the window proxy for the nested browsing context.</haxe_doc>
		</contentWindow>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that specifies the alignment of the frame with respect to the surrounding context.</haxe_doc>
		</align>
		<scrolling public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that indicates whether the browser should provide scrollbars for the frame.</haxe_doc>
		</scrolling>
		<frameBorder public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that indicates whether to create borders between frames.</haxe_doc>
		</frameBorder>
		<longDesc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that contains the URI of a long description of the frame.</haxe_doc>
		</longDesc>
		<marginHeight public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being the height of the frame margin.</haxe_doc>
		</marginHeight>
		<marginWidth public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being the width of the frame margin.</haxe_doc>
		</marginWidth>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLIFrameElement` interface provides special properties and methods (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.

	Documentation [HTMLIFrameElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLIFrameElement"</e></m></meta>
	</class>
	<class path="js.html.ImageElement" params="" file="/usr/local/lib/haxe/std/js/html/ImageElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<alt public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `alt` HTML attribute,  thus indicating fallback context for the image.</haxe_doc>
		</alt>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the full URL of the image including base URI.</haxe_doc>
		</src>
		<srcset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `srcset` HTML attribute, containing a list of candidate images, separated by a comma (`',', U+002C COMMA`). A candidate image is a URL followed by a `'w'` with the width of the images, or an `'x'` followed by the pixel density.</haxe_doc>
		</srcset>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the CORS setting for this image element. See CORS settings attributes for further details.</haxe_doc>
		</crossOrigin>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `usemap` HTML attribute, containing a partial URL of a map element.</haxe_doc>
		</useMap>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use in order to fetch the image.</haxe_doc>
		</referrerPolicy>
		<isMap public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `ismap` HTML attribute, indicating that the image is part of a server-side image map.</haxe_doc>
		</isMap>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned long` that reflects the `width` HTML attribute, indicating the rendered width of the image in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned long` that reflects the `height` HTML attribute, indicating the rendered height of the image in CSS pixels.</haxe_doc>
		</height>
		<decoding public="1">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a hint given to the browser on how it should decode the image.</haxe_doc>
		</decoding>
		<naturalWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned long` representing the intrinsic width of the image in CSS pixels, if it is available; otherwise, it will show `0`.</haxe_doc>
		</naturalWidth>
		<naturalHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned long` representing the intrinsic height of the image in CSS pixels, if it is available; else, it shows `0`.</haxe_doc>
		</naturalHeight>
		<complete public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the browser has finished fetching the image, whether successful or not. It also shows true, if the image has no `HTMLImageElement.src` value.</haxe_doc>
		</complete>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the element.</haxe_doc>
		</name>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the alignment of the image with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the space on either side of the image.</haxe_doc>
		</hspace>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the space above and below the image.</haxe_doc>
		</vspace>
		<longDesc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the URI of a long description of the image.</haxe_doc>
		</longDesc>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that is responsible for the width of the border surrounding the image. This is now deprecated and the CSS `border` property should be used instead.</haxe_doc>
		</border>
		<sizes public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `sizes` HTML attribute.</haxe_doc>
		</sizes>
		<currentSrc public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the URL to the currently displayed image (which may change, for example in response to media queries).</haxe_doc>
		</currentSrc>
		<lowsrc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that refers to a low-quality (but faster to load) copy of the image.</haxe_doc>
		</lowsrc>
		<x public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the horizontal offset from the nearest layer. This property mimics an old Netscape 4 behavior.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the vertical offset from the nearest layer. This property is also similar to behavior of an old Netscape 4.</haxe_doc>
		</y>
		<haxe_doc><![CDATA[The `HTMLImageElement` interface provides special properties and methods  for manipulating the layout and presentation of `img` elements.

	Documentation [HTMLImageElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLImageElement"</e></m></meta>
	</class>
	<class path="js.html.Image" params="" file="/usr/local/lib/haxe/std/js/html/Image.hx" extern="1">
		<extends path="js.html.ImageElement"/>
		<new public="1" set="method">
			<f a="?width:?height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Image"</e></m>
		</meta>
	</class>
	<class path="js.html.ImageBitmap" params="" file="/usr/local/lib/haxe/std/js/html/ImageBitmap.hx" extern="1">
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the width, in CSS pixels, of the `ImageData`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the height, in CSS pixels, of the `ImageData`.</haxe_doc>
		</height>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Disposes of all graphical resources associated with an `ImageBitmap`.</haxe_doc>
		</close>
		<haxe_doc><![CDATA[The `ImageBitmap` interface represents a bitmap image which can be drawn to a `canvas` without undue latency. It can be created from a variety of source objects using the `createImageBitmap()` factory method. `ImageBitmap` provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.

	Documentation [ImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap>]]></haxe_doc>
		<meta><m n=":native"><e>"ImageBitmap"</e></m></meta>
	</class>
	<abstract path="js.html.ImageBitmapFormat" params="" file="/usr/local/lib/haxe/std/js/html/ImageBitmapFormat.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ImageBitmapFormat.ImageBitmapFormat_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ImageBitmapFormat.hx" private="1" module="js.html.ImageBitmapFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.ImageData" params="" file="/usr/local/lib/haxe/std/js/html/ImageData.hx" extern="1">
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the actual width, in pixels, of the `ImageData`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the actual height, in pixels, of the `ImageData`.</haxe_doc>
		</height>
		<data public="1" set="null">
			<c path="js.lib.Uint8ClampedArray"/>
			<haxe_doc>Is a `Uint8ClampedArray` representing a one-dimensional array containing the data in the RGBA order, with integer values between `0` and `255` (included).</haxe_doc>
		</data>
		<new public="1" set="method">
			<f a="data:sw:?sh">
				<c path="js.lib.Uint8ClampedArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="sw:sh">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `ImageData` interface represents the underlying pixel data of an area of a `canvas` element. It is created using the `ImageData()` constructor or creator methods on the `CanvasRenderingContext2D` object associated with a canvas: `createImageData()` and `getImageData()`. It can also be used to set a part of the canvas by using `putImageData()`.

	Documentation [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageData>]]></haxe_doc>
		<meta><m n=":native"><e>"ImageData"</e></m></meta>
	</class>
	<class path="js.html.InputElement" params="" file="/usr/local/lib/haxe/std/js/html/InputElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<accept public="1"><c path="String"/></accept>
		<alt public="1"><c path="String"/></alt>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<autofocus public="1"><x path="Bool"/></autofocus>
		<defaultChecked public="1"><x path="Bool"/></defaultChecked>
		<checked public="1"><x path="Bool"/></checked>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<files public="1"><c path="js.html.FileList"/></files>
		<formAction public="1"><c path="String"/></formAction>
		<formEnctype public="1"><c path="String"/></formEnctype>
		<formMethod public="1"><c path="String"/></formMethod>
		<formNoValidate public="1"><x path="Bool"/></formNoValidate>
		<formTarget public="1"><c path="String"/></formTarget>
		<height public="1"><x path="Int"/></height>
		<indeterminate public="1"><x path="Bool"/></indeterminate>
		<list public="1" set="null"><c path="js.html.Element"/></list>
		<max public="1"><c path="String"/></max>
		<maxLength public="1"><x path="Int"/></maxLength>
		<min public="1"><c path="String"/></min>
		<minLength public="1"><x path="Int"/></minLength>
		<multiple public="1"><x path="Bool"/></multiple>
		<name public="1"><c path="String"/></name>
		<pattern public="1"><c path="String"/></pattern>
		<placeholder public="1"><c path="String"/></placeholder>
		<readOnly public="1"><x path="Bool"/></readOnly>
		<required public="1"><x path="Bool"/></required>
		<size public="1"><x path="Int"/></size>
		<src public="1"><c path="String"/></src>
		<step public="1"><c path="String"/></step>
		<type public="1"><c path="String"/></type>
		<defaultValue public="1"><c path="String"/></defaultValue>
		<value public="1"><c path="String"/></value>
		<valueAsDate public="1"><c path="Date"/></valueAsDate>
		<valueAsNumber public="1"><x path="Float"/></valueAsNumber>
		<width public="1"><x path="Int"/></width>
		<willValidate public="1" set="null"><x path="Bool"/></willValidate>
		<validity public="1" set="null"><c path="js.html.ValidityState"/></validity>
		<validationMessage public="1" set="null"><c path="String"/></validationMessage>
		<labels public="1" set="null"><c path="js.html.NodeList"/></labels>
		<selectionStart public="1"><x path="Int"/></selectionStart>
		<selectionEnd public="1"><x path="Int"/></selectionEnd>
		<selectionDirection public="1"><c path="String"/></selectionDirection>
		<align public="1">
			<c path="String"/>
			<haxe_doc>`string:` represents the alignment of the element. Use CSS instead.</haxe_doc>
		</align>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>`string:` represents a client-side image map.</haxe_doc>
		</useMap>
		<textLength public="1" set="null"><x path="Int"/></textLength>
		<stepUp public="1" set="method">
			<f a="?n" v="1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ n : 1 }</e></m></meta>
			<haxe_doc>Increments the `value` by (`step` * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception:
		 
		  if the method is not applicable to for the current `type` value.,
		  if the element has no `step` value,
		  if the `value` cannot be converted to a number,
		  if the resulting value is above the `max` or below the `min`.
		 
		 
		@throws DOMError</haxe_doc>
		</stepUp>
		<stepDown public="1" set="method">
			<f a="?n" v="1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ n : 1 }</e></m></meta>
			<haxe_doc>Decrements the `value` by (`step` * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception:
		 
		  if the method is not applicable to for the current `type` value,
		  if the element has no `step` value,
		  if the `value` cannot be converted to a number,
		  if the resulting value is above the `max` or below the `min`. 
		 
		 
		@throws DOMError</haxe_doc>
		</stepDown>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<select public="1" set="method"><f a=""><x path="Void"/></f></select>
		<setRangeText public="1" set="method">
			<f a="replacement:start:end:?selectionMode" v=":::PRESERVE">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.SelectionMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ selectionMode : PRESERVE }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setRangeText public="1" set="method">
	<f a="replacement">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</setRangeText></overloads>
		</setRangeText>
		<setSelectionRange public="1" set="method">
			<f a="start:end:?direction">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSelectionRange>
		<haxe_doc><![CDATA[The `HTMLInputElement` interface provides special properties and methods for manipulating the layout and presentation of input elements.

	Documentation [HTMLInputElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLInputElement"</e></m></meta>
	</class>
	<abstract path="js.html.IterationCompositeOperation" params="" file="/usr/local/lib/haxe/std/js/html/IterationCompositeOperation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._IterationCompositeOperation.IterationCompositeOperation_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/IterationCompositeOperation.hx" private="1" module="js.html.IterationCompositeOperation" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.UIEvent" params="" file="/usr/local/lib/haxe/std/js/html/UIEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<SCROLL_PAGE_UP public="1" get="inline" set="null" expr="-32768" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-32768</e></m></meta>
		</SCROLL_PAGE_UP>
		<SCROLL_PAGE_DOWN public="1" get="inline" set="null" expr="32768" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32768</e></m></meta>
		</SCROLL_PAGE_DOWN>
		<view public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy` that contains the view that generated the event.</haxe_doc>
		</view>
		<detail public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` with details about the event, depending on the event type.</haxe_doc>
		</detail>
		<layerX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the horizontal coordinate of the event relative to the current layer.</haxe_doc>
		</layerX>
		<layerY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the vertical coordinate of the event relative to the current layer.</haxe_doc>
		</layerY>
		<pageX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the horizontal coordinate of the event relative to the whole document.</haxe_doc>
		</pageX>
		<pageY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the vertical coordinate of the event relative to the whole document.</haxe_doc>
		</pageY>
		<which public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the numeric `keyCode` of the key pressed, or the character code (`charCode`) for an alphanumeric key pressed.</haxe_doc>
		</which>
		<rangeParent public="1" set="null"><c path="js.html.Node"/></rangeParent>
		<rangeOffset public="1" set="null"><x path="Int"/></rangeOffset>
		<initUIEvent public="1" set="method">
			<f a="aType:?aCanBubble:?aCancelable:?aView:?aDetail" v=":false:false::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ aDetail : 0, aCancelable : false, aCanBubble : false }</e></m></meta>
			<haxe_doc>Initializes a `UIEvent` object. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initUIEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.UIEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `UIEvent` interface represents simple user interface events.

	Documentation [UIEvent](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/UIEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"UIEvent"</e></m></meta>
	</class>
	<class path="js.html.KeyboardEvent" params="" file="/usr/local/lib/haxe/std/js/html/KeyboardEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<DOM_KEY_LOCATION_STANDARD public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</DOM_KEY_LOCATION_STANDARD>
		<DOM_KEY_LOCATION_LEFT public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DOM_KEY_LOCATION_LEFT>
		<DOM_KEY_LOCATION_RIGHT public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOM_KEY_LOCATION_RIGHT>
		<DOM_KEY_LOCATION_NUMPAD public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</DOM_KEY_LOCATION_NUMPAD>
		<DOM_VK_CANCEL public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</DOM_VK_CANCEL>
		<DOM_VK_HELP public="1" get="inline" set="null" expr="6" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</DOM_VK_HELP>
		<DOM_VK_BACK_SPACE public="1" get="inline" set="null" expr="8" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</DOM_VK_BACK_SPACE>
		<DOM_VK_TAB public="1" get="inline" set="null" expr="9" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</DOM_VK_TAB>
		<DOM_VK_CLEAR public="1" get="inline" set="null" expr="12" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</DOM_VK_CLEAR>
		<DOM_VK_RETURN public="1" get="inline" set="null" expr="13" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</DOM_VK_RETURN>
		<DOM_VK_SHIFT public="1" get="inline" set="null" expr="16" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOM_VK_SHIFT>
		<DOM_VK_CONTROL public="1" get="inline" set="null" expr="17" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</DOM_VK_CONTROL>
		<DOM_VK_ALT public="1" get="inline" set="null" expr="18" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</DOM_VK_ALT>
		<DOM_VK_PAUSE public="1" get="inline" set="null" expr="19" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</DOM_VK_PAUSE>
		<DOM_VK_CAPS_LOCK public="1" get="inline" set="null" expr="20" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</DOM_VK_CAPS_LOCK>
		<DOM_VK_KANA public="1" get="inline" set="null" expr="21" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</DOM_VK_KANA>
		<DOM_VK_HANGUL public="1" get="inline" set="null" expr="21" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</DOM_VK_HANGUL>
		<DOM_VK_EISU public="1" get="inline" set="null" expr="22" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</DOM_VK_EISU>
		<DOM_VK_JUNJA public="1" get="inline" set="null" expr="23" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</DOM_VK_JUNJA>
		<DOM_VK_FINAL public="1" get="inline" set="null" expr="24" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>24</e></m></meta>
		</DOM_VK_FINAL>
		<DOM_VK_HANJA public="1" get="inline" set="null" expr="25" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DOM_VK_HANJA>
		<DOM_VK_KANJI public="1" get="inline" set="null" expr="25" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DOM_VK_KANJI>
		<DOM_VK_ESCAPE public="1" get="inline" set="null" expr="27" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>27</e></m></meta>
		</DOM_VK_ESCAPE>
		<DOM_VK_CONVERT public="1" get="inline" set="null" expr="28" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>28</e></m></meta>
		</DOM_VK_CONVERT>
		<DOM_VK_NONCONVERT public="1" get="inline" set="null" expr="29" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>29</e></m></meta>
		</DOM_VK_NONCONVERT>
		<DOM_VK_ACCEPT public="1" get="inline" set="null" expr="30" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</DOM_VK_ACCEPT>
		<DOM_VK_MODECHANGE public="1" get="inline" set="null" expr="31" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>31</e></m></meta>
		</DOM_VK_MODECHANGE>
		<DOM_VK_SPACE public="1" get="inline" set="null" expr="32" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</DOM_VK_SPACE>
		<DOM_VK_PAGE_UP public="1" get="inline" set="null" expr="33" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33</e></m></meta>
		</DOM_VK_PAGE_UP>
		<DOM_VK_PAGE_DOWN public="1" get="inline" set="null" expr="34" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34</e></m></meta>
		</DOM_VK_PAGE_DOWN>
		<DOM_VK_END public="1" get="inline" set="null" expr="35" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35</e></m></meta>
		</DOM_VK_END>
		<DOM_VK_HOME public="1" get="inline" set="null" expr="36" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36</e></m></meta>
		</DOM_VK_HOME>
		<DOM_VK_LEFT public="1" get="inline" set="null" expr="37" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37</e></m></meta>
		</DOM_VK_LEFT>
		<DOM_VK_UP public="1" get="inline" set="null" expr="38" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>38</e></m></meta>
		</DOM_VK_UP>
		<DOM_VK_RIGHT public="1" get="inline" set="null" expr="39" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>39</e></m></meta>
		</DOM_VK_RIGHT>
		<DOM_VK_DOWN public="1" get="inline" set="null" expr="40" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>40</e></m></meta>
		</DOM_VK_DOWN>
		<DOM_VK_SELECT public="1" get="inline" set="null" expr="41" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>41</e></m></meta>
		</DOM_VK_SELECT>
		<DOM_VK_PRINT public="1" get="inline" set="null" expr="42" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>42</e></m></meta>
		</DOM_VK_PRINT>
		<DOM_VK_EXECUTE public="1" get="inline" set="null" expr="43" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>43</e></m></meta>
		</DOM_VK_EXECUTE>
		<DOM_VK_PRINTSCREEN public="1" get="inline" set="null" expr="44" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>44</e></m></meta>
		</DOM_VK_PRINTSCREEN>
		<DOM_VK_INSERT public="1" get="inline" set="null" expr="45" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>45</e></m></meta>
		</DOM_VK_INSERT>
		<DOM_VK_DELETE public="1" get="inline" set="null" expr="46" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
		</DOM_VK_DELETE>
		<DOM_VK_0 public="1" get="inline" set="null" expr="48" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>48</e></m></meta>
		</DOM_VK_0>
		<DOM_VK_1 public="1" get="inline" set="null" expr="49" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>49</e></m></meta>
		</DOM_VK_1>
		<DOM_VK_2 public="1" get="inline" set="null" expr="50" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>50</e></m></meta>
		</DOM_VK_2>
		<DOM_VK_3 public="1" get="inline" set="null" expr="51" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>51</e></m></meta>
		</DOM_VK_3>
		<DOM_VK_4 public="1" get="inline" set="null" expr="52" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>52</e></m></meta>
		</DOM_VK_4>
		<DOM_VK_5 public="1" get="inline" set="null" expr="53" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>53</e></m></meta>
		</DOM_VK_5>
		<DOM_VK_6 public="1" get="inline" set="null" expr="54" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>54</e></m></meta>
		</DOM_VK_6>
		<DOM_VK_7 public="1" get="inline" set="null" expr="55" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>55</e></m></meta>
		</DOM_VK_7>
		<DOM_VK_8 public="1" get="inline" set="null" expr="56" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>56</e></m></meta>
		</DOM_VK_8>
		<DOM_VK_9 public="1" get="inline" set="null" expr="57" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>57</e></m></meta>
		</DOM_VK_9>
		<DOM_VK_COLON public="1" get="inline" set="null" expr="58" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>58</e></m></meta>
		</DOM_VK_COLON>
		<DOM_VK_SEMICOLON public="1" get="inline" set="null" expr="59" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>59</e></m></meta>
		</DOM_VK_SEMICOLON>
		<DOM_VK_LESS_THAN public="1" get="inline" set="null" expr="60" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>60</e></m></meta>
		</DOM_VK_LESS_THAN>
		<DOM_VK_EQUALS public="1" get="inline" set="null" expr="61" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>61</e></m></meta>
		</DOM_VK_EQUALS>
		<DOM_VK_GREATER_THAN public="1" get="inline" set="null" expr="62" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>62</e></m></meta>
		</DOM_VK_GREATER_THAN>
		<DOM_VK_QUESTION_MARK public="1" get="inline" set="null" expr="63" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>63</e></m></meta>
		</DOM_VK_QUESTION_MARK>
		<DOM_VK_AT public="1" get="inline" set="null" expr="64" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>64</e></m></meta>
		</DOM_VK_AT>
		<DOM_VK_A public="1" get="inline" set="null" expr="65" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65</e></m></meta>
		</DOM_VK_A>
		<DOM_VK_B public="1" get="inline" set="null" expr="66" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>66</e></m></meta>
		</DOM_VK_B>
		<DOM_VK_C public="1" get="inline" set="null" expr="67" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>67</e></m></meta>
		</DOM_VK_C>
		<DOM_VK_D public="1" get="inline" set="null" expr="68" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>68</e></m></meta>
		</DOM_VK_D>
		<DOM_VK_E public="1" get="inline" set="null" expr="69" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>69</e></m></meta>
		</DOM_VK_E>
		<DOM_VK_F public="1" get="inline" set="null" expr="70" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>70</e></m></meta>
		</DOM_VK_F>
		<DOM_VK_G public="1" get="inline" set="null" expr="71" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>71</e></m></meta>
		</DOM_VK_G>
		<DOM_VK_H public="1" get="inline" set="null" expr="72" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>72</e></m></meta>
		</DOM_VK_H>
		<DOM_VK_I public="1" get="inline" set="null" expr="73" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>73</e></m></meta>
		</DOM_VK_I>
		<DOM_VK_J public="1" get="inline" set="null" expr="74" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>74</e></m></meta>
		</DOM_VK_J>
		<DOM_VK_K public="1" get="inline" set="null" expr="75" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>75</e></m></meta>
		</DOM_VK_K>
		<DOM_VK_L public="1" get="inline" set="null" expr="76" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>76</e></m></meta>
		</DOM_VK_L>
		<DOM_VK_M public="1" get="inline" set="null" expr="77" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>77</e></m></meta>
		</DOM_VK_M>
		<DOM_VK_N public="1" get="inline" set="null" expr="78" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>78</e></m></meta>
		</DOM_VK_N>
		<DOM_VK_O public="1" get="inline" set="null" expr="79" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>79</e></m></meta>
		</DOM_VK_O>
		<DOM_VK_P public="1" get="inline" set="null" expr="80" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>80</e></m></meta>
		</DOM_VK_P>
		<DOM_VK_Q public="1" get="inline" set="null" expr="81" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>81</e></m></meta>
		</DOM_VK_Q>
		<DOM_VK_R public="1" get="inline" set="null" expr="82" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>82</e></m></meta>
		</DOM_VK_R>
		<DOM_VK_S public="1" get="inline" set="null" expr="83" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>83</e></m></meta>
		</DOM_VK_S>
		<DOM_VK_T public="1" get="inline" set="null" expr="84" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>84</e></m></meta>
		</DOM_VK_T>
		<DOM_VK_U public="1" get="inline" set="null" expr="85" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>85</e></m></meta>
		</DOM_VK_U>
		<DOM_VK_V public="1" get="inline" set="null" expr="86" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>86</e></m></meta>
		</DOM_VK_V>
		<DOM_VK_W public="1" get="inline" set="null" expr="87" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>87</e></m></meta>
		</DOM_VK_W>
		<DOM_VK_X public="1" get="inline" set="null" expr="88" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>88</e></m></meta>
		</DOM_VK_X>
		<DOM_VK_Y public="1" get="inline" set="null" expr="89" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>89</e></m></meta>
		</DOM_VK_Y>
		<DOM_VK_Z public="1" get="inline" set="null" expr="90" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>90</e></m></meta>
		</DOM_VK_Z>
		<DOM_VK_WIN public="1" get="inline" set="null" expr="91" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>91</e></m></meta>
		</DOM_VK_WIN>
		<DOM_VK_CONTEXT_MENU public="1" get="inline" set="null" expr="93" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>93</e></m></meta>
		</DOM_VK_CONTEXT_MENU>
		<DOM_VK_SLEEP public="1" get="inline" set="null" expr="95" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>95</e></m></meta>
		</DOM_VK_SLEEP>
		<DOM_VK_NUMPAD0 public="1" get="inline" set="null" expr="96" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>96</e></m></meta>
		</DOM_VK_NUMPAD0>
		<DOM_VK_NUMPAD1 public="1" get="inline" set="null" expr="97" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>97</e></m></meta>
		</DOM_VK_NUMPAD1>
		<DOM_VK_NUMPAD2 public="1" get="inline" set="null" expr="98" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>98</e></m></meta>
		</DOM_VK_NUMPAD2>
		<DOM_VK_NUMPAD3 public="1" get="inline" set="null" expr="99" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>99</e></m></meta>
		</DOM_VK_NUMPAD3>
		<DOM_VK_NUMPAD4 public="1" get="inline" set="null" expr="100" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>100</e></m></meta>
		</DOM_VK_NUMPAD4>
		<DOM_VK_NUMPAD5 public="1" get="inline" set="null" expr="101" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>101</e></m></meta>
		</DOM_VK_NUMPAD5>
		<DOM_VK_NUMPAD6 public="1" get="inline" set="null" expr="102" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>102</e></m></meta>
		</DOM_VK_NUMPAD6>
		<DOM_VK_NUMPAD7 public="1" get="inline" set="null" expr="103" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>103</e></m></meta>
		</DOM_VK_NUMPAD7>
		<DOM_VK_NUMPAD8 public="1" get="inline" set="null" expr="104" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>104</e></m></meta>
		</DOM_VK_NUMPAD8>
		<DOM_VK_NUMPAD9 public="1" get="inline" set="null" expr="105" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>105</e></m></meta>
		</DOM_VK_NUMPAD9>
		<DOM_VK_MULTIPLY public="1" get="inline" set="null" expr="106" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>106</e></m></meta>
		</DOM_VK_MULTIPLY>
		<DOM_VK_ADD public="1" get="inline" set="null" expr="107" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>107</e></m></meta>
		</DOM_VK_ADD>
		<DOM_VK_SEPARATOR public="1" get="inline" set="null" expr="108" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>108</e></m></meta>
		</DOM_VK_SEPARATOR>
		<DOM_VK_SUBTRACT public="1" get="inline" set="null" expr="109" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>109</e></m></meta>
		</DOM_VK_SUBTRACT>
		<DOM_VK_DECIMAL public="1" get="inline" set="null" expr="110" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>110</e></m></meta>
		</DOM_VK_DECIMAL>
		<DOM_VK_DIVIDE public="1" get="inline" set="null" expr="111" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>111</e></m></meta>
		</DOM_VK_DIVIDE>
		<DOM_VK_F1 public="1" get="inline" set="null" expr="112" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>112</e></m></meta>
		</DOM_VK_F1>
		<DOM_VK_F2 public="1" get="inline" set="null" expr="113" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>113</e></m></meta>
		</DOM_VK_F2>
		<DOM_VK_F3 public="1" get="inline" set="null" expr="114" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>114</e></m></meta>
		</DOM_VK_F3>
		<DOM_VK_F4 public="1" get="inline" set="null" expr="115" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>115</e></m></meta>
		</DOM_VK_F4>
		<DOM_VK_F5 public="1" get="inline" set="null" expr="116" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>116</e></m></meta>
		</DOM_VK_F5>
		<DOM_VK_F6 public="1" get="inline" set="null" expr="117" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>117</e></m></meta>
		</DOM_VK_F6>
		<DOM_VK_F7 public="1" get="inline" set="null" expr="118" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>118</e></m></meta>
		</DOM_VK_F7>
		<DOM_VK_F8 public="1" get="inline" set="null" expr="119" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>119</e></m></meta>
		</DOM_VK_F8>
		<DOM_VK_F9 public="1" get="inline" set="null" expr="120" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>120</e></m></meta>
		</DOM_VK_F9>
		<DOM_VK_F10 public="1" get="inline" set="null" expr="121" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>121</e></m></meta>
		</DOM_VK_F10>
		<DOM_VK_F11 public="1" get="inline" set="null" expr="122" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>122</e></m></meta>
		</DOM_VK_F11>
		<DOM_VK_F12 public="1" get="inline" set="null" expr="123" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>123</e></m></meta>
		</DOM_VK_F12>
		<DOM_VK_F13 public="1" get="inline" set="null" expr="124" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>124</e></m></meta>
		</DOM_VK_F13>
		<DOM_VK_F14 public="1" get="inline" set="null" expr="125" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>125</e></m></meta>
		</DOM_VK_F14>
		<DOM_VK_F15 public="1" get="inline" set="null" expr="126" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>126</e></m></meta>
		</DOM_VK_F15>
		<DOM_VK_F16 public="1" get="inline" set="null" expr="127" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>127</e></m></meta>
		</DOM_VK_F16>
		<DOM_VK_F17 public="1" get="inline" set="null" expr="128" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</DOM_VK_F17>
		<DOM_VK_F18 public="1" get="inline" set="null" expr="129" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>129</e></m></meta>
		</DOM_VK_F18>
		<DOM_VK_F19 public="1" get="inline" set="null" expr="130" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>130</e></m></meta>
		</DOM_VK_F19>
		<DOM_VK_F20 public="1" get="inline" set="null" expr="131" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>131</e></m></meta>
		</DOM_VK_F20>
		<DOM_VK_F21 public="1" get="inline" set="null" expr="132" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>132</e></m></meta>
		</DOM_VK_F21>
		<DOM_VK_F22 public="1" get="inline" set="null" expr="133" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>133</e></m></meta>
		</DOM_VK_F22>
		<DOM_VK_F23 public="1" get="inline" set="null" expr="134" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>134</e></m></meta>
		</DOM_VK_F23>
		<DOM_VK_F24 public="1" get="inline" set="null" expr="135" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>135</e></m></meta>
		</DOM_VK_F24>
		<DOM_VK_NUM_LOCK public="1" get="inline" set="null" expr="144" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>144</e></m></meta>
		</DOM_VK_NUM_LOCK>
		<DOM_VK_SCROLL_LOCK public="1" get="inline" set="null" expr="145" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>145</e></m></meta>
		</DOM_VK_SCROLL_LOCK>
		<DOM_VK_WIN_OEM_FJ_JISHO public="1" get="inline" set="null" expr="146" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>146</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_JISHO>
		<DOM_VK_WIN_OEM_FJ_MASSHOU public="1" get="inline" set="null" expr="147" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>147</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_MASSHOU>
		<DOM_VK_WIN_OEM_FJ_TOUROKU public="1" get="inline" set="null" expr="148" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>148</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_TOUROKU>
		<DOM_VK_WIN_OEM_FJ_LOYA public="1" get="inline" set="null" expr="149" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>149</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_LOYA>
		<DOM_VK_WIN_OEM_FJ_ROYA public="1" get="inline" set="null" expr="150" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>150</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_ROYA>
		<DOM_VK_CIRCUMFLEX public="1" get="inline" set="null" expr="160" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>160</e></m></meta>
		</DOM_VK_CIRCUMFLEX>
		<DOM_VK_EXCLAMATION public="1" get="inline" set="null" expr="161" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>161</e></m></meta>
		</DOM_VK_EXCLAMATION>
		<DOM_VK_DOUBLE_QUOTE public="1" get="inline" set="null" expr="162" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>162</e></m></meta>
		</DOM_VK_DOUBLE_QUOTE>
		<DOM_VK_HASH public="1" get="inline" set="null" expr="163" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>163</e></m></meta>
		</DOM_VK_HASH>
		<DOM_VK_DOLLAR public="1" get="inline" set="null" expr="164" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>164</e></m></meta>
		</DOM_VK_DOLLAR>
		<DOM_VK_PERCENT public="1" get="inline" set="null" expr="165" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>165</e></m></meta>
		</DOM_VK_PERCENT>
		<DOM_VK_AMPERSAND public="1" get="inline" set="null" expr="166" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>166</e></m></meta>
		</DOM_VK_AMPERSAND>
		<DOM_VK_UNDERSCORE public="1" get="inline" set="null" expr="167" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>167</e></m></meta>
		</DOM_VK_UNDERSCORE>
		<DOM_VK_OPEN_PAREN public="1" get="inline" set="null" expr="168" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>168</e></m></meta>
		</DOM_VK_OPEN_PAREN>
		<DOM_VK_CLOSE_PAREN public="1" get="inline" set="null" expr="169" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>169</e></m></meta>
		</DOM_VK_CLOSE_PAREN>
		<DOM_VK_ASTERISK public="1" get="inline" set="null" expr="170" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>170</e></m></meta>
		</DOM_VK_ASTERISK>
		<DOM_VK_PLUS public="1" get="inline" set="null" expr="171" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>171</e></m></meta>
		</DOM_VK_PLUS>
		<DOM_VK_PIPE public="1" get="inline" set="null" expr="172" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>172</e></m></meta>
		</DOM_VK_PIPE>
		<DOM_VK_HYPHEN_MINUS public="1" get="inline" set="null" expr="173" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>173</e></m></meta>
		</DOM_VK_HYPHEN_MINUS>
		<DOM_VK_OPEN_CURLY_BRACKET public="1" get="inline" set="null" expr="174" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>174</e></m></meta>
		</DOM_VK_OPEN_CURLY_BRACKET>
		<DOM_VK_CLOSE_CURLY_BRACKET public="1" get="inline" set="null" expr="175" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>175</e></m></meta>
		</DOM_VK_CLOSE_CURLY_BRACKET>
		<DOM_VK_TILDE public="1" get="inline" set="null" expr="176" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>176</e></m></meta>
		</DOM_VK_TILDE>
		<DOM_VK_VOLUME_MUTE public="1" get="inline" set="null" expr="181" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>181</e></m></meta>
		</DOM_VK_VOLUME_MUTE>
		<DOM_VK_VOLUME_DOWN public="1" get="inline" set="null" expr="182" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>182</e></m></meta>
		</DOM_VK_VOLUME_DOWN>
		<DOM_VK_VOLUME_UP public="1" get="inline" set="null" expr="183" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>183</e></m></meta>
		</DOM_VK_VOLUME_UP>
		<DOM_VK_COMMA public="1" get="inline" set="null" expr="188" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>188</e></m></meta>
		</DOM_VK_COMMA>
		<DOM_VK_PERIOD public="1" get="inline" set="null" expr="190" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>190</e></m></meta>
		</DOM_VK_PERIOD>
		<DOM_VK_SLASH public="1" get="inline" set="null" expr="191" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>191</e></m></meta>
		</DOM_VK_SLASH>
		<DOM_VK_BACK_QUOTE public="1" get="inline" set="null" expr="192" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>192</e></m></meta>
		</DOM_VK_BACK_QUOTE>
		<DOM_VK_OPEN_BRACKET public="1" get="inline" set="null" expr="219" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>219</e></m></meta>
		</DOM_VK_OPEN_BRACKET>
		<DOM_VK_BACK_SLASH public="1" get="inline" set="null" expr="220" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>220</e></m></meta>
		</DOM_VK_BACK_SLASH>
		<DOM_VK_CLOSE_BRACKET public="1" get="inline" set="null" expr="221" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>221</e></m></meta>
		</DOM_VK_CLOSE_BRACKET>
		<DOM_VK_QUOTE public="1" get="inline" set="null" expr="222" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>222</e></m></meta>
		</DOM_VK_QUOTE>
		<DOM_VK_META public="1" get="inline" set="null" expr="224" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>224</e></m></meta>
		</DOM_VK_META>
		<DOM_VK_ALTGR public="1" get="inline" set="null" expr="225" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>225</e></m></meta>
		</DOM_VK_ALTGR>
		<DOM_VK_WIN_ICO_HELP public="1" get="inline" set="null" expr="227" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>227</e></m></meta>
		</DOM_VK_WIN_ICO_HELP>
		<DOM_VK_WIN_ICO_00 public="1" get="inline" set="null" expr="228" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>228</e></m></meta>
		</DOM_VK_WIN_ICO_00>
		<DOM_VK_PROCESSKEY public="1" get="inline" set="null" expr="229" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>229</e></m></meta>
		</DOM_VK_PROCESSKEY>
		<DOM_VK_WIN_ICO_CLEAR public="1" get="inline" set="null" expr="230" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>230</e></m></meta>
		</DOM_VK_WIN_ICO_CLEAR>
		<DOM_VK_WIN_OEM_RESET public="1" get="inline" set="null" expr="233" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>233</e></m></meta>
		</DOM_VK_WIN_OEM_RESET>
		<DOM_VK_WIN_OEM_JUMP public="1" get="inline" set="null" expr="234" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>234</e></m></meta>
		</DOM_VK_WIN_OEM_JUMP>
		<DOM_VK_WIN_OEM_PA1 public="1" get="inline" set="null" expr="235" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>235</e></m></meta>
		</DOM_VK_WIN_OEM_PA1>
		<DOM_VK_WIN_OEM_PA2 public="1" get="inline" set="null" expr="236" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>236</e></m></meta>
		</DOM_VK_WIN_OEM_PA2>
		<DOM_VK_WIN_OEM_PA3 public="1" get="inline" set="null" expr="237" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>237</e></m></meta>
		</DOM_VK_WIN_OEM_PA3>
		<DOM_VK_WIN_OEM_WSCTRL public="1" get="inline" set="null" expr="238" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>238</e></m></meta>
		</DOM_VK_WIN_OEM_WSCTRL>
		<DOM_VK_WIN_OEM_CUSEL public="1" get="inline" set="null" expr="239" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>239</e></m></meta>
		</DOM_VK_WIN_OEM_CUSEL>
		<DOM_VK_WIN_OEM_ATTN public="1" get="inline" set="null" expr="240" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>240</e></m></meta>
		</DOM_VK_WIN_OEM_ATTN>
		<DOM_VK_WIN_OEM_FINISH public="1" get="inline" set="null" expr="241" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>241</e></m></meta>
		</DOM_VK_WIN_OEM_FINISH>
		<DOM_VK_WIN_OEM_COPY public="1" get="inline" set="null" expr="242" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>242</e></m></meta>
		</DOM_VK_WIN_OEM_COPY>
		<DOM_VK_WIN_OEM_AUTO public="1" get="inline" set="null" expr="243" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>243</e></m></meta>
		</DOM_VK_WIN_OEM_AUTO>
		<DOM_VK_WIN_OEM_ENLW public="1" get="inline" set="null" expr="244" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>244</e></m></meta>
		</DOM_VK_WIN_OEM_ENLW>
		<DOM_VK_WIN_OEM_BACKTAB public="1" get="inline" set="null" expr="245" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>245</e></m></meta>
		</DOM_VK_WIN_OEM_BACKTAB>
		<DOM_VK_ATTN public="1" get="inline" set="null" expr="246" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>246</e></m></meta>
		</DOM_VK_ATTN>
		<DOM_VK_CRSEL public="1" get="inline" set="null" expr="247" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>247</e></m></meta>
		</DOM_VK_CRSEL>
		<DOM_VK_EXSEL public="1" get="inline" set="null" expr="248" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>248</e></m></meta>
		</DOM_VK_EXSEL>
		<DOM_VK_EREOF public="1" get="inline" set="null" expr="249" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>249</e></m></meta>
		</DOM_VK_EREOF>
		<DOM_VK_PLAY public="1" get="inline" set="null" expr="250" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>250</e></m></meta>
		</DOM_VK_PLAY>
		<DOM_VK_ZOOM public="1" get="inline" set="null" expr="251" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>251</e></m></meta>
		</DOM_VK_ZOOM>
		<DOM_VK_PA1 public="1" get="inline" set="null" expr="253" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>253</e></m></meta>
		</DOM_VK_PA1>
		<DOM_VK_WIN_OEM_CLEAR public="1" get="inline" set="null" expr="254" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>254</e></m></meta>
		</DOM_VK_WIN_OEM_CLEAR>
		<charCode public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the Unicode reference number of the key; this attribute is used only by the `keypress` event. For keys whose `char` attribute contains multiple characters, this is the Unicode value of the first character in that attribute. In Firefox 26 this returns codes for printable characters.
		 Warning: This attribute is deprecated; you should use `KeyboardEvent.key` instead, if available.</haxe_doc>
		</charCode>
		<keyCode public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing a system and implementation dependent numerical code identifying the unmodified value of the pressed key.
		 Warning: This attribute is deprecated; you should use `KeyboardEvent.key` instead, if available.</haxe_doc>
		</keyCode>
		<altKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Alt ( Option or ⌥ on OS X) key was active when the key event was generated.</haxe_doc>
		</altKey>
		<ctrlKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Ctrl key was active when the key event was generated.</haxe_doc>
		</ctrlKey>
		<shiftKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Shift key was active when the key event was generated.</haxe_doc>
		</shiftKey>
		<metaKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Meta key (on Mac keyboards, the ⌘ Command key; on Windows keyboards, the Windows key (⊞)) was active when the key event was generated.</haxe_doc>
		</metaKey>
		<location public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the location of the key on the keyboard or other input device.</haxe_doc>
		</location>
		<repeat public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the key is being held down such that it is automatically repeating.</haxe_doc>
		</repeat>
		<isComposing public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the event is fired between after `compositionstart` and before `compositionend`.</haxe_doc>
		</isComposing>
		<key public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the key value of the key represented by the event.</haxe_doc>
		</key>
		<code public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` with the code value of the key represented by the event.</haxe_doc>
		</code>
		<getModifierState public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if a modifier key such as Alt, Shift, Ctrl, or Meta, was pressed when the event was created.</haxe_doc>
		</getModifierState>
		<initKeyboardEvent public="1" set="method">
			<f a="typeArg:?bubblesArg:?cancelableArg:?viewArg:?keyArg:?locationArg:?ctrlKey:?altKey:?shiftKey:?metaKey" v=":false:false::&quot;&quot;:0:false:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ metaKey : false, shiftKey : false, altKey : false, ctrlKey : false, locationArg : 0, keyArg : "", cancelableArg : false, bubblesArg : false }</e></m></meta>
			<haxe_doc>Initializes a `KeyboardEvent` object. This is now deprecated. You should instead use the `KeyboardEvent.KeyboardEvent` constructor.
		@throws DOMError</haxe_doc>
		</initKeyboardEvent>
		<initKeyEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?view:?ctrlKey:?altKey:?shiftKey:?metaKey:?keyCode:?charCode" v=":false:false::false:false:false:false:0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ charCode : 0, keyCode : 0, metaKey : false, shiftKey : false, altKey : false, ctrlKey : false, cancelable : false, canBubble : false }</e></m></meta>
			<haxe_doc>Initializes a `KeyboardEvent` object. This was implemented only by Firefox, and is no longer supported even there; instead, you should use the `KeyboardEvent.KeyboardEvent` constructor.</haxe_doc>
		</initKeyEvent>
		<new public="1" set="method">
			<f a="typeArg:?keyboardEventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.KeyboardEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`KeyboardEvent` objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.

	Documentation [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"KeyboardEvent"</e></m></meta>
	</class>
	<typedef path="js.html.KeyboardEventInit" params="" file="/usr/local/lib/haxe/std/js/html/KeyboardEventInit.hx"><a>
	<which>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</which>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<repeat>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</repeat>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<location>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</location>
	<keyCode>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</keyCode>
	<key>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</key>
	<isComposing>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</isComposing>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<code>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</code>
	<charCode>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</charCode>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<typedef path="js.html.KeyframeAnimationOptions" params="" file="/usr/local/lib/haxe/std/js/html/KeyframeAnimationOptions.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<iterationComposite>
		<x path="Null"><x path="js.html.IterationCompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</iterationComposite>
	<id>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</id>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<composite>
		<x path="Null"><x path="js.html.CompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</composite>
</a></typedef>
	<typedef path="js.html.KeyframeEffectOptions" params="" file="/usr/local/lib/haxe/std/js/html/KeyframeEffectOptions.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of `Infinity` to make it repeat for as long as the element exists.</haxe_doc>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.</haxe_doc>
	</iterationStart>
	<iterationComposite>
		<x path="Null"><x path="js.html.IterationCompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</iterationComposite>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) prior to playing (`"backwards"`), retained after the animation has completed playing (`"forwards"`), or `both`. Defaults to `"none"`.</haxe_doc>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0. </haxe_doc>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `"linear"`, `"ease"`, `"ease-in"`, `"ease-out"`, and `"ease-in-out"`, or a custom `"cubic-bezier"` value like `"cubic-bezier(0.42, 0, 0.58, 1)"`. Defaults to `"linear"`.</haxe_doc>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.</haxe_doc>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `"normal"`.</haxe_doc>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to 0.</haxe_doc>
	</delay>
	<composite>
		<x path="Null"><x path="js.html.CompositeOperation"/></x>
		<meta><m n=":optional"/></meta>
	</composite>
</a></typedef>
	<class path="js.html.LIElement" params="" file="/usr/local/lib/haxe/std/js/html/LIElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` indicating the ordinal position of the list element inside a given `ol`. It reflects the `value` attribute of the HTML `li` element, and can be smaller than `0`. If the `li` element is not a child of an `ol` element, the property has no meaning.</haxe_doc>
		</value>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of the bullets, `"disc"`, `"square"` or `"circle"`. As the standard way of defining the list type is via the CSS `list-style-type` property, use the CSSOM methods to set it via a script.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `HTMLLIElement` interface exposes specific properties and methods (beyond those defined by regular `HTMLElement` interface it also has available to it by inheritance) for manipulating list elements.

	Documentation [HTMLLIElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLIElement"</e></m></meta>
	</class>
	<class path="js.html.LabelElement" params="" file="/usr/local/lib/haxe/std/js/html/LabelElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Is a `HTMLFormElement` object representing the form with which the labeled control is associated, or `null` if there is no associated control, or if that control isn't associated with a form. In other words, this is just a shortcut for `HTMLLabelElement.control.form`.</haxe_doc>
		</form>
		<htmlFor public="1">
			<c path="String"/>
			<haxe_doc>Is a string containing the ID of the labeled control. This reflects the `for` attribute.</haxe_doc>
		</htmlFor>
		<control public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Is a `HTMLElement` representing the control with which the label is associated.</haxe_doc>
		</control>
		<haxe_doc><![CDATA[The `HTMLLabelElement` interface gives access to properties specific to `label` elements. It inherits methods and properties from the base `HTMLElement` interface.

	Documentation [HTMLLabelElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLabelElement"</e></m></meta>
	</class>
	<class path="js.html.LegendElement" params="" file="/usr/local/lib/haxe/std/js/html/LegendElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<align public="1"><c path="String"/></align>
		<haxe_doc><![CDATA[The `HTMLLegendElement` is an interface allowing to access properties of the `legend` elements. It inherits properties and methods from the `HTMLElement` interface.

	Documentation [HTMLLegendElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLegendElement"</e></m></meta>
	</class>
	<abstract path="js.html.LineAlignSetting" params="" file="/usr/local/lib/haxe/std/js/html/LineAlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._LineAlignSetting.LineAlignSetting_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/LineAlignSetting.hx" private="1" module="js.html.LineAlignSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.LinkElement" params="" file="/usr/local/lib/haxe/std/js/html/LinkElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` which represents whether the link is disabled; currently only used with style sheet links.</haxe_doc>
		</disabled>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the URI for the target resource.</haxe_doc>
		</href>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that corresponds to the CORS setting for this link element. See CORS settings attributes for details.</haxe_doc>
		</crossOrigin>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the forward relationship of the linked resource from the document to the resource.</haxe_doc>
		</rel>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMTokenList` that reflects the `rel` HTML attribute, as a list of tokens.</haxe_doc>
		</relList>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing a list of one or more media formats to which the resource applies.</haxe_doc>
		</media>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the language code for the linked resource.</haxe_doc>
		</hreflang>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the MIME type of the linked resource.</haxe_doc>
		</type>
		<referrerPolicy public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `referrerpolicy` HTML attribute indicating which referrer to use.</haxe_doc>
		</referrerPolicy>
		<sizes public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMSettableTokenList` that reflects the `sizes` HTML attribute, as a list of tokens.</haxe_doc>
		</sizes>
		<charset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the character encoding for the target resource.</haxe_doc>
		</charset>
		<rev public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the reverse relationship of the linked resource from the resource to the document.
		 Note: Currently the W3C HTML 5.2 spec states that `rev` is no longer obsolete, whereas the WHATWG living standard still has it labeled obsolete. Until this discrepancy is resolved, you should still assume it is obsolete.</haxe_doc>
		</rev>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the target frame to which the resource applies.</haxe_doc>
		</target>
		<integrity public="1"><c path="String"/></integrity>
		<as public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of content being loaded by the HTML link.</haxe_doc>
		</as>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[The `HTMLLinkElement` interface represents reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLLinkElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLinkElement"</e></m></meta>
	</class>
	<class path="js.html.Location" params="" file="/usr/local/lib/haxe/std/js/html/Location.hx" extern="1">
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the entire URL. If changed, the associated document navigates to the new page. It can be set from a different origin than the associated document.</haxe_doc>
		</href>
		<origin public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the canonical form of the origin of the specific location.</haxe_doc>
		</origin>
		<protocol public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the protocol scheme of the URL, including the final `':'`.</haxe_doc>
		</protocol>
		<host public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the host, that is the hostname, a `':'`, and the port of the URL.</haxe_doc>
		</host>
		<hostname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the domain of the URL.</haxe_doc>
		</hostname>
		<port public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the port number of the URL.</haxe_doc>
		</port>
		<pathname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an initial `'/'` followed by the path of the URL.</haxe_doc>
		</pathname>
		<search public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'?'` followed by the parameters or "querystring" of the URL. Modern browsers provide URLSearchParams and URL.searchParams to make it easy to parse out the parameters from the querystring.</haxe_doc>
		</search>
		<hash public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'#'` followed by the fragment identifier of the URL.</haxe_doc>
		</hash>
		<assign public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Loads the resource at the URL provided in parameter.
		@throws DOMError</haxe_doc>
		</assign>
		<replace public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Replaces the current resource with the one at the provided URL. The difference from the `assign()` method is that after using `replace()` the current page will not be saved in session `History`, meaning the user won't be able to use the back button to navigate to it.
		@throws DOMError</haxe_doc>
		</replace>
		<reload public="1" set="method">
			<f a="?forceget" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ forceget : false }</e></m></meta>
			<haxe_doc>Reloads the resource from the current URL. Its optional unique parameter is a `Boolean`, which, when it is `true`, causes the page to always be reloaded from the server. If it is `false` or not specified, the browser may reload the page from its cache.
		@throws DOMError</haxe_doc>
		</reload>
		<haxe_doc><![CDATA[The `Location` interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the `Document` and `Window` interface have such a linked `Location`, accessible via `Document.location` and `Window.location` respectively.

	Documentation [Location](https://developer.mozilla.org/en-US/docs/Web/API/Location) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Location$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Location>]]></haxe_doc>
		<meta><m n=":native"><e>"Location"</e></m></meta>
	</class>
	<class path="js.html.MapElement" params="" file="/usr/local/lib/haxe/std/js/html/MapElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the `map` element for referencing it other context. If the `id` attribute is set, this must have the same value; and it cannot be `null` or empty.</haxe_doc>
		</name>
		<areas public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Is a live `HTMLCollection` representing the `area` elements associated to this `map`.</haxe_doc>
		</areas>
		<haxe_doc><![CDATA[The `HTMLMapElement` interface provides special properties and methods (beyond those of the regular object `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.

	Documentation [HTMLMapElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMapElement"</e></m></meta>
	</class>
	<class path="js.html.MediaDeviceInfo" params="" file="/usr/local/lib/haxe/std/js/html/MediaDeviceInfo.hx" extern="1">
		<deviceId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is an identifier for the represented device that is persisted across sessions. It is un-guessable by other applications and unique to the origin of the calling application. It is reset when the user clears cookies (for Private Browsing, a different identifier is used that is not persisted across sessions).</haxe_doc>
		</deviceId>
		<kind public="1" set="null">
			<x path="js.html.MediaDeviceKind"/>
			<haxe_doc>Returns an enumerated value that is either `"videoinput"`, `"audioinput"` or `"audiooutput"`.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is a label describing this device (for example "External USB Webcam").</haxe_doc>
		</label>
		<groupId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that is a group identifier. Two devices have the same group identifier if they belong to the same physical device — for example a monitor with both a built-in camera and a microphone.</haxe_doc>
		</groupId>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<haxe_doc><![CDATA[The `MediaDevicesInfo` interface contains information that describes a single media input or output device.

	Documentation [MediaDeviceInfo](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaDeviceInfo"</e></m></meta>
	</class>
	<abstract path="js.html.MediaDeviceKind" params="" file="/usr/local/lib/haxe/std/js/html/MediaDeviceKind.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._MediaDeviceKind.MediaDeviceKind_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/MediaDeviceKind.hx" private="1" module="js.html.MediaDeviceKind" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.MediaDevices" params="" file="/usr/local/lib/haxe/std/js/html/MediaDevices.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ondevicechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `devicechange` event. This event is delivered to the `MediaDevices` object when a media input or output device is attached to or removed from the user's computer.</haxe_doc>
		</ondevicechange>
		<getSupportedConstraints public="1" set="method"><f a=""><t path="js.html.MediaTrackSupportedConstraints"/></f></getSupportedConstraints>
		<enumerateDevices public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="js.html.MediaDeviceInfo"/></c></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</enumerateDevices>
		<getUserMedia public="1" set="method">
			<f a="?constraints">
				<x path="Null"><t path="js.html.MediaStreamConstraints"/></x>
				<c path="js.lib.Promise"><c path="js.html.MediaStream"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getUserMedia>
		<haxe_doc><![CDATA[The `MediaDevices` interface provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.

	Documentation [MediaDevices](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaDevices"</e></m></meta>
	</class>
	<class path="js.html.MediaError" params="" file="/usr/local/lib/haxe/std/js/html/MediaError.hx" extern="1">
		<MEDIA_ERR_ABORTED public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</MEDIA_ERR_ABORTED>
		<MEDIA_ERR_NETWORK public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</MEDIA_ERR_NETWORK>
		<MEDIA_ERR_DECODE public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</MEDIA_ERR_DECODE>
		<MEDIA_ERR_SRC_NOT_SUPPORTED public="1" get="inline" set="null" expr="4" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</MEDIA_ERR_SRC_NOT_SUPPORTED>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A number which represents the general type of error that occurred, as follows: `/en-US/docs/Web/API/MediaError/code`</haxe_doc>
		</code>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` object containing a human-readable string which provides specific diagnostic information to help the reader understand the error condition which occurred; specifically, it isn't simply a summary of what the error code means, but actual diagnostic information to help in understanding what exactly went wrong. This text and its format is not defined by the specification and will vary from one `user agent` to another. If no diagnostics are available, or no explanation can be provided, this value is an empty string (`""`).</haxe_doc>
		</message>
		<haxe_doc><![CDATA[The `MediaError` interface represents an error which occurred while handling media in an HTML media element based on `HTMLMediaElement`, such as `audio` or `video`.

	Documentation [MediaError](https://developer.mozilla.org/en-US/docs/Web/API/MediaError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaError>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaError"</e></m></meta>
	</class>
	<typedef path="js.html.MediaKeyStatusMapIterator" params="" file="/usr/local/lib/haxe/std/js/html/MediaKeyStatusMapIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.MediaList" params="" file="/usr/local/lib/haxe/std/js/html/MediaList.hx" extern="1">
		<mediaText public="1"><c path="String"/></mediaText>
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<deleteMedium public="1" set="method">
			<f a="oldMedium">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteMedium>
		<appendMedium public="1" set="method">
			<f a="newMedium">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendMedium>
		<meta><m n=":native"><e>"MediaList"</e></m></meta>
	</class>
	<class path="js.html.MediaQueryList" params="" file="/usr/local/lib/haxe/std/js/html/MediaQueryList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<media public="1" set="null">
			<c path="String"/>
			<haxe_doc> A `DOMString` representing a serialized media query.</haxe_doc>
		</media>
		<matches public="1" set="null">
			<x path="Bool"/>
			<haxe_doc> A `Boolean` that returns `true` if the `document` currently matches the media query list, or `false` if not.</haxe_doc>
		</matches>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc> An event handler property representing a function that is invoked when the `change` event fires, i.e when the status of media query support changes. The event object is a `MediaQueryListEvent` instance, which is recognised as a `MediaListQuery` instance in older browsers, for backwards compatibility purposes.</haxe_doc>
		</onchange>
		<addListener public="1" set="method">
			<f a="listener">
				<f a="">
					<c path="js.html.Event"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
			<overloads>
				<addListener public="1" set="method">
					<f a="listener">
						<x path="haxe.Function"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</addListener>
				<addListener public="1" set="method">
					<f a="listener">
						<t path="js.html.EventListener"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Adds a listener to the `MediaQueryListener` that will run a custom callback function in response to the media query status changing. This is basically an alias for `EventTarget.addEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</addListener>
			</overloads>
		</addListener>
		<removeListener public="1" set="method">
			<f a="listener">
				<f a="">
					<c path="js.html.Event"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
			<overloads>
				<removeListener public="1" set="method">
					<f a="listener">
						<x path="haxe.Function"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</removeListener>
				<removeListener public="1" set="method">
					<f a="listener">
						<t path="js.html.EventListener"/>
						<x path="Void"/>
					</f>
					<haxe_doc> Removes a listener from the `MediaQueryListener`. This is basically an alias for `EventTarget.removeEventListener()`, for backwards compatibility purposes.
		@throws DOMError</haxe_doc>
				</removeListener>
			</overloads>
		</removeListener>
		<haxe_doc><![CDATA[A `MediaQueryList` object stores information on a media query applied to a document, and handles sending notifications to listeners when the media query state change (i.e. when the media query test starts or stops evaluating to `true`).

	Documentation [MediaQueryList](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaQueryList"</e></m></meta>
	</class>
	<typedef path="js.html.MediaStreamConstraints" params="" file="/usr/local/lib/haxe/std/js/html/MediaStreamConstraints.hx">
		<a>
			<video>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.MediaTrackConstraints"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Either a Boolean (which indicates whether or not a video track is requested) or a `MediaTrackConstraints` object providing the constraints which must be met by the video track included in the returned `MediaStream`. If constraints are specified, a video track is inherently requested.</haxe_doc>
			</video>
			<picture>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</picture>
			<peerIdentity>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A `DOMString` identifying the peer who has sole access to the stream. If this property is specified, only the indicated peer can receive and use the stream. Streams isolated in this way can only be displayed in a media element (`audio` or `video`) where the content is protected just as if `CORS` cross-origin rules were in effect. When a peer identity is set, `MediaStreamTrack`s from that peer have their `MediaStreamTrack.isolated` flag set to `true`.</haxe_doc>
			</peerIdentity>
			<fake>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</fake>
			<audio>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.MediaTrackConstraints"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Either a Boolean (which indicates whether or not an audio track is requested) or a `MediaTrackConstraints` object providing the constraints which must be met by the audio track included in the returned `MediaStream`. If constraints are specified, an audio track is inherently requested.</haxe_doc>
			</audio>
		</a>
		<haxe_doc><![CDATA[The `MediaStreamConstraints` dictionary is used when calling `getUserMedia()` to specify what kinds of tracks should be included in the returned `MediaStream`, and, optionally, to establish constraints for those tracks' settings.

	Documentation [MediaStreamConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints>]]></haxe_doc>
	</typedef>
	<abstract path="js.html.MediaStreamTrackState" params="" file="/usr/local/lib/haxe/std/js/html/MediaStreamTrackState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._MediaStreamTrackState.MediaStreamTrackState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/MediaStreamTrackState.hx" private="1" module="js.html.MediaStreamTrackState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.MediaTrackConstraintSet" params="" file="/usr/local/lib/haxe/std/js/html/MediaTrackConstraintSet.hx"><a>
	<width>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</width>
	<viewportWidth>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportWidth>
	<viewportOffsetY>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportOffsetY>
	<viewportOffsetX>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportOffsetX>
	<viewportHeight>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</viewportHeight>
	<scrollWithPage>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</scrollWithPage>
	<noiseSuppression>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</noiseSuppression>
	<mediaSource>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</mediaSource>
	<height>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</height>
	<frameRate>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<t path="js.html.ConstrainDoubleRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</frameRate>
	<facingMode>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</facingMode>
	<echoCancellation>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</echoCancellation>
	<deviceId>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</deviceId>
	<channelCount>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</channelCount>
	<browserWindow>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</browserWindow>
	<autoGainControl>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</autoGainControl>
</a></typedef>
	<typedef path="js.html.MediaTrackConstraints" params="" file="/usr/local/lib/haxe/std/js/html/MediaTrackConstraints.hx">
		<a>
			<width>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</width>
			<viewportWidth>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<noiseSuppression>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<height>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</height>
			<frameRate>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<t path="js.html.ConstrainDoubleRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</frameRate>
			<facingMode>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
				<meta><m n=":optional"/></meta>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</echoCancellation>
			<deviceId>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<t path="js.html.ConstrainDOMStringParameters"/>
	</x>
</x></x>
				<meta><m n=":optional"/></meta>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<t path="js.html.ConstrainLongRange"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.ConstrainBooleanParameters"/>
</x></x>
				<meta><m n=":optional"/></meta>
			</autoGainControl>
			<advanced>
				<x path="Null"><c path="Array"><t path="js.html.MediaTrackConstraintSet"/></c></x>
				<meta><m n=":optional"/></meta>
			</advanced>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackConstraints` dictionary is used to describe a set of capabilities and the value or values each can take on. A constraints dictionary is passed into `applyConstraints()` to allow a script to establish a set of exact (required) values or ranges and/or preferred values or ranges of values for the track, and the most recently-requested set of custom constraints can be retrieved by calling `getConstraints()`.

	Documentation [MediaTrackConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.MediaTrackSettings" params="" file="/usr/local/lib/haxe/std/js/html/MediaTrackSettings.hx">
		<a>
			<width>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the `MediaTrackSettings.width` property, specifying the width of the track's video data in pixels.</haxe_doc>
			</width>
			<viewportWidth>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<noiseSuppression>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean which indicates the current value of the `MediaTrackConstraints.noiseSuppression` property, which is `true` if noise suppression is enabled and is `false` otherwise.</haxe_doc>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<height>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the ``MediaTrackConstraints.height`` property, specifying the height of the track's video data in pixels.</haxe_doc>
			</height>
			<frameRate>
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A double-precision floating point value indicating the current value of the ``MediaTrackConstraints.frameRate`` property, specifying how many frames of video per second the track includes. If the value can't be determined for any reason, the value will match the vertical sync rate of the device the user agent is running on.</haxe_doc>
			</frameRate>
			<facingMode>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean indicating the current value of the ``MediaTrackConstraints.echoCancellation`` property, specifying `true` if echo cancellation is enabled, otherwise `false`.</haxe_doc>
			</echoCancellation>
			<deviceId>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A `DOMString` indicating the current value of the ``MediaTrackConstraints.deviceId`` property. The device ID is a origin-unique string identifying the source of the track; this is usually a `GUID`. This value is specific to the source of the track's data and is not usable for setting constraints; it can, however, be used for initially selecting media when calling `MediaDevices.getUserMedia()`.</haxe_doc>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A long integer value indicating the current value of the ``MediaTrackConstraints.channelCount`` property, specifying the number of audio channels present on the track (therefore indicating how many audio samples exist in each audio frame). This is 1 for mono, 2 for stereo, and so forth.</haxe_doc>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean which indicates the current value of the `MediaTrackConstraints.autoGainControl` property, which is `true` if automatic gain control is enabled and is `false` otherwise.</haxe_doc>
			</autoGainControl>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackSettings` dictionary is used to return the current values configured for each of a `MediaStreamTrack`'s settings. These values will adhere as closely as possible to any constraints previously described using a `MediaTrackConstraints` object and set using `applyConstraints()`, and will adhere to the default constraints for any properties whose constraints haven't been changed, or whose customized constraints couldn't be matched.

	Documentation [MediaTrackSettings](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.MediaTrackSupportedConstraints" params="" file="/usr/local/lib/haxe/std/js/html/MediaTrackSupportedConstraints.hx">
		<a>
			<width>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `width` constraint is supported in the current environment.</haxe_doc>
			</width>
			<volume>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `volume` constraint is supported in the current environment.</haxe_doc>
			</volume>
			<viewportWidth>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<sampleSize>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `sampleSize` constraint is supported in the current environment.</haxe_doc>
			</sampleSize>
			<sampleRate>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `sampleRate` constraint is supported in the current environment.</haxe_doc>
			</sampleRate>
			<noiseSuppression>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean whose value is `true` if the `noiseSuppression` constraint is supported in the current environment.</haxe_doc>
			</noiseSuppression>
			<mediaSource>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<latency>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `latency` constraint is supported in the current environment.</haxe_doc>
			</latency>
			<height>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `height` constraint is supported in the current environment.</haxe_doc>
			</height>
			<groupId>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `groupId` constraint is supported in the current environment.</haxe_doc>
			</groupId>
			<frameRate>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `frameRate` constraint is supported in the current environment.</haxe_doc>
			</frameRate>
			<facingMode>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `facingMode` constraint is supported in the current environment.</haxe_doc>
			</facingMode>
			<echoCancellation>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `echoCancellation` constraint is supported in the current environment.</haxe_doc>
			</echoCancellation>
			<deviceId>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `deviceId` constraint is supported in the current environment.</haxe_doc>
			</deviceId>
			<channelCount>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `channelCount` constraint is supported in the current environment.</haxe_doc>
			</channelCount>
			<browserWindow>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<autoGainControl>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean whose value is `true` if the `autoGainControl` constraint is supported in the current environment.</haxe_doc>
			</autoGainControl>
			<aspectRatio>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A Boolean value whose value is `true` if the `aspectRatio` constraint is supported in the current environment.</haxe_doc>
			</aspectRatio>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackSupportedConstraints` dictionary establishes the list of constrainable properties recognized by the user agent or browser in its implementation of the `MediaStreamTrack` object. An object conforming to `MediaTrackSupportedConstraints` is returned by `MediaDevices.getSupportedConstraints()`.

	Documentation [MediaTrackSupportedConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints>]]></haxe_doc>
	</typedef>
	<class path="js.html.MenuElement" params="" file="/usr/local/lib/haxe/std/js/html/MenuElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<type public="1"><c path="String"/></type>
		<label public="1"><c path="String"/></label>
		<compact public="1"><x path="Bool"/></compact>
		<meta><m n=":native"><e>"HTMLMenuElement"</e></m></meta>
	</class>
	<class path="js.html.MetaElement" params="" file="/usr/local/lib/haxe/std/js/html/MetaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1"><c path="String"/></name>
		<httpEquiv public="1"><c path="String"/></httpEquiv>
		<content public="1"><c path="String"/></content>
		<scheme public="1"><c path="String"/></scheme>
		<haxe_doc><![CDATA[The `HTMLMetaElement` interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLMetaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMetaElement"</e></m></meta>
	</class>
	<class path="js.html.MeterElement" params="" file="/usr/local/lib/haxe/std/js/html/MeterElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the currrent value, reflecting the `value` attribute.</haxe_doc>
		</value>
		<min public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the minimum value, reflecting the `min` attribute.</haxe_doc>
		</min>
		<max public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the maximum value, reflecting the `max` attribute.</haxe_doc>
		</max>
		<low public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the value of the low boundary, reflecting the `low`attribute.</haxe_doc>
		</low>
		<high public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the value of the high boundary, reflecting the `high` attribute.</haxe_doc>
		</high>
		<optimum public="1">
			<x path="Float"/>
			<haxe_doc>A `double` representing the optimum, reflecting the `optimum` attribute.</haxe_doc>
		</optimum>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements that are associated with the element.</haxe_doc>
		</labels>
		<haxe_doc><![CDATA[The HTML `meter` elements expose the `HTMLMeterElement` interface, which provides special properties and methods (beyond the `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `meter` elements.

	Documentation [HTMLMeterElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMeterElement"</e></m></meta>
	</class>
	<class path="js.html.MimeType" params="" file="/usr/local/lib/haxe/std/js/html/MimeType.hx" extern="1">
		<description public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a description of the associated plugin or an empty string if there is none.</haxe_doc>
		</description>
		<enabledPlugin public="1" set="null">
			<c path="js.html.Plugin"/>
			<haxe_doc>Returns an instance of `Plugin` containing information about the plugin itself.</haxe_doc>
		</enabledPlugin>
		<suffixes public="1" set="null">
			<c path="String"/>
			<haxe_doc>A string containing valid file extensions for the data displayed by the plugin, or an empty string if an extension is not valid for the particular module. For example, a browser's content decryption module may appear in the plugin list, but support more file extenions than can be anticipated. It might therefore return an empty string.</haxe_doc>
		</suffixes>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the MIME type of the associated plugin.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `MimeType` interface provides contains information about a MIME type associated with a particular plugin. `NavigatorPlugins.mimeTypes` returns an array of this object.

	Documentation [MimeType](https://developer.mozilla.org/en-US/docs/Web/API/MimeType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MimeType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MimeType>]]></haxe_doc>
		<meta><m n=":native"><e>"MimeType"</e></m></meta>
	</class>
	<class path="js.html.MimeTypeArray" params="" file="/usr/local/lib/haxe/std/js/html/MimeTypeArray.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of items in the array.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.MimeType"/>
			</f>
			<haxe_doc>Returns the `MimeType` object with the specified index.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.MimeType"/>
			</f>
			<haxe_doc>Returns the `MimeType` object with the specified name.</haxe_doc>
		</namedItem>
		<haxe_doc><![CDATA[The `MimeTypeArray` interface returns an array of `MimeType` instances, each of which contains information about a supported browser plugins. This object is returned by `NavigatorPlugins.mimeTypes`.

	Documentation [MimeTypeArray](https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MimeTypeArray>]]></haxe_doc>
		<meta><m n=":native"><e>"MimeTypeArray"</e></m></meta>
	</class>
	<class path="js.html.ModElement" params="" file="/usr/local/lib/haxe/std/js/html/ModElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cite public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `cite` HTML attribute, containing a URI of a resource explaining the change.</haxe_doc>
		</cite>
		<dateTime public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `datetime` HTML attribute, containing a date-and-time string representing a timestamp for the change.</haxe_doc>
		</dateTime>
		<haxe_doc><![CDATA[The `HTMLModElement` interface provides special properties (beyond the regular methods and properties available through the `HTMLElement` interface they also have available to them by inheritance) for manipulating modification elements, that is `del` and `ins`.

	Documentation [HTMLModElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLModElement"</e></m></meta>
	</class>
	<class path="js.html.MouseEvent" params="" file="/usr/local/lib/haxe/std/js/html/MouseEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<screenX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer in global (screen) coordinates.</haxe_doc>
		</screenX>
		<screenY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer in global (screen) coordinates.</haxe_doc>
		</screenY>
		<clientX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer in local (DOM content) coordinates.</haxe_doc>
		</clientX>
		<clientY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer in local (DOM content) coordinates.</haxe_doc>
		</clientY>
		<x public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Alias for `MouseEvent.clientX`.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Alias for `MouseEvent.clientY`</haxe_doc>
		</y>
		<offsetX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer relative to the position of the padding edge of the target node.</haxe_doc>
		</offsetX>
		<offsetY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer relative to the position of the padding edge of the target node.</haxe_doc>
		</offsetY>
		<ctrlKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the control key was down when the mouse event was fired.</haxe_doc>
		</ctrlKey>
		<shiftKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the shift key was down when the mouse event was fired.</haxe_doc>
		</shiftKey>
		<altKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the alt key was down when the mouse event was fired.</haxe_doc>
		</altKey>
		<metaKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the meta key was down when the mouse event was fired.</haxe_doc>
		</metaKey>
		<button public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The button number that was pressed (if applicable) when the mouse event was fired.</haxe_doc>
		</button>
		<buttons public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The buttons being depressed (if any) when the mouse event was fired.</haxe_doc>
		</buttons>
		<relatedTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The secondary target for the event, if there is one.</haxe_doc>
		</relatedTarget>
		<region public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the id of the hit region affected by the event. If no hit region is affected, `null` is returned.</haxe_doc>
		</region>
		<movementX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer relative to the position of the last `mousemove` event.</haxe_doc>
		</movementX>
		<movementY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer relative to the position of the last `mousemove` event.</haxe_doc>
		</movementY>
		<initMouseEvent public="1" set="method">
			<f a="typeArg:?canBubbleArg:?cancelableArg:?viewArg:?detailArg:?screenXArg:?screenYArg:?clientXArg:?clientYArg:?ctrlKeyArg:?altKeyArg:?shiftKeyArg:?metaKeyArg:?buttonArg:?relatedTargetArg" v=":false:false::0:0:0:0:0:false:false:false:false:0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="js.html.EventTarget"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ buttonArg : 0, metaKeyArg : false, shiftKeyArg : false, altKeyArg : false, ctrlKeyArg : false, clientYArg : 0, clientXArg : 0, screenYArg : 0, screenXArg : 0, detailArg : 0, cancelableArg : false, canBubbleArg : false }</e></m></meta>
			<haxe_doc>Initializes the value of a `MouseEvent` created. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initMouseEvent>
		<getModifierState public="1" set="method">
			<f a="keyArg">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns the current state of the specified modifier key. See the `KeyboardEvent.getModifierState`() for details.</haxe_doc>
		</getModifierState>
		<initNSMouseEvent public="1" set="method">
			<f a="typeArg:?canBubbleArg:?cancelableArg:?viewArg:?detailArg:?screenXArg:?screenYArg:?clientXArg:?clientYArg:?ctrlKeyArg:?altKeyArg:?shiftKeyArg:?metaKeyArg:?buttonArg:?relatedTargetArg:?pressure:?inputSourceArg" v=":false:false::0:0:0:0:0:false:false:false:false:0::0.0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="js.html.EventTarget"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ inputSourceArg : 0, pressure : 0.0, buttonArg : 0, metaKeyArg : false, shiftKeyArg : false, altKeyArg : false, ctrlKeyArg : false, clientYArg : 0, clientXArg : 0, screenYArg : 0, screenXArg : 0, detailArg : 0, cancelableArg : false, canBubbleArg : false }</e></m></meta>
		</initNSMouseEvent>
		<new public="1" set="method">
			<f a="typeArg:?mouseEventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.MouseEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MouseEvent` interface represents events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include `click`, `dblclick`, `mouseup`, `mousedown`.

	Documentation [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MouseEvent"</e></m></meta>
	</class>
	<typedef path="js.html.MouseEventInit" params="" file="/usr/local/lib/haxe/std/js/html/MouseEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<screenY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenX>
	<relatedTarget>
		<x path="Null"><c path="js.html.EventTarget"/></x>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<movementY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementY>
	<movementX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementX>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<clientY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientX>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<buttons>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</buttons>
	<button>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</button>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.NamedNodeMap" params="" file="/usr/local/lib/haxe/std/js/html/NamedNodeMap.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the amount of objects in the map.</haxe_doc>
		</length>
		<getNamedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns a `Attr`, corresponding to the given name.</haxe_doc>
		</getNamedItem>
		<setNamedItem public="1" set="method">
			<f a="arg">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Replaces, or adds, the `Attr` identified in the map by the given name.
		@throws DOMError</haxe_doc>
		</setNamedItem>
		<removeNamedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the `Attr` identified by the given map.
		@throws DOMError</haxe_doc>
		</removeNamedItem>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns the `Attr` at the given index, or `null` if the index is higher or equal to the number of nodes.</haxe_doc>
		</item>
		<getNamedItemNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns a `Attr` identified by a namespace and related local name.</haxe_doc>
		</getNamedItemNS>
		<setNamedItemNS public="1" set="method">
			<f a="arg">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Replaces, or adds, the `Attr` identified in the map by the given namespace and related local name.
		@throws DOMError</haxe_doc>
		</setNamedItemNS>
		<removeNamedItemNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Removes the `Attr` identified by the given namespace and related local name.
		@throws DOMError</haxe_doc>
		</removeNamedItemNS>
		<haxe_doc><![CDATA[The `NamedNodeMap` interface represents a collection of `Attr` objects. Objects inside a `NamedNodeMap` are not in any particular order, unlike `NodeList`, although they may be accessed by an index as in an array.

	Documentation [NamedNodeMap](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap>]]></haxe_doc>
		<meta><m n=":native"><e>"NamedNodeMap"</e></m></meta>
	</class>
	<class path="js.html.Navigator" params="" file="/usr/local/lib/haxe/std/js/html/Navigator.hx" extern="1">
		<permissions public="1" set="null">
			<c path="js.html.Permissions"/>
			<haxe_doc>Returns a `Permissions` object that can be used to query and update permission status of APIs covered by the Permissions API.</haxe_doc>
		</permissions>
		<mimeTypes public="1" set="null"><c path="js.html.MimeTypeArray"/></mimeTypes>
		<plugins public="1" set="null"><c path="js.html.PluginArray"/></plugins>
		<doNotTrack public="1" set="null">
			<c path="String"/>
			<haxe_doc>Reports the value of the user's do-not-track preference. When this value is "yes", your web site or application should not track the user.</haxe_doc>
		</doNotTrack>
		<maxTouchPoints public="1" set="null"><x path="Int"/></maxTouchPoints>
		<oscpu public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a string that represents the current operating system.</haxe_doc>
		</oscpu>
		<vendor public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the vendor name of the current browser (e.g., "Netscape6").</haxe_doc>
		</vendor>
		<vendorSub public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the vendor version number (e.g. "6.1").</haxe_doc>
		</vendorSub>
		<productSub public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the build number of the current browser (e.g., "20060909").</haxe_doc>
		</productSub>
		<cookieEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns false if setting a cookie will be ignored and true otherwise.</haxe_doc>
		</cookieEnabled>
		<buildID public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the build identifier of the browser (e.g., "2006090803").</haxe_doc>
		</buildID>
		<mediaDevices public="1" set="null">
			<c path="js.html.MediaDevices"/>
			<haxe_doc>Returns a reference to a `MediaDevices` object which can then be used to get information about available media devices (`MediaDevices.enumerateDevices()`), find out what constrainable properties are supported for media on the user's computer and user agent (`MediaDevices.getSupportedConstraints()`), and to request access to media using `MediaDevices.getUserMedia()`.</haxe_doc>
		</mediaDevices>
		<serviceWorker public="1" set="null">
			<c path="js.html.ServiceWorkerContainer"/>
			<haxe_doc>Returns a `ServiceWorkerContainer` object, which provides access to registration, removal, upgrade, and communication with the `ServiceWorker` objects for the associated document.</haxe_doc>
		</serviceWorker>
		<clipboard public="1" set="null"><c path="js.html.Clipboard"/></clipboard>
		<hardwareConcurrency public="1" set="null"><x path="Int"/></hardwareConcurrency>
		<geolocation public="1" set="null">
			<t path="js.html.Geolocation"/>
			<haxe_doc>Returns a `Geolocation` object allowing accessing the location of the device.</haxe_doc>
		</geolocation>
		<appCodeName public="1" set="null"><c path="String"/></appCodeName>
		<appName public="1" set="null"><c path="String"/></appName>
		<appVersion public="1" set="null"><c path="String"/></appVersion>
		<platform public="1" set="null"><c path="String"/></platform>
		<userAgent public="1" set="null"><c path="String"/></userAgent>
		<product public="1" set="null"><c path="String"/></product>
		<language public="1" set="null"><c path="String"/></language>
		<languages public="1" set="null"><c path="Array"><c path="String"/></c></languages>
		<onLine public="1" set="null"><x path="Bool"/></onLine>
		<storage public="1" set="null"><c path="js.html.StorageManager"/></storage>
		<vibrate public="1" set="method">
			<f a="pattern">
				<c path="Array"><x path="Int"/></c>
				<x path="Bool"/>
			</f>
			<overloads><vibrate public="1" set="method"><f a="duration">
	<x path="Int"/>
	<x path="Bool"/>
</f></vibrate></overloads>
		</vibrate>
		<javaEnabled public="1" set="method"><f a=""><x path="Bool"/></f></javaEnabled>
		<getGamepads public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Gamepad"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getGamepads>
		<requestMIDIAccess public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.midi.MIDIOptions"/></x>
				<c path="js.lib.Promise"><c path="js.html.midi.MIDIAccess"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</requestMIDIAccess>
		<sendBeacon public="1" set="method">
			<f a="url:?data">
				<c path="String"/>
				<c path="js.html.Blob"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.html.FormData"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="js.html.URLSearchParams"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
				<sendBeacon public="1" set="method">
					<f a="url:?data">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</sendBeacon>
			</overloads>
		</sendBeacon>
		<requestMediaKeySystemAccess public="1" set="method"><f a="keySystem:supportedConfigurations">
	<c path="String"/>
	<c path="Array"><t path="js.html.eme.MediaKeySystemConfiguration"/></c>
	<c path="js.lib.Promise"><c path="js.html.eme.MediaKeySystemAccess"/></c>
</f></requestMediaKeySystemAccess>
		<taintEnabled public="1" set="method"><f a=""><x path="Bool"/></f></taintEnabled>
		<haxe_doc><![CDATA[The `Navigator` interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.

	Documentation [Navigator](https://developer.mozilla.org/en-US/docs/Web/API/Navigator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Navigator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Navigator>]]></haxe_doc>
		<meta><m n=":native"><e>"Navigator"</e></m></meta>
	</class>
	<class path="js.html.NodeFilter" params="" file="/usr/local/lib/haxe/std/js/html/NodeFilter.hx" extern="1">
		<FILTER_ACCEPT public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</FILTER_ACCEPT>
		<FILTER_REJECT public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</FILTER_REJECT>
		<FILTER_SKIP public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</FILTER_SKIP>
		<SHOW_ALL public="1" get="inline" set="null" expr="cast 4294967295" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>cast 4294967295</e></m></meta>
		</SHOW_ALL>
		<SHOW_ELEMENT public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SHOW_ELEMENT>
		<SHOW_ATTRIBUTE public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SHOW_ATTRIBUTE>
		<SHOW_TEXT public="1" get="inline" set="null" expr="4" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SHOW_TEXT>
		<SHOW_CDATA_SECTION public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SHOW_CDATA_SECTION>
		<SHOW_ENTITY_REFERENCE public="1" get="inline" set="null" expr="16" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</SHOW_ENTITY_REFERENCE>
		<SHOW_ENTITY public="1" get="inline" set="null" expr="32" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</SHOW_ENTITY>
		<SHOW_PROCESSING_INSTRUCTION public="1" get="inline" set="null" expr="64" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>64</e></m></meta>
		</SHOW_PROCESSING_INSTRUCTION>
		<SHOW_COMMENT public="1" get="inline" set="null" expr="128" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</SHOW_COMMENT>
		<SHOW_DOCUMENT public="1" get="inline" set="null" expr="256" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</SHOW_DOCUMENT>
		<SHOW_DOCUMENT_TYPE public="1" get="inline" set="null" expr="512" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</SHOW_DOCUMENT_TYPE>
		<SHOW_DOCUMENT_FRAGMENT public="1" get="inline" set="null" expr="1024" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</SHOW_DOCUMENT_FRAGMENT>
		<SHOW_NOTATION public="1" get="inline" set="null" expr="2048" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2048</e></m></meta>
		</SHOW_NOTATION>
		<acceptNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> that will be used to tell if a given <code>Node</code> must be accepted or not by the <code>NodeIterator</code> or <code>TreeWalker</code> iteration algorithm. This method is expected to be written by the user of a <code>NodeFilter</code>. Possible return values are:
			<table class="standard-table">
				
					<tr>
						<td class="header">Constant</td>
						<td class="header">Description</td>
					</tr>
					<tr>
						<td><code>FILTER_ACCEPT</code></td>
						<td>Value returned by the <code>NodeFilter.acceptNode()</code> method when a node should be accepted.</td>
					</tr>
					<tr>
						<td><code>FILTER_REJECT</code></td>
						<td>Value to be returned by the <code>NodeFilter.acceptNode()</code> method when a node should be rejected. For <code>TreeWalker</code>, child nodes are also rejected. For <code>NodeIterator</code>, this flag is synonymous with FILTER_SKIP.</td>
					</tr>
					<tr>
						<td><code>FILTER_SKIP</code></td>
						<td>Value to be returned by <code>NodeFilter.acceptNode()</code> for nodes to be skipped by the <code>NodeIterator</code> or <code>TreeWalker</code> object. The children of skipped nodes are still considered. This is treated as "skip this node but not its children".</td>
					</tr>
				
			</table>]]></haxe_doc>
		</acceptNode>
		<haxe_doc><![CDATA[A `NodeFilter` interface represents an object used to filter the nodes in a `NodeIterator` or `TreeWalker`. They don't know anything about the DOM or how to traverse nodes; they just know how to evaluate a single node against the provided filter.

	Documentation [NodeFilter](https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeFilter"</e></m></meta>
	</class>
	<class path="js.html.NodeIterator" params="" file="/usr/local/lib/haxe/std/js/html/NodeIterator.hx" extern="1">
		<root public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the root node as specified when the `NodeIterator` was created.</haxe_doc>
		</root>
		<referenceNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` to which the iterator is anchored.</haxe_doc>
		</referenceNode>
		<pointerBeforeReferenceNode public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` flag that indicates whether the `NodeIterator` is anchored before, the flag being `true`, or after, the flag being `false`, the anchor node.</haxe_doc>
		</pointerBeforeReferenceNode>
		<whatToShow public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> being a bitmask made of constants describing the types of <code>Node</code> that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:
			<table class="standard-table">
				
					<tr>
						<td class="header">Constant</td>
						<td class="header">Numerical value</td>
						<td class="header">Description</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ALL</code></td>
						<td><code>-1</code> (that is the max value of <code>unsigned long</code>)</td>
						<td>Shows all nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ATTRIBUTE</code> <em>(deprecated)</em></td>
						<td><code>2</code></td>
						<td>Shows attribute <code>Attr</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with an <code>Attr</code> node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_CDATA_SECTION</code> <em>(deprecated)</em></td>
						<td><code>8</code></td>
						<td>Shows <code>CDATASection</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_COMMENT</code></td>
						<td><code>128</code></td>
						<td>Shows <code>Comment</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT</code></td>
						<td><code>256</code></td>
						<td>Shows <code>Document</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT_FRAGMENT</code></td>
						<td><code>1024</code></td>
						<td>Shows <code>DocumentFragment</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_DOCUMENT_TYPE</code></td>
						<td><code>512</code></td>
						<td>Shows <code>DocumentType</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ELEMENT</code></td>
						<td><code>1</code></td>
						<td>Shows <code>Element</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ENTITY</code> <em>(deprecated)</em></td>
						<td><code>32</code></td>
						<td>Shows <code>Entity</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with an <code>Entity</code> node as its root; in this case, it means that the <code>Entity</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_ENTITY_REFERENCE</code> <em>(deprecated)</em></td>
						<td><code>16</code></td>
						<td>Shows <code>EntityReference</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_NOTATION</code> <em>(deprecated)</em></td>
						<td><code>2048</code></td>
						<td>Shows <code>Notation</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with a <code>Notation</code> node as its root; in this case, it means that the <code>Notation</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_PROCESSING_INSTRUCTION</code></td>
						<td><code>64</code></td>
						<td>Shows <code>ProcessingInstruction</code> nodes.</td>
					</tr>
					<tr>
						<td><code>NodeFilter.SHOW_TEXT</code></td>
						<td><code>4</code></td>
						<td>Shows <code>Text</code> nodes.</td>
					</tr>
				
			</table>]]></haxe_doc>
		</whatToShow>
		<filter public="1" set="null">
			<x path="haxe.extern.EitherType">
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeFilter"/>
			</x>
			<haxe_doc>Returns a `NodeFilter` used to select the relevant nodes.</haxe_doc>
		</filter>
		<nextNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Returns the next `Node` in the document, or `null` if there are none.
		@throws DOMError</haxe_doc>
		</nextNode>
		<previousNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Returns the previous `Node` in the document, or `null` if there are none.
		@throws DOMError</haxe_doc>
		</previousNode>
		<detach public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This operation is a no-op. It doesn't do anything. Previously it was telling the engine that the `NodeIterator` was no more used, but this is now useless.</haxe_doc>
		</detach>
		<haxe_doc><![CDATA[The `NodeIterator` interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.

	Documentation [NodeIterator](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeIterator"</e></m></meta>
	</class>
	<class path="js.html.NodeList" params="" file="/usr/local/lib/haxe/std/js/html/NodeList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of nodes in the `NodeList`.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Returns an item in the list by its index, or `null` if the index is out-of-bounds; can be used as an alternative to simply accessing `nodeList[idx]` (which instead returns  `undefined` when `idx` is out-of-bounds).</haxe_doc>
		</item>
		<haxe_doc><![CDATA[`NodeList` objects are collections of nodes such as those returned by properties such as `Node.childNodes` and the `document.querySelectorAll()` method.

	Documentation [NodeList](https://developer.mozilla.org/en-US/docs/Web/API/NodeList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeList>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeList"</e></m></meta>
	</class>
	<class path="js.html.Notification" params="" file="/usr/local/lib/haxe/std/js/html/Notification.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<permission public="1" set="null" static="1">
			<x path="js.html.NotificationPermission"/>
			<haxe_doc>A string representing the current permission to display notifications. Possible values are:
		 
		  `denied` — The user refuses to have notifications displayed.
		  `granted` — The user accepts having notifications displayed.
		  `default` — The user choice is unknown and therefore the browser will act as if the value were denied.</haxe_doc>
		</permission>
		<onclick public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `click` event. It is triggered each time the user clicks on the notification.</haxe_doc>
		</onclick>
		<onshow public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `show` event. It is triggered when the notification is displayed.</haxe_doc>
		</onshow>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `error` event. It is triggered each time the notification encounters an error.</haxe_doc>
		</onerror>
		<onclose public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `close` event. It is triggered when the user closes the notification.</haxe_doc>
		</onclose>
		<title public="1" set="null">
			<c path="String"/>
			<haxe_doc>The title of the notification as specified in the first parameter of the constructor.</haxe_doc>
		</title>
		<dir public="1" set="null">
			<x path="js.html.NotificationDirection"/>
			<haxe_doc>The text direction of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</dir>
		<lang public="1" set="null">
			<c path="String"/>
			<haxe_doc>The language code of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</lang>
		<body public="1" set="null">
			<c path="String"/>
			<haxe_doc>The body string of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</body>
		<tag public="1" set="null">
			<c path="String"/>
			<haxe_doc>The ID of the notification (if any) as specified in the constructor's `options` parameter.</haxe_doc>
		</tag>
		<icon public="1" set="null">
			<c path="String"/>
			<haxe_doc>The URL of the image used as an icon of the notification as specified in the constructor's `options` parameter.</haxe_doc>
		</icon>
		<data public="1" set="null">
			<d/>
			<haxe_doc>Returns a structured clone of the notification’s data.</haxe_doc>
		</data>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Programmatically closes a notification.</haxe_doc>
		</close>
		<new public="1" set="method">
			<f a="title:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.NotificationOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Notification` interface of the Notifications API is used to configure and display desktop notifications to the user.

	Documentation [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Notification$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Notification>]]></haxe_doc>
		<meta><m n=":native"><e>"Notification"</e></m></meta>
	</class>
	<abstract path="js.html.NotificationDirection" params="" file="/usr/local/lib/haxe/std/js/html/NotificationDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._NotificationDirection.NotificationDirection_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/NotificationDirection.hx" private="1" module="js.html.NotificationDirection" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.NotificationOptions" params="" file="/usr/local/lib/haxe/std/js/html/NotificationOptions.hx"><a>
	<tag>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</tag>
	<requireInteraction>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</requireInteraction>
	<lang>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</lang>
	<icon>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</icon>
	<dir>
		<x path="Null"><x path="js.html.NotificationDirection"/></x>
		<meta><m n=":optional"/></meta>
	</dir>
	<data>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</data>
	<body>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</body>
</a></typedef>
	<abstract path="js.html.NotificationPermission" params="" file="/usr/local/lib/haxe/std/js/html/NotificationPermission.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._NotificationPermission.NotificationPermission_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/NotificationPermission.hx" private="1" module="js.html.NotificationPermission" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.OListElement" params="" file="/usr/local/lib/haxe/std/js/html/OListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<reversed public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` value reflecting the `reversed` and defining if the numbering is descending, that is its value is `true`, or ascending (`false`).</haxe_doc>
		</reversed>
		<start public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` value reflecting the `start` and defining the value of the first number of the first element of the list.</haxe_doc>
		</start>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` value reflecting the `type` and defining the kind of marker to be used to display. It can have the following values:
		 
		  `'1'` meaning that decimal numbers are used: `1`, `2`, `3`, `4`, `5`, …
		  `'a'` meaning that the lowercase latin alphabet is used:  `a`, `b`, `c`, `d`, `e`, …
		  `'A'` meaning that the uppercase latin alphabet is used: `A`, `B`, `C`, `D`, `E`, …
		  `'i'` meaning that the lowercase latin numerals are used: `i`, `ii`, `iii`, `iv`, `v`, …
		  `'I'` meaning that the uppercase latin numerals are used: `I`, `II`, `III`, `IV`, `V`, …</haxe_doc>
		</type>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced. This property reflects the `compact` attribute only, it doesn't consider the `line-height` CSS property used for that behavior in modern pages.</haxe_doc>
		</compact>
		<haxe_doc><![CDATA[The `HTMLOListElement` interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating ordered list elements.

	Documentation [HTMLOListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOListElement"</e></m></meta>
	</class>
	<class path="js.html.ObjectElement" params="" file="/usr/local/lib/haxe/std/js/html/ObjectElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<data public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `data` HTML attribute, specifying the address of a resource's data.</haxe_doc>
		</data>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, specifying the MIME type of the resource.</haxe_doc>
		</type>
		<typeMustMatch public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `typeMustMatch` HTML attribute, indicating if the resource specified by `data` must only be played if it matches the `type` attribute.</haxe_doc>
		</typeMustMatch>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `name` HTML attribute, specifying the name of the browsing context.</haxe_doc>
		</name>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `usemap` HTML attribute, specifying a `map` element to use.</haxe_doc>
		</useMap>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Retuns a `HTMLFormElement` representing the object element's form owner, or null if there isn't one.</haxe_doc>
		</form>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, specifying the displayed width of the resource in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, specifying the displayed height of the resource in CSS pixels.</haxe_doc>
		</height>
		<contentDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document` representing the active document of the object element's nested browsing context, if any; otherwise `null`.</haxe_doc>
		</contentDocument>
		<contentWindow public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy` representing the window proxy of the object element's nested browsing context, if any; otherwise `null`.</haxe_doc>
		</contentWindow>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the element is a candidate for constraint validation. Always `false` for `HTMLObjectElement` objects.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>Returns a `ValidityState` with the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<archive public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `archive` HTML attribute, containing a list of archives for resources for this object.</haxe_doc>
		</archive>
		<code public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of an applet class file, containing either the applet's subclass, or the path to get to the class, including the class file itself.</haxe_doc>
		</code>
		<declare public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `declare` HTML attribute, indicating that this is a declaration, not an instantiation, of the object.</haxe_doc>
		</declare>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the horizontal space in pixels around the control.</haxe_doc>
		</hspace>
		<standby public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `standby` HTML attribute, specifying a message to display while the object loads.</haxe_doc>
		</standby>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the horizontal space in pixels around the control.</haxe_doc>
		</vspace>
		<codeBase public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `codebase` HTML attribute, specifying the base path to use to resolve relative URIs.</haxe_doc>
		</codeBase>
		<codeType public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `codetype` HTML attribute, specifying the content type of the data.</haxe_doc>
		</codeType>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `border` HTML attribute, specifying the width of a border around the object.</haxe_doc>
		</border>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Retuns a `Boolean` that always is `true`, because `object` objects are never candidates for constraint validation.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLObjectElement` interface provides special properties and methods (beyond those on the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `object` element, representing external resources.

	Documentation [HTMLObjectElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLObjectElement"</e></m></meta>
	</class>
	<typedef path="js.html.ObserverCallback" params="" file="/usr/local/lib/haxe/std/js/html/ObserverCallback.hx"><a><handleEvent set="method"><f a="observer">
	<c path="js.html.FetchObserver"/>
	<x path="Void"/>
</f></handleEvent></a></typedef>
	<class path="js.html.OptGroupElement" params="" file="/usr/local/lib/haxe/std/js/html/OptGroupElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `boolean` representing whether or not the whole list of children `option` is disabled (true) or not (false).</haxe_doc>
		</disabled>
		<label public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the label for the group.</haxe_doc>
		</label>
		<haxe_doc><![CDATA[The `HTMLOptGroupElement` interface provides special properties and methods (beyond the regular `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `optgroup` elements.

	Documentation [HTMLOptGroupElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptGroupElement"</e></m></meta>
	</class>
	<class path="js.html.OptionElement" params="" file="/usr/local/lib/haxe/std/js/html/OptionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<label public="1"><c path="String"/></label>
		<defaultSelected public="1"><x path="Bool"/></defaultSelected>
		<selected public="1"><x path="Bool"/></selected>
		<value public="1"><c path="String"/></value>
		<text public="1"><c path="String"/></text>
		<index public="1" set="null"><x path="Int"/></index>
		<haxe_doc><![CDATA[The `HTMLOptionElement` interface represents `option` elements and inherits all classes and methods of the `HTMLElement` interface.

	Documentation [HTMLOptionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptionElement"</e></m></meta>
	</class>
	<typedef path="js.html.OptionalEffectTiming" params="" file="/usr/local/lib/haxe/std/js/html/OptionalEffectTiming.hx"><a>
	<iterations>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</iterations>
	<iterationStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</iterationStart>
	<fill>
		<x path="Null"><x path="js.html.FillMode"/></x>
		<meta><m n=":optional"/></meta>
	</fill>
	<endDelay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</endDelay>
	<easing>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</easing>
	<duration>
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</duration>
	<direction>
		<x path="Null"><x path="js.html.PlaybackDirection"/></x>
		<meta><m n=":optional"/></meta>
	</direction>
	<delay>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</delay>
</a></typedef>
	<abstract path="js.html.OrientationLockType" params="" file="/usr/local/lib/haxe/std/js/html/OrientationLockType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._OrientationLockType.OrientationLockType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/OrientationLockType.hx" private="1" module="js.html.OrientationLockType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.OrientationType" params="" file="/usr/local/lib/haxe/std/js/html/OrientationType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._OrientationType.OrientationType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/OrientationType.hx" private="1" module="js.html.OrientationType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.OutputElement" params="" file="/usr/local/lib/haxe/std/js/html/OutputElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<htmlFor public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>A `DOMTokenList` reflecting the `for` HTML attribute, containing a list of IDs of other elements in the same document that contribute to (or otherwise affect) the calculated `value`.</haxe_doc>
		</htmlFor>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormElement` indicating the form associated with the control, reflecting the `form` HTML attribute if it is defined.</haxe_doc>
		</form>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name for the control that is submitted with form data.</haxe_doc>
		</name>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The `DOMString` `"output"`.</haxe_doc>
		</type>
		<defaultValue public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the default value of the element, initially the empty string.</haxe_doc>
		</defaultValue>
		<value public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the value of the contents of the elements. Behaves like the `Node.textContent` property.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` indicating whether the element is a candidate for constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` representing the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements associated with the element.</haxe_doc>
		</labels>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Checks the validity of the element and returns a `Boolean` holding the check result.</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Triggers an `invalid` event and evaluates its result. if the result is `true`, then the problems with the constraints of this element are reported to the user. When the problem is reported, the user agent may focus the element and change the scrolling position of the document or perform some other action that brings the element to the user's attention. User agents may report more than one constraint violation if this element suffers from multiple problems at once. If the element is not rendered, then the user agent may report the error for the running script instead of notifying the user.</haxe_doc>
		</reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLOutputElement` interface provides properties and methods (beyond those inherited from `HTMLElement`) for manipulating the layout and presentation of `output` elements.

	Documentation [HTMLOutputElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOutputElement"</e></m></meta>
	</class>
	<class path="js.html.ParagraphElement" params="" file="/usr/local/lib/haxe/std/js/html/ParagraphElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLParagraphElement` interface provides special properties (beyond those of the regular `HTMLElement` object interface it inherits) for manipulating `p` elements.

	Documentation [HTMLParagraphElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLParagraphElement"</e></m></meta>
	</class>
	<class path="js.html.ParamElement" params="" file="/usr/local/lib/haxe/std/js/html/ParamElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the parameter. It reflects the `name` attribute.</haxe_doc>
		</name>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the value associated to the parameter. It reflects the `value` attribute.</haxe_doc>
		</value>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the parameter when `valueType` has the `"ref"` value. It reflects the `type` attribute.</haxe_doc>
		</type>
		<valueType public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the `value`. It reflects the ``valuetype`` attribute and has one of the values: `"data"`, `"ref"`, or `"object"`.</haxe_doc>
		</valueType>
		<haxe_doc><![CDATA[The `HTMLParamElement` interface provides special properties (beyond those of the regular `HTMLElement` object interface it inherits) for manipulating `param` elements, representing a pair of a key and a value that acts as a parameter for an `object` element.

	Documentation [HTMLParamElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLParamElement"</e></m></meta>
	</class>
	<class path="js.html.Path2D" params="" file="/usr/local/lib/haxe/std/js/html/Path2D.hx" extern="1">
		<addPath public="1" set="method">
			<f a="path:?transformation">
				<c path="js.html.Path2D"/>
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a path to the current path.</haxe_doc>
		</addPath>
		<closePath public="1" set="method"><f a=""><x path="Void"/></f></closePath>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadraticCurveTo public="1" set="method"><f a="cpx:cpy:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadraticCurveTo>
		<bezierCurveTo public="1" set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bezierCurveTo>
		<arcTo public="1" set="method">
			<f a="x1:y1:x2:y2:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arcTo>
		<rect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rect>
		<arc public="1" set="method">
			<f a="x:y:radius:startAngle:endAngle:?anticlockwise" v=":::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arc>
		<ellipse public="1" set="method">
			<f a="x:y:radiusX:radiusY:rotation:startAngle:endAngle:?anticlockwise" v=":::::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</ellipse>
		<new public="1" set="method">
			<f a="pathString">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="other">
						<c path="js.html.Path2D"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Path2D` interface of the Canvas 2D API is used to declare paths that are then later used on `CanvasRenderingContext2D` objects. The path methods of the `CanvasRenderingContext2D` interface are present on this interface as well and are allowing you to create paths that you can retain and replay as required on a canvas.

	Documentation [Path2D](https://developer.mozilla.org/en-US/docs/Web/API/Path2D) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Path2D$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Path2D>]]></haxe_doc>
		<meta><m n=":native"><e>"Path2D"</e></m></meta>
	</class>
	<class path="js.html.Performance" params="" file="/usr/local/lib/haxe/std/js/html/Performance.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<timeOrigin public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the high resolution timestamp of the start time of the performance measurement.</haxe_doc>
		</timeOrigin>
		<timing public="1" set="null">
			<c path="js.html.PerformanceTiming"/>
			<haxe_doc>A `PerformanceTiming` object containing latency-related performance information</haxe_doc>
		</timing>
		<navigation public="1" set="null">
			<c path="js.html.PerformanceNavigation"/>
			<haxe_doc>A `PerformanceNavigation` object that provides useful context about the operations included in the times listed in `timing`, including whether the page was a load or a refresh, how many redirections occurred, and so forth.</haxe_doc>
		</navigation>
		<onresourcetimingbufferfull public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventTarget` which is a callback that will be called when the `resourcetimingbufferfull` event is fired.</haxe_doc>
		</onresourcetimingbufferfull>
		<now public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a `DOMHighResTimeStamp` representing the number of milliseconds elapsed since a reference instant.</haxe_doc>
		</now>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Is a jsonizer returning a json object representing the `Performance` object.</haxe_doc>
		</toJSON>
		<getEntries public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.PerformanceEntry"/></c></f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects based on the given filter.</haxe_doc>
		</getEntries>
		<getEntriesByType public="1" set="method">
			<f a="entryType">
				<c path="String"/>
				<c path="Array"><c path="js.html.PerformanceEntry"/></c>
			</f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects of the given entry type.</haxe_doc>
		</getEntriesByType>
		<getEntriesByName public="1" set="method">
			<f a="name:?entryType">
				<c path="String"/>
				<c path="String"/>
				<c path="Array"><c path="js.html.PerformanceEntry"/></c>
			</f>
			<haxe_doc>Returns a list of `PerformanceEntry` objects based on the given name and entry type.</haxe_doc>
		</getEntriesByName>
		<clearResourceTimings public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all `PerformanceEntry` with a `PerformanceEntry.entryType` of "`resource`" from the browser's performance data buffer.</haxe_doc>
		</clearResourceTimings>
		<setResourceTimingBufferSize public="1" set="method">
			<f a="maxSize">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the browser's resource timing buffer size to the specified number of "`resource`" `PerformanceEntry.entryType` `PerformanceEntry` objects.</haxe_doc>
		</setResourceTimingBufferSize>
		<mark public="1" set="method">
			<f a="markName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a `DOMHighResTimeStamp` in the browser's performance entry buffer with the given name.
		@throws DOMError</haxe_doc>
		</mark>
		<clearMarks public="1" set="method">
			<f a="?markName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the given mark from the browser's performance entry buffer.</haxe_doc>
		</clearMarks>
		<measure public="1" set="method">
			<f a="measureName:?startMark:?endMark">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a named `DOMHighResTimeStamp` in the browser's performance entry buffer between two specified marks (known as the start mark and end mark, respectively).
		@throws DOMError</haxe_doc>
		</measure>
		<clearMeasures public="1" set="method">
			<f a="?measureName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the given measure from the browser's performance entry buffer.</haxe_doc>
		</clearMeasures>
		<haxe_doc><![CDATA[The `Performance` interface provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.

	Documentation [Performance](https://developer.mozilla.org/en-US/docs/Web/API/Performance) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Performance$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Performance>]]></haxe_doc>
		<meta><m n=":native"><e>"Performance"</e></m></meta>
	</class>
	<class path="js.html.PerformanceEntry" params="" file="/usr/local/lib/haxe/std/js/html/PerformanceEntry.hx" extern="1">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A value that further specifies the value returned by the `PerformanceEntry.entryType` property. The value of both depends on the subtype. See property page for valid values.</haxe_doc>
		</name>
		<entryType public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the type of performance metric such as, for example, "`mark`". See property page for valid values.</haxe_doc>
		</entryType>
		<startTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the starting time for the performance metric.</haxe_doc>
		</startTime>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the time value of the duration of the performance event.</haxe_doc>
		</duration>
		<toJSON public="1" set="method"><f a=""><d/></f></toJSON>
		<haxe_doc><![CDATA[The `PerformanceEntry` object encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance `mark` or `measure` (for example by calling the `mark()` method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).

	Documentation [PerformanceEntry](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceEntry"</e></m></meta>
	</class>
	<class path="js.html.PerformanceNavigation" params="" file="/usr/local/lib/haxe/std/js/html/PerformanceNavigation.hx" extern="1">
		<TYPE_NAVIGATE public="1" get="inline" set="null" expr="0" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</TYPE_NAVIGATE>
		<TYPE_RELOAD public="1" get="inline" set="null" expr="1" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</TYPE_RELOAD>
		<TYPE_BACK_FORWARD public="1" get="inline" set="null" expr="2" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</TYPE_BACK_FORWARD>
		<TYPE_RESERVED public="1" get="inline" set="null" expr="255" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>255</e></m></meta>
		</TYPE_RESERVED>
		<type public="1" set="null">
			<x path="Int"/>
			<haxe_doc></haxe_doc>
		</type>
		<redirectCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned short` representing the number of REDIRECTs done before reaching the page.</haxe_doc>
		</redirectCount>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Is a jsonizer returning a json object representing the `PerformanceNavigation` object.</haxe_doc>
		</toJSON>
		<haxe_doc><![CDATA[The legacy `PerformanceNavigation` interface represents information about how the navigation to the current document was done.

	Documentation [PerformanceNavigation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceNavigation"</e></m></meta>
	</class>
	<class path="js.html.PerformanceTiming" params="" file="/usr/local/lib/haxe/std/js/html/PerformanceTiming.hx" extern="1">
		<navigationStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the prompt for unload terminates on the previous document in the same browsing context. If there is no previous document, this value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</navigationStart>
		<unloadEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `unload` event has been thrown, indicating the time at which the previous document in the window began to unload. If there is no previous document, or if the previous document or one of the needed redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</unloadEventStart>
		<unloadEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `unload` event handler finishes. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is `0`.</haxe_doc>
		</unloadEventEnd>
		<redirectStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the first HTTP redirect starts. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</redirectStart>
		<redirectEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</redirectEnd>
		<fetchStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser is ready to fetch the document using an HTTP request. This moment is before the check to any application cache.</haxe_doc>
		</fetchStart>
		<domainLookupStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the domain lookup starts. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</domainLookupStart>
		<domainLookupEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the domain lookup is finished. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</domainLookupEnd>
		<connectStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the request to open a connection is sent to the network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment start time is given. If a persistent connection is used, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</connectStart>
		<connectEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the connection is opened network. If the transport layer reports an error and the connection establishment is started again, the last connection establishment end time is given. If a persistent connection is used, the value will be the same as `PerformanceTiming.fetchStart`. A connection is considered as opened when all secure connection handshake, or SOCKS authentication, is terminated.</haxe_doc>
		</connectEnd>
		<secureConnectionStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the secure connection handshake starts. If no such connection is requested, it returns `0`.</haxe_doc>
		</secureConnectionStart>
		<requestStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser sent the request to obtain the actual document, from the server or from a cache. If the transport layer fails after the start of the request and the connection is reopened, this property will be set to the time corresponding to the new request.</haxe_doc>
		</requestStart>
		<responseStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser received the first byte of the response, from the server from a cache, or from a local resource.</haxe_doc>
		</responseStart>
		<responseEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the browser received the last byte of the response, or when the connection is closed if this happened first, from the server, the cache, or from a local resource.</haxe_doc>
		</responseEnd>
		<domLoading public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser started its work, that is when its `Document.readyState` changes to `'loading'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domLoading>
		<domInteractive public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser finished its work on the main document, that is when its `Document.readyState` changes to `'interactive'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domInteractive>
		<domContentLoadedEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Right before the parser sent the `DOMContentLoaded` event, that is right after all the scripts that need to be executed right after parsing have been executed.</haxe_doc>
		</domContentLoadedEventStart>
		<domContentLoadedEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Right after all the scripts that need to be executed as soon as possible, in order or not, have been executed.</haxe_doc>
		</domContentLoadedEventEnd>
		<domComplete public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the parser finished its work on the main document, that is when its `Document.readyState` changes to `'complete'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domComplete>
		<loadEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `load` event was sent for the current document. If this event has not yet been sent, it returns `0.`</haxe_doc>
		</loadEventStart>
		<loadEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>When the `load` event handler terminated, that is when the load event is completed. If this event has not yet been sent, or is not yet completed, it returns `0.`</haxe_doc>
		</loadEventEnd>
		<toJSON public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Returns a JSON object representing this `PerformanceTiming` object.</haxe_doc>
		</toJSON>
		<haxe_doc><![CDATA[The `PerformanceTiming` interface is a legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page. You get a `PerformanceTiming` object describing your page using the `window.performance.timing` property.

	Documentation [PerformanceTiming](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming>]]></haxe_doc>
		<meta>
			<m n=":deprecated"><e>"PerformanceTiming is deprecated, use the PerformanceNavigationTiming interface instead"</e></m>
			<m n=":native"><e>"PerformanceTiming"</e></m>
		</meta>
	</class>
	<abstract path="js.html.PermissionState" params="" file="/usr/local/lib/haxe/std/js/html/PermissionState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PermissionState.PermissionState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/PermissionState.hx" private="1" module="js.html.PermissionState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.PermissionStatus" params="" file="/usr/local/lib/haxe/std/js/html/PermissionStatus.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<state public="1" set="null">
			<x path="js.html.PermissionState"/>
			<haxe_doc>Returns the state of a requested permission; one of `'granted'`, `'denied'`, or `'prompt'`.</haxe_doc>
		</state>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event called whenever `PermissionStatus.status` changes.</haxe_doc>
		</onchange>
		<haxe_doc><![CDATA[The `PermissionStatus` interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.

	Documentation [PermissionStatus](https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus>]]></haxe_doc>
		<meta><m n=":native"><e>"PermissionStatus"</e></m></meta>
	</class>
	<class path="js.html.Permissions" params="" file="/usr/local/lib/haxe/std/js/html/Permissions.hx" extern="1">
		<query public="1" set="method">
			<f a="permission">
				<d/>
				<c path="js.lib.Promise"><c path="js.html.PermissionStatus"/></c>
			</f>
			<haxe_doc>Returns the user permission status for a given API.
		@throws DOMError</haxe_doc>
		</query>
		<haxe_doc><![CDATA[Documentation [Permissions](https://developer.mozilla.org/en-US/docs/Web/API/Permissions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Permissions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Permissions>]]></haxe_doc>
		<meta><m n=":native"><e>"Permissions"</e></m></meta>
	</class>
	<class path="js.html.PictureElement" params="" file="/usr/local/lib/haxe/std/js/html/PictureElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLPictureElement` interface represents a `picture` HTML element. It doesn't implement specific properties or methods.

	Documentation [HTMLPictureElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLPictureElement"</e></m></meta>
	</class>
	<abstract path="js.html.PlaybackDirection" params="" file="/usr/local/lib/haxe/std/js/html/PlaybackDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PlaybackDirection.PlaybackDirection_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/PlaybackDirection.hx" private="1" module="js.html.PlaybackDirection" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Plugin" params="" file="/usr/local/lib/haxe/std/js/html/Plugin.hx" extern="1">
		<description public="1" set="null">
			<c path="String"/>
			<haxe_doc>A human readable description of the plugin.</haxe_doc>
		</description>
		<filename public="1" set="null">
			<c path="String"/>
			<haxe_doc>The filename of the plugin file.</haxe_doc>
		</filename>
		<version public="1" set="null">
			<c path="String"/>
			<haxe_doc>The plugin's version number string.</haxe_doc>
		</version>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of the plugin.</haxe_doc>
		</name>
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.MimeType"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.MimeType"/>
</f></namedItem>
		<haxe_doc><![CDATA[The `Plugin` interface provides information about a browser plugin.

	Documentation [Plugin](https://developer.mozilla.org/en-US/docs/Web/API/Plugin) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Plugin$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Plugin>]]></haxe_doc>
		<meta><m n=":native"><e>"Plugin"</e></m></meta>
	</class>
	<class path="js.html.PluginArray" params="" file="/usr/local/lib/haxe/std/js/html/PluginArray.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of plugins in the array.</haxe_doc>
		</length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Plugin"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.Plugin"/>
</f></namedItem>
		<refresh public="1" set="method">
			<f a="?reloadDocuments" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ reloadDocuments : false }</e></m></meta>
		</refresh>
		<haxe_doc><![CDATA[The `PluginArray` interface is used to store a list of `Plugin` objects describing the available plugins; it's returned by the `window.navigator.plugins` property. The `PluginArray` is not a JavaScript array, but has the `length` property and supports accessing individual items using bracket notation (`plugins[2]`), as well as via `item(index)` and `namedItem("name")` methods.

	Documentation [PluginArray](https://developer.mozilla.org/en-US/docs/Web/API/PluginArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PluginArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PluginArray>]]></haxe_doc>
		<meta><m n=":native"><e>"PluginArray"</e></m></meta>
	</class>
	<typedef path="js.html.Position" params="" file="/usr/local/lib/haxe/std/js/html/Position.hx">
		<a>
			<timestamp set="null">
				<x path="Int"/>
				<haxe_doc>Returns a `DOMTimeStamp` representing the time at which the location was retrieved.</haxe_doc>
			</timestamp>
			<coords set="null">
				<t path="js.html.Coordinates"/>
				<haxe_doc>Returns a `Coordinates` object defining the current location.</haxe_doc>
			</coords>
		</a>
		<haxe_doc><![CDATA[The `Position` interface represents the position of the concerned device at a given time. The position, represented by a `Coordinates` object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed.

	Documentation [Position](https://developer.mozilla.org/en-US/docs/Web/API/Position) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Position$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Position>]]></haxe_doc>
	</typedef>
	<abstract path="js.html.PositionAlignSetting" params="" file="/usr/local/lib/haxe/std/js/html/PositionAlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PositionAlignSetting.PositionAlignSetting_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/PositionAlignSetting.hx" private="1" module="js.html.PositionAlignSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.PositionError" params="" file="/usr/local/lib/haxe/std/js/html/PositionError.hx" extern="1">
		<PERMISSION_DENIED public="1" get="inline" set="null" expr="1" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</PERMISSION_DENIED>
		<POSITION_UNAVAILABLE public="1" get="inline" set="null" expr="2" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</POSITION_UNAVAILABLE>
		<TIMEOUT public="1" get="inline" set="null" expr="3" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TIMEOUT>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> representing the error code. The following values are possible:
		 <table class="standard-table">
		  
		   <tr>
		    Value
		    Associated constant
		    Description
		   </tr>
		   <tr>
		    <td><code>1</code></td>
		    <td><code>PERMISSION_DENIED</code></td>
		    <td>The acquisition of the geolocation information failed because the page didn't have the permission to do it.</td>
		   </tr>
		   <tr>
		    <td><code>2</code></td>
		    <td><code>POSITION_UNAVAILABLE</code></td>
		    <td>The acquisition of the geolocation failed because at least one internal source of position returned an internal error.</td>
		   </tr>
		   <tr>
		    <td><code>3</code></td>
		    <td><code>TIMEOUT</code></td>
		    <td>The time allowed to acquire the geolocation, defined by <code>PositionOptions.timeout</code> information was reached before the information was obtained.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</code>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a human-readable `DOMString` describing the details of the error. Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.</haxe_doc>
		</message>
		<haxe_doc><![CDATA[The `PositionError` interface represents the reason of an error occurring when using the geolocating device.

	Documentation [PositionError](https://developer.mozilla.org/en-US/docs/Web/API/PositionError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PositionError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PositionError>]]></haxe_doc>
		<meta><m n=":native"><e>"PositionError"</e></m></meta>
	</class>
	<typedef path="js.html.PositionOptions" params="" file="/usr/local/lib/haxe/std/js/html/PositionOptions.hx">
		<a>
			<timeout>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a positive `long` value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position. The default value is `Infinity`, meaning that `getCurrentPosition()` won't return until the position is available.</haxe_doc>
			</timeout>
			<maximumAge>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a positive `long` value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return. If set to `0`, it means that the device cannot use a cached position and must attempt to retrieve the real current position. If set to `Infinity` the device must return a cached position regardless of its age. Default: 0.</haxe_doc>
			</maximumAge>
			<enableHighAccuracy>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Is a `Boolean` that indicates the application would like to receive the best possible results. If `true` and if the device is able to provide a more accurate position, it will do so. Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example). On the other hand, if `false`, the device can take the liberty to save resources by responding more quickly and/or using less power. Default: `false`.</haxe_doc>
			</enableHighAccuracy>
		</a>
		<haxe_doc><![CDATA[The `PositionOptions` interface describes an object containing option properties to pass as a parameter of `Geolocation.getCurrentPosition()` and `Geolocation.watchPosition()`.

	Documentation [PositionOptions](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions>]]></haxe_doc>
	</typedef>
	<class path="js.html.PreElement" params="" file="/usr/local/lib/haxe/std/js/html/PreElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` value reflecting the obsolete `width` attribute, containing a fixed-size length for the `pre` element.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[The `HTMLPreElement` interface expose specific properties and methods (beyond those defined by regular `HTMLElement` interface it also has available to it by inheritance) for manipulating block of preformatted text.

	Documentation [HTMLPreElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLPreElement"</e></m></meta>
	</class>
	<class path="js.html.ProcessingInstruction" params="" file="/usr/local/lib/haxe/std/js/html/ProcessingInstruction.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<target public="1" set="null"><c path="String"/></target>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[A processing instruction embeds application-specific instructions in XML which can be ignored by other applications that don't recognize them.

	Documentation [ProcessingInstruction](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction>]]></haxe_doc>
		<meta><m n=":native"><e>"ProcessingInstruction"</e></m></meta>
	</class>
	<class path="js.html.ProgressElement" params="" file="/usr/local/lib/haxe/std/js/html/ProgressElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` value that reflects the current value; if the progress bar is an indeterminate progress bar, it returns `0`.</haxe_doc>
		</value>
		<max public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` value reflecting the content attribute of the same name, limited to numbers greater than zero. Its default value is `1.0`.</haxe_doc>
		</max>
		<position public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` value returning the result of dividing the current value (`value`) by the maximum value (`max`); if the progress bar is an indeterminate progress bar, it returns `-1`.</haxe_doc>
		</position>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Returns `NodeList` containing the list of `label` elements that are labels for this element.</haxe_doc>
		</labels>
		<haxe_doc><![CDATA[The `HTMLProgressElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `progress` elements.

	Documentation [HTMLProgressElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLProgressElement"</e></m></meta>
	</class>
	<class path="js.html.PropertyNodeList" params="" file="/usr/local/lib/haxe/std/js/html/PropertyNodeList.hx" extern="1">
		<extends path="js.html.NodeList"/>
		<getValues public="1" set="method">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getValues>
		<meta><m n=":native"><e>"PropertyNodeList"</e></m></meta>
	</class>
	<class path="js.html.QuoteElement" params="" file="/usr/local/lib/haxe/std/js/html/QuoteElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cite public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `cite` HTML attribute, containing a URL for the source of the quotation.</haxe_doc>
		</cite>
		<haxe_doc><![CDATA[The `HTMLQuoteElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating quoting elements, like `blockquote` and `q`, but not the `cite` element.

	Documentation [HTMLQuoteElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLQuoteElement"</e></m></meta>
	</class>
	<class path="js.html.Range" params="" file="/usr/local/lib/haxe/std/js/html/Range.hx" extern="1">
		<START_TO_START public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</START_TO_START>
		<START_TO_END public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</START_TO_END>
		<END_TO_END public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</END_TO_END>
		<END_TO_START public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</END_TO_START>
		<startContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` within which the `Range` starts.</haxe_doc>
		</startContainer>
		<startOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing where in the `startContainer` the `Range` starts.</haxe_doc>
		</startOffset>
		<endContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` within which the `Range` ends.</haxe_doc>
		</endContainer>
		<endOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing where in the `endContainer` the `Range` ends.</haxe_doc>
		</endOffset>
		<collapsed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` indicating whether the range's start and end points are at the same position.</haxe_doc>
		</collapsed>
		<commonAncestorContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the deepest `Node` that contains the `startContainer` and `endContainer` nodes.</haxe_doc>
		</commonAncestorContainer>
		<setStart public="1" set="method">
			<f a="refNode:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range`.
		@throws DOMError</haxe_doc>
		</setStart>
		<setEnd public="1" set="method">
			<f a="refNode:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range`.
		@throws DOMError</haxe_doc>
		</setEnd>
		<setStartBefore public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setStartBefore>
		<setStartAfter public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the start position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setStartAfter>
		<setEndBefore public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setEndBefore>
		<setEndAfter public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the end position of a `Range` relative to another `Node`.
		@throws DOMError</haxe_doc>
		</setEndAfter>
		<collapse public="1" set="method">
			<f a="?toStart" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ toStart : false }</e></m></meta>
			<haxe_doc>Collapses the `Range` to one of its boundary points.</haxe_doc>
		</collapse>
		<selectNode public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Range` to contain the `Node` and its contents.
		@throws DOMError</haxe_doc>
		</selectNode>
		<selectNodeContents public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the `Range` to contain the contents of a `Node`.
		@throws DOMError</haxe_doc>
		</selectNodeContents>
		<compareBoundaryPoints public="1" set="method">
			<f a="how:sourceRange">
				<x path="Int"/>
				<c path="js.html.Range"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares the boundary points of the `Range` with another `Range`.
		@throws DOMError</haxe_doc>
		</compareBoundaryPoints>
		<deleteContents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the contents of a `Range` from the `Document`.
		@throws DOMError</haxe_doc>
		</deleteContents>
		<extractContents public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Moves contents of a `Range` from the document tree into a `DocumentFragment`.
		@throws DOMError</haxe_doc>
		</extractContents>
		<cloneContents public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Returns a `DocumentFragment` copying the nodes of a `Range`.
		@throws DOMError</haxe_doc>
		</cloneContents>
		<insertNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Insert a `Node` at the start of a `Range`.
		@throws DOMError</haxe_doc>
		</insertNode>
		<surroundContents public="1" set="method">
			<f a="newParent">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves content of a `Range` into a new `Node`.
		@throws DOMError</haxe_doc>
		</surroundContents>
		<cloneRange public="1" set="method">
			<f a=""><c path="js.html.Range"/></f>
			<haxe_doc>Returns a `Range` object with boundary points identical to the cloned `Range`.</haxe_doc>
		</cloneRange>
		<detach public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the `Range` from use to improve performance.</haxe_doc>
		</detach>
		<isPointInRange public="1" set="method">
			<f a="node:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `boolean` indicating whether the given point is in the `Range`.
		@throws DOMError</haxe_doc>
		</isPointInRange>
		<comparePoint public="1" set="method">
			<f a="node:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns -1, 0, or 1 indicating whether the point occurs before, inside, or after the `Range`.
		@throws DOMError</haxe_doc>
		</comparePoint>
		<intersectsNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `boolean` indicating whether the given node intersects the `Range`.
		@throws DOMError</haxe_doc>
		</intersectsNode>
		<createContextualFragment public="1" set="method">
			<f a="fragment">
				<c path="String"/>
				<c path="js.html.DocumentFragment"/>
			</f>
			<haxe_doc>Returns a `DocumentFragment` created from a given string of code.
		@throws DOMError</haxe_doc>
		</createContextualFragment>
		<getClientRects public="1" set="method">
			<f a=""><c path="js.html.DOMRectList"/></f>
			<haxe_doc>Returns a list of `DOMRect` objects that aggregates the results of `Element.getClientRects()` for all the elements in the `Range`.</haxe_doc>
		</getClientRects>
		<getBoundingClientRect public="1" set="method">
			<f a=""><c path="js.html.DOMRect"/></f>
			<haxe_doc>Returns a `DOMRect` object which bounds the entire contents of the `Range`; this would be the union of all the rectangles returned by `range.getClientRects()`.</haxe_doc>
		</getBoundingClientRect>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Range` interface represents a fragment of a document that can contain nodes and parts of text nodes.

	Documentation [Range](https://developer.mozilla.org/en-US/docs/Web/API/Range) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Range$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Range>]]></haxe_doc>
		<meta><m n=":native"><e>"Range"</e></m></meta>
	</class>
	<abstract path="js.html.ReferrerPolicy" params="" file="/usr/local/lib/haxe/std/js/html/ReferrerPolicy.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ReferrerPolicy.ReferrerPolicy_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ReferrerPolicy.hx" private="1" module="js.html.ReferrerPolicy" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.RegistrationOptions" params="" file="/usr/local/lib/haxe/std/js/html/RegistrationOptions.hx"><a>
	<updateViaCache>
		<x path="Null"><x path="js.html.ServiceWorkerUpdateViaCache"/></x>
		<meta><m n=":optional"/></meta>
	</updateViaCache>
	<scope>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</scope>
</a></typedef>
	<class path="js.html.Request" params="" file="/usr/local/lib/haxe/std/js/html/Request.hx" extern="1">
		<method public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the request's method (`GET`, `POST`, etc.)</haxe_doc>
		</method>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the URL of the request.</haxe_doc>
		</url>
		<headers public="1" set="null">
			<c path="js.html.Headers"/>
			<haxe_doc>Contains the associated `Headers` object of the request.</haxe_doc>
		</headers>
		<destination public="1" set="null">
			<x path="js.html.RequestDestination"/>
			<haxe_doc>Returns a string from the `RequestDestination` enum describing the request's destination. This is a string indicating the type of content being requested.</haxe_doc>
		</destination>
		<referrer public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the referrer of the request (e.g., `client`).</haxe_doc>
		</referrer>
		<referrerPolicy public="1" set="null">
			<x path="js.html.ReferrerPolicy"/>
			<haxe_doc>Contains the referrer policy of the request (e.g., `no-referrer`).</haxe_doc>
		</referrerPolicy>
		<mode public="1" set="null">
			<x path="js.html.RequestMode"/>
			<haxe_doc>Contains the mode of the request (e.g., `cors`, `no-cors`, `same-origin`, `navigate`.)</haxe_doc>
		</mode>
		<credentials public="1" set="null">
			<x path="js.html.RequestCredentials"/>
			<haxe_doc>Contains the credentials of the request (e.g., `"omit"`, `"same-origin"`, `"include"`). The default is `"same-origin"`.</haxe_doc>
		</credentials>
		<cache public="1" set="null">
			<x path="js.html.RequestCache"/>
			<haxe_doc>Contains the cache mode of the request (e.g., `default`, `reload`, `no-cache`).</haxe_doc>
		</cache>
		<redirect public="1" set="null">
			<x path="js.html.RequestRedirect"/>
			<haxe_doc>Contains the mode for how redirects are handled. It may be one of `follow`, `error`, or `manual`.</haxe_doc>
		</redirect>
		<integrity public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the subresource integrity value of the request (e.g., `sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=`).</haxe_doc>
		</integrity>
		<signal public="1" set="null"><c path="js.html.AbortSignal"/></signal>
		<bodyUsed public="1" set="null"><x path="Bool"/></bodyUsed>
		<clone public="1" set="method">
			<f a=""><c path="js.html.Request"/></f>
			<haxe_doc>Creates a copy of the current `Request` object.
		@throws DOMError</haxe_doc>
		</clone>
		<arrayBuffer public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.lib.ArrayBuffer"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arrayBuffer>
		<blob public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.Blob"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blob>
		<formData public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FormData"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</formData>
		<json public="1" set="method">
			<f a=""><c path="js.lib.Promise"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</json>
		<text public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="input:?init">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.RequestInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="input:?init">
		<c path="String"/>
		<x path="Null"><t path="js.html.RequestInit"/></x>
		<c path="js.html.Request"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `Request` interface of the Fetch API represents a resource request.

	Documentation [Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Request$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Request>]]></haxe_doc>
		<meta><m n=":native"><e>"Request"</e></m></meta>
	</class>
	<abstract path="js.html.RequestCache" params="" file="/usr/local/lib/haxe/std/js/html/RequestCache.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestCache.RequestCache_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/RequestCache.hx" private="1" module="js.html.RequestCache" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.RequestCredentials" params="" file="/usr/local/lib/haxe/std/js/html/RequestCredentials.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestCredentials.RequestCredentials_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/RequestCredentials.hx" private="1" module="js.html.RequestCredentials" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.RequestDestination" params="" file="/usr/local/lib/haxe/std/js/html/RequestDestination.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `RequestDestination` enumerated type contains the permitted values for a request's `destination`. These string values indicate potential types of content that a request may try to retrieve.

	Documentation [RequestDestination](https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestDestination.RequestDestination_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/RequestDestination.hx" private="1" module="js.html.RequestDestination" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.RequestInit" params="" file="/usr/local/lib/haxe/std/js/html/RequestInit.hx"><a>
	<signal>
		<x path="Null"><c path="js.html.AbortSignal"/></x>
		<meta><m n=":optional"/></meta>
	</signal>
	<referrerPolicy>
		<x path="Null"><x path="js.html.ReferrerPolicy"/></x>
		<meta><m n=":optional"/></meta>
	</referrerPolicy>
	<referrer>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</referrer>
	<redirect>
		<x path="Null"><x path="js.html.RequestRedirect"/></x>
		<meta><m n=":optional"/></meta>
	</redirect>
	<observe>
		<x path="Null"><x path="haxe.extern.EitherType">
	<f a="">
		<c path="js.html.FetchObserver"/>
		<x path="Void"/>
	</f>
	<t path="js.html.ObserverCallback"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</observe>
	<mode>
		<x path="Null"><x path="js.html.RequestMode"/></x>
		<meta><m n=":optional"/></meta>
	</mode>
	<method>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</method>
	<integrity>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</integrity>
	<headers>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Headers"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="Array"><c path="String"/></c></c>
		<x path="haxe.DynamicAccess"><c path="String"/></x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</headers>
	<credentials>
		<x path="Null"><x path="js.html.RequestCredentials"/></x>
		<meta><m n=":optional"/></meta>
	</credentials>
	<cache>
		<x path="Null"><x path="js.html.RequestCache"/></x>
		<meta><m n=":optional"/></meta>
	</cache>
	<body>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Blob"/>
	<x path="haxe.extern.EitherType">
		<x path="haxe.extern.EitherType">
			<c path="js.lib.ArrayBufferView"/>
			<c path="js.lib.ArrayBuffer"/>
		</x>
		<x path="haxe.extern.EitherType">
			<c path="js.html.FormData"/>
			<x path="haxe.extern.EitherType">
				<c path="js.html.URLSearchParams"/>
				<c path="String"/>
			</x>
		</x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</body>
</a></typedef>
	<abstract path="js.html.RequestMode" params="" file="/usr/local/lib/haxe/std/js/html/RequestMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestMode.RequestMode_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/RequestMode.hx" private="1" module="js.html.RequestMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.RequestRedirect" params="" file="/usr/local/lib/haxe/std/js/html/RequestRedirect.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestRedirect.RequestRedirect_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/RequestRedirect.hx" private="1" module="js.html.RequestRedirect" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Response" params="" file="/usr/local/lib/haxe/std/js/html/Response.hx" extern="1">
		<error public="1" set="method" static="1">
			<f a=""><c path="js.html.Response"/></f>
			<haxe_doc>Returns a new `Response` object associated with a network error.</haxe_doc>
		</error>
		<redirect public="1" set="method" static="1">
			<f a="url:?status" v=":302">
				<c path="String"/>
				<x path="Int"/>
				<c path="js.html.Response"/>
			</f>
			<meta><m n=":value"><e>{ status : 302 }</e></m></meta>
			<haxe_doc>Creates a new response with a different URL.
		@throws DOMError</haxe_doc>
		</redirect>
		<type public="1" set="null">
			<x path="js.html.ResponseType"/>
			<haxe_doc>Contains the type of the response (e.g., `basic`, `cors`).</haxe_doc>
		</type>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the URL of the response.</haxe_doc>
		</url>
		<redirected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the response is the result of a redirect; that is, its URL list has more than one entry.</haxe_doc>
		</redirected>
		<status public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Contains the status code of the response (e.g., `200` for a success).</haxe_doc>
		</status>
		<ok public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Contains a boolean stating whether the response was successful (status in the range 200-299) or not.</haxe_doc>
		</ok>
		<statusText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the status message corresponding to the status code (e.g., `OK` for `200`).</haxe_doc>
		</statusText>
		<headers public="1" set="null">
			<c path="js.html.Headers"/>
			<haxe_doc>Contains the `Headers` object associated with the response.</haxe_doc>
		</headers>
		<bodyUsed public="1" set="null"><x path="Bool"/></bodyUsed>
		<clone public="1" set="method">
			<f a=""><c path="js.html.Response"/></f>
			<haxe_doc>Creates a clone of a `Response` object.
		@throws DOMError</haxe_doc>
		</clone>
		<arrayBuffer public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.lib.ArrayBuffer"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arrayBuffer>
		<blob public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.Blob"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blob>
		<formData public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.FormData"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</formData>
		<json public="1" set="method">
			<f a=""><c path="js.lib.Promise"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</json>
		<text public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="String"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="?body:?init">
				<c path="js.html.Blob"/>
				<x path="Null"><t path="js.html.ResponseInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.html.FormData"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="js.html.URLSearchParams"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<d/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?body:?init">
						<c path="String"/>
						<x path="Null"><t path="js.html.ResponseInit"/></x>
						<c path="js.html.Response"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Response` interface of the Fetch API represents the response to a request.

	Documentation [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Response$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Response>]]></haxe_doc>
		<meta><m n=":native"><e>"Response"</e></m></meta>
	</class>
	<typedef path="js.html.ResponseInit" params="" file="/usr/local/lib/haxe/std/js/html/ResponseInit.hx"><a>
	<statusText>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</statusText>
	<status>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</status>
	<headers>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Headers"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="Array"><c path="String"/></c></c>
		<x path="haxe.DynamicAccess"><c path="String"/></x>
	</x>
</x></x>
		<meta><m n=":optional"/></meta>
	</headers>
</a></typedef>
	<abstract path="js.html.ResponseType" params="" file="/usr/local/lib/haxe/std/js/html/ResponseType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ResponseType.ResponseType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ResponseType.hx" private="1" module="js.html.ResponseType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.Screen" params="" file="/usr/local/lib/haxe/std/js/html/Screen.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<availWidth public="1" set="null"><x path="Int"/></availWidth>
		<availHeight public="1" set="null"><x path="Int"/></availHeight>
		<width public="1" set="null"><x path="Int"/></width>
		<height public="1" set="null"><x path="Int"/></height>
		<colorDepth public="1" set="null"><x path="Int"/></colorDepth>
		<pixelDepth public="1" set="null"><x path="Int"/></pixelDepth>
		<top public="1" set="null"><x path="Int"/></top>
		<left public="1" set="null"><x path="Int"/></left>
		<availTop public="1" set="null"><x path="Int"/></availTop>
		<availLeft public="1" set="null"><x path="Int"/></availLeft>
		<orientation public="1" set="null"><c path="js.html.ScreenOrientation"/></orientation>
		<haxe_doc><![CDATA[The `Screen` interface represents a screen, usually the one on which the current window is being rendered, and is obtained using `window.screen`.

	Documentation [Screen](https://developer.mozilla.org/en-US/docs/Web/API/Screen) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Screen$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Screen>]]></haxe_doc>
		<meta><m n=":native"><e>"Screen"</e></m></meta>
	</class>
	<class path="js.html.ScreenOrientation" params="" file="/usr/local/lib/haxe/std/js/html/ScreenOrientation.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<type public="1" set="null">
			<x path="js.html.OrientationType"/>
			<haxe_doc>Returns the document's current orientation type, one of "portrait-primary", "portrait-secondary", "landscape-primary", or "landscape-secondary".</haxe_doc>
		</type>
		<angle public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the document's current orientation angle.</haxe_doc>
		</angle>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever is the `EventHandler` called when the screen changes orientation.</haxe_doc>
		</onchange>
		<lock public="1" set="method">
			<f a="orientation">
				<x path="js.html.OrientationLockType"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Locks the orientation of the containing document to its default orientation and returns a `Promise`. 
		@throws DOMError</haxe_doc>
		</lock>
		<unlock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unlocks the orientation of the containing document from its default orientation.
		@throws DOMError</haxe_doc>
		</unlock>
		<haxe_doc><![CDATA[The `ScreenOrientation` interface of the the Screen Orientation API provides information about the current orientation of the document.

	Documentation [ScreenOrientation](https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation>]]></haxe_doc>
		<meta><m n=":native"><e>"ScreenOrientation"</e></m></meta>
	</class>
	<class path="js.html.ScriptElement" params="" file="/usr/local/lib/haxe/std/js/html/ScriptElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1"><c path="String"/></src>
		<type public="1"><c path="String"/></type>
		<charset public="1"><c path="String"/></charset>
		<async public="1"><x path="Bool"/></async>
		<defer public="1"><x path="Bool"/></defer>
		<crossOrigin public="1"><c path="String"/></crossOrigin>
		<text public="1"><c path="String"/></text>
		<event public="1"><c path="String"/></event>
		<htmlFor public="1"><c path="String"/></htmlFor>
		<integrity public="1"><c path="String"/></integrity>
		<haxe_doc><![CDATA[HTML `script` elements expose the `HTMLScriptElement` interface, which provides special properties and methods for manipulating the behavior and execution of `script` elements (beyond the inherited `HTMLElement` interface).

	Documentation [HTMLScriptElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLScriptElement"</e></m></meta>
	</class>
	<abstract path="js.html.ScrollBehavior" params="" file="/usr/local/lib/haxe/std/js/html/ScrollBehavior.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollBehavior.ScrollBehavior_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ScrollBehavior.hx" private="1" module="js.html.ScrollBehavior" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ScrollIntoViewOptions" params="" file="/usr/local/lib/haxe/std/js/html/ScrollIntoViewOptions.hx"><a>
	<inline_>
		<x path="Null"><x path="js.html.ScrollLogicalPosition"/></x>
		<meta>
			<m n=":optional"/>
			<m n=":native"><e>"inline"</e></m>
		</meta>
	</inline_>
	<block>
		<x path="Null"><x path="js.html.ScrollLogicalPosition"/></x>
		<meta><m n=":optional"/></meta>
	</block>
	<behavior>
		<x path="Null"><x path="js.html.ScrollBehavior"/></x>
		<meta><m n=":optional"/></meta>
	</behavior>
</a></typedef>
	<abstract path="js.html.ScrollLogicalPosition" params="" file="/usr/local/lib/haxe/std/js/html/ScrollLogicalPosition.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollLogicalPosition.ScrollLogicalPosition_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ScrollLogicalPosition.hx" private="1" module="js.html.ScrollLogicalPosition" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ScrollOptions" params="" file="/usr/local/lib/haxe/std/js/html/ScrollOptions.hx"><a><behavior>
	<x path="Null"><x path="js.html.ScrollBehavior"/></x>
	<meta><m n=":optional"/></meta>
</behavior></a></typedef>
	<abstract path="js.html.ScrollRestoration" params="" file="/usr/local/lib/haxe/std/js/html/ScrollRestoration.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollRestoration.ScrollRestoration_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ScrollRestoration.hx" private="1" module="js.html.ScrollRestoration" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.ScrollSetting" params="" file="/usr/local/lib/haxe/std/js/html/ScrollSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollSetting.ScrollSetting_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ScrollSetting.hx" private="1" module="js.html.ScrollSetting" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.html.ScrollToOptions" params="" file="/usr/local/lib/haxe/std/js/html/ScrollToOptions.hx"><a>
	<top>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</top>
	<left>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</left>
	<behavior>
		<x path="Null"><x path="js.html.ScrollBehavior"/></x>
		<meta><m n=":optional"/></meta>
	</behavior>
</a></typedef>
	<class path="js.html.SelectElement" params="" file="/usr/local/lib/haxe/std/js/html/SelectElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `autofocus` HTML attribute, which indicates whether the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified. `2.0`</haxe_doc>
		</autofocus>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `disabled` HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>An `HTMLFormElement` referencing the form that this element is associated with. If the element is not associated with of a `form` element, then it returns `null`.</haxe_doc>
		</form>
		<multiple public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `multiple` HTML attribute, which indicates whether multiple items can be selected.</haxe_doc>
		</multiple>
		<name public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the `name` HTML attribute, containing the name of this control used by servers and DOM search functions.</haxe_doc>
		</name>
		<required public="1">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` reflecting the `required` HTML attribute, which indicates whether the user is required to select a value before submitting the form. `2.0`</haxe_doc>
		</required>
		<size public="1">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting the `size` HTML attribute, which contains the number of visible items in the control. The default is 1, unless `multiple` is true, in which case it is 4.</haxe_doc>
		</size>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` represeting the form control's type. When `multiple` is `true`, it returns `"select-multiple"`; otherwise, it returns `"select-one"`.</haxe_doc>
		</type>
		<options public="1" set="null">
			<c path="js.html.HTMLOptionsCollection"/>
			<haxe_doc>An `HTMLOptionsCollection` representing the set of `option` elements contained by this element.</haxe_doc>
		</options>
		<length public="1">
			<x path="Int"/>
			<haxe_doc>An `unsigned long `The number of `option` elements in this `select` element.</haxe_doc>
		</length>
		<selectedOptions public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>An `HTMLCollection` representing the set of `option` elements that are selected.</haxe_doc>
		</selectedOptions>
		<selectedIndex public="1">
			<x path="Int"/>
			<haxe_doc>A `long` reflecting the index of the first selected `option` element. The value `-1` indicates no element is selected.</haxe_doc>
		</selectedIndex>
		<value public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` reflecting the value of the form control (the first selected option). Returns the value attribute of the option element or if it is missing, the text attribute.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that indicates whether the button is a candidate for constraint validation. It is false if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>A `ValidityState` reflecting the validity state that this control is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (`willValidate` is false), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<labels public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>A `NodeList` of `label` elements associated with the element.</haxe_doc>
		</labels>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Gets an item from the options collection for this `select` element. You can also access an item by specifying the index in array-style brackets or parentheses, without calling this method explicitly.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.OptionElement"/>
			</f>
			<haxe_doc>Gets the item in the options collection with the specified name. The name string can match either the `id` or the `name` attribute of an option node. You can also access an item by specifying the name in array-style brackets or parentheses, without calling this method explicitly.</haxe_doc>
		</namedItem>
		<add public="1" set="method">
			<f a="element:?before">
				<x path="haxe.extern.EitherType">
					<c path="js.html.OptionElement"/>
					<c path="js.html.OptGroupElement"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="Int"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an element to the collection of `option` elements for this `select` element.
		@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the element at the specified index from the options collection for this select element.</haxe_doc>
			<overloads><remove public="1" set="method">
	<f a="index">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Removes the element at the specified index from the options collection for this select element.</haxe_doc>
</remove></overloads>
		</remove>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable `invalid` event at the element (and returns `false`).</haxe_doc>
		</checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLSelectElement` interface represents a `select` HTML Element. These elements also share all of the properties and methods of other HTML elements via the `HTMLElement` interface.

	Documentation [HTMLSelectElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSelectElement"</e></m></meta>
	</class>
	<class path="js.html.Selection" params="" file="/usr/local/lib/haxe/std/js/html/Selection.hx" extern="1">
		<anchorNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` in which the selection begins.</haxe_doc>
		</anchorNode>
		<anchorOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing the offset of the selection's anchor within the anchorNode. If anchorNode is a text node, this is the number of characters within anchorNode preceding the anchor. If anchorNode is an element, this is the number of child nodes of the anchorNode preceding the anchor.</haxe_doc>
		</anchorOffset>
		<focusNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` in which the selection ends.</haxe_doc>
		</focusNode>
		<focusOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing the offset of the selection's anchor within the focusNode. If focusNode is a text node, this is the number of characters within focusNode preceding the focus. If focusNode is an element, this is the number of child nodes of the focusNode preceding the focus.</haxe_doc>
		</focusOffset>
		<isCollapsed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a Boolean indicating whether the selection's start and end points are at the same position.</haxe_doc>
		</isCollapsed>
		<rangeCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of ranges in the selection.</haxe_doc>
		</rangeCount>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` describing the type of the current selection.</haxe_doc>
		</type>
		<caretBidiLevel public="1"><x path="Int"/></caretBidiLevel>
		<getRangeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Range"/>
			</f>
			<haxe_doc>Returns a `Range` object representing one of the ranges currently selected.
		@throws DOMError</haxe_doc>
		</getRangeAt>
		<addRange public="1" set="method">
			<f a="range">
				<c path="js.html.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>A `Range` object that will be added to the selection.
		@throws DOMError</haxe_doc>
		</addRange>
		<removeRange public="1" set="method">
			<f a="range">
				<c path="js.html.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes a range from the selection.
		@throws DOMError</haxe_doc>
		</removeRange>
		<removeAllRanges public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all ranges from the selection.
		@throws DOMError</haxe_doc>
		</removeAllRanges>
		<empty public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</empty>
		<collapse public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>Collapses the current selection to a single point.
		@throws DOMError</haxe_doc>
		</collapse>
		<setPosition public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setPosition>
		<collapseToStart public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Collapses the selection to the start of the first range in the selection.
		@throws DOMError</haxe_doc>
		</collapseToStart>
		<collapseToEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Collapses the selection to the end of the last range in the selection.
		@throws DOMError</haxe_doc>
		</collapseToEnd>
		<extend public="1" set="method">
			<f a="node:?offset" v=":0">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ offset : 0 }</e></m></meta>
			<haxe_doc>Moves the focus of the selection to a specified point.
		@throws DOMError</haxe_doc>
		</extend>
		<setBaseAndExtent public="1" set="method">
			<f a="anchorNode:anchorOffset:focusNode:focusOffset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the selection to be a range including all or parts of two specified DOM nodes, and any content located between them.
		@throws DOMError</haxe_doc>
		</setBaseAndExtent>
		<selectAllChildren public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds all the children of the specified node to the selection.
		@throws DOMError</haxe_doc>
		</selectAllChildren>
		<deleteFromDocument public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Deletes the selection's content from the document.
		@throws DOMError</haxe_doc>
		</deleteFromDocument>
		<containsNode public="1" set="method">
			<f a="node:?allowPartialContainment" v=":false">
				<c path="js.html.Node"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allowPartialContainment : false }</e></m></meta>
			<haxe_doc>Indicates if a certain node is part of the selection.
		@throws DOMError</haxe_doc>
		</containsNode>
		<modify public="1" set="method">
			<f a="alter:direction:granularity">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current selection.
		@throws DOMError</haxe_doc>
		</modify>
		<haxe_doc><![CDATA[A `Selection` object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or modification, call `window.getSelection()`.

	Documentation [Selection](https://developer.mozilla.org/en-US/docs/Web/API/Selection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Selection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Selection>]]></haxe_doc>
		<meta><m n=":native"><e>"Selection"</e></m></meta>
	</class>
	<abstract path="js.html.SelectionMode" params="" file="/usr/local/lib/haxe/std/js/html/SelectionMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SelectionMode.SelectionMode_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/SelectionMode.hx" private="1" module="js.html.SelectionMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.ServiceWorker" params="" file="/usr/local/lib/haxe/std/js/html/ServiceWorker.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<scriptURL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the `ServiceWorker` serialized script URL defined as part of `ServiceWorkerRegistration`. The URL must be on the same origin as the document that registers the `ServiceWorker`.</haxe_doc>
		</scriptURL>
		<state public="1" set="null">
			<x path="js.html.ServiceWorkerState"/>
			<haxe_doc>Returns the state of the service worker. It returns one of the following values: `installing`, `installed,` `activating`, `activated`, or `redundant`.</haxe_doc>
		</state>
		<onstatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `statechange` is fired; it is basically fired anytime the `ServiceWorker.state` changes.</haxe_doc>
		</onstatechange>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<postMessage public="1" set="method">
			<f a="message:?transferable">
				<d/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</postMessage>
		<haxe_doc><![CDATA[The `ServiceWorker` interface of the ServiceWorker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique `ServiceWorker` object.

	Documentation [ServiceWorker](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorker"</e></m></meta>
	</class>
	<class path="js.html.ServiceWorkerContainer" params="" file="/usr/local/lib/haxe/std/js/html/ServiceWorkerContainer.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<controller public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a `ServiceWorker` object if its state is `activated` (the same object returned by `ServiceWorkerRegistration.active`). This property returns `null` during a force-refresh request (Shift + refresh) or if there is no active worker.</haxe_doc>
		</controller>
		<ready public="1" set="null">
			<c path="js.lib.Promise"><c path="js.html.ServiceWorkerRegistration"/></c>
			<haxe_doc>Provides a way of delaying code execution until a service worker is active. It returns a `Promise` that will never reject, and which waits indefinitely until the `ServiceWorkerRegistration` associated with the current page has an `ServiceWorkerRegistration.active` worker. Once that condition is met, it resolves with the `ServiceWorkerRegistration`.</haxe_doc>
		</ready>
		<oncontrollerchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever a `controllerchange` event occurs — when the document's associated `ServiceWorkerRegistration` acquires a new `ServiceWorkerRegistration.active` worker.</haxe_doc>
		</oncontrollerchange>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever an `error` event occurs in the associated service workers.</haxe_doc>
		</onerror>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired whenever a `message` event occurs — when incoming messages are received to the `ServiceWorkerContainer` object (e.g. via a `MessagePort.postMessage()` call.)</haxe_doc>
		</onmessage>
		<register public="1" set="method"><f a="scriptURL:?options">
	<c path="String"/>
	<x path="Null"><t path="js.html.RegistrationOptions"/></x>
	<c path="js.lib.Promise"><c path="js.html.ServiceWorkerRegistration"/></c>
</f></register>
		<getRegistration public="1" set="method">
			<f a="?documentURL" v="&quot;&quot;">
				<c path="String"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<meta><m n=":value"><e>{ documentURL : "" }</e></m></meta>
			<haxe_doc>Gets a `ServiceWorkerRegistration` object whose scope matches the provided document URL.  If the method can't return a `ServiceWorkerRegistration`, it returns a `Promise`. </haxe_doc>
		</getRegistration>
		<getRegistrations public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="Array"><c path="js.html.ServiceWorkerRegistration"/></c></c></f>
			<haxe_doc>Returns all `ServiceWorkerRegistration` objects associated with a `ServiceWorkerContainer` in an array.  If the method can't return `ServiceWorkerRegistration` objects, it returns a `Promise`. </haxe_doc>
		</getRegistrations>
		<haxe_doc><![CDATA[The `ServiceWorkerContainer` interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.

	Documentation [ServiceWorkerContainer](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorkerContainer"</e></m></meta>
	</class>
	<class path="js.html.ServiceWorkerRegistration" params="" file="/usr/local/lib/haxe/std/js/html/ServiceWorkerRegistration.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<installing public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is `installing`. This is initially set to `null`.</haxe_doc>
		</installing>
		<waiting public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is `waiting`. This is initially set to `null`.</haxe_doc>
		</waiting>
		<active public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is either `activating` or `activated`. This is initially set to `null`. An active worker will control a `ServiceWorkerClient` if the client's URL falls within the scope of the registration (the `scope` option set when `ServiceWorkerContainer.register` is first called.)</haxe_doc>
		</active>
		<scope public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a unique identifier for a service worker registration. This must be on the same origin as the document that registers the `ServiceWorker`.</haxe_doc>
		</scope>
		<updateViaCache public="1" set="null"><x path="js.html.ServiceWorkerUpdateViaCache"/></updateViaCache>
		<onupdatefound public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `updatefound` is fired; it is fired any time the `ServiceWorkerRegistration.installing` property acquires a new service worker.</haxe_doc>
		</onupdatefound>
		<pushManager public="1" set="null">
			<c path="js.html.push.PushManager"/>
			<haxe_doc>Returns a reference to the `PushManager` interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status.</haxe_doc>
		</pushManager>
		<update public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Checks the server for an updated version of the service worker without consulting caches.
		@throws DOMError</haxe_doc>
		</update>
		<unregister public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Unregisters the service worker registration and returns a `Promise`. The service worker will finish any ongoing operations before it is unregistered.
		@throws DOMError</haxe_doc>
		</unregister>
		<showNotification public="1" set="method">
			<f a="title:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.NotificationOptions"/></x>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Displays the notification with the requested title.
		@throws DOMError</haxe_doc>
		</showNotification>
		<getNotifications public="1" set="method">
			<f a="?filter">
				<x path="Null"><t path="js.html.GetNotificationOptions"/></x>
				<c path="js.lib.Promise"><c path="Array"><c path="js.html.Notification"/></c></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to an array of `Notification` objects.
		@throws DOMError</haxe_doc>
		</getNotifications>
		<haxe_doc><![CDATA[The `ServiceWorkerRegistration` interface of the ServiceWorker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.

	Documentation [ServiceWorkerRegistration](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorkerRegistration"</e></m></meta>
	</class>
	<abstract path="js.html.ServiceWorkerState" params="" file="/usr/local/lib/haxe/std/js/html/ServiceWorkerState.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `ServiceWorkerState` is associated with its `ServiceWorker`'s state.

	Documentation [ServiceWorkerState](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ServiceWorkerState.ServiceWorkerState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ServiceWorkerState.hx" private="1" module="js.html.ServiceWorkerState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.ServiceWorkerUpdateViaCache" params="" file="/usr/local/lib/haxe/std/js/html/ServiceWorkerUpdateViaCache.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ServiceWorkerUpdateViaCache.ServiceWorkerUpdateViaCache_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ServiceWorkerUpdateViaCache.hx" private="1" module="js.html.ServiceWorkerUpdateViaCache" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.ShadowRoot" params="" file="/usr/local/lib/haxe/std/js/html/ShadowRoot.hx" extern="1">
		<extends path="js.html.DocumentFragment"/>
		<mode public="1" set="null">
			<x path="js.html.ShadowRootMode"/>
			<haxe_doc>The mode of the `ShadowRoot` — either `open` or `closed`. This defines whether or not the shadow root's internal features are accessible from JavaScript.</haxe_doc>
		</mode>
		<host public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns a reference to the DOM element the `ShadowRoot` is attached to.</haxe_doc>
		</host>
		<innerHTML public="1">
			<c path="String"/>
			<haxe_doc>Sets or returns a reference to the DOM tree inside the `ShadowRoot`.</haxe_doc>
		</innerHTML>
		<activeElement public="1" set="null"><c path="js.html.Element"/></activeElement>
		<styleSheets public="1" set="null"><c path="js.html.StyleSheetList"/></styleSheets>
		<pointerLockElement public="1" set="null"><c path="js.html.Element"/></pointerLockElement>
		<fullscreenElement public="1" set="null"><c path="js.html.Element"/></fullscreenElement>
		<getElementById public="1" set="method" override="1"><f a="elementId">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></getElementById>
		<getElementsByTagName public="1" set="method"><f a="localName">
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method"><f a="namespace:localName">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method"><f a="classNames">
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByClassName>
		<elementFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.Element"/>
</f></elementFromPoint>
		<elementsFromPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="js.html.Element"/></c>
</f></elementsFromPoint>
		<haxe_doc><![CDATA[The `ShadowRoot` interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.

	Documentation [ShadowRoot](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot>]]></haxe_doc>
		<meta><m n=":native"><e>"ShadowRoot"</e></m></meta>
	</class>
	<typedef path="js.html.ShadowRootInit" params="" file="/usr/local/lib/haxe/std/js/html/ShadowRootInit.hx"><a><mode><x path="js.html.ShadowRootMode"/></mode></a></typedef>
	<abstract path="js.html.ShadowRootMode" params="" file="/usr/local/lib/haxe/std/js/html/ShadowRootMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ShadowRootMode.ShadowRootMode_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/ShadowRootMode.hx" private="1" module="js.html.ShadowRootMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.SlotElement" params="" file="/usr/local/lib/haxe/std/js/html/SlotElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>`DOMString`: Can be used to get and set the slot's name.</haxe_doc>
		</name>
		<assignedNodes public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.AssignedNodesOptions"/></x>
				<c path="Array"><c path="js.html.Node"/></c>
			</f>
			<haxe_doc>Returns the sequence of elements assigned to this slot, or alternatively the slot's fallback content.</haxe_doc>
		</assignedNodes>
		<haxe_doc><![CDATA[The `HTMLSlotElement` interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML `slot` element.

	Documentation [HTMLSlotElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSlotElement"</e></m></meta>
	</class>
	<class path="js.html.SourceElement" params="" file="/usr/local/lib/haxe/std/js/html/SourceElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `src` HTML attribute, containing the URL for the media resource. The `HTMLSourceElement.src` property has a meaning only when the associated `source` element is nested in a media element that is a `video` or an `audio` element. It has no meaning and is ignored when it is nested in a `picture` element. 
		 Note: If the `src` property is updated (along with any siblings), the parent `HTMLMediaElement`'s `load` method should be called when done, since `source` elements are not re-scanned automatically.</haxe_doc>
		</src>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `type` HTML attribute, containing the type of the media resource.</haxe_doc>
		</type>
		<srcset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `srcset` HTML attribute, containing a list of candidate images, separated by a comma (`',', U+002C COMMA`). A candidate image is a URL followed by a `'w'` with the width of the images, or an `'x'` followed by the pixel density.</haxe_doc>
		</srcset>
		<sizes public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing image sizes between breakpoints</haxe_doc>
		</sizes>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `media` HTML attribute, containing the intended type of the media resource.</haxe_doc>
		</media>
		<haxe_doc><![CDATA[The `HTMLSourceElement` interface provides special properties (beyond the regular `HTMLElement` object interface it also has available to it by inheritance) for manipulating `source` elements.

	Documentation [HTMLSourceElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSourceElement"</e></m></meta>
	</class>
	<class path="js.html.SpanElement" params="" file="/usr/local/lib/haxe/std/js/html/SpanElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLSpanElement` interface represents a `span` element and derives from the `HTMLElement` interface, but without implementing any additional properties or methods.

	Documentation [HTMLSpanElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSpanElement"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesis" params="" file="/usr/local/lib/haxe/std/js/html/SpeechSynthesis.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<pending public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if the utterance queue contains as-yet-unspoken utterances.</haxe_doc>
		</pending>
		<speaking public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if an utterance is currently in the process of being spoken — even if `SpeechSynthesis` is in a paused state.</haxe_doc>
		</speaking>
		<paused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if the `SpeechSynthesis` object is in a paused state.</haxe_doc>
		</paused>
		<onvoiceschanged public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the list of `SpeechSynthesisVoice` objects that would be returned by the `SpeechSynthesis.getVoices()` method has changed.</haxe_doc>
		</onvoiceschanged>
		<speak public="1" set="method">
			<f a="utterance">
				<c path="js.html.SpeechSynthesisUtterance"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an `SpeechSynthesisUtterance` to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.</haxe_doc>
		</speak>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all utterances from the utterance queue.</haxe_doc>
		</cancel>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Puts the `SpeechSynthesis` object into a paused state.</haxe_doc>
		</pause>
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Puts the `SpeechSynthesis` object into a non-paused state: resumes it if it was already paused.</haxe_doc>
		</resume>
		<getVoices public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.SpeechSynthesisVoice"/></c></f>
			<haxe_doc>Returns a list of `SpeechSynthesisVoice` objects representing all the available voices on the current device.</haxe_doc>
		</getVoices>
		<haxe_doc><![CDATA[The `SpeechSynthesis` interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.

	Documentation [SpeechSynthesis](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesis"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesisUtterance" params="" file="/usr/local/lib/haxe/std/js/html/SpeechSynthesisUtterance.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the text that will be synthesised when the utterance is spoken.</haxe_doc>
		</text>
		<lang public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the language of the utterance.</haxe_doc>
		</lang>
		<voice public="1">
			<c path="js.html.SpeechSynthesisVoice"/>
			<haxe_doc>Gets and sets the voice that will be used to speak the utterance.</haxe_doc>
		</voice>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the volume that the utterance will be spoken at.</haxe_doc>
		</volume>
		<rate public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the speed at which the utterance will be spoken at.</haxe_doc>
		</rate>
		<pitch public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the pitch at which the utterance will be spoken at.</haxe_doc>
		</pitch>
		<onstart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance has begun to be spoken.</haxe_doc>
		</onstart>
		<onend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance has finished being spoken.</haxe_doc>
		</onend>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when an error occurs that prevents the utterance from being succesfully spoken.</haxe_doc>
		</onerror>
		<onpause public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance is paused part way through.</haxe_doc>
		</onpause>
		<onresume public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when a paused utterance is resumed.</haxe_doc>
		</onresume>
		<onmark public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the spoken utterance reaches a named SSML "mark" tag.</haxe_doc>
		</onmark>
		<onboundary public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the spoken utterance reaches a word or sentence boundary.</haxe_doc>
		</onboundary>
		<new public="1" set="method">
			<f a="text">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `SpeechSynthesisUtterance` interface of the Web Speech API represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)

	Documentation [SpeechSynthesisUtterance](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisUtterance"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesisVoice" params="" file="/usr/local/lib/haxe/std/js/html/SpeechSynthesisVoice.hx" extern="1">
		<voiceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the type of URI and location of the speech synthesis service for this voice.</haxe_doc>
		</voiceURI>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a human-readable name that represents the voice.</haxe_doc>
		</name>
		<lang public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a BCP 47 language tag indicating the language of the voice.</haxe_doc>
		</lang>
		<localService public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` indicating whether the voice is supplied by a local speech synthesizer service (`true`), or a remote speech synthesizer service (`false`.)</haxe_doc>
		</localService>
		<default_ public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":native"><e>"default"</e></m></meta>
			<haxe_doc>A `Boolean` indicating whether the voice is the default voice for the current app language (`true`), or not (`false`.)</haxe_doc>
		</default_>
		<haxe_doc><![CDATA[The `SpeechSynthesisVoice` interface of the Web Speech API represents a voice that the system supports. Every `SpeechSynthesisVoice` has its own relative speech service including information about language, name and URI.

	Documentation [SpeechSynthesisVoice](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisVoice"</e></m></meta>
	</class>
	<class path="js.html.Storage" params="" file="/usr/local/lib/haxe/std/js/html/Storage.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing the number of data items stored in the `Storage` object.</haxe_doc>
		</length>
		<key public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>When passed a number n, this method will return the name of the nth key in the storage.
		@throws DOMError</haxe_doc>
		</key>
		<getItem public="1" set="method">
			<f a="key">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>When passed a key name, will return that key's value.
		@throws DOMError</haxe_doc>
		</getItem>
		<setItem public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>When passed a key name and value, will add that key to the storage, or update that key's value if it already exists.
		@throws DOMError</haxe_doc>
		</setItem>
		<removeItem public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>When passed a key name, will remove that key from the storage.
		@throws DOMError</haxe_doc>
		</removeItem>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>When invoked, will empty all keys out of the storage.
		@throws DOMError</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `Storage` interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.

	Documentation [Storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Storage$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Storage>]]></haxe_doc>
		<meta><m n=":native"><e>"Storage"</e></m></meta>
	</class>
	<typedef path="js.html.StorageEstimate" params="" file="/usr/local/lib/haxe/std/js/html/StorageEstimate.hx">
		<a>
			<usage>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A numeric value approximating the amount of storage space currently being used by the site or Web app, out of the available space as indicated by `quota`.</haxe_doc>
			</usage>
			<quota>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A numeric value which provides a conservative approximation of the total storage the user's device or computer has available for the site origin or Web app. It's possible that there's more than this amount of space available though you can't rely on that being the case.</haxe_doc>
			</quota>
		</a>
		<haxe_doc><![CDATA[The `StorageEstimate` dictionary is used by the `StorageManager` to provide estimates of the size of a site's or application's data store and how much of it is in use. The `estimate()` method returns an object that conforms to this dictionary when its `Promise` resolves.

	Documentation [StorageEstimate](https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate>]]></haxe_doc>
	</typedef>
	<class path="js.html.StorageManager" params="" file="/usr/local/lib/haxe/std/js/html/StorageManager.hx" extern="1">
		<persisted public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if persistence has already been granted for your site's storage.
		@throws DOMError</haxe_doc>
		</persisted>
		<persist public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to `true` if the user agent is able to persist your site's storage.
		@throws DOMError</haxe_doc>
		</persist>
		<estimate public="1" set="method">
			<f a=""><c path="js.lib.Promise"><t path="js.html.StorageEstimate"/></c></f>
			<haxe_doc>Returns a `StorageEstimate` object containing usage and quota numbers for your origin.
		@throws DOMError</haxe_doc>
		</estimate>
		<haxe_doc><![CDATA[The `StorageManager` interface of the the Storage API provides an interface for managing persistance permissions and estimating available storage. You can get a reference to this interface using either `navigator.storage` or `WorkerNavigator.storage`.

	Documentation [StorageManager](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StorageManager>]]></haxe_doc>
		<meta><m n=":native"><e>"StorageManager"</e></m></meta>
	</class>
	<abstract path="js.html.StorageType" params="" file="/usr/local/lib/haxe/std/js/html/StorageType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._StorageType.StorageType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/StorageType.hx" private="1" module="js.html.StorageType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.StyleElement" params="" file="/usr/local/lib/haxe/std/js/html/StyleElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` value representing whether or not the stylesheet is disabled (true) or not (false).</haxe_doc>
		</disabled>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the intended destination medium for style information.</haxe_doc>
		</media>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of style being applied by this statement.</haxe_doc>
		</type>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[The `HTMLStyleElement` interface represents a `style` element. It inherits properties and methods from its parent, `HTMLElement`, and from `LinkStyle`.

	Documentation [HTMLStyleElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLStyleElement"</e></m></meta>
	</class>
	<class path="js.html.StyleSheetList" params="" file="/usr/local/lib/haxe/std/js/html/StyleSheetList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.StyleSheet"/>
</f></item>
		<haxe_doc><![CDATA[The `StyleSheetList` interface represents a list of `StyleSheet`.

	Documentation [StyleSheetList](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList>]]></haxe_doc>
		<meta><m n=":native"><e>"StyleSheetList"</e></m></meta>
	</class>
	<class path="js.html.SubtleCrypto" params="" file="/usr/local/lib/haxe/std/js/html/SubtleCrypto.hx" extern="1">
		<encrypt public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the encrypted data corresponding to the clear text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</encrypt>
		<decrypt public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the clear data corresponding to the encrypted text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</decrypt>
		<sign public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of the signature corresponding to the text, algorithm and key given as parameters.
		@throws DOMError</haxe_doc>
		</sign>
		<verify public="1" set="method">
			<f a="algorithm:key:signature:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `Boolean` value indicating if the signature given as parameter matches the text, algorithm and key also given as parameters.
		@throws DOMError</haxe_doc>
		</verify>
		<digest public="1" set="method">
			<f a="algorithm:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a digest generated from the algorithm and text given as parameters.
		@throws DOMError</haxe_doc>
		</digest>
		<generateKey public="1" set="method">
			<f a="algorithm:extractable:keyUsages">
				<d/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey`, for symmetrical algorithms, or a `CryptoKeyPair`, containing two newly generated keys, for asymmetrical algorithm, that matches the algorithm, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><generateKey public="1" set="method">
	<f a="algorithm:extractable:keyUsages">
		<c path="String"/>
		<x path="Bool"/>
		<c path="Array"><c path="String"/></c>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey`, for symmetrical algorithms, or a `CryptoKeyPair`, containing two newly generated keys, for asymmetrical algorithm, that matches the algorithm, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
</generateKey></overloads>
		</generateKey>
		<deriveKey public="1" set="method">
			<f a="algorithm:baseKey:derivedKeyType:extractable:keyUsages">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated `CryptoKey` derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
		</deriveKey>
		<deriveBits public="1" set="method">
			<f a="algorithm:baseKey:length">
				<d/>
				<c path="js.html.CryptoKey"/>
				<x path="Int"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a newly generated buffer of pseudo-random bits derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><deriveBits public="1" set="method">
	<f a="algorithm:baseKey:length">
		<c path="String"/>
		<c path="js.html.CryptoKey"/>
		<x path="Int"/>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a newly generated buffer of pseudo-random bits derived from a master key and a specific algorithm given as parameters.
		@throws DOMError</haxe_doc>
</deriveBits></overloads>
		</deriveBits>
		<importKey public="1" set="method">
			<f a="format:keyData:algorithm:extractable:keyUsages">
				<c path="String"/>
				<d/>
				<d/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the format, the algorithm, the raw key data, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
			<overloads><importKey public="1" set="method">
	<f a="format:keyData:algorithm:extractable:keyUsages">
		<c path="String"/>
		<d/>
		<c path="String"/>
		<x path="Bool"/>
		<c path="Array"><c path="String"/></c>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the format, the algorithm, the raw key data, the usages and the extractability given as parameters.
		@throws DOMError</haxe_doc>
</importKey></overloads>
		</importKey>
		<exportKey public="1" set="method">
			<f a="format:key">
				<c path="String"/>
				<c path="js.html.CryptoKey"/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a buffer containing the key in the format requested.
		@throws DOMError</haxe_doc>
		</exportKey>
		<wrapKey public="1" set="method">
			<f a="format:key:wrappingKey:wrapAlgorithm">
				<c path="String"/>
				<c path="js.html.CryptoKey"/>
				<c path="js.html.CryptoKey"/>
				<d/>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a wrapped symmetric key for usage (transfer, storage) in insecure environments. The wrapped buffer returned is in the format given in parameters, and contains the key wrapped by the given wrapping key with the given algorithm.
		@throws DOMError</haxe_doc>
			<overloads><wrapKey public="1" set="method">
	<f a="format:key:wrappingKey:wrapAlgorithm">
		<c path="String"/>
		<c path="js.html.CryptoKey"/>
		<c path="js.html.CryptoKey"/>
		<c path="String"/>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a `Promise` of a wrapped symmetric key for usage (transfer, storage) in insecure environments. The wrapped buffer returned is in the format given in parameters, and contains the key wrapped by the given wrapping key with the given algorithm.
		@throws DOMError</haxe_doc>
</wrapKey></overloads>
		</wrapKey>
		<unwrapKey public="1" set="method">
			<f a="format:wrappedKey:unwrappingKey:unwrapAlgorithm:unwrappedKeyAlgorithm:extractable:keyUsages">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.lib.ArrayBufferView"/>
					<c path="js.lib.ArrayBuffer"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a `Promise` of a `CryptoKey` corresponding to the wrapped key given in parameter.
		@throws DOMError</haxe_doc>
		</unwrapKey>
		<haxe_doc><![CDATA[The `SubtleCrypto` interface represents a set of cryptographic primitives. It is available via the `Crypto.subtle` properties available in a window context (via `Window.crypto`).

	Documentation [SubtleCrypto](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto>]]></haxe_doc>
		<meta><m n=":native"><e>"SubtleCrypto"</e></m></meta>
	</class>
	<class path="js.html.TableCaptionElement" params="" file="/usr/local/lib/haxe/std/js/html/TableCaptionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` which represents an enumerated attribute indicating alignment of the caption with respect to the table.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLTableCaptionElement` interface special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating table caption elements.

	Documentation [HTMLTableCaptionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableCaptionElement"</e></m></meta>
	</class>
	<class path="js.html.TableCellElement" params="" file="/usr/local/lib/haxe/std/js/html/TableCellElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<colSpan public="1">
			<x path="Int"/>
			<haxe_doc>An unsigned long integer indicating the number of columns this cell must span; this lets the cell occupy space across multiple columns of the table. It reflects the `colspan` attribute.</haxe_doc>
		</colSpan>
		<rowSpan public="1">
			<x path="Int"/>
			<haxe_doc>An unsigned long integer indicating the number of rows this cell must span; this lets a cell occupy space across multiple rows of the table. It reflects the `rowspan` attribute.</haxe_doc>
		</rowSpan>
		<headers public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMSettableTokenList` describing a list of `id` of `th` elements that represents headers associated with the cell. It reflects the `headers` attribute.</haxe_doc>
		</headers>
		<cellIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A long integer representing the cell's position in the `HTMLTableRowElement.cells` collection of the `tr` the cell is contained within. If the cell doesn't belong to a `tr`, it returns `-1`.</haxe_doc>
		</cellIndex>
		<abbr public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` which can be used on `th` elements (not on `td`), specifying an alternative label for the header cell.. This alternate label can be used in other contexts, such as when describing the headers that apply to a data cell. This is used to offer a shorter term for use by screen readers in particular, and is a valuable accessibility tool. Usually the value of `abbr` is an abbreviation or acronym, but can be any text that's appropriate contextually.</haxe_doc>
		</abbr>
		<scope public="1">
			<c path="String"/>
			<haxe_doc></haxe_doc>
		</scope>
		<align public="1"><c path="String"/></align>
		<axis public="1"><c path="String"/></axis>
		<height public="1"><c path="String"/></height>
		<width public="1"><c path="String"/></width>
		<ch public="1"><c path="String"/></ch>
		<chOff public="1"><c path="String"/></chOff>
		<noWrap public="1"><x path="Bool"/></noWrap>
		<vAlign public="1"><c path="String"/></vAlign>
		<bgColor public="1"><c path="String"/></bgColor>
		<haxe_doc><![CDATA[The `HTMLTableCellElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.

	Documentation [HTMLTableCellElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableCellElement"</e></m></meta>
	</class>
	<class path="js.html.TableColElement" params="" file="/usr/local/lib/haxe/std/js/html/TableColElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<span public="1"><x path="Int"/></span>
		<align public="1"><c path="String"/></align>
		<ch public="1"><c path="String"/></ch>
		<chOff public="1"><c path="String"/></chOff>
		<vAlign public="1"><c path="String"/></vAlign>
		<width public="1"><c path="String"/></width>
		<haxe_doc><![CDATA[The `HTMLTableColElement` interface provides special properties (beyond the `HTMLElement` interface it also has available to it inheritance) for manipulating single or grouped table column elements.

	Documentation [HTMLTableColElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableColElement"</e></m></meta>
	</class>
	<class path="js.html.TableElement" params="" file="/usr/local/lib/haxe/std/js/html/TableElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<caption public="1">
			<c path="js.html.TableCaptionElement"/>
			<haxe_doc>Is a `HTMLTableCaptionElement` representing the first `caption` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `caption`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree as the first child of this element and the first `caption` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</caption>
		<tHead public="1">
			<c path="js.html.TableSectionElement"/>
			<haxe_doc>Is a `HTMLTableSectionElement` representing the first `thead` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `thead`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a `caption`, nor a `colgroup`, or as the last child if there is no such element, and the first `thead` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</tHead>
		<tFoot public="1">
			<c path="js.html.TableSectionElement"/>
			<haxe_doc>Is a `HTMLTableSectionElement` representing the first `tfoot` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `tfoot`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a `caption`, a `colgroup`, nor a `thead`, or as the last child if there is no such element, and the first `tfoot` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</tFoot>
		<tBodies public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing all the `tbody` of the element. The `HTMLCollection` is live and is automatically updated when the `HTMLTableElement` changes.</haxe_doc>
		</tBodies>
		<rows public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing all the rows of the element, that is all `tr` that are a child of the element, or a child or one of its `thead`, `tbody` and `tfoot` children. The rows members of a `thead` appear first, in tree order, and those members of a `tbody` last, also in tree order. The `HTMLCollection` is live and is automatically updated when the `HTMLTableElement` changes.</haxe_doc>
		</rows>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the border of the table. It reflects the obsolete `border` attribute.</haxe_doc>
		</border>
		<frame public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the external borders of the table. It reflects the obsolete `frame` attribute and can take one of the following values: `"void"`, `"above"`, `"below"`, `"hsides"`, `"vsides"`, `"lhs"`, `"rhs"`, `"box"`, or `"border"`.</haxe_doc>
		</frame>
		<rules public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the internal borders of the table. It reflects the obsolete `rules` attribute and can take one of the following values: `"none"`, `"groups"`, `"rows"`, `"cols"`, or `"all"`.</haxe_doc>
		</rules>
		<summary public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a description of the purpose or the structure of the table. It reflects the obsolete `summary` attribute.</haxe_doc>
		</summary>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the length in pixels or in percentage of the desired width fo the entire table. It reflects the obsolete `width` attribute.</haxe_doc>
		</width>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the background color of the cells. It reflects the obsolete `bgColor` attribute.</haxe_doc>
		</bgColor>
		<cellPadding public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the horizontal and vertical sapce between cell content and cell borders. It reflects the obsolete `cellpadding` attribute.</haxe_doc>
		</cellPadding>
		<cellSpacing public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the horizontal and vertical separation between cells. It reflects the obsolete `cellspacing` attribute.</haxe_doc>
		</cellSpacing>
		<createCaption public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `caption` that is a child of the element. If none is found, a new one is created and inserted in the tree as the first child of the `table` element.</haxe_doc>
		</createCaption>
		<deleteCaption public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `caption` that is a child of the element.</haxe_doc>
		</deleteCaption>
		<createTHead public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `thead` that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a `caption`, nor a `colgroup`, or as the last child if there is no such element.</haxe_doc>
		</createTHead>
		<deleteTHead public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `thead` that is a child of the element.</haxe_doc>
		</deleteTHead>
		<createTFoot public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `tfoot` that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a `caption`, a `colgroup`, nor a `thead`, or as the last child if there is no such element.</haxe_doc>
		</createTFoot>
		<deleteTFoot public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `tfoot` that is a child of the element.</haxe_doc>
		</deleteTFoot>
		<createTBody public="1" set="method"><f a=""><c path="js.html.Element"/></f></createTBody>
		<insertRow public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Returns an `HTMLTableRowElement` representing a new row of the table. It inserts it in the rows collection immediately before the `tr` element at the given `index` position. If necessary a `tbody` is created. If the `index` is `-1`, the new row is appended to the collection. If the `index` is smaller than `-1` or greater than the number of rows in the collection, a `DOMException` with the value `IndexSizeError` is raised.
		@throws DOMError</haxe_doc>
		</insertRow>
		<deleteRow public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the row corresponding to the `index` given in parameter. If the `index` value is `-1` the last row is removed; if it smaller than `-1` or greater than the amount of rows in the collection, a `DOMException` with the value `IndexSizeError` is raised.
		@throws DOMError</haxe_doc>
		</deleteRow>
		<haxe_doc><![CDATA[The `HTMLTableElement` interface provides special properties and methods (beyond the regular `HTMLElement` object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.

	Documentation [HTMLTableElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableElement"</e></m></meta>
	</class>
	<class path="js.html.TableRowElement" params="" file="/usr/local/lib/haxe/std/js/html/TableRowElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<rowIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` value which gives the logical position of the row within the entire table. If the row is not part of a table, returns `-1`.</haxe_doc>
		</rowIndex>
		<sectionRowIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns `-1`.</haxe_doc>
		</sectionRowIndex>
		<cells public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing the cells in the row. The `HTMLCollection` is live and is automatically updated when cells are added or removed.</haxe_doc>
		</cells>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing one single character. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableRowElement.ch`. This property was optional and was not very well supported.</haxe_doc>
		</chOff>
		<vAlign public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `"top"`, `"middle"`, `"bottom"`, or `"baseline"`.</haxe_doc>
		</vAlign>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the background color of the cells. It reflects the obsolete `bgColor` attribute.</haxe_doc>
		</bgColor>
		<insertCell public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Inserts a new cell just before the given position in the row. If the given position is not given or is `-1`, it appends the cell to the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than `-1`, it raises a `DOMException` with the `IndexSizeError` value. Returns a reference to a HTMLTableCellElement [en-US].
		@throws DOMError</haxe_doc>
		</insertCell>
		<deleteCell public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the cell at the given position in the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than `0`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</deleteCell>
		<haxe_doc><![CDATA[The `HTMLTableRowElement` interface provides special properties and methods (beyond the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.

	Documentation [HTMLTableRowElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableRowElement"</e></m></meta>
	</class>
	<class path="js.html.TableSectionElement" params="" file="/usr/local/lib/haxe/std/js/html/TableSectionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<rows public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing the rows in the section. The `HTMLCollection` is live and is automatically updated when rows are added or removed.</haxe_doc>
		</rows>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing one single chararcter. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableRowElement.ch`. This property was optional and was not very well supported.</haxe_doc>
		</chOff>
		<vAlign public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `"top"`, `"middle"`, `"bottom"`, or `"baseline"`.</haxe_doc>
		</vAlign>
		<insertRow public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>Inserts a new row just before the given position in the section. If the given position is not given or is `-1`, it appends the row to the end of section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than `-1`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</insertRow>
		<deleteRow public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the cell at the given position in the section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than `0`, it raises a `DOMException` with the `IndexSizeError` value.
		@throws DOMError</haxe_doc>
		</deleteRow>
		<haxe_doc><![CDATA[The `HTMLTableSectionElement` interface provides special properties and methods (beyond the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.

	Documentation [HTMLTableSectionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableSectionElement"</e></m></meta>
	</class>
	<class path="js.html.TextAreaElement" params="" file="/usr/local/lib/haxe/std/js/html/TextAreaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<autofocus public="1"><x path="Bool"/></autofocus>
		<cols public="1"><x path="Int"/></cols>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<maxLength public="1"><x path="Int"/></maxLength>
		<minLength public="1"><x path="Int"/></minLength>
		<name public="1"><c path="String"/></name>
		<placeholder public="1"><c path="String"/></placeholder>
		<readOnly public="1"><x path="Bool"/></readOnly>
		<required public="1"><x path="Bool"/></required>
		<rows public="1"><x path="Int"/></rows>
		<wrap public="1"><c path="String"/></wrap>
		<type public="1" set="null"><c path="String"/></type>
		<defaultValue public="1"><c path="String"/></defaultValue>
		<value public="1"><c path="String"/></value>
		<textLength public="1" set="null"><x path="Int"/></textLength>
		<willValidate public="1" set="null"><x path="Bool"/></willValidate>
		<validity public="1" set="null"><c path="js.html.ValidityState"/></validity>
		<validationMessage public="1" set="null"><c path="String"/></validationMessage>
		<labels public="1" set="null"><c path="js.html.NodeList"/></labels>
		<selectionStart public="1"><x path="Int"/></selectionStart>
		<selectionEnd public="1"><x path="Int"/></selectionEnd>
		<selectionDirection public="1"><c path="String"/></selectionDirection>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<reportValidity public="1" set="method"><f a=""><x path="Bool"/></f></reportValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<select public="1" set="method"><f a=""><x path="Void"/></f></select>
		<setRangeText public="1" set="method">
			<f a="replacement:start:end:?selectionMode" v=":::PRESERVE">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.SelectionMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ selectionMode : PRESERVE }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setRangeText public="1" set="method">
	<f a="replacement">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</setRangeText></overloads>
		</setRangeText>
		<setSelectionRange public="1" set="method">
			<f a="start:end:?direction">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSelectionRange>
		<haxe_doc><![CDATA[The `HTMLTextAreaElement` interface provides special properties and methods for manipulating the layout and presentation of `textarea` elements.

	Documentation [HTMLTextAreaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTextAreaElement"</e></m></meta>
	</class>
	<class path="js.html.TextMetrics" params="" file="/usr/local/lib/haxe/std/js/html/TextMetrics.hx" extern="1">
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Is a `double` giving the calculated width of a segment of inline text in CSS pixels. It takes into account the current font of the context.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[The `TextMetrics` interface represents the dimension of a text in the canvas, as created by the `CanvasRenderingContext2D.measureText()` method.

	Documentation [TextMetrics](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics>]]></haxe_doc>
		<meta><m n=":native"><e>"TextMetrics"</e></m></meta>
	</class>
	<class path="js.html.TextTrack" params="" file="/usr/local/lib/haxe/std/js/html/TextTrack.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<kind public="1" set="null">
			<x path="js.html.TextTrackKind"/>
			<haxe_doc>Returns a `DOMString` indicating what kind of text track the `TextTrack` describes. The value must be one of those in the TextTrackKind enum.</haxe_doc>
		</kind>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>A human-readable `DOMString` which contains the text track's label, if one is present; otherwise, this is an empty string (`""`), in which case a custom label may need to be generated by your code using other attributes of the track, if the track's label needs to be exposed to the user.</haxe_doc>
		</label>
		<language public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which specifies the text language in which the text track's contents is written. The value must adhere to the format specified in the Tags for Identifying Languages (BCP 47) document from the IETF, just like the HTML `lang` attribute. For example, this can be `"en-US"` for United States English or `"pt-BR"` for Brazilian Portuguese.</haxe_doc>
		</language>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` which identifies the track, if it has one. If it doesn't have an ID, then this value is an empty string (`""`). If the `TextTrack` is associated with a `track` element, then the track's ID matches the element's ID.</haxe_doc>
		</id>
		<inBandMetadataTrackDispatchType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` which indicates the track's in-band metadata track dispatch type. needs details</haxe_doc>
		</inBandMetadataTrackDispatchType>
		<mode public="1">
			<x path="js.html.TextTrackMode"/>
			<haxe_doc>A `DOMString` specifying the track's current mode. Changing this property's value changes the track's current mode to match. Permitted values are listed under Text track mode constants.</haxe_doc>
		</mode>
		<cues public="1" set="null">
			<c path="js.html.TextTrackCueList"/>
			<haxe_doc>A `TextTrackCueList` which contains all of the track's cues.</haxe_doc>
		</cues>
		<activeCues public="1" set="null">
			<c path="js.html.TextTrackCueList"/>
			<haxe_doc>A `TextTrackCueList` object listing the currently active set of text track cues. Track cues are active if the current playback position of the media is between the cues' start and end times.</haxe_doc>
		</activeCues>
		<oncuechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A `EventHandler` specifying a function to be called when a `cuechange` event occurs. Handling these events lets you know when cues are entered and exited. A given text cue appears when the cue is entered and disappears when the cue is exited.</haxe_doc>
		</oncuechange>
		<addCue public="1" set="method"><f a="cue">
	<c path="js.html.VTTCue"/>
	<x path="Void"/>
</f></addCue>
		<removeCue public="1" set="method">
			<f a="cue">
				<c path="js.html.VTTCue"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeCue>
		<haxe_doc><![CDATA[This interface also inherits properties from `EventTarget`.

	Documentation [TextTrack](https://developer.mozilla.org/en-US/docs/Web/API/TextTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"TextTrack"</e></m></meta>
	</class>
	<class path="js.html.TextTrackCue" params="" file="/usr/local/lib/haxe/std/js/html/TextTrackCue.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<track public="1" set="null"><c path="js.html.TextTrack"/></track>
		<id public="1"><c path="String"/></id>
		<startTime public="1"><x path="Float"/></startTime>
		<endTime public="1"><x path="Float"/></endTime>
		<pauseOnExit public="1"><x path="Bool"/></pauseOnExit>
		<onenter public="1"><x path="haxe.Function"/></onenter>
		<onexit public="1"><x path="haxe.Function"/></onexit>
		<meta><m n=":native"><e>"TextTrackCue"</e></m></meta>
	</class>
	<class path="js.html.TextTrackCueList" params="" file="/usr/local/lib/haxe/std/js/html/TextTrackCueList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<getCueById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.VTTCue"/>
</f></getCueById>
		<meta><m n=":native"><e>"TextTrackCueList"</e></m></meta>
	</class>
	<abstract path="js.html.TextTrackKind" params="" file="/usr/local/lib/haxe/std/js/html/TextTrackKind.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._TextTrackKind.TextTrackKind_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/TextTrackKind.hx" private="1" module="js.html.TextTrackKind" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.TextTrackList" params="" file="/usr/local/lib/haxe/std/js/html/TextTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.TextTrack"/>
</f></getTrackById>
		<meta><m n=":native"><e>"TextTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.TextTrackMode" params="" file="/usr/local/lib/haxe/std/js/html/TextTrackMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._TextTrackMode.TextTrackMode_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/TextTrackMode.hx" private="1" module="js.html.TextTrackMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.TimeRanges" params="" file="/usr/local/lib/haxe/std/js/html/TimeRanges.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` representing the number of time ranges represented by the time range object.</haxe_doc>
		</length>
		<start public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the time for the start of the range with the specified index.
		@throws DOMError</haxe_doc>
		</start>
		<end public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the time for the end of the specified range.
		@throws DOMError</haxe_doc>
		</end>
		<haxe_doc><![CDATA[The `TimeRanges` interface is used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the `audio` and `video` elements.

	Documentation [TimeRanges](https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges>]]></haxe_doc>
		<meta><m n=":native"><e>"TimeRanges"</e></m></meta>
	</class>
	<class path="js.html.TitleElement" params="" file="/usr/local/lib/haxe/std/js/html/TitleElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the text of the document's title.</haxe_doc>
		</text>
		<haxe_doc><![CDATA[The `HTMLTitleElement` interface contains the title for a document. This element inherits all of the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLTitleElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTitleElement"</e></m></meta>
	</class>
	<class path="js.html.Touch" params="" file="/usr/local/lib/haxe/std/js/html/Touch.hx" extern="1">
		<identifier public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a unique identifier for this `Touch` object. A given touch point (say, by a finger) will have the same identifier for the duration of its movement around the surface. This lets you ensure that you're tracking the same touch all the time.</haxe_doc>
		</identifier>
		<target public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>Returns the `Element` on which the touch point started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document.</haxe_doc>
		</target>
		<screenX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the screen.</haxe_doc>
		</screenX>
		<screenY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top edge of the screen.</haxe_doc>
		</screenY>
		<clientX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the browser viewport, not including any scroll offset.</haxe_doc>
		</clientX>
		<clientY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top edge of the browser viewport, not including any scroll offset.</haxe_doc>
		</clientY>
		<pageX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X coordinate of the touch point relative to the left edge of the document. Unlike `clientX`, this value includes the horizontal scroll offset, if any.</haxe_doc>
		</pageX>
		<pageY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y coordinate of the touch point relative to the top of the document. Unlike `clientY,` this value includes the vertical scroll offset, if any.</haxe_doc>
		</pageY>
		<radiusX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the X radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as `screenX`.</haxe_doc>
		</radiusX>
		<radiusY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the Y radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as `screenY`.</haxe_doc>
		</radiusY>
		<rotationAngle public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the angle (in degrees) that the ellipse described by radiusX and radiusY must be rotated, clockwise, to most accurately cover the area of contact between the user and the surface.</haxe_doc>
		</rotationAngle>
		<force public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the amount of pressure being applied to the surface by the user, as a `float` between `0.0` (no pressure) and `1.0` (maximum pressure).</haxe_doc>
		</force>
		<new public="1" set="method">
			<f a="touchInitDict">
				<t path="js.html.TouchInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Touch` interface represents a single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.

	Documentation [Touch](https://developer.mozilla.org/en-US/docs/Web/API/Touch) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Touch$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Touch>]]></haxe_doc>
		<meta><m n=":native"><e>"Touch"</e></m></meta>
	</class>
	<class path="js.html.TouchEvent" params="" file="/usr/local/lib/haxe/std/js/html/TouchEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<touches public="1" set="null">
			<c path="js.html.TouchList"/>
			<haxe_doc>A `TouchList` of all the `Touch` objects representing all current points of contact with the surface, regardless of target or changed status.</haxe_doc>
		</touches>
		<targetTouches public="1" set="null">
			<c path="js.html.TouchList"/>
			<haxe_doc>A `TouchList` of all the `Touch` objects that are both currently in contact with the touch surface and were also started on the same element that is the target of the event.</haxe_doc>
		</targetTouches>
		<changedTouches public="1" set="null">
			<c path="js.html.TouchList"/>
			<haxe_doc>A `TouchList` of all the `Touch` objects representing individual points of contact whose states changed between the previous touch event and this one.</haxe_doc>
		</changedTouches>
		<altKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the alt key was down when the touch event was fired.</haxe_doc>
		</altKey>
		<metaKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the meta key was down when the touch event was fired.</haxe_doc>
		</metaKey>
		<ctrlKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the control key was down when the touch event was fired.</haxe_doc>
		</ctrlKey>
		<shiftKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the shift key was down when the touch event was fired.</haxe_doc>
		</shiftKey>
		<initTouchEvent public="1" set="method">
			<f a="type:?canBubble:?cancelable:?view:?detail:?ctrlKey:?altKey:?shiftKey:?metaKey:?touches:?targetTouches:?changedTouches" v=":false:false::0:false:false:false:false:::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.TouchList"/>
				<c path="js.html.TouchList"/>
				<c path="js.html.TouchList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ metaKey : false, shiftKey : false, altKey : false, ctrlKey : false, detail : 0, cancelable : false, canBubble : false }</e></m></meta>
		</initTouchEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.TouchEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `TouchEvent` interface represents an event sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.

	Documentation [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"TouchEvent"</e></m></meta>
	</class>
	<typedef path="js.html.TouchEventInit" params="" file="/usr/local/lib/haxe/std/js/html/TouchEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<touches>
		<x path="Null"><c path="Array"><c path="js.html.Touch"/></c></x>
		<meta><m n=":optional"/></meta>
	</touches>
	<targetTouches>
		<x path="Null"><c path="Array"><c path="js.html.Touch"/></c></x>
		<meta><m n=":optional"/></meta>
	</targetTouches>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<changedTouches>
		<x path="Null"><c path="Array"><c path="js.html.Touch"/></c></x>
		<meta><m n=":optional"/></meta>
	</changedTouches>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<typedef path="js.html.TouchInit" params="" file="/usr/local/lib/haxe/std/js/html/TouchInit.hx"><a>
	<target><c path="js.html.EventTarget"/></target>
	<screenY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenX>
	<rotationAngle>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</rotationAngle>
	<radiusY>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</radiusY>
	<radiusX>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</radiusX>
	<pageY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</pageY>
	<pageX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</pageX>
	<identifier><x path="Int"/></identifier>
	<force>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</force>
	<clientY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientX>
</a></typedef>
	<class path="js.html.TouchList" params="" file="/usr/local/lib/haxe/std/js/html/TouchList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of `Touch` objects in the `TouchList`.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Touch"/>
			</f>
			<haxe_doc>Returns the `Touch` object at the specified index in the list.</haxe_doc>
		</item>
		<haxe_doc><![CDATA[The `TouchList` interface represents a list of contact points with a touch surface; for example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding `TouchList` object would have one `Touch` object for each finger, for a total of three entries.

	Documentation [TouchList](https://developer.mozilla.org/en-US/docs/Web/API/TouchList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TouchList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TouchList>]]></haxe_doc>
		<meta><m n=":native"><e>"TouchList"</e></m></meta>
	</class>
	<class path="js.html.TrackElement" params="" file="/usr/local/lib/haxe/std/js/html/TrackElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<NONE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<LOADING public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LOADING>
		<LOADED public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LOADED>
		<ERROR public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</ERROR>
		<kind public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `kind` HTML attribute, indicating how the text track is meant to be used. Possible values are: subtitles, captions, descriptions, chapters, metadata.</haxe_doc>
		</kind>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, indicating the address of the text track data.</haxe_doc>
		</src>
		<srclang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `srclang` HTML attribute, indicating the language of the text track data.</haxe_doc>
		</srclang>
		<label public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `label` HTML attribute, indicating a user-readable title for the track.</haxe_doc>
		</label>
		<default_ public="1">
			<x path="Bool"/>
			<meta><m n=":native"><e>"default"</e></m></meta>
			<haxe_doc>Is a `Boolean` reflects the `default` HTML attribute, indicating that the track is to be enabled if the user's preferences do not indicate that another track would be more appropriate.</haxe_doc>
		</default_>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns  an <code>unsigned short</code> that show the readiness state of the track:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>NONE</code></td>
		    <td>0</td>
		    <td>Indicates that the text track's cues have not been obtained.</td>
		   </tr>
		   <tr>
		    <td><code>LOADING</code></td>
		    <td>1</td>
		    <td>Indicates that the text track is loading and there have been no fatal errors encountered so far. Further cues might still be added to the track by the parser.</td>
		   </tr>
		   <tr>
		    <td><code>LOADED</code></td>
		    <td>2</td>
		    <td>Indicates that the text track has been loaded with no fatal errors.</td>
		   </tr>
		   <tr>
		    <td><code>ERROR</code></td>
		    <td>3</td>
		    <td>Indicates that the text track was enabled, but when the user agent attempted to obtain it, this failed in some way. Some or all of the cues are likely missing and will not be obtained.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</readyState>
		<track public="1" set="null">
			<c path="js.html.TextTrack"/>
			<haxe_doc>Returns `TextTrack` is the track element's text track data.</haxe_doc>
		</track>
		<haxe_doc><![CDATA[The `HTMLTrackElement`

	Documentation [HTMLTrackElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTrackElement"</e></m></meta>
	</class>
	<class path="js.html.TreeWalker" params="" file="/usr/local/lib/haxe/std/js/html/TreeWalker.hx" extern="1">
		<root public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the root node as specified when the `TreeWalker` was created.</haxe_doc>
		</root>
		<whatToShow public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> being a bitmask made of constants describing the types of <code>Node</code> that must be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Numerical value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ALL</code></td>
		    <td><code>-1</code> (that is the max value of <code>unsigned long</code>)</td>
		    <td>Shows all nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ATTRIBUTE</code> {{deprecated_inline}}</td>
		    <td><code>2</code></td>
		    <td>Shows attribute <code>Attr</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with an <code>Attr</code> node as its root. In this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_CDATA_SECTION</code> {{deprecated_inline}}</td>
		    <td><code>8</code></td>
		    <td>Shows <code>CDATASection</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_COMMENT</code></td>
		    <td><code>128</code></td>
		    <td>Shows <code>Comment</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT</code></td>
		    <td><code>256</code></td>
		    <td>Shows <code>Document</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT_FRAGMENT</code></td>
		    <td><code>1024</code></td>
		    <td>Shows <code>DocumentFragment</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT_TYPE</code></td>
		    <td><code>512</code></td>
		    <td>Shows <code>DocumentType</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ELEMENT</code></td>
		    <td><code>1</code></td>
		    <td>Shows <code>Element</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ENTITY</code> {{deprecated_inline}}</td>
		    <td><code>32</code></td>
		    <td>Shows <code>Entity</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with an <code>Entity</code> node as its root; in this case, it means that the <code>Entity</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ENTITY_REFERENCE</code> {{deprecated_inline}}</td>
		    <td><code>16</code></td>
		    <td>Shows <code>EntityReference</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_NOTATION</code> {{deprecated_inline}}</td>
		    <td><code>2048</code></td>
		    <td>Shows <code>Notation</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with a <code>Notation</code> node as its root; in this case, it means that the <code>Notation</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_PROCESSING_INSTRUCTION</code></td>
		    <td><code>64</code></td>
		    <td>Shows <code>ProcessingInstruction</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_TEXT</code></td>
		    <td><code>4</code></td>
		    <td>Shows <code>Text</code> nodes.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</whatToShow>
		<filter public="1" set="null">
			<x path="haxe.extern.EitherType">
				<f a="">
					<c path="js.html.Node"/>
					<x path="Int"/>
				</f>
				<c path="js.html.NodeFilter"/>
			</x>
			<haxe_doc>Returns a `NodeFilter` used to select the relevant nodes.</haxe_doc>
		</filter>
		<currentNode public="1">
			<c path="js.html.Node"/>
			<haxe_doc>Is the `Node` on which the `TreeWalker` is currently pointing at.</haxe_doc>
		</currentNode>
		<parentNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the first visible ancestor node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</parentNode>
		<firstChild public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</firstChild>
		<lastChild public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, `null` is returned and the current node is not changed.
		@throws DOMError</haxe_doc>
		</lastChild>
		<previousSibling public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to its previous sibling, if any, and returns the found sibling. If there is no such node, return `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</previousSibling>
		<nextSibling public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to its next sibling, if any, and returns the found sibling. If there is no such node, `null` is returned and the current node is not changed.
		@throws DOMError</haxe_doc>
		</nextSibling>
		<previousNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, or if it is before that the root node defined at the object construction, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</previousNode>
		<nextNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>Moves the current `Node` to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns `null` and the current node is not changed.
		@throws DOMError</haxe_doc>
		</nextNode>
		<haxe_doc><![CDATA[The `TreeWalker` object represents the nodes of a document subtree and a position within them.

	Documentation [TreeWalker](https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker>]]></haxe_doc>
		<meta><m n=":native"><e>"TreeWalker"</e></m></meta>
	</class>
	<typedef path="js.html.UIEventInit" params="" file="/usr/local/lib/haxe/std/js/html/UIEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.UListElement" params="" file="/usr/local/lib/haxe/std/js/html/UListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced. This property reflects the `compact` attribute only, it doesn't consider the `line-height` CSS property used for that behavior in modern pages.</haxe_doc>
		</compact>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` value reflecting the `type` and defining the kind of marker to be used to display. The values are browser dependent and have never been standardized.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `HTMLUListElement` interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating unordered list elements.

	Documentation [HTMLUListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLUListElement"</e></m></meta>
	</class>
	<class path="js.html.URLSearchParams" params="" file="/usr/local/lib/haxe/std/js/html/URLSearchParams.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a specified key/value pair as a new search parameter.</haxe_doc>
		</append>
		<delete public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the given search parameter, and its associated value, from the list of all search parameters.</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the first value associated to the given search parameter.</haxe_doc>
		</get>
		<getAll public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns all the values associated with a given search parameter.</haxe_doc>
		</getAll>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if such a search parameter exists.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.</haxe_doc>
		</set>
		<sort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sorts all key/value pairs, if any, by their keys.
		@throws DOMError</haxe_doc>
		</sort>
		<entries public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all keys of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>Returns an `Iteration_protocols` allowing to go through all values of the key/value pairs contained in this object.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?init">
				<c path="Array"><c path="Array"><c path="String"/></c></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="?init">
						<x path="haxe.DynamicAccess"><c path="String"/></x>
						<c path="js.html.URLSearchParams"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="?init" v="&quot;&quot;">
						<c path="String"/>
						<c path="js.html.URLSearchParams"/>
					</f>
					<meta><m n=":value"><e>{ init : "" }</e></m></meta>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `URLSearchParams` interface defines utility methods to work with the query string of a URL.

	Documentation [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams>]]></haxe_doc>
		<meta><m n=":native"><e>"URLSearchParams"</e></m></meta>
	</class>
	<typedef path="js.html.URLSearchParamsIterator" params="" file="/usr/local/lib/haxe/std/js/html/URLSearchParamsIterator.hx"><a><next set="method">
	<f a=""><d/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</next></a></typedef>
	<class path="js.html.VTTCue" params="" file="/usr/local/lib/haxe/std/js/html/VTTCue.hx" extern="1">
		<extends path="js.html.TextTrackCue"/>
		<region public="1"><c path="js.html.VTTRegion"/></region>
		<vertical public="1"><x path="js.html.DirectionSetting"/></vertical>
		<snapToLines public="1"><x path="Bool"/></snapToLines>
		<line public="1"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<x path="js.html.AutoKeyword"/>
</x></line>
		<lineAlign public="1"><x path="js.html.LineAlignSetting"/></lineAlign>
		<position public="1"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<x path="js.html.AutoKeyword"/>
</x></position>
		<positionAlign public="1"><x path="js.html.PositionAlignSetting"/></positionAlign>
		<size public="1"><x path="Float"/></size>
		<align public="1"><x path="js.html.AlignSetting"/></align>
		<text public="1"><c path="String"/></text>
		<getCueAsHTML public="1" set="method"><f a=""><c path="js.html.DocumentFragment"/></f></getCueAsHTML>
		<new public="1" set="method">
			<f a="startTime:endTime:text">
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[VTTCues represent a cue in a text track.

	Documentation [VTTCue](https://developer.mozilla.org/en-US/docs/Web/API/VTTCue) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/VTTCue$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/VTTCue>]]></haxe_doc>
		<meta><m n=":native"><e>"VTTCue"</e></m></meta>
	</class>
	<class path="js.html.VTTRegion" params="" file="/usr/local/lib/haxe/std/js/html/VTTRegion.hx" extern="1">
		<id public="1"><c path="String"/></id>
		<width public="1"><x path="Float"/></width>
		<lines public="1"><x path="Int"/></lines>
		<regionAnchorX public="1"><x path="Float"/></regionAnchorX>
		<regionAnchorY public="1"><x path="Float"/></regionAnchorY>
		<viewportAnchorX public="1"><x path="Float"/></viewportAnchorX>
		<viewportAnchorY public="1"><x path="Float"/></viewportAnchorY>
		<scroll public="1"><x path="js.html.ScrollSetting"/></scroll>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"VTTRegion"</e></m></meta>
	</class>
	<class path="js.html.ValidityState" params="" file="/usr/local/lib/haxe/std/js/html/ValidityState.hx" extern="1">
		<valueMissing public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element has a `required` attribute, but no value.</haxe_doc>
		</valueMissing>
		<typeMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is not in the required syntax (when `type` is `email` or `url`).</haxe_doc>
		</typeMismatch>
		<patternMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value does not match the specified `pattern`.</haxe_doc>
		</patternMismatch>
		<tooLong public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value exceeds the specified `maxlength` for `HTMLInputElement` or `HTMLTextAreaElement` objects. Note: This will never be `true` in Gecko, because elements' values are prevented from being longer than `maxlength`.</haxe_doc>
		</tooLong>
		<tooShort public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value fails to meet the specified `minlength` for `HTMLInputElement` or `HTMLTextAreaElement` objects.</haxe_doc>
		</tooShort>
		<rangeUnderflow public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is less than the minimum specified by the `min` attribute.</haxe_doc>
		</rangeUnderflow>
		<rangeOverflow public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is greater than the maximum specified by the `max` attribute.</haxe_doc>
		</rangeOverflow>
		<stepMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value does not fit the rules determined by the `step` attribute (that is, it's not evenly divisible by the step value).</haxe_doc>
		</stepMismatch>
		<badInput public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the user has provided input that the browser is unable to convert.</haxe_doc>
		</badInput>
		<customError public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element's custom validity message has been set to a non-empty string by calling the element's `setCustomValidity()` method.</haxe_doc>
		</customError>
		<valid public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element meets all constraint validations, and is therefore considered to be valid.</haxe_doc>
		</valid>
		<haxe_doc><![CDATA[The `ValidityState` interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.

	Documentation [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ValidityState>]]></haxe_doc>
		<meta><m n=":native"><e>"ValidityState"</e></m></meta>
	</class>
	<class path="js.html.VideoElement" params="" file="/usr/local/lib/haxe/std/js/html/VideoElement.hx" extern="1">
		<extends path="js.html.MediaElement"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, which specifies the width of the display area, in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, which specifies the height of the display area, in CSS pixels.</haxe_doc>
		</height>
		<videoWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` containing the intrinsic width of the resource in CSS pixels, taking into account the dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If the element's ready state is `HAVE_NOTHING`, the value is `0`.</haxe_doc>
		</videoWidth>
		<videoHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` containing the intrinsic height of the resource in CSS pixels, taking into account the dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If the element's ready state is `HAVE_NOTHING`, the value is `0`.</haxe_doc>
		</videoHeight>
		<poster public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `poster` HTML attribute, which specifies an image to show while no video data is available.</haxe_doc>
		</poster>
		<getVideoPlaybackQuality public="1" set="method">
			<f a=""><c path="js.html.VideoPlaybackQuality"/></f>
			<haxe_doc>Returns a `VideoPlaybackQuality` objects that contains the current playback metrics.</haxe_doc>
		</getVideoPlaybackQuality>
		<haxe_doc><![CDATA[The `HTMLVideoElement` interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of `HTMLMediaElement` and `HTMLElement`.

	Documentation [HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLVideoElement"</e></m></meta>
	</class>
	<class path="js.html.VideoPlaybackQuality" params="" file="/usr/local/lib/haxe/std/js/html/VideoPlaybackQuality.hx" extern="1">
		<creationTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` containing the time in miliseconds since the start of the navigation and the creation of the object.</haxe_doc>
		</creationTime>
		<totalVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames created and dropped since the creation of the associated `HTMLVideoElement`.</haxe_doc>
		</totalVideoFrames>
		<droppedVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames dropped since the creation of the associated `HTMLVideoElement`.</haxe_doc>
		</droppedVideoFrames>
		<corruptedVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames corrupted since the creation of the associated `HTMLVideoElement`. A corrupted frame may be created or dropped.</haxe_doc>
		</corruptedVideoFrames>
		<haxe_doc><![CDATA[The `VideoPlaybackQuality` interface represents the set of metrics describing the playback quality of a video.

	Documentation [VideoPlaybackQuality](https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality>]]></haxe_doc>
		<meta><m n=":native"><e>"VideoPlaybackQuality"</e></m></meta>
	</class>
	<class path="js.html.VideoStreamTrack" params="" file="/usr/local/lib/haxe/std/js/html/VideoStreamTrack.hx" extern="1">
		<extends path="js.html.MediaStreamTrack"/>
		<meta><m n=":native"><e>"VideoStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.VideoTrack" params="" file="/usr/local/lib/haxe/std/js/html/VideoTrack.hx" extern="1">
		<id public="1" set="null"><c path="String"/></id>
		<kind public="1" set="null"><c path="String"/></kind>
		<label public="1" set="null"><c path="String"/></label>
		<language public="1" set="null"><c path="String"/></language>
		<selected public="1"><x path="Bool"/></selected>
		<meta><m n=":native"><e>"VideoTrack"</e></m></meta>
	</class>
	<class path="js.html.VideoTrackList" params="" file="/usr/local/lib/haxe/std/js/html/VideoTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<selectedIndex public="1" set="null"><x path="Int"/></selectedIndex>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.VideoTrack"/>
</f></getTrackById>
		<meta><m n=":native"><e>"VideoTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.VisibilityState" params="" file="/usr/local/lib/haxe/std/js/html/VisibilityState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._VisibilityState.VisibilityState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/VisibilityState.hx" private="1" module="js.html.VisibilityState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.WheelEvent" params="" file="/usr/local/lib/haxe/std/js/html/WheelEvent.hx" extern="1">
		<extends path="js.html.MouseEvent"/>
		<DOM_DELTA_PIXEL public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</DOM_DELTA_PIXEL>
		<DOM_DELTA_LINE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DOM_DELTA_LINE>
		<DOM_DELTA_PAGE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOM_DELTA_PAGE>
		<deltaX public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the horizontal scroll amount.</haxe_doc>
		</deltaX>
		<deltaY public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the vertical scroll amount.</haxe_doc>
		</deltaY>
		<deltaZ public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the scroll amount for the z-axis.</haxe_doc>
		</deltaZ>
		<deltaMode public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> representing the unit of the delta values scroll amount. Permitted values are:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>DOM_DELTA_PIXEL</code></td>
		    <td><code>0x00</code></td>
		    <td>The delta values are specified in pixels.</td>
		   </tr>
		   <tr>
		    <td><code>DOM_DELTA_LINE</code></td>
		    <td><code>0x01</code></td>
		    <td>The delta values are specified in lines.</td>
		   </tr>
		   <tr>
		    <td><code>DOM_DELTA_PAGE</code></td>
		    <td><code>0x02</code></td>
		    <td>The delta values are specified in pages.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</deltaMode>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<x path="Null"><t path="js.html.WheelEventInit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `WheelEvent` interface represents events that occur due to the user moving a mouse wheel or similar input device.

	Documentation [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"WheelEvent"</e></m></meta>
	</class>
	<typedef path="js.html.WheelEventInit" params="" file="/usr/local/lib/haxe/std/js/html/WheelEventInit.hx"><a>
	<view>
		<x path="Null"><c path="js.html.Window"/></x>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<screenY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</screenX>
	<relatedTarget>
		<x path="Null"><c path="js.html.EventTarget"/></x>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<movementY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementY>
	<movementX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</movementX>
	<modifierSymbolLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</detail>
	<deltaZ>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</deltaZ>
	<deltaY>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</deltaY>
	<deltaX>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</deltaX>
	<deltaMode>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</deltaMode>
	<ctrlKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<composed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</composed>
	<clientY>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</clientX>
	<cancelable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<buttons>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</buttons>
	<button>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</button>
	<bubbles>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.Window" params="" file="/usr/local/lib/haxe/std/js/html/Window.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<window public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the current window.</haxe_doc>
		</window>
		<self public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns an object reference to the window object itself.</haxe_doc>
		</self>
		<document public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a reference to the document that the window contains.</haxe_doc>
		</document>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the name of the window.</haxe_doc>
		</name>
		<location public="1" set="null">
			<c path="js.html.Location"/>
			<haxe_doc>Gets/sets the location, or current URL, of the window object.</haxe_doc>
		</location>
		<history public="1" set="null">
			<c path="js.html.History"/>
			<haxe_doc>Returns a reference to the history object.</haxe_doc>
		</history>
		<locationbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the locationbar object, whose visibility can be toggled in the window.</haxe_doc>
		</locationbar>
		<menubar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the menubar object, whose visibility can be toggled in the window.</haxe_doc>
		</menubar>
		<personalbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the personalbar object, whose visibility can be toggled in the window.</haxe_doc>
		</personalbar>
		<scrollbars public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the scrollbars object, whose visibility can be toggled in the window.</haxe_doc>
		</scrollbars>
		<statusbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the statusbar object, whose visibility can be toggled in the window.</haxe_doc>
		</statusbar>
		<toolbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the toolbar object, whose visibility can be toggled in the window.</haxe_doc>
		</toolbar>
		<status public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the text in the statusbar at the bottom of the browser.</haxe_doc>
		</status>
		<closed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>This property indicates whether the current window is closed or not.</haxe_doc>
		</closed>
		<event public="1" set="null">
			<d/>
			<haxe_doc>Returns the current event, which is the event currently being handled by the JavaScript code's context, or `undefined` if no event is currently being handled. The `Event` object passed directly to event handlers should be used instead whenever possible.</haxe_doc>
		</event>
		<frames public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns an array of the subframes in the current window.</haxe_doc>
		</frames>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of frames in the window. See also `window.frames`.</haxe_doc>
		</length>
		<top public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the topmost window in the window hierarchy. This property is read only.</haxe_doc>
		</top>
		<opener public="1">
			<d/>
			<haxe_doc>Returns a reference to the window that opened this current window.</haxe_doc>
		</opener>
		<parent public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the parent of the current window or subframe.</haxe_doc>
		</parent>
		<frameElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the element in which the window is embedded, or null if the window is not embedded.</haxe_doc>
		</frameElement>
		<navigator public="1" set="null">
			<c path="js.html.Navigator"/>
			<haxe_doc>Returns a reference to the navigator object.</haxe_doc>
		</navigator>
		<console public="1" set="null">
			<c path="js.html.ConsoleInstance"/>
			<haxe_doc>Returns a reference to the console object which provides access to the browser's debugging console.</haxe_doc>
		</console>
		<screen public="1" set="null">
			<c path="js.html.Screen"/>
			<haxe_doc>Returns a reference to the screen object associated with the window.</haxe_doc>
		</screen>
		<innerWidth public="1">
			<d/>
			<haxe_doc>Gets the width of the content area of the browser window including, if rendered, the vertical scrollbar.</haxe_doc>
		</innerWidth>
		<innerHeight public="1">
			<d/>
			<haxe_doc>Gets the height of the content area of the browser window including, if rendered, the horizontal scrollbar.</haxe_doc>
		</innerHeight>
		<scrollX public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the number of pixels that the document has already been scrolled horizontally.</haxe_doc>
		</scrollX>
		<pageXOffset public="1" set="null">
			<x path="Float"/>
			<haxe_doc>An alias for `window.scrollX`.</haxe_doc>
		</pageXOffset>
		<scrollY public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the number of pixels that the document has already been scrolled vertically.</haxe_doc>
		</scrollY>
		<pageYOffset public="1" set="null">
			<x path="Float"/>
			<haxe_doc>An alias for `window.scrollY`</haxe_doc>
		</pageYOffset>
		<screenX public="1">
			<d/>
			<haxe_doc>Returns the horizontal distance of the left border of the user's browser from the left side of the screen.</haxe_doc>
		</screenX>
		<screenY public="1">
			<d/>
			<haxe_doc>Returns the vertical distance of the top border of the user's browser from the top side of the screen.</haxe_doc>
		</screenY>
		<outerWidth public="1">
			<d/>
			<haxe_doc>Gets the width of the outside of the browser window.</haxe_doc>
		</outerWidth>
		<outerHeight public="1">
			<d/>
			<haxe_doc>Gets the height of the outside of the browser window.</haxe_doc>
		</outerHeight>
		<performance public="1" set="null">
			<c path="js.html.Performance"/>
			<haxe_doc>Returns a `Performance` object, which includes the `Performance.timing` and `Performance.navigation` attributes, each of which is an object providing performance-related data. See also Using Navigation Timing for additional information and examples.</haxe_doc>
		</performance>
		<devicePixelRatio public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the ratio between physical pixels and device independent pixels in the current display.</haxe_doc>
		</devicePixelRatio>
		<scrollMaxX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The maximum offset that the window can be scrolled to horizontally, that is the document width minus the viewport width.</haxe_doc>
		</scrollMaxX>
		<scrollMaxY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The maximum offset that the window can be scrolled to vertically (i.e., the document height minus the viewport height).</haxe_doc>
		</scrollMaxY>
		<fullScreen public="1">
			<x path="Bool"/>
			<haxe_doc>This property indicates whether the window is displayed in full screen or not.</haxe_doc>
		</fullScreen>
		<ondevicemotion public="1"><x path="haxe.Function"/></ondevicemotion>
		<ondeviceorientation public="1"><x path="haxe.Function"/></ondeviceorientation>
		<onabsolutedeviceorientation public="1"><x path="haxe.Function"/></onabsolutedeviceorientation>
		<ondeviceproximity public="1"><x path="haxe.Function"/></ondeviceproximity>
		<onuserproximity public="1"><x path="haxe.Function"/></onuserproximity>
		<ondevicelight public="1"><x path="haxe.Function"/></ondevicelight>
		<content public="1" set="null">
			<d/>
			<haxe_doc>Returns a reference to the content element in the current window. Since Firefox 57 (initially Nightly-only), both versions are only available from chrome (privileged) code, and not available to the web anymore.</haxe_doc>
		</content>
		<orientation public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the orientation in degrees (in 90 degree increments) of the viewport relative to the device's natural orientation.</haxe_doc>
		</orientation>
		<onorientationchange public="1"><x path="haxe.Function"/></onorientationchange>
		<crypto public="1" set="null">
			<c path="js.html.Crypto"/>
			<haxe_doc>Returns the browser crypto object.</haxe_doc>
		</crypto>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<onauxclick public="1"><x path="haxe.Function"/></onauxclick>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragexit public="1"><x path="haxe.Function"/></ondragexit>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onwheel public="1"><x path="haxe.Function"/></onwheel>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onselectstart public="1"><x path="haxe.Function"/></onselectstart>
		<ontoggle public="1"><x path="haxe.Function"/></ontoggle>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1"><x path="haxe.Function"/></ongotpointercapture>
		<onlostpointercapture public="1"><x path="haxe.Function"/></onlostpointercapture>
		<onanimationcancel public="1"><x path="haxe.Function"/></onanimationcancel>
		<onanimationend public="1"><x path="haxe.Function"/></onanimationend>
		<onanimationiteration public="1"><x path="haxe.Function"/></onanimationiteration>
		<onanimationstart public="1"><x path="haxe.Function"/></onanimationstart>
		<ontransitioncancel public="1"><x path="haxe.Function"/></ontransitioncancel>
		<ontransitionend public="1"><x path="haxe.Function"/></ontransitionend>
		<ontransitionrun public="1"><x path="haxe.Function"/></ontransitionrun>
		<ontransitionstart public="1"><x path="haxe.Function"/></ontransitionstart>
		<onwebkitanimationend public="1"><x path="haxe.Function"/></onwebkitanimationend>
		<onwebkitanimationiteration public="1"><x path="haxe.Function"/></onwebkitanimationiteration>
		<onwebkitanimationstart public="1"><x path="haxe.Function"/></onwebkitanimationstart>
		<onwebkittransitionend public="1"><x path="haxe.Function"/></onwebkittransitionend>
		<onerror public="1"><f a="::::">
	<x path="haxe.extern.EitherType">
		<c path="js.html.Event"/>
		<c path="String"/>
	</x>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<d/>
</f></onerror>
		<speechSynthesis public="1" set="null">
			<c path="js.html.SpeechSynthesis"/>
			<haxe_doc>Returns a `SpeechSynthesis` object, which is the entry point into using Web Speech API speech synthesis functionality.</haxe_doc>
		</speechSynthesis>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<x path="Null"><c path="String"/></x>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onmessageerror public="1"><x path="haxe.Function"/></onmessageerror>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<localStorage public="1" set="null">
			<c path="js.html.Storage"/>
			<haxe_doc>Returns a reference to the local storage object used to store data that may only be accessed by the origin that created it.</haxe_doc>
		</localStorage>
		<origin public="1" set="null"><c path="String"/></origin>
		<isSecureContext public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether a context is capable of using features that require secure contexts.</haxe_doc>
		</isSecureContext>
		<indexedDB public="1" set="null"><c path="js.html.idb.Factory"/></indexedDB>
		<caches public="1" set="null"><c path="js.html.CacheStorage"/></caches>
		<sessionStorage public="1" set="null">
			<c path="js.html.Storage"/>
			<haxe_doc>Returns a reference to the session storage object used to store data that may only be accessed by the origin that created it.</haxe_doc>
		</sessionStorage>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the current window.
		@throws DOMError</haxe_doc>
		</close>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method stops window loading.
		@throws DOMError</haxe_doc>
		</stop>
		<focus public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets focus on the current window.
		@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sets focus away from the window.
		@throws DOMError</haxe_doc>
		</blur>
		<open public="1" set="method">
			<f a="?url:?target:?features" v="&quot;&quot;:&quot;&quot;:&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Window"/>
			</f>
			<meta><m n=":value"><e>{ features : "", target : "", url : "" }</e></m></meta>
			<haxe_doc>Opens a new window.
		@throws DOMError</haxe_doc>
		</open>
		<alert public="1" set="method">
			<f a="message">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an alert dialog.
		@throws DOMError</haxe_doc>
			<overloads><alert public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>Displays an alert dialog.
		@throws DOMError</haxe_doc>
</alert></overloads>
		</alert>
		<confirm public="1" set="method">
			<f a="?message" v="&quot;&quot;">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
			<haxe_doc>Displays a dialog with a message that the user needs to respond to.
		@throws DOMError</haxe_doc>
		</confirm>
		<prompt public="1" set="method">
			<f a="?message:?default_" v="&quot;&quot;:&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ default_ : "", message : "" }</e></m></meta>
			<haxe_doc>Returns the text entered by the user in a prompt dialog.
		@throws DOMError</haxe_doc>
		</prompt>
		<print public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Opens the Print Dialog to print the current document.
		@throws DOMError</haxe_doc>
		</print>
		<postMessage public="1" set="method">
			<f a="message:targetOrigin:?transfer">
				<d/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Provides a secure means for one window to send a string of data to another window, which need not be within the same domain as the first.
		@throws DOMError</haxe_doc>
		</postMessage>
		<captureEvents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Registers the window to capture all events of the specified type.</haxe_doc>
		</captureEvents>
		<releaseEvents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the window from trapping events of a specific type.</haxe_doc>
		</releaseEvents>
		<getSelection public="1" set="method">
			<f a=""><c path="js.html.Selection"/></f>
			<haxe_doc>Returns the selection object representing the selected item(s).
		@throws DOMError</haxe_doc>
		</getSelection>
		<getComputedStyle public="1" set="method">
			<f a="elt:?pseudoElt" v=":&quot;&quot;">
				<c path="js.html.Element"/>
				<c path="String"/>
				<c path="js.html.CSSStyleDeclaration"/>
			</f>
			<meta><m n=":value"><e>{ pseudoElt : "" }</e></m></meta>
			<haxe_doc>Gets computed style for the specified element. Computed style indicates the computed values of all CSS properties of the element.
		@throws DOMError</haxe_doc>
		</getComputedStyle>
		<matchMedia public="1" set="method">
			<f a="query">
				<c path="String"/>
				<c path="js.html.MediaQueryList"/>
			</f>
			<haxe_doc>Returns a `MediaQueryList` object representing the specified media query string.
		@throws DOMError</haxe_doc>
		</matchMedia>
		<moveTo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves the window to the specified coordinates.
		@throws DOMError</haxe_doc>
		</moveTo>
		<moveBy public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Moves the current window by a specified amount.
		@throws DOMError</haxe_doc>
		</moveBy>
		<resizeTo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Dynamically resizes window.
		@throws DOMError</haxe_doc>
		</resizeTo>
		<resizeBy public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Resizes the current window by a certain amount.
		@throws DOMError</haxe_doc>
		</resizeBy>
		<scroll public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the window to a particular place in the document.</haxe_doc>
			<overloads><scroll public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the window to a particular place in the document.</haxe_doc>
</scroll></overloads>
		</scroll>
		<scrollTo public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls to a particular set of coordinates in the document.</haxe_doc>
			<overloads><scrollTo public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls to a particular set of coordinates in the document.</haxe_doc>
</scrollTo></overloads>
		</scrollTo>
		<scrollBy public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.ScrollToOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the document in the window by the given amount.</haxe_doc>
			<overloads><scrollBy public="1" set="method">
	<f a="x:y">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Scrolls the document in the window by the given amount.</haxe_doc>
</scrollBy></overloads>
		</scrollBy>
		<requestAnimationFrame public="1" set="method">
			<f a="callback">
				<f a="">
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Tells the browser that an animation is in progress, requesting that the browser schedule a repaint of the window for the next animation frame.
		@throws DOMError</haxe_doc>
		</requestAnimationFrame>
		<cancelAnimationFrame public="1" set="method">
			<f a="handle">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables you to cancel a callback previously scheduled with `Window.requestAnimationFrame`.
		@throws DOMError</haxe_doc>
		</cancelAnimationFrame>
		<getDefaultComputedStyle public="1" set="method">
			<f a="elt:?pseudoElt" v=":&quot;&quot;">
				<c path="js.html.Element"/>
				<c path="String"/>
				<c path="js.html.CSSStyleDeclaration"/>
			</f>
			<meta><m n=":value"><e>{ pseudoElt : "" }</e></m></meta>
			<haxe_doc>Gets default computed style for the specified element, ignoring author stylesheets.
		@throws DOMError</haxe_doc>
		</getDefaultComputedStyle>
		<scrollByLines public="1" set="method">
			<f a="numLines:?options">
				<x path="Int"/>
				<x path="Null"><t path="js.html.ScrollOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the document by the given number of lines.</haxe_doc>
		</scrollByLines>
		<scrollByPages public="1" set="method">
			<f a="numPages:?options">
				<x path="Int"/>
				<x path="Null"><t path="js.html.ScrollOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the current document by the specified number of pages.</haxe_doc>
		</scrollByPages>
		<sizeToContent public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Sizes the window according to its content.
		@throws DOMError</haxe_doc>
		</sizeToContent>
		<updateCommands public="1" set="method">
			<f a="action:?sel:?reason" v="::0">
				<c path="String"/>
				<c path="js.html.Selection"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ reason : 0 }</e></m></meta>
			<haxe_doc>Updates the state of commands of the current chrome window (UI).</haxe_doc>
		</updateCommands>
		<find public="1" set="method">
			<f a="?str:?caseSensitive:?backwards:?wrapAround:?wholeWord:?searchInFrames:?showDialog" v="&quot;&quot;:false:false:false:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ showDialog : false, searchInFrames : false, wholeWord : false, wrapAround : false, backwards : false, caseSensitive : false, str : "" }</e></m></meta>
			<haxe_doc>Searches for a given string in a window.
		@throws DOMError</haxe_doc>
		</find>
		<dump public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes a message to the console.</haxe_doc>
		</dump>
		<setResizable public="1" set="method">
			<f a="resizable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggles a user's ability to resize a window.</haxe_doc>
		</setResizable>
		<btoa public="1" set="method">
			<f a="btoa">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</btoa>
		<atob public="1" set="method">
			<f a="atob">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</atob>
		<setTimeout public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Float"/>
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setTimeout public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Float"/>
		<t path="haxe.extern.Rest"><d/></t>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setTimeout></overloads>
		</setTimeout>
		<clearTimeout public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearTimeout>
		<setInterval public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Float"/>
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setInterval public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Float"/>
		<t path="haxe.extern.Rest"><d/></t>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setInterval></overloads>
		</setInterval>
		<clearInterval public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearInterval>
		<createImageBitmap public="1" set="method">
			<f a="aImage:aOffset:aLength:aFormat:aLayout">
				<c path="js.html.ImageElement"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.ImageBitmapFormat"/>
				<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
				<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.VideoElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.Blob"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageData"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasRenderingContext2D"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageBitmap"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBufferView"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBuffer"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
			</overloads>
		</createImageBitmap>
		<fetch public="1" set="method">
			<f a="input:?init">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.RequestInit"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<overloads><fetch public="1" set="method"><f a="input:?init">
	<c path="String"/>
	<x path="Null"><t path="js.html.RequestInit"/></x>
	<c path="js.lib.Promise"><c path="js.html.Response"/></c>
</f></fetch></overloads>
		</fetch>
		<haxe_doc><![CDATA[The `Window` interface represents a window containing a DOM document; the `document` property points to the DOM document loaded in that window.

	Documentation [Window](https://developer.mozilla.org/en-US/docs/Web/API/Window) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Window$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Window>]]></haxe_doc>
		<meta><m n=":native"><e>"Window"</e></m></meta>
	</class>
	<class path="js.html.WorkerGlobalScope" params="" file="/usr/local/lib/haxe/std/js/html/WorkerGlobalScope.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<self public="1" set="null">
			<c path="js.html.WorkerGlobalScope"/>
			<haxe_doc>Returns a reference to the `WorkerGlobalScope` itself. Most of the time it is a specific scope like `DedicatedWorkerGlobalScope`,  `SharedWorkerGlobalScope` or `ServiceWorkerGlobalScope`.</haxe_doc>
		</self>
		<location public="1" set="null">
			<c path="js.html.WorkerLocation"/>
			<haxe_doc>Returns the `WorkerLocation` associated with the worker. It is a specific location object, mostly a subset of the `Location` for browsing scopes, but adapted to workers.</haxe_doc>
		</location>
		<navigator public="1" set="null"><c path="js.html.WorkerNavigator"/></navigator>
		<onerror public="1">
			<f a="::::">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Event"/>
					<c path="String"/>
				</x>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `error` event is raised.</haxe_doc>
		</onerror>
		<onoffline public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `offline` event is raised.</haxe_doc>
		</onoffline>
		<ononline public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `online` event is raised.</haxe_doc>
		</ononline>
		<performance public="1" set="null">
			<c path="js.html.Performance"/>
			<haxe_doc>Returns the `Performance` associated with the worker. It is a regular performance object, except that only a subset of its property and methods are available to workers.</haxe_doc>
		</performance>
		<crypto public="1" set="null"><c path="js.html.Crypto"/></crypto>
		<origin public="1" set="null"><c path="String"/></origin>
		<isSecureContext public="1" set="null"><x path="Bool"/></isSecureContext>
		<indexedDB public="1" set="null"><c path="js.html.idb.Factory"/></indexedDB>
		<caches public="1" set="null"><c path="js.html.CacheStorage"/></caches>
		<importScripts public="1" set="method">
			<f a="urls">
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Imports one or more scripts into the worker's scope. You can specify as many as you'd like, separated by commas. For example:` importScripts('foo.js', 'bar.js');`
		@throws DOMError</haxe_doc>
		</importScripts>
		<dump public="1" set="method">
			<f a="?str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows you to write a message to stdout — i.e. in your terminal. This is the same as Firefox's `window.dump`, but for workers.</haxe_doc>
		</dump>
		<btoa public="1" set="method">
			<f a="btoa">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</btoa>
		<atob public="1" set="method">
			<f a="atob">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</atob>
		<setTimeout public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setTimeout public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Int"/>
		<t path="haxe.extern.Rest"><d/></t>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setTimeout></overloads>
		</setTimeout>
		<clearTimeout public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearTimeout>
		<setInterval public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<t path="haxe.extern.Rest"><d/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setInterval public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Int"/>
		<t path="haxe.extern.Rest"><d/></t>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setInterval></overloads>
		</setInterval>
		<clearInterval public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearInterval>
		<createImageBitmap public="1" set="method">
			<f a="aImage:aOffset:aLength:aFormat:aLayout">
				<c path="js.html.ImageElement"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.ImageBitmapFormat"/>
				<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
				<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.VideoElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.Blob"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageData"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.CanvasRenderingContext2D"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageBitmap"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBufferView"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.lib.ArrayBuffer"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.VideoElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.Blob"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageData"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.CanvasRenderingContext2D"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.html.ImageBitmap"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aOffset:aLength:aFormat:aLayout">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="js.html.ImageBitmapFormat"/>
						<c path="Array"><t path="js.html.ChannelPixelLayout"/></c>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage">
						<c path="js.html.ImageElement"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
				<createImageBitmap public="1" set="method">
					<f a="aImage:aSx:aSy:aSw:aSh">
						<c path="js.html.ImageElement"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.Promise"><c path="js.html.ImageBitmap"/></c>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createImageBitmap>
			</overloads>
		</createImageBitmap>
		<fetch public="1" set="method">
			<f a="input:?init">
				<c path="js.html.Request"/>
				<x path="Null"><t path="js.html.RequestInit"/></x>
				<c path="js.lib.Promise"><c path="js.html.Response"/></c>
			</f>
			<overloads><fetch public="1" set="method"><f a="input:?init">
	<c path="String"/>
	<x path="Null"><t path="js.html.RequestInit"/></x>
	<c path="js.lib.Promise"><c path="js.html.Response"/></c>
</f></fetch></overloads>
		</fetch>
		<haxe_doc><![CDATA[The `WorkerGlobalScope` interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by `Window` objects — in this case event handlers, the console or the associated `WorkerNavigator` object. Each `WorkerGlobalScope` has its own event loop.

	Documentation [WorkerGlobalScope](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.WorkerLocation" params="" file="/usr/local/lib/haxe/std/js/html/WorkerLocation.hx" extern="1">
		<href public="1" set="null"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1" set="null"><c path="String"/></protocol>
		<host public="1" set="null"><c path="String"/></host>
		<hostname public="1" set="null"><c path="String"/></hostname>
		<port public="1" set="null"><c path="String"/></port>
		<pathname public="1" set="null"><c path="String"/></pathname>
		<search public="1" set="null"><c path="String"/></search>
		<hash public="1" set="null"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `WorkerLocation` interface defines the absolute location of the script executed by the `Worker`. Such an object is initialized for each worker and is available via the `WorkerGlobalScope.location` property obtained by calling `self.location`.

	Documentation [WorkerLocation](https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerLocation"</e></m></meta>
	</class>
	<class path="js.html.WorkerNavigator" params="" file="/usr/local/lib/haxe/std/js/html/WorkerNavigator.hx" extern="1">
		<hardwareConcurrency public="1" set="null"><x path="Int"/></hardwareConcurrency>
		<appCodeName public="1" set="null"><c path="String"/></appCodeName>
		<appName public="1" set="null"><c path="String"/></appName>
		<appVersion public="1" set="null"><c path="String"/></appVersion>
		<platform public="1" set="null"><c path="String"/></platform>
		<userAgent public="1" set="null"><c path="String"/></userAgent>
		<product public="1" set="null"><c path="String"/></product>
		<language public="1" set="null"><c path="String"/></language>
		<languages public="1" set="null"><c path="Array"><c path="String"/></c></languages>
		<onLine public="1" set="null"><x path="Bool"/></onLine>
		<storage public="1" set="null"><c path="js.html.StorageManager"/></storage>
		<taintEnabled public="1" set="method"><f a=""><x path="Bool"/></f></taintEnabled>
		<haxe_doc><![CDATA[The `WorkerNavigator` interface represents a subset of the `Navigator` interface allowed to be accessed from a `Worker`. Such an object is initialized for each worker and is available via the `WorkerGlobalScope.navigator` property obtained by calling `window.self.navigator`.

	Documentation [WorkerNavigator](https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerNavigator"</e></m></meta>
	</class>
	<class path="js.html.XMLHttpRequestEventTarget" params="" file="/usr/local/lib/haxe/std/js/html/XMLHttpRequestEventTarget.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<onload public="1"><x path="haxe.Function"/></onload>
		<ontimeout public="1"><x path="haxe.Function"/></ontimeout>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<meta><m n=":native"><e>"XMLHttpRequestEventTarget"</e></m></meta>
	</class>
	<class path="js.html.XMLHttpRequest" params="" file="/usr/local/lib/haxe/std/js/html/XMLHttpRequest.hx" extern="1">
		<extends path="js.html.XMLHttpRequestEventTarget"/>
		<UNSENT public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</UNSENT>
		<OPENED public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</OPENED>
		<HEADERS_RECEIVED public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</HEADERS_RECEIVED>
		<LOADING public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LOADING>
		<DONE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</DONE>
		<onreadystatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventHandler` that is called whenever the `readyState` attribute changes.</haxe_doc>
		</onreadystatechange>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned short`, the state of the request.</haxe_doc>
		</readyState>
		<timeout public="1">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long` representing the number of milliseconds a request can take before automatically being terminated.</haxe_doc>
		</timeout>
		<withCredentials public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that indicates whether or not cross-site `Access-Control` requests should be made using credentials such as cookies or authorization headers.</haxe_doc>
		</withCredentials>
		<upload public="1" set="null">
			<c path="js.html.XMLHttpRequestUpload"/>
			<haxe_doc>Is an `XMLHttpRequestUpload`, representing the upload process.</haxe_doc>
		</upload>
		<responseURL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the serialized URL of the response or the empty string if the URL is null.</haxe_doc>
		</responseURL>
		<status public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned short` with the status of the response of the request.</haxe_doc>
		</status>
		<statusText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the response string returned by the HTTP server. Unlike `XMLHTTPRequest.status`, this includes the entire text of the response message ("`200 OK`", for example).</haxe_doc>
		</statusText>
		<responseType public="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<haxe_doc>Is an enumerated value that defines the response type.</haxe_doc>
		</responseType>
		<response public="1" set="null">
			<d/>
			<haxe_doc>Returns an `ArrayBuffer`, `Blob`, `Document`, JavaScript object, or a `DOMString`, depending on the value of `XMLHttpRequest.responseType`. that contains the response entity body.</haxe_doc>
		</response>
		<responseText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` that contains the response to the request as text, or `null` if the request was unsuccessful or has not yet been sent.</haxe_doc>
		</responseText>
		<responseXML public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document` containing the response to the request, or `null` if the request was unsuccessful, has not yet been sent, or cannot be parsed as XML or HTML.</haxe_doc>
		</responseXML>
		<open public="1" set="method">
			<f a="method:url:async:?user:?password">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use `openRequest()` instead.
		@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="method:url">
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use `openRequest()` instead.
		@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<setRequestHeader public="1" set="method">
			<f a="header:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of an HTTP request header. You must call `setRequestHeader()`after `open()`, but before `send()`.
		@throws DOMError</haxe_doc>
		</setRequestHeader>
		<send public="1" set="method">
			<f a="?body">
				<c path="js.html.HTMLDocument"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
			<overloads>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.html.Blob"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.lib.ArrayBuffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.html.FormData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="js.html.URLSearchParams"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="?body">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.
		@throws DOMError</haxe_doc>
				</send>
			</overloads>
		</send>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Aborts the request if it has already been sent.
		@throws DOMError</haxe_doc>
		</abort>
		<getResponseHeader public="1" set="method">
			<f a="header">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the string containing the text of the specified header, or `null` if either the response has not yet been received or the header doesn't exist in the response.
		@throws DOMError</haxe_doc>
		</getResponseHeader>
		<getAllResponseHeaders public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns all the response headers, separated by CRLF, as a string, or `null` if no response has been received.
		@throws DOMError</haxe_doc>
		</getAllResponseHeaders>
		<overrideMimeType public="1" set="method">
			<f a="mime">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Overrides the MIME type returned by the server.
		@throws DOMError</haxe_doc>
		</overrideMimeType>
		<new public="1" set="method">
			<f a="ignored">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?params">
		<d/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[Use `XMLHttpRequest` (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.

	Documentation [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"XMLHttpRequest"</e></m></meta>
	</class>
	<abstract path="js.html.XMLHttpRequestResponseType" params="" file="/usr/local/lib/haxe/std/js/html/XMLHttpRequestResponseType.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `XMLHttpRequestResponseType` type is an enumerated set of strings which are used to specify the type of data contained in the `response` of an `XMLHttpRequest`.

	Documentation [XMLHttpRequestResponseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestResponseType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestResponseType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestResponseType>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._XMLHttpRequestResponseType.XMLHttpRequestResponseType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/XMLHttpRequestResponseType.hx" private="1" module="js.html.XMLHttpRequestResponseType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.XMLHttpRequestUpload" params="" file="/usr/local/lib/haxe/std/js/html/XMLHttpRequestUpload.hx" extern="1">
		<extends path="js.html.XMLHttpRequestEventTarget"/>
		<meta><m n=":native"><e>"XMLHttpRequestUpload"</e></m></meta>
	</class>
	<class path="js.html.XPathExpression" params="" file="/usr/local/lib/haxe/std/js/html/XPathExpression.hx" extern="1">
		<evaluate public="1" set="method">
			<f a="contextNode:?type:?result" v=":0:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<d/>
				<c path="js.html.XPathResult"/>
			</f>
			<meta><m n=":value"><e>{ type : 0 }</e></m></meta>
			<haxe_doc>provide a context node/document, `XPathResult` constant, and `XPathResult` to store the query or null to return a new XPathResult.
		@throws DOMError</haxe_doc>
		</evaluate>
		<haxe_doc><![CDATA[An `XPathExpression` is a compiled XPath query returned from `document.createExpression()`. It has a method `evaluate()` which can be used to execute the compiled XPath.

	Documentation [XPathExpression](https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression>]]></haxe_doc>
		<meta><m n=":native"><e>"XPathExpression"</e></m></meta>
	</class>
	<typedef path="js.html.XPathNSResolver" params="" file="/usr/local/lib/haxe/std/js/html/XPathNSResolver.hx"><a><lookupNamespaceURI set="method"><f a="prefix">
	<c path="String"/>
	<c path="String"/>
</f></lookupNamespaceURI></a></typedef>
	<class path="js.html.XPathResult" params="" file="/usr/local/lib/haxe/std/js/html/XPathResult.hx" extern="1">
		<ANY_TYPE public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ANY_TYPE>
		<NUMBER_TYPE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</NUMBER_TYPE>
		<STRING_TYPE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</STRING_TYPE>
		<BOOLEAN_TYPE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</BOOLEAN_TYPE>
		<UNORDERED_NODE_ITERATOR_TYPE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</UNORDERED_NODE_ITERATOR_TYPE>
		<ORDERED_NODE_ITERATOR_TYPE public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ORDERED_NODE_ITERATOR_TYPE>
		<UNORDERED_NODE_SNAPSHOT_TYPE public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</UNORDERED_NODE_SNAPSHOT_TYPE>
		<ORDERED_NODE_SNAPSHOT_TYPE public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</ORDERED_NODE_SNAPSHOT_TYPE>
		<ANY_UNORDERED_NODE_TYPE public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</ANY_UNORDERED_NODE_TYPE>
		<FIRST_ORDERED_NODE_TYPE public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</FIRST_ORDERED_NODE_TYPE>
		<resultType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>integer (short)</haxe_doc>
		</resultType>
		<numberValue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>float</haxe_doc>
		</numberValue>
		<stringValue public="1" set="null">
			<c path="String"/>
			<haxe_doc>String</haxe_doc>
		</stringValue>
		<booleanValue public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>boolean</haxe_doc>
		</booleanValue>
		<singleNodeValue public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Node</haxe_doc>
		</singleNodeValue>
		<invalidIteratorState public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>boolean</haxe_doc>
		</invalidIteratorState>
		<snapshotLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Integer</haxe_doc>
		</snapshotLength>
		<iterateNext public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>...
		@throws DOMError</haxe_doc>
		</iterateNext>
		<snapshotItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>...
		@throws DOMError</haxe_doc>
		</snapshotItem>
		<haxe_doc><![CDATA[The `XPathResult` interface represents the results generated by evaluating an XPath 1.0 expression within the context of a given node.

	Documentation [XPathResult](https://developer.mozilla.org/en-US/docs/Web/API/XPathResult) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XPathResult$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XPathResult>]]></haxe_doc>
		<meta><m n=":native"><e>"XPathResult"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/AudioNode.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<context public="1" set="null">
			<c path="js.html.audio.BaseAudioContext"/>
			<haxe_doc>Returns the associated `BaseAudioContext`, that is the object representing the processing graph the node is participating in.</haxe_doc>
		</context>
		<numberOfInputs public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of inputs feeding the node. Source nodes are defined as nodes having a `numberOfInputs` property with a value of `0`.</haxe_doc>
		</numberOfInputs>
		<numberOfOutputs public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of outputs coming out of the node. Destination nodes — like `AudioDestinationNode` — have a value of `0` for this attribute.</haxe_doc>
		</numberOfOutputs>
		<channelCount public="1">
			<x path="Int"/>
			<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. Its usage and precise definition depend on the value of `AudioNode.channelCountMode`.</haxe_doc>
		</channelCount>
		<channelCountMode public="1">
			<x path="js.html.audio.ChannelCountMode"/>
			<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs.</haxe_doc>
		</channelCountMode>
		<channelInterpretation public="1">
			<x path="js.html.audio.ChannelInterpretation"/>
			<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
		 The possible values are `"speakers"` or `"discrete"`.</haxe_doc>
		</channelInterpretation>
		<connect public="1" set="method">
			<f a="destination:?output" v=":0">
				<c path="js.html.audio.AudioParam"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ output : 0 }</e></m></meta>
			<haxe_doc>Allows us to connect the output of this node to be input into another node, either as audio data or as the value of an `AudioParam`.
		@throws DOMError</haxe_doc>
			<overloads><connect public="1" set="method">
	<f a="destination:?output:?input" v=":0:0">
		<c path="js.html.audio.AudioNode"/>
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.html.audio.AudioNode"/>
	</f>
	<meta><m n=":value"><e>{ input : 0, output : 0 }</e></m></meta>
	<haxe_doc>Allows us to connect the output of this node to be input into another node, either as audio data or as the value of an `AudioParam`.
		@throws DOMError</haxe_doc>
</connect></overloads>
		</connect>
		<disconnect public="1" set="method">
			<f a="destination:output">
				<c path="js.html.audio.AudioParam"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows us to disconnect the current node from another one it is already connected to.
		@throws DOMError</haxe_doc>
			<overloads>
				<disconnect public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>Allows us to disconnect the current node from another one it is already connected to.
		@throws DOMError</haxe_doc>
				</disconnect>
				<disconnect public="1" set="method">
					<f a="output">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Allows us to disconnect the current node from another one it is already connected to.
		@throws DOMError</haxe_doc>
				</disconnect>
				<disconnect public="1" set="method">
					<f a="destination">
						<c path="js.html.audio.AudioNode"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Allows us to disconnect the current node from another one it is already connected to.
		@throws DOMError</haxe_doc>
				</disconnect>
				<disconnect public="1" set="method">
					<f a="destination:output">
						<c path="js.html.audio.AudioNode"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Allows us to disconnect the current node from another one it is already connected to.
		@throws DOMError</haxe_doc>
				</disconnect>
				<disconnect public="1" set="method">
					<f a="destination:output:input">
						<c path="js.html.audio.AudioNode"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Allows us to disconnect the current node from another one it is already connected to.
		@throws DOMError</haxe_doc>
				</disconnect>
				<disconnect public="1" set="method">
					<f a="destination">
						<c path="js.html.audio.AudioParam"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Allows us to disconnect the current node from another one it is already connected to.
		@throws DOMError</haxe_doc>
				</disconnect>
			</overloads>
		</disconnect>
		<haxe_doc><![CDATA[The `AudioNode` interface is a generic interface for representing an audio processing module. Examples include:

	Documentation [AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioNode>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioNode"</e></m></meta>
	</class>
	<class path="js.html.audio.AnalyserNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/AnalyserNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<fftSize public="1">
			<x path="Int"/>
			<haxe_doc>Is an unsigned long value representing the size of the FFT (Fast Fourier Transform) to be used to determine the frequency domain.</haxe_doc>
		</fftSize>
		<frequencyBinCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an unsigned long value half that of the FFT size. This generally equates to the number of data values you will have to play with for the visualization.</haxe_doc>
		</frequencyBinCount>
		<minDecibels public="1">
			<x path="Float"/>
			<haxe_doc>Is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the minimum value for the range of results when using `getByteFrequencyData()`.</haxe_doc>
		</minDecibels>
		<maxDecibels public="1">
			<x path="Float"/>
			<haxe_doc>Is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the maximum value for the range of results when using `getByteFrequencyData()`.</haxe_doc>
		</maxDecibels>
		<smoothingTimeConstant public="1">
			<x path="Float"/>
			<haxe_doc>Is a double value representing the averaging constant with the last analysis frame — basically, it makes the transition between values over time smoother.</haxe_doc>
		</smoothingTimeConstant>
		<getFloatFrequencyData public="1" set="method">
			<f a="array">
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the current frequency data into a `Float32Array` array passed into it.</haxe_doc>
		</getFloatFrequencyData>
		<getByteFrequencyData public="1" set="method">
			<f a="array">
				<c path="js.lib.Uint8Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the current frequency data into a `Uint8Array` (unsigned byte array) passed into it.</haxe_doc>
		</getByteFrequencyData>
		<getFloatTimeDomainData public="1" set="method">
			<f a="array">
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the current waveform, or time-domain, data into a `Float32Array` array passed into it.</haxe_doc>
		</getFloatTimeDomainData>
		<getByteTimeDomainData public="1" set="method">
			<f a="array">
				<c path="js.lib.Uint8Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the current waveform, or time-domain, data into a `Uint8Array` (unsigned byte array) passed into it.</haxe_doc>
		</getByteTimeDomainData>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.AnalyserOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `AnalyserNode` interface represents a node able to provide real-time frequency and time-domain analysis information. It is an `AudioNode` that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.

	Documentation [AnalyserNode](https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode>]]></haxe_doc>
		<meta><m n=":native"><e>"AnalyserNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.AnalyserOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/AnalyserOptions.hx"><a>
	<smoothingTimeConstant>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</smoothingTimeConstant>
	<minDecibels>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</minDecibels>
	<maxDecibels>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</maxDecibels>
	<fftSize>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</fftSize>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.audio.AudioBuffer" params="" file="/usr/local/lib/haxe/std/js/html/audio/AudioBuffer.hx" extern="1">
		<sampleRate public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer.</haxe_doc>
		</sampleRate>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.</haxe_doc>
		</length>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a double representing the duration, in seconds, of the PCM data stored in the buffer.</haxe_doc>
		</duration>
		<numberOfChannels public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer.</haxe_doc>
		</numberOfChannels>
		<getChannelData public="1" set="method">
			<f a="channel">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Returns a `Float32Array` containing the PCM data associated with the channel, defined by the `channel` parameter (with `0` representing the first channel).
		@throws DOMError</haxe_doc>
		</getChannelData>
		<copyFromChannel public="1" set="method">
			<f a="destination:channelNumber:?startInChannel" v="::0">
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ startInChannel : 0 }</e></m></meta>
			<haxe_doc>Copies the samples from the specified channel of the `AudioBuffer` to the `destination` array.
		@throws DOMError</haxe_doc>
		</copyFromChannel>
		<copyToChannel public="1" set="method">
			<f a="source:channelNumber:?startInChannel" v="::0">
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ startInChannel : 0 }</e></m></meta>
			<haxe_doc>Copies the samples to the specified channel of the `AudioBuffer`, from the `source` array.
		@throws DOMError</haxe_doc>
		</copyToChannel>
		<new public="1" set="method">
			<f a="options">
				<t path="js.html.audio.AudioBufferOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Objects of these types are designed to hold small audio snippets, typically less than 45 s. For longer sounds, objects implementing the `MediaElementAudioSourceNode` are more suitable. The buffer contains data in the following format:  non-interleaved IEEE754 32-bit linear PCM with a nominal range between `-1` and `+1`, that is, 32bits floating point buffer, with each samples between -1.0 and 1.0. If the `AudioBuffer` has multiple channels, they are stored in separate buffer.

	Documentation [AudioBuffer](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioBuffer"</e></m></meta>
	</class>
	<typedef path="js.html.audio.AudioBufferOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/AudioBufferOptions.hx"><a>
	<sampleRate><x path="Float"/></sampleRate>
	<numberOfChannels>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</numberOfChannels>
	<length><x path="Int"/></length>
</a></typedef>
	<class path="js.html.audio.AudioScheduledSourceNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/AudioScheduledSourceNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<onended public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A function to be called when the `ended` event is fired, indicating that the node has finished playing.</haxe_doc>
		</onended>
		<start public="1" set="method">
			<f a="?when" v="0.0">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ when : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</start>
		<stop public="1" set="method">
			<f a="?when" v="0.0">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ when : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</stop>
		<haxe_doc><![CDATA[The `AudioScheduledSourceNode` interface—part of the Web Audio API—is a parent interface for several types of audio source node interfaces which share the ability to be started and stopped, optionally at specified times. Specifically, this interface defines the `start()` and `stop()` methods, as well as the `onended` event handler.

	Documentation [AudioScheduledSourceNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioScheduledSourceNode"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioBufferSourceNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/AudioBufferSourceNode.hx" extern="1">
		<extends path="js.html.audio.AudioScheduledSourceNode"/>
		<buffer public="1">
			<c path="js.html.audio.AudioBuffer"/>
			<haxe_doc>An `AudioBuffer` that defines the audio asset to be played, or when set to the value `null`, defines a single channel of silence (in which every sample is 0.0).</haxe_doc>
		</buffer>
		<playbackRate public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>An a-rate `AudioParam` that defines the speed factor at which the audio asset will be played, where a value of 1.0 is the sound's natural sampling rate. Since no pitch correction is applied on the output, this can be used to change the pitch of the sample. This value is compounded with `detune` to determine the final playback rate.</haxe_doc>
		</playbackRate>
		<detune public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a k-rate `AudioParam` representing detuning of playback in cents. This value is compounded with `playbackRate` to determine the speed at which the sound is played. Its default value is `0` (meaning no detuning), and its nominal range is -∞ to ∞.</haxe_doc>
		</detune>
		<loop public="1">
			<x path="Bool"/>
			<haxe_doc>A Boolean attribute indicating if the audio asset must be replayed when the end of the `AudioBuffer` is reached. Its default value is `false`.</haxe_doc>
		</loop>
		<loopStart public="1">
			<x path="Float"/>
			<haxe_doc>A floating-point value indicating the time, in seconds, at which playback of the `AudioBuffer` must begin when `loop` is `true`. Its default value is `0` (meaning that at the beginning of each loop, playback begins at the start of the audio buffer).</haxe_doc>
		</loopStart>
		<loopEnd public="1">
			<x path="Float"/>
			<haxe_doc>A floating-point number indicating the time, in seconds, at which playback of the `AudioBuffer` stops and loops back to the time indicated by `loopStart`, if `loop` is `true`. The default value is `0`.</haxe_doc>
		</loopEnd>
		<start public="1" set="method" override="1">
			<f a="?when:?grainOffset:?grainDuration" v="0.0:0.0:">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ grainOffset : 0.0, when : 0.0 }</e></m></meta>
			<haxe_doc>Used to schedule playback of the audio data contained in the buffer, or to begin playback immediately.
		@throws DOMError</haxe_doc>
		</start>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.AudioBufferSourceOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `AudioBufferSourceNode` interface is an `AudioScheduledSourceNode` which represents an audio source consisting of in-memory audio data, stored in an `AudioBuffer`. It's especially useful for playing back audio which has particularly stringent timing accuracy requirements, such as for sounds that must match a specific rhythm and can be kept in memory rather than being played from disk or the network.

	Documentation [AudioBufferSourceNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioBufferSourceNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.AudioBufferSourceOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/AudioBufferSourceOptions.hx"><a>
	<playbackRate>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</playbackRate>
	<loopStart>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</loopStart>
	<loopEnd>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</loopEnd>
	<loop>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</loop>
	<detune>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</detune>
	<buffer>
		<x path="Null"><c path="js.html.audio.AudioBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</buffer>
</a></typedef>
	<class path="js.html.audio.BaseAudioContext" params="" file="/usr/local/lib/haxe/std/js/html/audio/BaseAudioContext.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<destination public="1" set="null">
			<c path="js.html.audio.AudioDestinationNode"/>
			<haxe_doc>Returns an `AudioDestinationNode` representing the final destination of all audio in the context. It can be thought of as the audio-rendering device.</haxe_doc>
		</destination>
		<sampleRate public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a float representing the sample rate (in samples per second) used by all nodes in this context. The sample-rate of an `AudioContext` cannot be changed.</haxe_doc>
		</sampleRate>
		<currentTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a double representing an ever-increasing hardware time in seconds used for scheduling. It starts at `0`.</haxe_doc>
		</currentTime>
		<listener public="1" set="null">
			<c path="js.html.audio.AudioListener"/>
			<haxe_doc>Returns the `AudioListener` object, used for 3D spatialization.</haxe_doc>
		</listener>
		<state public="1" set="null">
			<x path="js.html.audio.AudioContextState"/>
			<haxe_doc>Returns the current state of the `AudioContext`.</haxe_doc>
		</state>
		<onstatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler that runs when an event of type `statechange` has fired. This occurs when the `AudioContext`'s state changes, due to the calling of one of the state change methods (`AudioContext.suspend`, `AudioContext.resume`, or `AudioContext.close`).</haxe_doc>
		</onstatechange>
		<resume public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Resumes the progression of time in an audio context that has previously been suspended/paused.
		@throws DOMError</haxe_doc>
		</resume>
		<createBuffer public="1" set="method">
			<f a="numberOfChannels:length:sampleRate">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="js.html.audio.AudioBuffer"/>
			</f>
			<haxe_doc>Creates a new, empty `AudioBuffer` object, which can then be populated by data and played via an `AudioBufferSourceNode`.
		@throws DOMError</haxe_doc>
		</createBuffer>
		<decodeAudioData public="1" set="method">
			<f a="audioData:?successCallback:?errorCallback">
				<c path="js.lib.ArrayBuffer"/>
				<f a="">
					<c path="js.html.audio.AudioBuffer"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.DOMException"/>
					<x path="Void"/>
				</f>
				<c path="js.lib.Promise"><c path="js.html.audio.AudioBuffer"/></c>
			</f>
			<haxe_doc>Asynchronously decodes audio file data contained in an `ArrayBuffer`. In this case, the ArrayBuffer is usually loaded from an `XMLHttpRequest`'s `response` attribute after setting the `responseType` to `arraybuffer`. This method only works on complete files, not fragments of audio files.
		@throws DOMError</haxe_doc>
			<overloads><decodeAudioData public="1" set="method">
	<f a="audioData:?successCallback:?errorCallback">
		<c path="js.lib.ArrayBuffer"/>
		<f a="">
			<c path="js.html.audio.AudioBuffer"/>
			<x path="Void"/>
		</f>
		<f a=""><x path="Void"/></f>
		<c path="js.lib.Promise"><c path="js.html.audio.AudioBuffer"/></c>
	</f>
	<haxe_doc>Asynchronously decodes audio file data contained in an `ArrayBuffer`. In this case, the ArrayBuffer is usually loaded from an `XMLHttpRequest`'s `response` attribute after setting the `responseType` to `arraybuffer`. This method only works on complete files, not fragments of audio files.
		@throws DOMError</haxe_doc>
</decodeAudioData></overloads>
		</decodeAudioData>
		<createBufferSource public="1" set="method">
			<f a=""><c path="js.html.audio.AudioBufferSourceNode"/></f>
			<haxe_doc>Creates an `AudioBufferSourceNode`, which can be used to play and manipulate audio data contained within an `AudioBuffer` object. `AudioBuffer`s are created using `AudioContext.createBuffer` or returned by `AudioContext.decodeAudioData` when it successfully decodes an audio track.
		@throws DOMError</haxe_doc>
		</createBufferSource>
		<createConstantSource public="1" set="method">
			<f a=""><c path="js.html.audio.ConstantSourceNode"/></f>
			<haxe_doc>Creates a `ConstantSourceNode` object, which is an audio source that continuously outputs a monaural (one-channel) sound signal whose samples all have the same value.
		@throws DOMError</haxe_doc>
		</createConstantSource>
		<createScriptProcessor public="1" set="method">
			<f a="?bufferSize:?numberOfInputChannels:?numberOfOutputChannels" v="0:2:2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.audio.ScriptProcessorNode"/>
			</f>
			<meta><m n=":value"><e>{ numberOfOutputChannels : 2, numberOfInputChannels : 2, bufferSize : 0 }</e></m></meta>
			<haxe_doc>Creates a `ScriptProcessorNode`, which can be used for direct audio processing via JavaScript.
		@throws DOMError</haxe_doc>
		</createScriptProcessor>
		<createAnalyser public="1" set="method">
			<f a=""><c path="js.html.audio.AnalyserNode"/></f>
			<haxe_doc>Creates an `AnalyserNode`, which can be used to expose audio time and frequency data and for example to create data visualisations.
		@throws DOMError</haxe_doc>
		</createAnalyser>
		<createGain public="1" set="method">
			<f a=""><c path="js.html.audio.GainNode"/></f>
			<haxe_doc>Creates a `GainNode`, which can be used to control the overall volume of the audio graph.
		@throws DOMError</haxe_doc>
		</createGain>
		<createDelay public="1" set="method">
			<f a="?maxDelayTime" v="1.0">
				<x path="Float"/>
				<c path="js.html.audio.DelayNode"/>
			</f>
			<meta><m n=":value"><e>{ maxDelayTime : 1.0 }</e></m></meta>
			<haxe_doc>Creates a `DelayNode`, which is used to delay the incoming audio signal by a certain amount. This node is also useful to create feedback loops in a Web Audio API graph.
		@throws DOMError</haxe_doc>
		</createDelay>
		<createBiquadFilter public="1" set="method">
			<f a=""><c path="js.html.audio.BiquadFilterNode"/></f>
			<haxe_doc>Creates a `BiquadFilterNode`, which represents a second order filter configurable as several different common filter types: high-pass, low-pass, band-pass, etc
		@throws DOMError</haxe_doc>
		</createBiquadFilter>
		<createIIRFilter public="1" set="method">
			<f a="feedforward:feedback">
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<c path="js.html.audio.IIRFilterNode"/>
			</f>
			<haxe_doc>Creates an `IIRFilterNode`, which represents a second order filter configurable as several different common filter types.
		@throws DOMError</haxe_doc>
		</createIIRFilter>
		<createWaveShaper public="1" set="method">
			<f a=""><c path="js.html.audio.WaveShaperNode"/></f>
			<haxe_doc>Creates a `WaveShaperNode`, which is used to implement non-linear distortion effects.
		@throws DOMError</haxe_doc>
		</createWaveShaper>
		<createPanner public="1" set="method">
			<f a=""><c path="js.html.audio.PannerNode"/></f>
			<haxe_doc>Creates a `PannerNode`, which is used to spatialise an incoming audio stream in 3D space.
		@throws DOMError</haxe_doc>
		</createPanner>
		<createStereoPanner public="1" set="method">
			<f a=""><c path="js.html.audio.StereoPannerNode"/></f>
			<haxe_doc>Creates a `StereoPannerNode`, which can be used to apply stereo panning to an audio source.
		@throws DOMError</haxe_doc>
		</createStereoPanner>
		<createConvolver public="1" set="method">
			<f a=""><c path="js.html.audio.ConvolverNode"/></f>
			<haxe_doc>Creates a `ConvolverNode`, which can be used to apply convolution effects to your audio graph, for example a reverberation effect.
		@throws DOMError</haxe_doc>
		</createConvolver>
		<createChannelSplitter public="1" set="method">
			<f a="?numberOfOutputs" v="6">
				<x path="Int"/>
				<c path="js.html.audio.ChannelSplitterNode"/>
			</f>
			<meta><m n=":value"><e>{ numberOfOutputs : 6 }</e></m></meta>
			<haxe_doc>Creates a `ChannelSplitterNode`, which is used to access the individual channels of an audio stream and process them separately.
		@throws DOMError</haxe_doc>
		</createChannelSplitter>
		<createChannelMerger public="1" set="method">
			<f a="?numberOfInputs" v="6">
				<x path="Int"/>
				<c path="js.html.audio.ChannelMergerNode"/>
			</f>
			<meta><m n=":value"><e>{ numberOfInputs : 6 }</e></m></meta>
			<haxe_doc>Creates a `ChannelMergerNode`, which is used to combine channels from multiple audio streams into a single audio stream.
		@throws DOMError</haxe_doc>
		</createChannelMerger>
		<createDynamicsCompressor public="1" set="method">
			<f a=""><c path="js.html.audio.DynamicsCompressorNode"/></f>
			<haxe_doc>Creates a `DynamicsCompressorNode`, which can be used to apply acoustic compression to an audio signal.
		@throws DOMError</haxe_doc>
		</createDynamicsCompressor>
		<createOscillator public="1" set="method">
			<f a=""><c path="js.html.audio.OscillatorNode"/></f>
			<haxe_doc>Creates an `OscillatorNode`, a source representing a periodic waveform. It basically generates a tone.
		@throws DOMError</haxe_doc>
		</createOscillator>
		<createPeriodicWave public="1" set="method">
			<f a="real:imag:?constraints">
				<c path="js.lib.Float32Array"/>
				<c path="js.lib.Float32Array"/>
				<x path="Null"><t path="js.html.audio.PeriodicWaveConstraints"/></x>
				<c path="js.html.audio.PeriodicWave"/>
			</f>
			<haxe_doc>Creates a `PeriodicWave`, used to define a periodic waveform that can be used to determine the output of an `OscillatorNode`.
		@throws DOMError</haxe_doc>
		</createPeriodicWave>
		<haxe_doc><![CDATA[The `BaseAudioContext` interface acts as a base definition for online and offline audio-processing graphs, as represented by `AudioContext` and `OfflineAudioContext` respectively.

	Documentation [BaseAudioContext](https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext>]]></haxe_doc>
		<meta><m n=":native"><e>"BaseAudioContext"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioContext" params="" file="/usr/local/lib/haxe/std/js/html/audio/AudioContext.hx" extern="1">
		<extends path="js.html.audio.BaseAudioContext"/>
		<suspend public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Suspends the progression of time in the audio context, temporarily halting audio hardware access and reducing CPU/battery usage in the process.
		@throws DOMError</haxe_doc>
		</suspend>
		<close public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Closes the audio context, releasing any system audio resources that it uses.
		@throws DOMError</haxe_doc>
		</close>
		<createMediaElementSource public="1" set="method">
			<f a="mediaElement">
				<c path="js.html.MediaElement"/>
				<c path="js.html.audio.MediaElementAudioSourceNode"/>
			</f>
			<haxe_doc>Creates a `MediaElementAudioSourceNode` associated with an `HTMLMediaElement`. This can be used to play and manipulate audio from `video` or `audio` elements.
		@throws DOMError</haxe_doc>
		</createMediaElementSource>
		<createMediaStreamSource public="1" set="method">
			<f a="mediaStream">
				<c path="js.html.MediaStream"/>
				<c path="js.html.audio.MediaStreamAudioSourceNode"/>
			</f>
			<haxe_doc>Creates a `MediaStreamAudioSourceNode` associated with a `MediaStream` representing an audio stream which may come from the local computer microphone or other sources.
		@throws DOMError</haxe_doc>
		</createMediaStreamSource>
		<createMediaStreamDestination public="1" set="method">
			<f a=""><c path="js.html.audio.MediaStreamAudioDestinationNode"/></f>
			<haxe_doc>Creates a `MediaStreamAudioDestinationNode` associated with a `MediaStream` representing an audio stream which may be stored in a local file or sent to another computer.
		@throws DOMError</haxe_doc>
		</createMediaStreamDestination>
		<new public="1" set="method">
			<f a="?contextOptions">
				<x path="Null"><t path="js.html.audio.AudioContextOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `AudioContext` interface represents an audio-processing graph built from audio modules linked together, each represented by an `AudioNode`.

	Documentation [AudioContext](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioContext>]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"AudioContext"</e></m>
		</meta>
	</class>
	<typedef path="js.html.audio.AudioContextOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/AudioContextOptions.hx">
		<a><sampleRate>
	<x path="Null"><x path="Float"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The `BaseAudioContext.sampleRate` to be used by the `AudioContext`, specified in samples per second. The value may be any value supported by `AudioBuffer`. If not specified, the preferred sample rate for the context's output device is used by default.</haxe_doc>
</sampleRate></a>
		<haxe_doc><![CDATA[The `AudioContextOptions` dictionary is used to specify configuration options when constructing a new `AudioContext` object to represent a graph of web audio nodes.

	Documentation [AudioContextOptions](https://developer.mozilla.org/en-US/docs/Web/API/AudioContextOptions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioContextOptions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioContextOptions>]]></haxe_doc>
	</typedef>
	<abstract path="js.html.audio.AudioContextState" params="" file="/usr/local/lib/haxe/std/js/html/audio/AudioContextState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._AudioContextState.AudioContextState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/audio/AudioContextState.hx" private="1" module="js.html.audio.AudioContextState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.audio.AudioDestinationNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/AudioDestinationNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<maxChannelCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long` defining the maximum number of channels that the physical device can handle.</haxe_doc>
		</maxChannelCount>
		<haxe_doc><![CDATA[`AudioDestinationNode` has no output (as it is the output, no more `AudioNode` can be linked after it in the audio graph) and one input. The number of channels in the input must be between `0` and the `maxChannelCount` value or an exception is raised.

	Documentation [AudioDestinationNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioDestinationNode"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioListener" params="" file="/usr/local/lib/haxe/std/js/html/audio/AudioListener.hx" extern="1">
		<setPosition public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setPosition>
		<setOrientation public="1" set="method"><f a="x:y:z:xUp:yUp:zUp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setOrientation>
		<haxe_doc><![CDATA[It is important to note that there is only one listener per context and that it isn't an `AudioNode`.

	Documentation [AudioListener](https://developer.mozilla.org/en-US/docs/Web/API/AudioListener) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioListener$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioListener>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioListener"</e></m></meta>
	</class>
	<typedef path="js.html.audio.AudioNodeOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/AudioNodeOptions.hx">
		<a>
			<channelInterpretation>
				<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
			</channelInterpretation>
			<channelCountMode>
				<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
			</channelCountMode>
			<channelCount>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
			</channelCount>
		</a>
		<haxe_doc><![CDATA[The `AudioNodeOptions` dictionary of the Web Audio API specifies options that can be used when creating new `AudioNode` objects.

	Documentation [AudioNodeOptions](https://developer.mozilla.org/en-US/docs/Web/API/AudioNodeOptions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioNodeOptions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioNodeOptions>]]></haxe_doc>
	</typedef>
	<class path="js.html.audio.AudioParam" params="" file="/usr/local/lib/haxe/std/js/html/audio/AudioParam.hx" extern="1">
		<value public="1">
			<x path="Float"/>
			<haxe_doc>Represents the parameter's current volume as a floating point value; initially set to the value of `AudioParam.defaultValue`. Though it can be set, any modifications happening while there are automation events scheduled — that is events scheduled using the methods of the `AudioParam` — are ignored, without raising any exception.</haxe_doc>
		</value>
		<defaultValue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Represents the initial volume of the attribute as defined by the specific `AudioNode` creating the `AudioParam`.</haxe_doc>
		</defaultValue>
		<minValue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Represents the minimum possible value for the parameter's nominal (effective) range. </haxe_doc>
		</minValue>
		<maxValue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Represents the maximum possible value for the parameter's nominal (effective) range. </haxe_doc>
		</maxValue>
		<setValueAtTime public="1" set="method">
			<f a="value:startTime">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.audio.AudioParam"/>
			</f>
			<haxe_doc>Schedules an instant change to the value of the `AudioParam` at a precise time, as measured against `AudioContext.currentTime`. The new value is given by the `value` parameter.
		@throws DOMError</haxe_doc>
		</setValueAtTime>
		<linearRampToValueAtTime public="1" set="method">
			<f a="value:endTime">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.audio.AudioParam"/>
			</f>
			<haxe_doc>Schedules a gradual linear change in the value of the `AudioParam`. The change starts at the time specified for the previous event, follows a linear ramp to the new value given in the `value` parameter, and reaches the new value at the time given in the `endTime` parameter.
		@throws DOMError</haxe_doc>
		</linearRampToValueAtTime>
		<exponentialRampToValueAtTime public="1" set="method">
			<f a="value:endTime">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.audio.AudioParam"/>
			</f>
			<haxe_doc>Schedules a gradual exponential change in the value of the `AudioParam`. The change starts at the time specified for the previous event, follows an exponential ramp to the new value given in the `value` parameter, and reaches the new value at the time given in the `endTime` parameter.
		@throws DOMError</haxe_doc>
		</exponentialRampToValueAtTime>
		<setTargetAtTime public="1" set="method">
			<f a="target:startTime:timeConstant">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.audio.AudioParam"/>
			</f>
			<haxe_doc>Schedules the start of a change to the value of the `AudioParam`. The change starts at the time specified in `startTime` and exponentially moves towards the value given by the `target` parameter. The exponential decay rate is defined by the `timeConstant` parameter, which is a time measured in seconds.
		@throws DOMError</haxe_doc>
		</setTargetAtTime>
		<setValueCurveAtTime public="1" set="method">
			<f a="values:startTime:duration">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.audio.AudioParam"/>
			</f>
			<haxe_doc>Schedules the values of the `AudioParam` to follow a set of values, defined by an array of floating-point numbers scaled to fit into the given interval, starting at a given start time and spanning a given duration of time.
		@throws DOMError</haxe_doc>
		</setValueCurveAtTime>
		<cancelScheduledValues public="1" set="method">
			<f a="startTime">
				<x path="Float"/>
				<c path="js.html.audio.AudioParam"/>
			</f>
			<haxe_doc>Cancels all scheduled future changes to the `AudioParam`.
		@throws DOMError</haxe_doc>
		</cancelScheduledValues>
		<haxe_doc><![CDATA[The Web Audio API's `AudioParam` interface represents an audio-related parameter, usually a parameter of an `AudioNode` (such as `GainNode.gain`).

	Documentation [AudioParam](https://developer.mozilla.org/en-US/docs/Web/API/AudioParam) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioParam$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioParam>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioParam"</e></m></meta>
	</class>
	<class path="js.html.audio.BiquadFilterNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/BiquadFilterNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<type public="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<haxe_doc><![CDATA[Is a string value defining the kind of filtering algorithm the node is implementing.<br>
			 
			<table class="standard-table">
				The meaning of the different parameters depending of the type of the filter (detune has the same meaning regardless, so isn't listed below)
				
					<tr>
						<code>type</code>
						Description
						<code>frequency</code>
						<code>Q</code>
						<code>gain</code>
					</tr>
				
				
					<tr>
						<code>lowpass</code>
						<td>Standard second-order resonant lowpass filter with 12dB/octave rolloff. Frequencies below the cutoff pass through; frequencies above it are attenuated.</td>
						<td>The cutoff frequency.</td>
						<td>Indicates how peaked the frequency is around the cutoff. The greater the value is, the greater is the peak.</td>
						<td>Not used</td>
					</tr>
					<tr>
						<code>highpass</code>
						<td>Standard second-order resonant highpass filter with 12dB/octave rolloff. Frequencies below the cutoff are attenuated; frequencies above it pass through.</td>
						<td>The cutoff frequency.</td>
						<td>Indicates how peaked the frequency is around the cutoff. The greater the value, the greater the peak.</td>
						<td>Not used</td>
					</tr>
					<tr>
						<code>bandpass</code>
						<td>Standard second-order bandpass filter. Frequencies outside the given range of frequencies are attenuated; the frequencies inside it pass through.</td>
						<td>The center of the range of frequencies.</td>
						<td>Controls the width of the frequency band. The greater the <code>Q</code> value, the smaller the frequency band.</td>
						<td>Not used</td>
					</tr>
					<tr>
						<code>lowshelf</code>
						<td>Standard second-order lowshelf filter. Frequencies lower than the frequency get a boost, or an attenuation; frequencies over it are unchanged.</td>
						<td>The upper limit of the frequencies getting a boost or an attenuation.</td>
						<td>Not used</td>
						<td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>
					</tr>
					<tr>
						<code>highshelf</code>
						<td>Standard second-order highshelf filter. Frequencies higher than the frequency get a boost or an attenuation; frequencies lower than it are unchanged.</td>
						<td>The lower limit of the frequencies getting a boost or an attenuation.</td>
						<td>Not used</td>
						<td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>
					</tr>
					<tr>
						<code>peaking</code>
						<td>Frequencies inside the range get a boost or an attenuation; frequencies outside it are unchanged.</td>
						<td>The middle of the frequency range getting a boost or an attenuation.</td>
						<td>Controls the width of the frequency band. The greater the <code>Q</code> value, the smaller the frequency band.</td>
						<td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>
					</tr>
					<tr>
						<code>notch</code>
						<td>Standard notch filter, also called a band-stop or band-rejection filter. It is the opposite of a bandpass filter: frequencies outside the give range of frequencies pass through; frequencies inside it are attenuated.</td>
						<td>The center of the range of frequencies.</td>
						<td>Controls the width of the frequency band. The greater the <code>Q</code> value, the smaller the frequency band.</td>
						<td>Not used</td>
					</tr>
					<tr>
						<code>allpass</code>
						<td>Standard second-order allpass filter. It lets all frequencies through, but changes the phase-relationship between the various frequencies.</td>
						<td>The frequency with the maximal group delay, that is, the frequency where the center of the phase transition occurs.</td>
						<td>Controls how sharp the transition is at the medium frequency. The larger this parameter is, the sharper and larger the transition will be.</td>
						<td>Not used</td>
					</tr>
				
			</table>]]></haxe_doc>
		</type>
		<frequency public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam`, a double representing a frequency in the current filtering algorithm measured in hertz (Hz).</haxe_doc>
		</frequency>
		<detune public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam` representing detuning of the frequency in cents.</haxe_doc>
		</detune>
		<Q public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam`, a double representing a Q factor, or quality factor.</haxe_doc>
		</Q>
		<gain public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam`, a double representing the gain used in the current filtering algorithm.</haxe_doc>
		</gain>
		<getFrequencyResponse public="1" set="method">
			<f a="frequencyHz:magResponse:phaseResponse">
				<c path="js.lib.Float32Array"/>
				<c path="js.lib.Float32Array"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>From the current filter parameter settings this method calculates the frequency response for frequencies specified in the provided array of frequencies.</haxe_doc>
		</getFrequencyResponse>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.BiquadFilterOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `BiquadFilterNode` interface represents a simple low-order filter, and is created using the `AudioContext.createBiquadFilter()` method. It is an `AudioNode` that can represent different kinds of filters, tone control devices, and graphic equalizers.

	Documentation [BiquadFilterNode](https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode>]]></haxe_doc>
		<meta><m n=":native"><e>"BiquadFilterNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.BiquadFilterOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/BiquadFilterOptions.hx"><a>
	<type>
		<x path="Null"><x path="js.html.audio.BiquadFilterType"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<gain>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</gain>
	<frequency>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</frequency>
	<detune>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</detune>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
	<Q>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</Q>
</a></typedef>
	<abstract path="js.html.audio.BiquadFilterType" params="" file="/usr/local/lib/haxe/std/js/html/audio/BiquadFilterType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._BiquadFilterType.BiquadFilterType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/audio/BiquadFilterType.hx" private="1" module="js.html.audio.BiquadFilterType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.audio.ChannelCountMode" params="" file="/usr/local/lib/haxe/std/js/html/audio/ChannelCountMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._ChannelCountMode.ChannelCountMode_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/audio/ChannelCountMode.hx" private="1" module="js.html.audio.ChannelCountMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.audio.ChannelInterpretation" params="" file="/usr/local/lib/haxe/std/js/html/audio/ChannelInterpretation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._ChannelInterpretation.ChannelInterpretation_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/audio/ChannelInterpretation.hx" private="1" module="js.html.audio.ChannelInterpretation" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.audio.ChannelMergerNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/ChannelMergerNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.ChannelMergerOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ChannelMergerNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.ChannelMergerOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/ChannelMergerOptions.hx"><a>
	<numberOfInputs>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</numberOfInputs>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.audio.ChannelSplitterNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/ChannelSplitterNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.ChannelSplitterOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ChannelSplitterNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.ChannelSplitterOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/ChannelSplitterOptions.hx"><a>
	<numberOfOutputs>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</numberOfOutputs>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.audio.ConstantSourceNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/ConstantSourceNode.hx" extern="1">
		<extends path="js.html.audio.AudioScheduledSourceNode"/>
		<offset public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>An `AudioParam` which specifies the value that this source continuously outputs. The default value is 1.0.</haxe_doc>
		</offset>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.ConstantSourceOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ConstantSourceNode` interface—part of the Web Audio API—represents an audio source (based upon `AudioScheduledSourceNode`) whose output is single unchanging value. This makes it useful for cases in which you need a constant value coming in from an audio source. In addition, it can be used like a constructible `AudioParam` by automating the value of its `offset` or by connecting another node to it; see Controlling multiple parameters with ConstantSourceNode.

	Documentation [ConstantSourceNode](https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode>]]></haxe_doc>
		<meta><m n=":native"><e>"ConstantSourceNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.ConstantSourceOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/ConstantSourceOptions.hx"><a><offset>
	<x path="Null"><x path="Float"/></x>
	<meta><m n=":optional"/></meta>
</offset></a></typedef>
	<class path="js.html.audio.ConvolverNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/ConvolverNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<buffer public="1">
			<c path="js.html.audio.AudioBuffer"/>
			<haxe_doc>A mono, stereo, or 4-channel `AudioBuffer` containing the (possibly multichannel) impulse response used by the `ConvolverNode` to create the reverb effect.</haxe_doc>
		</buffer>
		<normalize public="1">
			<x path="Bool"/>
			<haxe_doc>A boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the `buffer` attribute is set, or not.</haxe_doc>
		</normalize>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.ConvolverOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ConvolverNode` interface is an `AudioNode` that performs a Linear Convolution on a given `AudioBuffer`, often used to achieve a reverb effect. A `ConvolverNode` always has exactly one input and one output.

	Documentation [ConvolverNode](https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode>]]></haxe_doc>
		<meta><m n=":native"><e>"ConvolverNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.ConvolverOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/ConvolverOptions.hx"><a>
	<disableNormalization>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</disableNormalization>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
	<buffer>
		<x path="Null"><c path="js.html.audio.AudioBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</buffer>
</a></typedef>
	<class path="js.html.audio.DelayNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/DelayNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<delayTime public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam` representing the amount of delay to apply.</haxe_doc>
		</delayTime>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.DelayOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DelayNode` interface represents a delay-line; an `AudioNode` audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.

	Documentation [DelayNode](https://developer.mozilla.org/en-US/docs/Web/API/DelayNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DelayNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DelayNode>]]></haxe_doc>
		<meta><m n=":native"><e>"DelayNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.DelayOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/DelayOptions.hx"><a>
	<maxDelayTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</maxDelayTime>
	<delayTime>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</delayTime>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<abstract path="js.html.audio.DistanceModelType" params="" file="/usr/local/lib/haxe/std/js/html/audio/DistanceModelType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._DistanceModelType.DistanceModelType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/audio/DistanceModelType.hx" private="1" module="js.html.audio.DistanceModelType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.audio.DynamicsCompressorNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/DynamicsCompressorNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<threshold public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a k-rate `AudioParam` representing the decibel value above which the compression will start taking effect.</haxe_doc>
		</threshold>
		<knee public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a k-rate `AudioParam` containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion.</haxe_doc>
		</knee>
		<ratio public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a k-rate `AudioParam` representing the amount of change, in dB, needed in the input for a 1 dB change in the output.</haxe_doc>
		</ratio>
		<reduction public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Is a `float` representing the amount of gain reduction currently applied by the compressor to the signal.</haxe_doc>
		</reduction>
		<attack public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a k-rate `AudioParam` representing the amount of time, in seconds, required to reduce the gain by 10 dB.</haxe_doc>
		</attack>
		<release public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a k-rate `AudioParam` representing the amount of time, in seconds, required to increase the gain by 10 dB.</haxe_doc>
		</release>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.DynamicsCompressorOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Inherits properties from its parent, `AudioNode`.

	Documentation [DynamicsCompressorNode](https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode>]]></haxe_doc>
		<meta><m n=":native"><e>"DynamicsCompressorNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.DynamicsCompressorOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/DynamicsCompressorOptions.hx"><a>
	<threshold>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</threshold>
	<release>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</release>
	<ratio>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</ratio>
	<knee>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</knee>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
	<attack>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</attack>
</a></typedef>
	<class path="js.html.audio.GainNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/GainNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<gain public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam` representing the amount of gain to apply. You have to set `AudioParam.value` or use the methods of `AudioParam` to change the effect of gain.</haxe_doc>
		</gain>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.GainOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `GainNode` interface represents a change in volume. It is an `AudioNode` audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A `GainNode` always has exactly one input and one output, both with the same number of channels.

	Documentation [GainNode](https://developer.mozilla.org/en-US/docs/Web/API/GainNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/GainNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/GainNode>]]></haxe_doc>
		<meta><m n=":native"><e>"GainNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.GainOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/GainOptions.hx"><a>
	<gain>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</gain>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.audio.IIRFilterNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/IIRFilterNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<getFrequencyResponse public="1" set="method"><f a="frequencyHz:magResponse:phaseResponse">
	<c path="js.lib.Float32Array"/>
	<c path="js.lib.Float32Array"/>
	<c path="js.lib.Float32Array"/>
	<x path="Void"/>
</f></getFrequencyResponse>
		<new public="1" set="method">
			<f a="context:options">
				<c path="js.html.audio.BaseAudioContext"/>
				<t path="js.html.audio.IIRFilterOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `IIRFilterNode` interface of the Web Audio API is a `AudioNode` processor which implements a general infinite impulse response (IIR)  filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.

	Documentation [IIRFilterNode](https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode>]]></haxe_doc>
		<meta><m n=":native"><e>"IIRFilterNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.IIRFilterOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/IIRFilterOptions.hx"><a>
	<feedforward><c path="Array"><x path="Float"/></c></feedforward>
	<feedback><c path="Array"><x path="Float"/></c></feedback>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.audio.MediaElementAudioSourceNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/MediaElementAudioSourceNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<new public="1" set="method">
			<f a="context:options">
				<c path="js.html.audio.AudioContext"/>
				<t path="js.html.audio.MediaElementAudioSourceOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `MediaElementSourceNode` has no inputs and exactly one output, and is created using the `AudioContext.createMediaElementSource` method. The amount of channels in the output equals the number of channels of the audio referenced by the `HTMLMediaElement` used in the creation of the node, or is 1 if the `HTMLMediaElement` has no audio.

	Documentation [MediaElementAudioSourceNode](https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaElementAudioSourceNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.MediaElementAudioSourceOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/MediaElementAudioSourceOptions.hx"><a><mediaElement><c path="js.html.MediaElement"/></mediaElement></a></typedef>
	<class path="js.html.audio.MediaStreamAudioDestinationNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/MediaStreamAudioDestinationNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<stream public="1" set="null">
			<c path="js.html.MediaStream"/>
			<haxe_doc>Is a `MediaStream` containing a single `AudioMediaStreamTrack` with the same number of channels as the node itself. You can use this property to get a stream out of the audio graph and feed it into another construct, such as a Media Recorder.</haxe_doc>
		</stream>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.AudioContext"/>
				<x path="Null"><t path="js.html.audio.AudioNodeOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Inherits properties from its parent, `AudioNode`.

	Documentation [MediaStreamAudioDestinationNode](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStreamAudioDestinationNode"</e></m></meta>
	</class>
	<class path="js.html.audio.MediaStreamAudioSourceNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/MediaStreamAudioSourceNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<new public="1" set="method">
			<f a="context:options">
				<c path="js.html.audio.AudioContext"/>
				<t path="js.html.audio.MediaStreamAudioSourceOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `MediaStreamAudioSourceNode` has no inputs and exactly one output, and is created using the `AudioContext.createMediaStreamSource` method. The number of channels in the output equals the number of channels in `AudioMediaStreamTrack`. If there is no valid media stream, then the number of output channels will be one silent channel.

	Documentation [MediaStreamAudioSourceNode](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStreamAudioSourceNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.MediaStreamAudioSourceOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/MediaStreamAudioSourceOptions.hx"><a><mediaStream><c path="js.html.MediaStream"/></mediaStream></a></typedef>
	<class path="js.html.audio.OscillatorNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/OscillatorNode.hx" extern="1">
		<extends path="js.html.audio.AudioScheduledSourceNode"/>
		<type public="1">
			<x path="js.html.audio.OscillatorType"/>
			<haxe_doc>A string which specifies the shape of waveform to play; this can be one of a number of standard values, or `custom` to use a `PeriodicWave` to describe a custom waveform. Different waves will produce different tones. Standard values are `"sine"`, `"square"`, `"sawtooth"`, `"triangle"` and `"custom"`. The default is `"sine"`.</haxe_doc>
		</type>
		<frequency public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>An a-rate `AudioParam` representing the frequency of oscillation in hertz (though the AudioParam` returned is read-only, the value it represents is not). The default value is 440 Hz (a standard middle-A note).</haxe_doc>
		</frequency>
		<detune public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>An a-rate `AudioParam` representing detuning of oscillation in cents (though the AudioParam` returned is read-only, the value it represents is not). The default value is 0.</haxe_doc>
		</detune>
		<setPeriodicWave public="1" set="method">
			<f a="periodicWave">
				<c path="js.html.audio.PeriodicWave"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a `PeriodicWave` which describes a periodic waveform to be used instead of one of the standard waveforms; calling this sets the `type` to `custom`. This replaces the now-obsolete `OscillatorNode.setWaveTable()` method.</haxe_doc>
		</setPeriodicWave>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.OscillatorOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `OscillatorNode` interface represents a periodic waveform, such as a sine wave. It is an `AudioScheduledSourceNode` audio-processing module that causes a specified frequency of a given wave to be created—in effect, a constant tone.

	Documentation [OscillatorNode](https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode>]]></haxe_doc>
		<meta><m n=":native"><e>"OscillatorNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.OscillatorOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/OscillatorOptions.hx"><a>
	<type>
		<x path="Null"><x path="js.html.audio.OscillatorType"/></x>
		<meta><m n=":optional"/></meta>
	</type>
	<periodicWave>
		<x path="Null"><c path="js.html.audio.PeriodicWave"/></x>
		<meta><m n=":optional"/></meta>
	</periodicWave>
	<frequency>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</frequency>
	<detune>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</detune>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<abstract path="js.html.audio.OscillatorType" params="" file="/usr/local/lib/haxe/std/js/html/audio/OscillatorType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._OscillatorType.OscillatorType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/audio/OscillatorType.hx" private="1" module="js.html.audio.OscillatorType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.html.audio.OverSampleType" params="" file="/usr/local/lib/haxe/std/js/html/audio/OverSampleType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._OverSampleType.OverSampleType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/audio/OverSampleType.hx" private="1" module="js.html.audio.OverSampleType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.audio.PannerNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/PannerNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<panningModel public="1">
			<x path="js.html.audio.PanningModelType"/>
			<haxe_doc>An enumerated value determining which spatialisation algorithm to use to position the audio in 3D space.</haxe_doc>
		</panningModel>
		<positionX public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Represents the horizontal position of the audio in a right-hand cartesian coordinate sytem. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `AudioParam.value` property. The default is value is 0.</haxe_doc>
		</positionX>
		<positionY public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Represents the vertical position of the audio in a right-hand cartesian coordinate sytem. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `AudioParam.value` property. The default is value is 0.</haxe_doc>
		</positionY>
		<positionZ public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Represents the longitudinal (back and forth) position of the audio in a right-hand cartesian coordinate sytem. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `AudioParam.value` property. The default is value is 0.</haxe_doc>
		</positionZ>
		<orientationX public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Represents the horizontal position of the audio source's vector in a right-hand cartesian coordinate sytem. While this `AudioParam` cannot be directly changed, its value can be altered using its `AudioParam.value` property. The default is value is 1.</haxe_doc>
		</orientationX>
		<orientationY public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Represents the vertical position of the audio source's vector in a right-hand cartesian coordinate sytem. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `AudioParam.value` property. The default is value is 0.</haxe_doc>
		</orientationY>
		<orientationZ public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Represents the longitudinal (back and forth) position of the audio source's vector in a right-hand cartesian coordinate sytem. The default is 0. While this `AudioParam` cannot be directly changed, its value can be altered using its `AudioParam.value` property. The default is value is 0.</haxe_doc>
		</orientationZ>
		<distanceModel public="1">
			<x path="js.html.audio.DistanceModelType"/>
			<haxe_doc>An enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener.</haxe_doc>
		</distanceModel>
		<refDistance public="1">
			<x path="Float"/>
			<haxe_doc>A double value representing the reference distance for reducing volume as the audio source moves further from the listener.</haxe_doc>
		</refDistance>
		<maxDistance public="1">
			<x path="Float"/>
			<haxe_doc>A double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further.</haxe_doc>
		</maxDistance>
		<rolloffFactor public="1">
			<x path="Float"/>
			<haxe_doc>A double value describing how quickly the volume is reduced as the source moves away from the listener. This value is used by all distance models.</haxe_doc>
		</rolloffFactor>
		<coneInnerAngle public="1">
			<x path="Float"/>
			<haxe_doc>Is a double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction.</haxe_doc>
		</coneInnerAngle>
		<coneOuterAngle public="1">
			<x path="Float"/>
			<haxe_doc>A double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` attribute.</haxe_doc>
		</coneOuterAngle>
		<coneOuterGain public="1">
			<x path="Float"/>
			<haxe_doc>A double value describing the amount of volume reduction outside the cone defined by the `coneOuterAngle` attribute. Its default value is `0`, meaning that no sound can be heard.</haxe_doc>
		</coneOuterGain>
		<setPosition public="1" set="method">
			<f a="x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the position of the audio source relative to the listener (represented by an `AudioListener` object stored in the `AudioContext.listener` attribute.)</haxe_doc>
		</setPosition>
		<setOrientation public="1" set="method">
			<f a="x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the direction the audio source is playing in.</haxe_doc>
		</setOrientation>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.PannerOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `PannerNode` always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!

	Documentation [PannerNode](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PannerNode>]]></haxe_doc>
		<meta><m n=":native"><e>"PannerNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.PannerOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/PannerOptions.hx"><a>
	<rolloffFactor>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</rolloffFactor>
	<refDistance>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</refDistance>
	<positionZ>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</positionZ>
	<positionY>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</positionY>
	<positionX>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</positionX>
	<panningModel>
		<x path="Null"><x path="js.html.audio.PanningModelType"/></x>
		<meta><m n=":optional"/></meta>
	</panningModel>
	<orientationZ>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</orientationZ>
	<orientationY>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</orientationY>
	<orientationX>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</orientationX>
	<maxDistance>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</maxDistance>
	<distanceModel>
		<x path="Null"><x path="js.html.audio.DistanceModelType"/></x>
		<meta><m n=":optional"/></meta>
	</distanceModel>
	<coneOuterGain>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</coneOuterGain>
	<coneOuterAngle>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</coneOuterAngle>
	<coneInnerAngle>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</coneInnerAngle>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<abstract path="js.html.audio.PanningModelType" params="" file="/usr/local/lib/haxe/std/js/html/audio/PanningModelType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._PanningModelType.PanningModelType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/audio/PanningModelType.hx" private="1" module="js.html.audio.PanningModelType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.audio.PeriodicWave" params="" file="/usr/local/lib/haxe/std/js/html/audio/PeriodicWave.hx" extern="1">
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.PeriodicWaveOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`PeriodicWave` has no inputs or outputs; it is used to define custom oscillators when calling `OscillatorNode.setPeriodicWave()`. The `PeriodicWave` itself is created/returned by `AudioContext.createPeriodicWave()`.

	Documentation [PeriodicWave](https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave>]]></haxe_doc>
		<meta><m n=":native"><e>"PeriodicWave"</e></m></meta>
	</class>
	<typedef path="js.html.audio.PeriodicWaveConstraints" params="" file="/usr/local/lib/haxe/std/js/html/audio/PeriodicWaveConstraints.hx"><a><disableNormalization>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</disableNormalization></a></typedef>
	<typedef path="js.html.audio.PeriodicWaveOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/PeriodicWaveOptions.hx"><a>
	<real>
		<x path="Null"><c path="Array"><x path="Float"/></c></x>
		<meta><m n=":optional"/></meta>
	</real>
	<imag>
		<x path="Null"><c path="Array"><x path="Float"/></c></x>
		<meta><m n=":optional"/></meta>
	</imag>
	<disableNormalization>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</disableNormalization>
</a></typedef>
	<class path="js.html.audio.ScriptProcessorNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/ScriptProcessorNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<onaudioprocess public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the `EventHandler` to be called.</haxe_doc>
		</onaudioprocess>
		<bufferSize public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing both the input and output buffer size. Its value can be a power of 2 value in the range `256`–`16384`.</haxe_doc>
		</bufferSize>
		<haxe_doc><![CDATA[Documentation [ScriptProcessorNode](https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode>]]></haxe_doc>
		<meta><m n=":native"><e>"ScriptProcessorNode"</e></m></meta>
	</class>
	<class path="js.html.audio.StereoPannerNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/StereoPannerNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<pan public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam` representing the amount of panning to apply.</haxe_doc>
		</pan>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.StereoPannerOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `pan` property takes a unitless value between `-1` (full left pan) and `1` (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full `PannerNode`.

	Documentation [StereoPannerNode](https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode>]]></haxe_doc>
		<meta><m n=":native"><e>"StereoPannerNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.StereoPannerOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/StereoPannerOptions.hx"><a>
	<pan>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</pan>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.audio.WaveShaperNode" params="" file="/usr/local/lib/haxe/std/js/html/audio/WaveShaperNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<curve public="1">
			<c path="js.lib.Float32Array"/>
			<haxe_doc>Is a `Float32Array` of numbers describing the distortion to apply.</haxe_doc>
		</curve>
		<oversample public="1">
			<x path="js.html.audio.OverSampleType"/>
			<haxe_doc>Is an enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying the distortion effect to the audio signal.</haxe_doc>
		</oversample>
		<new public="1" set="method">
			<f a="context:?options">
				<c path="js.html.audio.BaseAudioContext"/>
				<x path="Null"><t path="js.html.audio.WaveShaperOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `WaveShaperNode` always has exactly one input and one output.

	Documentation [WaveShaperNode](https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode>]]></haxe_doc>
		<meta><m n=":native"><e>"WaveShaperNode"</e></m></meta>
	</class>
	<typedef path="js.html.audio.WaveShaperOptions" params="" file="/usr/local/lib/haxe/std/js/html/audio/WaveShaperOptions.hx"><a>
	<oversample>
		<x path="Null"><x path="js.html.audio.OverSampleType"/></x>
		<meta><m n=":optional"/></meta>
	</oversample>
	<curve>
		<x path="Null"><c path="Array"><x path="Float"/></c></x>
		<meta><m n=":optional"/></meta>
	</curve>
	<channelInterpretation>
		<x path="Null"><x path="js.html.audio.ChannelInterpretation"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
			The possible values are `"speakers"` or `"discrete"`. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelInterpretation>
	<channelCountMode>
		<x path="Null"><x path="js.html.audio.ChannelCountMode"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. (See `AudioNode.channelCountMode` for more information including default values.)</haxe_doc>
	</channelCountMode>
	<channelCount>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See `AudioNode.channelCount` for more information.) Its usage and precise definition depend on the value of `AudioNodeOptions.channelCountMode`.</haxe_doc>
	</channelCount>
</a></typedef>
	<class path="js.html.eme.MediaKeyError" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeyError.hx" extern="1">
		<extends path="js.html.Event"/>
		<systemCode public="1" set="null"><x path="Int"/></systemCode>
		<meta><m n=":native"><e>"MediaKeyError"</e></m></meta>
	</class>
	<class path="js.html.eme.MediaKeySession" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeySession.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<error public="1" set="null"><c path="js.html.eme.MediaKeyError"/></error>
		<sessionId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains a unique string generated by the CDM for the current media object and its associated keys or licenses.</haxe_doc>
		</sessionId>
		<expiration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The time after which the keys in the current session can no longer be used to decrypt media data, or `NaN` if no such time exists. This value is determined by the CDM and measured in milliseconds since January 1, 1970, UTC. This value may change during a session lifetime, such as when an action triggers the start of a window.</haxe_doc>
		</expiration>
		<closed public="1" set="null">
			<c path="js.lib.Promise"><x path="Void"/></c>
			<haxe_doc>Returns a `Promise` signaling when a `MediaKeySession` closes. This promise can only be fulfilled and is never rejected. Closing a session means that licenses and keys associated with it are no longer valid for decrypting media data. </haxe_doc>
		</closed>
		<keyStatuses public="1" set="null">
			<c path="js.html.eme.MediaKeyStatusMap"/>
			<haxe_doc>Contains a reference to a read-only `MediaKeyStatusMap` of the current session's keys and their statuses.</haxe_doc>
		</keyStatuses>
		<onkeystatuseschange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when there has been a change in the keys in a session or their statuses.</haxe_doc>
		</onkeystatuseschange>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Sets the `EventHandler` called when the content decryption module has generated a message for the session.</haxe_doc>
		</onmessage>
		<generateRequest public="1" set="method">
			<f a="initDataType:initData">
				<c path="String"/>
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` after generating a media request based on initialization data.</haxe_doc>
			<overloads><generateRequest public="1" set="method">
	<f a="initDataType:initData">
		<c path="String"/>
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` after generating a media request based on initialization data.</haxe_doc>
</generateRequest></overloads>
		</generateRequest>
		<load public="1" set="method">
			<f a="sessionId">
				<c path="String"/>
				<c path="js.lib.Promise"><x path="Bool"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to a boolean value after loading data for a specified session object. </haxe_doc>
		</load>
		<update public="1" set="method">
			<f a="response">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` after loading messages and licenses to the CDM.</haxe_doc>
			<overloads><update public="1" set="method">
	<f a="response">
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` after loading messages and licenses to the CDM.</haxe_doc>
</update></overloads>
		</update>
		<close public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Returns a `Promise` after notifying the current media session is no longer needed and that the CDM should release any resources associated with this object and close it.</haxe_doc>
		</close>
		<remove public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Void"/></c></f>
			<haxe_doc>Returns a `Promise` after removing any session data associated with the current object.</haxe_doc>
		</remove>
		<haxe_doc><![CDATA[The `MediaKeySession` interface of the EncryptedMediaExtensions API represents a context for message exchange with a content decryption module (CDM).

	Documentation [MediaKeySession](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeySession"</e></m></meta>
	</class>
	<abstract path="js.html.eme.MediaKeySessionType" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeySessionType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.eme._MediaKeySessionType.MediaKeySessionType_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeySessionType.hx" private="1" module="js.html.eme.MediaKeySessionType" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.eme.MediaKeyStatusMap" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeyStatusMap.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of key/value pars in the status map.</haxe_doc>
		</size>
		<has public="1" set="method">
			<f a="keyId">
				<c path="js.lib.ArrayBufferView"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean asserting whether a value has been associated with the given key.</haxe_doc>
			<overloads><has public="1" set="method">
	<f a="keyId">
		<c path="js.lib.ArrayBuffer"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Returns a boolean asserting whether a value has been associated with the given key.</haxe_doc>
</has></overloads>
		</has>
		<get public="1" set="method">
			<f a="keyId">
				<c path="js.lib.ArrayBufferView"/>
				<d/>
			</f>
			<haxe_doc>Returns the value associated with the given key, or `undefined` if there is none.
		@throws DOMError</haxe_doc>
			<overloads><get public="1" set="method">
	<f a="keyId">
		<c path="js.lib.ArrayBuffer"/>
		<d/>
	</f>
	<haxe_doc>Returns the value associated with the given key, or `undefined` if there is none.
		@throws DOMError</haxe_doc>
</get></overloads>
		</get>
		<entries public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing an array of `[key, value]` for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing keys for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><t path="js.html.MediaKeyStatusMapIterator"/></f>
			<haxe_doc>Returns a new `Iterator` object containing values for each element in the status map, in insertion order.
		@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `callback` once for each key-value pair in the status map, in insertion order. If `argument` is present it will be passed to the callback.
		@throws DOMError</haxe_doc>
		</forEach>
		<haxe_doc><![CDATA[The `MediaKeyStatusMap` interface of the EncryptedMediaExtensions API is a read-only map of media key statuses by key IDs.

	Documentation [MediaKeyStatusMap](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeyStatusMap"</e></m></meta>
	</class>
	<class path="js.html.eme.MediaKeySystemAccess" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeySystemAccess.hx" extern="1">
		<keySystem public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` identifying the key system being used.</haxe_doc>
		</keySystem>
		<getConfiguration public="1" set="method">
			<f a=""><t path="js.html.eme.MediaKeySystemConfiguration"/></f>
			<haxe_doc>Returns a `MediaKeySystemConfiguration` object with the supported combination of configuration options.</haxe_doc>
		</getConfiguration>
		<createMediaKeys public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.eme.MediaKeys"/></c></f>
			<haxe_doc>Returns a `Promise` that resolves to a new `MediaKeys` object.</haxe_doc>
		</createMediaKeys>
		<haxe_doc><![CDATA[The `MediaKeySystemAccess` interface of the EncryptedMediaExtensions API provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the `Navigator.requestMediaKeySystemAccess` method.

	Documentation [MediaKeySystemAccess](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeySystemAccess"</e></m></meta>
	</class>
	<typedef path="js.html.eme.MediaKeySystemConfiguration" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeySystemConfiguration.hx">
		<a>
			<videoCapabilities>
				<x path="Null"><c path="Array"><t path="js.html.eme.MediaKeySystemMediaCapability"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported video type and capability pairs.</haxe_doc>
			</videoCapabilities>
			<sessionTypes>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
			</sessionTypes>
			<persistentState>
				<x path="Null"><x path="js.html.eme.MediaKeysRequirement"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Indicates whether the ability to persist state is required.</haxe_doc>
			</persistentState>
			<label>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</label>
			<initDataTypes>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported initialization data type names. An initialization data type is a string indicating the format of the initialization data.</haxe_doc>
			</initDataTypes>
			<distinctiveIdentifier>
				<x path="Null"><x path="js.html.eme.MediaKeysRequirement"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Indicates whether a persistent distinctive identifier is required.</haxe_doc>
			</distinctiveIdentifier>
			<audioCapabilities>
				<x path="Null"><c path="Array"><t path="js.html.eme.MediaKeySystemMediaCapability"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Returns a list of supported audio type and capability pairs.</haxe_doc>
			</audioCapabilities>
		</a>
		<haxe_doc><![CDATA[The `MediaKeySystemConfiguration` interface Encrypted Media Extensions API provides configuration information about the media key system.

	Documentation [MediaKeySystemConfiguration](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration>]]></haxe_doc>
	</typedef>
	<typedef path="js.html.eme.MediaKeySystemMediaCapability" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeySystemMediaCapability.hx"><a>
	<robustness>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</robustness>
	<contentType>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</contentType>
</a></typedef>
	<class path="js.html.eme.MediaKeys" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeys.hx" extern="1">
		<keySystem public="1" set="null"><c path="String"/></keySystem>
		<createSession public="1" set="method">
			<f a="?sessionType" v="TEMPORARY">
				<x path="js.html.eme.MediaKeySessionType"/>
				<c path="js.html.eme.MediaKeySession"/>
			</f>
			<meta><m n=":value"><e>{ sessionType : TEMPORARY }</e></m></meta>
			<haxe_doc>Returns a new `MediaKeySession` object, which represents a context for message exchange with a content decryption module (CDM).
		@throws DOMError</haxe_doc>
		</createSession>
		<setServerCertificate public="1" set="method">
			<f a="serverCertificate">
				<c path="js.lib.ArrayBufferView"/>
				<c path="js.lib.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>Returns a `Promise` to a server certificate to be used to encrypt messages to the license server.</haxe_doc>
			<overloads><setServerCertificate public="1" set="method">
	<f a="serverCertificate">
		<c path="js.lib.ArrayBuffer"/>
		<c path="js.lib.Promise"><x path="Void"/></c>
	</f>
	<haxe_doc>Returns a `Promise` to a server certificate to be used to encrypt messages to the license server.</haxe_doc>
</setServerCertificate></overloads>
		</setServerCertificate>
		<haxe_doc><![CDATA[The `MediaKeys` interface of EncryptedMediaExtensions API the represents a set of keys that an associated `HTMLMediaElement` can use for decryption of media data during playback.

	Documentation [MediaKeys](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaKeys"</e></m></meta>
	</class>
	<abstract path="js.html.eme.MediaKeysRequirement" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeysRequirement.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.eme._MediaKeysRequirement.MediaKeysRequirement_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/eme/MediaKeysRequirement.hx" private="1" module="js.html.eme.MediaKeysRequirement" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.idb.Cursor" params="" file="/usr/local/lib/haxe/std/js/html/idb/Cursor.hx" extern="1">
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.idb.ObjectStore"/>
				<c path="js.html.idb.Index"/>
			</x>
			<haxe_doc>Returns the `IDBObjectStore` or `IDBIndex` that the cursor is iterating. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active.</haxe_doc>
		</source>
		<direction public="1" set="null">
			<x path="js.html.idb.CursorDirection"/>
			<haxe_doc>Returns the direction of traversal of the cursor. See Constants for possible values.</haxe_doc>
		</direction>
		<key public="1" set="null">
			<d/>
			<haxe_doc>Returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to `undefined`. The cursor's key can be any data type.</haxe_doc>
		</key>
		<primaryKey public="1" set="null">
			<d/>
			<haxe_doc>Returns the cursor's current effective primary key. If the cursor is currently being iterated or has iterated outside its range, this is set to `undefined`. The cursor's primary key can be any data type.</haxe_doc>
		</primaryKey>
		<update public="1" set="method">
			<f a="value">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, updates the value at the current position of the cursor in the object store. This can be used to update specific records.
		@throws DOMError</haxe_doc>
		</update>
		<advance public="1" set="method">
			<f a="count">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the number times a cursor should move its position forward.
		@throws DOMError</haxe_doc>
		</advance>
		<continue_ public="1" set="method">
			<f a="?key">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"continue"</e></m></meta>
			<haxe_doc>Advances the cursor to the next position along its direction, to the item whose key matches the optional `key` parameter.
		@throws DOMError</haxe_doc>
		</continue_>
		<continuePrimaryKey public="1" set="method">
			<f a="key:primaryKey">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the cursor to the given index key and primary key given as arguments.
		@throws DOMError</haxe_doc>
		</continuePrimaryKey>
		<delete public="1" set="method">
			<f a=""><c path="js.html.idb.Request"/></f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, deletes the record at the cursor's position, without changing the cursor's position. This can be used to delete specific records.
		@throws DOMError</haxe_doc>
		</delete>
		<haxe_doc><![CDATA[The `IDBCursor` interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.

	Documentation [IDBCursor](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBCursor"</e></m></meta>
	</class>
	<abstract path="js.html.idb.CursorDirection" params="" file="/usr/local/lib/haxe/std/js/html/idb/CursorDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._CursorDirection.CursorDirection_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/idb/CursorDirection.hx" private="1" module="js.html.idb.CursorDirection" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.idb.Database" params="" file="/usr/local/lib/haxe/std/js/html/idb/Database.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` that contains the name of the connected database.</haxe_doc>
		</name>
		<version public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string.</haxe_doc>
		</version>
		<objectStoreNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>A `DOMStringList` that contains a list of the names of the object stores currently in the connected database.</haxe_doc>
		</objectStoreNames>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when access of the database is aborted.</haxe_doc>
		</onabort>
		<onclose public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when the `close` event occurs; this happens when the database is unexpectedly closed, such as during application shutdown.</haxe_doc>
		</onclose>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when access to the database fails.</haxe_doc>
		</onerror>
		<onversionchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when a database structure change (`IDBOpenDBRequest.onupgradeneeded` event or` ``IDBFactory.deleteDatabase()` was requested elsewhere (most probably in another window/tab on the same computer). This is different from the version change transaction (see `IDBVersionChangeEvent`), but it is related.</haxe_doc>
		</onversionchange>
		<createObjectStore public="1" set="method">
			<f a="name:?optionalParameters">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.ObjectStoreParameters"/></x>
				<c path="js.html.idb.ObjectStore"/>
			</f>
			<haxe_doc>Creates and returns a new object store or index.
		@throws DOMError</haxe_doc>
		</createObjectStore>
		<deleteObjectStore public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Destroys the object store with the given name in the connected database, along with any indexes that reference it.
		@throws DOMError</haxe_doc>
		</deleteObjectStore>
		<transaction public="1" set="method">
			<f a="storeNames:?mode" v=":READONLY">
				<c path="String"/>
				<x path="js.html.idb.TransactionMode"/>
				<c path="js.html.idb.Transaction"/>
			</f>
			<meta><m n=":value"><e>{ mode : READONLY }</e></m></meta>
			<haxe_doc>Immediately returns a transaction object (`IDBTransaction`) containing the `IDBTransaction.objectStore` method, which you can use to access your object store. Runs in a separate thread.
		@throws DOMError</haxe_doc>
			<overloads><transaction public="1" set="method">
	<f a="storeNames:?mode" v=":READONLY">
		<c path="Array"><c path="String"/></c>
		<x path="js.html.idb.TransactionMode"/>
		<c path="js.html.idb.Transaction"/>
	</f>
	<meta><m n=":value"><e>{ mode : READONLY }</e></m></meta>
	<haxe_doc>Immediately returns a transaction object (`IDBTransaction`) containing the `IDBTransaction.objectStore` method, which you can use to access your object store. Runs in a separate thread.
		@throws DOMError</haxe_doc>
</transaction></overloads>
		</transaction>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Returns immediately and closes the connection to a database in a separate thread.</haxe_doc>
		</close>
		<createMutableFile public="1" set="method">
			<f a="name:?type">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createMutableFile>
		<haxe_doc><![CDATA[The `IDBDatabase` interface of the IndexedDB API provides a connection to a database; you can use an `IDBDatabase` object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.

	Documentation [IDBDatabase](https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBDatabase"</e></m></meta>
	</class>
	<class path="js.html.idb.Factory" params="" file="/usr/local/lib/haxe/std/js/html/idb/Factory.hx" extern="1">
		<open public="1" set="method">
			<f a="name:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.OpenDBOptions"/></x>
				<c path="js.html.idb.OpenDBRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="name:version">
		<c path="String"/>
		<x path="Int"/>
		<c path="js.html.idb.OpenDBRequest"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<deleteDatabase public="1" set="method">
			<f a="name:?options">
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.OpenDBOptions"/></x>
				<c path="js.html.idb.OpenDBRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteDatabase>
		<cmp public="1" set="method">
			<f a="first:second">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</cmp>
		<haxe_doc><![CDATA[In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)

	Documentation [IDBFactory](https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBFactory"</e></m></meta>
	</class>
	<class path="js.html.idb.Index" params="" file="/usr/local/lib/haxe/std/js/html/idb/Index.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of this index.</haxe_doc>
		</name>
		<objectStore public="1" set="null">
			<c path="js.html.idb.ObjectStore"/>
			<haxe_doc>The name of the object store referenced by this index.</haxe_doc>
		</objectStore>
		<keyPath public="1" set="null">
			<d/>
			<haxe_doc>The key path of this index. If null, this index is not auto-populated.</haxe_doc>
		</keyPath>
		<multiEntry public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Affects how the index behaves when the result of evaluating the index's key path yields an array. If `true`, there is one record in the index for each item in an array of keys. If `false`, then there is one record for each key that is an array.</haxe_doc>
		</multiEntry>
		<unique public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>If `true`, this index does not allow duplicate values for a key.</haxe_doc>
		</unique>
		<openCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a cursor over the specified key range.
		@throws DOMError</haxe_doc>
		</openCursor>
		<openKeyCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index.
		@throws DOMError</haxe_doc>
		</openKeyCursor>
		<get public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, finds either the value in the referenced object store that corresponds to the given key or the first corresponding value, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</get>
		<getKey public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, finds either the given key or the primary key, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getKey>
		<count public="1" set="method">
			<f a="?key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and in a separate thread, returns the number of records within a key range.
		@throws DOMError</haxe_doc>
		</count>
		<getAll public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, in a separate thread, finds all matching values in the referenced object store that correspond to the given key or are in range, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getAll>
		<getAllKeys public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, in a separate thread, finds all matching keys in the referenced object store that correspond to the given key or are in range, if `key` is an `IDBKeyRange`.
		@throws DOMError</haxe_doc>
		</getAllKeys>
		<haxe_doc><![CDATA[`IDBIndex` interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.

	Documentation [IDBIndex](https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBIndex"</e></m></meta>
	</class>
	<typedef path="js.html.idb.IndexParameters" params="" file="/usr/local/lib/haxe/std/js/html/idb/IndexParameters.hx"><a>
	<unique>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</unique>
	<multiEntry>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</multiEntry>
	<locale>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</locale>
</a></typedef>
	<class path="js.html.idb.ObjectStore" params="" file="/usr/local/lib/haxe/std/js/html/idb/ObjectStore.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of this object store.</haxe_doc>
		</name>
		<keyPath public="1" set="null">
			<d/>
			<haxe_doc>The key path of this object store. If this attribute is `null`, the application must provide a key for each modification operation.</haxe_doc>
		</keyPath>
		<indexNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>A list of the names of indexes on objects in this object store.</haxe_doc>
		</indexNames>
		<transaction public="1" set="null">
			<c path="js.html.idb.Transaction"/>
			<haxe_doc>The `IDBTransaction` object to which this object store belongs.</haxe_doc>
		</transaction>
		<autoIncrement public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The value of the auto increment flag for this object store.</haxe_doc>
		</autoIncrement>
		<put public="1" set="method">
			<f a="value:?key">
				<d/>
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a structured clone of the `value`, and stores the cloned value in the object store. This is for updating existing records in an object store when the transaction's mode is `readwrite`.
		@throws DOMError</haxe_doc>
		</put>
		<add public="1" set="method">
			<f a="value:?key">
				<d/>
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, creates a structured clone of the `value`, and stores the cloned value in the object store. This is for adding new records to an object store.
		@throws DOMError</haxe_doc>
		</add>
		<delete public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>returns an `IDBRequest` object, and, in a separate thread, deletes the store object selected by the specified key. This is for deleting individual records out of an object store.
		@throws DOMError</haxe_doc>
		</delete>
		<get public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns the store object store selected by the specified key. This is for retrieving specific records from an object store.
		@throws DOMError</haxe_doc>
		</get>
		<getKey public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread retrieves and returns the record key for the object in the object stored matching the specified parameter.
		@throws DOMError</haxe_doc>
		</getKey>
		<clear public="1" set="method">
			<f a=""><c path="js.html.idb.Request"/></f>
			<haxe_doc>Creates and immediately returns an `IDBRequest` object, and clears this object store in a separate thread. This is for deleting all current records out of an object store.
		@throws DOMError</haxe_doc>
		</clear>
		<openCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns a new `IDBCursorWithValue` object. Used for iterating through an object store by primary key with a cursor.
		@throws DOMError</haxe_doc>
		</openCursor>
		<createIndex public="1" set="method">
			<f a="name:keyPath:?optionalParameters">
				<c path="String"/>
				<c path="String"/>
				<x path="Null"><t path="js.html.idb.IndexParameters"/></x>
				<c path="js.html.idb.Index"/>
			</f>
			<haxe_doc>Creates a new index during a version upgrade, returning a new `IDBIndex` object in the connected database.
		@throws DOMError</haxe_doc>
			<overloads><createIndex public="1" set="method">
	<f a="name:keyPath:?optionalParameters">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.html.idb.IndexParameters"/></x>
		<c path="js.html.idb.Index"/>
	</f>
	<haxe_doc>Creates a new index during a version upgrade, returning a new `IDBIndex` object in the connected database.
		@throws DOMError</haxe_doc>
</createIndex></overloads>
		</createIndex>
		<index public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.idb.Index"/>
			</f>
			<haxe_doc>Opens an index from this object store after which it can, for example, be used to return a sequence of records sorted by that index using a cursor.
		@throws DOMError</haxe_doc>
		</index>
		<deleteIndex public="1" set="method">
			<f a="indexName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Destroys the specified index in the connected database, used during a version upgrade.
		@throws DOMError</haxe_doc>
		</deleteIndex>
		<count public="1" set="method">
			<f a="?key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns the total number of records that match the provided key or `IDBKeyRange`. If no arguments are provided, it returns the total number of records in the store.
		@throws DOMError</haxe_doc>
		</count>
		<getAll public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object retrieves all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.
		@throws DOMError</haxe_doc>
		</getAll>
		<getAllKeys public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>Returns an `IDBRequest` object retrieves record keys for all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.
		@throws DOMError</haxe_doc>
		</getAllKeys>
		<openKeyCursor public="1" set="method">
			<f a="?range:?direction" v=":NEXT">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : NEXT }</e></m></meta>
			<haxe_doc>Returns an `IDBRequest` object, and, in a separate thread, returns a new `IDBCursor`. Used for iterating through an object store with a key.
		@throws DOMError</haxe_doc>
		</openKeyCursor>
		<haxe_doc><![CDATA[This example shows a variety of different uses of object stores, from updating the data structure with `IDBObjectStore.createIndex` inside an `onupgradeneeded` function, to adding a new item to our object store with `IDBObjectStore.add`. For a full working example, see our To-do Notifications app (view example live.)

	Documentation [IDBObjectStore](https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBObjectStore"</e></m></meta>
	</class>
	<typedef path="js.html.idb.ObjectStoreParameters" params="" file="/usr/local/lib/haxe/std/js/html/idb/ObjectStoreParameters.hx"><a>
	<keyPath>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></x>
		<meta><m n=":optional"/></meta>
	</keyPath>
	<autoIncrement>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</autoIncrement>
</a></typedef>
	<typedef path="js.html.idb.OpenDBOptions" params="" file="/usr/local/lib/haxe/std/js/html/idb/OpenDBOptions.hx"><a>
	<version>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</version>
	<storage>
		<x path="Null"><x path="js.html.StorageType"/></x>
		<meta><m n=":optional"/></meta>
	</storage>
</a></typedef>
	<class path="js.html.idb.Request" params="" file="/usr/local/lib/haxe/std/js/html/idb/Request.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<result public="1" set="null">
			<d/>
			<haxe_doc>Returns the result of the request. If the the request failed and the result is not available, an InvalidStateError exception is thrown.</haxe_doc>
		</result>
		<error public="1" set="null">
			<c path="js.html.DOMException"/>
			<haxe_doc>Returns a `DOMException` in the event of an unsuccessful request, indicating what went wrong.</haxe_doc>
		</error>
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.idb.ObjectStore"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.idb.Index"/>
					<c path="js.html.idb.Cursor"/>
				</x>
			</x>
			<haxe_doc>The source of the request, such as an `IDBIndex` or an `IDBObjectStore`. If no source exists (such as when calling `IDBFactory.open`), it returns null.</haxe_doc>
		</source>
		<transaction public="1" set="null">
			<c path="js.html.idb.Transaction"/>
			<haxe_doc>The transaction for the request. This property can be null for certain requests, for example those returned from `IDBFactory.open` unless an upgrade is needed. (You're just connecting to a database, so there is no transaction to return).</haxe_doc>
		</transaction>
		<readyState public="1" set="null">
			<x path="js.html.idb.RequestReadyState"/>
			<haxe_doc>The state of the request. Every request starts in the `pending` state. The state changes to `done` when the request completes successfully or when an error occurs.</haxe_doc>
		</readyState>
		<onsuccess public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the success event.</haxe_doc>
		</onsuccess>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the error event.</haxe_doc>
		</onerror>
		<haxe_doc><![CDATA[The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the `IDBRequest` instance.

	Documentation [IDBRequest](https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBRequest"</e></m></meta>
	</class>
	<class path="js.html.idb.OpenDBRequest" params="" file="/usr/local/lib/haxe/std/js/html/idb/OpenDBRequest.hx" extern="1">
		<extends path="js.html.idb.Request"/>
		<onblocked public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the blocked event. This event is triggered when the `upgradeneeded` event should be triggered because of a version change but the database is still in use (i.e. not closed) somewhere, even after the `versionchange` event was sent.</haxe_doc>
		</onblocked>
		<onupgradeneeded public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `upgradeneeded` event, fired when a database of a bigger version number than the existing stored database is loaded.</haxe_doc>
		</onupgradeneeded>
		<haxe_doc><![CDATA[Also inherits methods from its parents `IDBRequest` and `EventTarget`.

	Documentation [IDBOpenDBRequest](https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBOpenDBRequest"</e></m></meta>
	</class>
	<abstract path="js.html.idb.RequestReadyState" params="" file="/usr/local/lib/haxe/std/js/html/idb/RequestReadyState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._RequestReadyState.RequestReadyState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/idb/RequestReadyState.hx" private="1" module="js.html.idb.RequestReadyState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.idb.Transaction" params="" file="/usr/local/lib/haxe/std/js/html/idb/Transaction.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<mode public="1" set="null">
			<x path="js.html.idb.TransactionMode"/>
			<haxe_doc>The mode for isolating access to data in the object stores that are in the scope of the transaction. For possible values, see the Constants section below. The default value is `readonly`.</haxe_doc>
		</mode>
		<db public="1" set="null">
			<c path="js.html.idb.Database"/>
			<haxe_doc>The database connection with which this transaction is associated.</haxe_doc>
		</db>
		<error public="1" set="null">
			<c path="js.html.DOMException"/>
			<haxe_doc>Returns a `DOMException` indicating the type of error that occured when there is an unsuccessful transaction. This property is `null` if the transaction is not finished, is finished and successfully committed, or was aborted with `IDBTransaction.abort` function.</haxe_doc>
		</error>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `abort` event, fired when the transaction is aborted. This can happen due to:
		 
		  bad requests, e.g. trying to add() the same key twice, or put() with the same index key with a uniqueness constraint and there is no error handler on the request to call preventDefault() on the event,
		  an explicit abort() call from script
		  uncaught exception in request's success/error handler,
		  an I/O error (actual failure to write to disk, e.g. disk detached, or other OS/hardware failure), or
		  quota exceeded.</haxe_doc>
		</onabort>
		<oncomplete public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `complete` event, thrown when the transaction completes successfully.</haxe_doc>
		</oncomplete>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `error` event, thrown when the transaction fails to complete.</haxe_doc>
		</onerror>
		<objectStoreNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>Returns a `DOMStringList` of the names of `IDBObjectStore` objects.</haxe_doc>
		</objectStoreNames>
		<objectStore public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.idb.ObjectStore"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</objectStore>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</abort>
		<haxe_doc><![CDATA[Note that as of Firefox 40, IndexedDB transactions have relaxed durability guarantees to increase performance (see bug 1112702.) Previously in a `readwrite` transaction `IDBTransaction.oncomplete` was fired only when all data was guaranteed to have been flushed to disk. In Firefox 40+ the `complete` event is fired after the OS has been told to write the data but potentially before that data has actually been flushed to disk. The `complete` event may thus be delivered quicker than before, however, there exists a small chance that the entire transaction will be lost if the OS crashes or there is a loss of system power before the data is flushed to disk. Since such catastrophic events are rare most consumers should not need to concern themselves further.

	Documentation [IDBTransaction](https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBTransaction"</e></m></meta>
	</class>
	<abstract path="js.html.idb.TransactionMode" params="" file="/usr/local/lib/haxe/std/js/html/idb/TransactionMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._TransactionMode.TransactionMode_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/idb/TransactionMode.hx" private="1" module="js.html.idb.TransactionMode" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.midi.MIDIAccess" params="" file="/usr/local/lib/haxe/std/js/html/midi/MIDIAccess.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<inputs public="1" set="null">
			<c path="js.html.midi.MIDIInputMap"/>
			<haxe_doc>Returns an instance of `MIDIInputMap` which provides access to any available MIDI input ports.</haxe_doc>
		</inputs>
		<outputs public="1" set="null">
			<c path="js.html.midi.MIDIOutputMap"/>
			<haxe_doc>Returns an instance of `MIDIOutputMap` which provides access to any available MIDI output ports.</haxe_doc>
		</outputs>
		<onstatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Called whenever a new MIDI port is added or an existing port changes state.</haxe_doc>
		</onstatechange>
		<sysexEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean attribute indicating whether system exclusive support is enabled on the current MIDIAccess instance.</haxe_doc>
		</sysexEnabled>
		<haxe_doc><![CDATA[The `MIDIAccess` interface of the Web MIDI API provides methods for listing MIDI input and output devices, and obtaining access to those devices.

	Documentation [MIDIAccess](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIAccess"</e></m></meta>
	</class>
	<class path="js.html.midi.MIDIInputMap" params="" file="/usr/local/lib/haxe/std/js/html/midi/MIDIInputMap.hx" extern="1">
		<size public="1" set="null"><x path="Int"/></size>
		<entries public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<has public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</has>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</get>
		<haxe_doc><![CDATA[The `MIDIInputMap` read-only interface of the Web MIDI API provides a `Map`-like interface to the currently available MIDI input ports. Though it works generally like a map, because it is read-only it does not contain `clear()`, `delete()`, or `set()` functions.

	Documentation [MIDIInputMap](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIInputMap"</e></m></meta>
	</class>
	<typedef path="js.html.midi.MIDIOptions" params="" file="/usr/local/lib/haxe/std/js/html/midi/MIDIOptions.hx"><a>
	<sysex>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</sysex>
	<software>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</software>
</a></typedef>
	<class path="js.html.midi.MIDIOutputMap" params="" file="/usr/local/lib/haxe/std/js/html/midi/MIDIOutputMap.hx" extern="1">
		<size public="1" set="null"><x path="Int"/></size>
		<entries public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<has public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</has>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</get>
		<haxe_doc><![CDATA[The `MIDIOutputMap` read-only interface of the Web MIDI API provides a `Map`-like interface to the currently available MIDI output ports. Although it works like a map, because it is read-only, it does not contain `clear()`, `delete()`, or `set()` functions.

	Documentation [MIDIOutputMap](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap>]]></haxe_doc>
		<meta><m n=":native"><e>"MIDIOutputMap"</e></m></meta>
	</class>
	<abstract path="js.html.push.PushEncryptionKeyName" params="" file="/usr/local/lib/haxe/std/js/html/push/PushEncryptionKeyName.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.push._PushEncryptionKeyName.PushEncryptionKeyName_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/push/PushEncryptionKeyName.hx" private="1" module="js.html.push.PushEncryptionKeyName" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.push.PushManager" params="" file="/usr/local/lib/haxe/std/js/html/push/PushManager.hx" extern="1">
		<subscribe public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.push.PushSubscriptionOptionsInit"/></x>
				<c path="js.lib.Promise"><c path="js.html.push.PushSubscription"/></c>
			</f>
			<haxe_doc>Subscribes to a push service. It returns a `Promise` that resolves to a `PushSubscription` object containing details of a push subscription. A new push subscription is created if the current service worker does not have an existing subscription.
		@throws DOMError</haxe_doc>
		</subscribe>
		<getSubscription public="1" set="method">
			<f a=""><c path="js.lib.Promise"><c path="js.html.push.PushSubscription"/></c></f>
			<haxe_doc>Retrieves an existing push subscription. It returns a `Promise` that resolves to a `PushSubscription` object containing details of an existing subscription. If no existing subscription exists, this resolves to a `null` value.
		@throws DOMError</haxe_doc>
		</getSubscription>
		<permissionState public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="js.html.push.PushSubscriptionOptionsInit"/></x>
				<c path="js.lib.Promise"><x path="js.html.push.PushPermissionState"/></c>
			</f>
			<haxe_doc>Returns a `Promise` that resolves to the permission state of the current `PushManager`, which will be one of `'granted'`, `'denied'`, or `'prompt'`.
		@throws DOMError</haxe_doc>
		</permissionState>
		<new public="1" set="method">
			<f a="scope">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PushManager` interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.

	Documentation [PushManager](https://developer.mozilla.org/en-US/docs/Web/API/PushManager) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PushManager$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PushManager>]]></haxe_doc>
		<meta><m n=":native"><e>"PushManager"</e></m></meta>
	</class>
	<abstract path="js.html.push.PushPermissionState" params="" file="/usr/local/lib/haxe/std/js/html/push/PushPermissionState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.push._PushPermissionState.PushPermissionState_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/push/PushPermissionState.hx" private="1" module="js.html.push.PushPermissionState" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.push.PushSubscription" params="" file="/usr/local/lib/haxe/std/js/html/push/PushSubscription.hx" extern="1">
		<endpoint public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `USVString` containing the endpoint associated with the push subscription.</haxe_doc>
		</endpoint>
		<options public="1" set="null">
			<c path="js.html.push.PushSubscriptionOptions"/>
			<haxe_doc>An object containing the options used to create the subscription.</haxe_doc>
		</options>
		<getKey public="1" set="method">
			<f a="name">
				<x path="js.html.push.PushEncryptionKeyName"/>
				<c path="js.lib.ArrayBuffer"/>
			</f>
			<haxe_doc>Returns an `ArrayBuffer` which contains the client's public key, which can then be sent to a server and used in encrypting push message data.
		@throws DOMError</haxe_doc>
		</getKey>
		<unsubscribe public="1" set="method">
			<f a=""><c path="js.lib.Promise"><x path="Bool"/></c></f>
			<haxe_doc>Starts the asynchronous process of unsubscribing from the push service, returning a `Promise` that resolves to a `Boolean` when the current subscription is successfully unregistered.
		@throws DOMError</haxe_doc>
		</unsubscribe>
		<toJSON public="1" set="method">
			<f a=""><t path="js.html.push.PushSubscriptionJSON"/></f>
			<haxe_doc>Standard serializer — returns a JSON representation of the subscription properties.
		@throws DOMError</haxe_doc>
		</toJSON>
		<new public="1" set="method">
			<f a="initDict">
				<t path="js.html.push.PushSubscriptionInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PushSubscription` interface of the Push API provides a subcription's URL endpoint and allows unsubscription from a push service.

	Documentation [PushSubscription](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription>]]></haxe_doc>
		<meta><m n=":native"><e>"PushSubscription"</e></m></meta>
	</class>
	<typedef path="js.html.push.PushSubscriptionInit" params="" file="/usr/local/lib/haxe/std/js/html/push/PushSubscriptionInit.hx"><a>
	<scope><c path="String"/></scope>
	<p256dhKey>
		<x path="Null"><c path="js.lib.ArrayBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</p256dhKey>
	<endpoint><c path="String"/></endpoint>
	<authSecret>
		<x path="Null"><c path="js.lib.ArrayBuffer"/></x>
		<meta><m n=":optional"/></meta>
	</authSecret>
	<appServerKey>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.lib.ArrayBufferView"/>
	<c path="js.lib.ArrayBuffer"/>
</x></x>
		<meta><m n=":optional"/></meta>
	</appServerKey>
</a></typedef>
	<typedef path="js.html.push.PushSubscriptionJSON" params="" file="/usr/local/lib/haxe/std/js/html/push/PushSubscriptionJSON.hx"><a>
	<keys>
		<x path="Null"><t path="js.html.push.PushSubscriptionKeys"/></x>
		<meta><m n=":optional"/></meta>
	</keys>
	<endpoint>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</endpoint>
</a></typedef>
	<typedef path="js.html.push.PushSubscriptionKeys" params="" file="/usr/local/lib/haxe/std/js/html/push/PushSubscriptionKeys.hx"><a>
	<p256dh>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</p256dh>
	<auth>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</auth>
</a></typedef>
	<class path="js.html.push.PushSubscriptionOptions" params="" file="/usr/local/lib/haxe/std/js/html/push/PushSubscriptionOptions.hx" extern="1">
		<applicationServerKey public="1" set="null"><c path="js.lib.ArrayBuffer"/></applicationServerKey>
		<meta><m n=":native"><e>"PushSubscriptionOptions"</e></m></meta>
	</class>
	<typedef path="js.html.push.PushSubscriptionOptionsInit" params="" file="/usr/local/lib/haxe/std/js/html/push/PushSubscriptionOptionsInit.hx"><a><applicationServerKey>
	<x path="Null"><x path="haxe.extern.EitherType">
	<x path="haxe.extern.EitherType">
		<c path="js.lib.ArrayBufferView"/>
		<c path="js.lib.ArrayBuffer"/>
	</x>
	<c path="String"/>
</x></x>
	<meta><m n=":optional"/></meta>
</applicationServerKey></a></typedef>
	<class path="js.html.svg.Angle" params="" file="/usr/local/lib/haxe/std/js/html/svg/Angle.hx" extern="1">
		<SVG_ANGLETYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
			<haxe_doc>Some unknown type of value.</haxe_doc>
		</SVG_ANGLETYPE_UNKNOWN>
		<SVG_ANGLETYPE_UNSPECIFIED public="1" get="inline" set="null" expr="1" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
			<haxe_doc>A unitless `number` interpreted as a value in degrees.</haxe_doc>
		</SVG_ANGLETYPE_UNSPECIFIED>
		<SVG_ANGLETYPE_DEG public="1" get="inline" set="null" expr="2" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
			<haxe_doc>An `angle` with a `deg` unit.</haxe_doc>
		</SVG_ANGLETYPE_DEG>
		<SVG_ANGLETYPE_RAD public="1" get="inline" set="null" expr="3" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
			<haxe_doc>An `angle` with a `rad` unit.</haxe_doc>
		</SVG_ANGLETYPE_RAD>
		<SVG_ANGLETYPE_GRAD public="1" get="inline" set="null" expr="4" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
			<haxe_doc>An `angle` with a `grad` unit.</haxe_doc>
		</SVG_ANGLETYPE_GRAD>
		<unitType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The type of the value as specified by one of the `SVG_ANGLETYPE_*` constants defined on this interface.</haxe_doc>
		</unitType>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>The value as a floating point value, in user units. Setting this attribute will cause `valueInSpecifiedUnits` and `valueAsString` to be updated automatically to reflect this setting.
		
		 Exceptions on setting: a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</value>
		<valueInSpecifiedUnits public="1">
			<x path="Float"/>
			<haxe_doc>The value as a floating point value, in the units expressed by `unitType`. Setting this attribute will cause `value` and `valueAsString` to be updated automatically to reflect this setting.
		
		 Exceptions on setting: a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</valueInSpecifiedUnits>
		<valueAsString public="1">
			<c path="String"/>
			<haxe_doc>The value as a `DOMString` value, in the units expressed by `unitType`. Setting this attribute will cause `value`, `valueInSpecifiedUnits` and `unitType` to be updated automatically to reflect this setting.
		
		 Exceptions on setting:
		 a `DOMException` with code `SYNTAX_ERR` is raised if the assigned string cannot be parsed as a valid `angle`. a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</valueAsString>
		<newValueSpecifiedUnits public="1" set="method">
			<f a="unitType:valueInSpecifiedUnits">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</newValueSpecifiedUnits>
		<convertToSpecifiedUnits public="1" set="method">
			<f a="unitType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertToSpecifiedUnits>
		<haxe_doc><![CDATA[The `SVGAngle` interface is used to represent a value that can be an `angle` or `number` value. An `SVGAngle` reflected through the `animVal` attribute is always read only.

	Documentation [SVGAngle](https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAngle"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedLength" params="" file="/usr/local/lib/haxe/std/js/html/svg/AnimatedLength.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.Length"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.Length"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedLength` interface is used for attributes of basic type length which can be animated.

	Documentation [SVGAnimatedLength](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedLength"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedPreserveAspectRatio" params="" file="/usr/local/lib/haxe/std/js/html/svg/AnimatedPreserveAspectRatio.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.PreserveAspectRatio"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.PreserveAspectRatio"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedPreserveAspectRatio` interface is used for attributes of type `SVGPreserveAspectRatio` which can be animated.

	Documentation [SVGAnimatedPreserveAspectRatio](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedPreserveAspectRatio"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedRect" params="" file="/usr/local/lib/haxe/std/js/html/svg/AnimatedRect.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.Rect"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.Rect"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedRect` interface is used for attributes of basic `SVGRect` which can be animated.

	Documentation [SVGAnimatedRect](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedRect"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedString" params="" file="/usr/local/lib/haxe/std/js/html/svg/AnimatedString.hx" extern="1">
		<baseVal public="1">
			<c path="String"/>
			<haxe_doc>This is a `DOMString` representing the base value. The base value of the given attribute before applying any animations. Setter throws DOMException.</haxe_doc>
		</baseVal>
		<animVal public="1" set="null">
			<c path="String"/>
			<haxe_doc>This is a `DOMString` representing the animation value. If the given attribute or property is being animated it contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, it contains the same value as baseVal.</haxe_doc>
		</animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedString` interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.

	Documentation [SVGAnimatedString](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedString"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedTransformList" params="" file="/usr/local/lib/haxe/std/js/html/svg/AnimatedTransformList.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.TransformList"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.TransformList"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedTransformList` interface is used for attributes which take a list of numbers and which can be animated.

	Documentation [SVGAnimatedTransformList](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedTransformList"</e></m></meta>
	</class>
	<typedef path="js.html.svg.BoundingBoxOptions" params="" file="/usr/local/lib/haxe/std/js/html/svg/BoundingBoxOptions.hx"><a>
	<stroke>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</stroke>
	<markers>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</markers>
	<fill>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</fill>
	<clipped>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</clipped>
</a></typedef>
	<class path="js.html.svg.Element" params="" file="/usr/local/lib/haxe/std/js/html/svg/Element.hx" extern="1">
		<extends path="js.html.DOMElement"/>
		<ownerSVGElement public="1" set="null">
			<c path="js.html.svg.SVGElement"/>
			<haxe_doc>An `SVGSVGElement` referring to the nearest ancestor `svg` element. `null` if the given element is the outermost `svg` element.</haxe_doc>
		</ownerSVGElement>
		<viewportElement public="1" set="null">
			<c path="js.html.svg.Element"/>
			<haxe_doc>The `SVGElement`, which established the current viewport. Often, the nearest ancestor `svg` element. `null` if the given element is the outermost `svg` element.</haxe_doc>
		</viewportElement>
		<focus public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blur>
		<haxe_doc><![CDATA[All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the `SVGElement` interface.

	Documentation [SVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.GraphicsElement" params="" file="/usr/local/lib/haxe/std/js/html/svg/GraphicsElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<transform public="1" set="null">
			<c path="js.html.svg.AnimatedTransformList"/>
			<haxe_doc>An `SVGAnimatedTransformList` reflecting the computed value of the `transform` property and its corresponding `transform` attribute of the given element.</haxe_doc>
		</transform>
		<nearestViewportElement public="1" set="null"><c path="js.html.svg.Element"/></nearestViewportElement>
		<farthestViewportElement public="1" set="null"><c path="js.html.svg.Element"/></farthestViewportElement>
		<requiredFeatures public="1" set="null"><c path="js.html.svg.StringList"/></requiredFeatures>
		<requiredExtensions public="1" set="null"><c path="js.html.svg.StringList"/></requiredExtensions>
		<systemLanguage public="1" set="null"><c path="js.html.svg.StringList"/></systemLanguage>
		<getBBox public="1" set="method">
			<f a="?aOptions">
				<x path="Null"><t path="js.html.svg.BoundingBoxOptions"/></x>
				<c path="js.html.svg.Rect"/>
			</f>
			<haxe_doc>Returns a `DOMRect` representing the computed bounding box of the current element.
		@throws DOMError</haxe_doc>
		</getBBox>
		<getCTM public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` representing the matrix that transforms the current element's coordinate system to its SVG viewport's coordinate system.</haxe_doc>
		</getCTM>
		<getScreenCTM public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` representing the matrix that transforms the current element's coordinate system to the coordinate system of the SVG viewport for the SVG document fragment.</haxe_doc>
		</getScreenCTM>
		<getTransformToElement public="1" set="method">
			<f a="element">
				<c path="js.html.svg.GraphicsElement"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getTransformToElement>
		<hasExtension public="1" set="method"><f a="extension">
	<c path="String"/>
	<x path="Bool"/>
</f></hasExtension>
		<haxe_doc><![CDATA[The `SVGGraphicsElement` interface represents SVG elements whose primary purpose is to directly render graphics into a group.

	Documentation [SVGGraphicsElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGGraphicsElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ImageElement" params="" file="/usr/local/lib/haxe/std/js/html/svg/ImageElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x` attribute of the given `image` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `y` attribute of the given `image` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `width` attribute of the given `image` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `height` attribute of the given `image` element.</haxe_doc>
		</height>
		<preserveAspectRatio public="1" set="null">
			<c path="js.html.svg.AnimatedPreserveAspectRatio"/>
			<haxe_doc>An `SVGAnimatedPreserveAspectRatio` corresponding to the `preserveAspectRatio` attribute of the given `image` element.</haxe_doc>
		</preserveAspectRatio>
		<decoding public="1"><c path="String"/></decoding>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGImageElement` interface corresponds to the `image` element.

	Documentation [SVGImageElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGImageElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Length" params="" file="/usr/local/lib/haxe/std/js/html/svg/Length.hx" extern="1">
		<SVG_LENGTHTYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_LENGTHTYPE_UNKNOWN>
		<SVG_LENGTHTYPE_NUMBER public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_LENGTHTYPE_NUMBER>
		<SVG_LENGTHTYPE_PERCENTAGE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_LENGTHTYPE_PERCENTAGE>
		<SVG_LENGTHTYPE_EMS public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_LENGTHTYPE_EMS>
		<SVG_LENGTHTYPE_EXS public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_LENGTHTYPE_EXS>
		<SVG_LENGTHTYPE_PX public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_LENGTHTYPE_PX>
		<SVG_LENGTHTYPE_CM public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_LENGTHTYPE_CM>
		<SVG_LENGTHTYPE_MM public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</SVG_LENGTHTYPE_MM>
		<SVG_LENGTHTYPE_IN public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SVG_LENGTHTYPE_IN>
		<SVG_LENGTHTYPE_PT public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</SVG_LENGTHTYPE_PT>
		<SVG_LENGTHTYPE_PC public="1" get="inline" set="null" expr="10" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</SVG_LENGTHTYPE_PC>
		<unitType public="1" set="null"><x path="Int"/></unitType>
		<value public="1"><x path="Float"/></value>
		<valueInSpecifiedUnits public="1"><x path="Float"/></valueInSpecifiedUnits>
		<valueAsString public="1"><c path="String"/></valueAsString>
		<newValueSpecifiedUnits public="1" set="method">
			<f a="unitType:valueInSpecifiedUnits">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</newValueSpecifiedUnits>
		<convertToSpecifiedUnits public="1" set="method">
			<f a="unitType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertToSpecifiedUnits>
		<haxe_doc><![CDATA[The `SVGLength` interface correspond to the length basic data type.

	Documentation [SVGLength](https://developer.mozilla.org/en-US/docs/Web/API/SVGLength) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGLength$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGLength>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGLength"</e></m></meta>
	</class>
	<class path="js.html.svg.Matrix" params="" file="/usr/local/lib/haxe/std/js/html/svg/Matrix.hx" extern="1">
		<a public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the a component of the matrix.</haxe_doc>
		</a>
		<b public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the b component of the matrix.</haxe_doc>
		</b>
		<c public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the c component of the matrix.</haxe_doc>
		</c>
		<d public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the d component of the matrix.</haxe_doc>
		</d>
		<e public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the e component of the matrix.</haxe_doc>
		</e>
		<f public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the f component of the matrix.</haxe_doc>
		</f>
		<multiply public="1" set="method">
			<f a="secondMatrix">
				<c path="js.html.svg.Matrix"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Performs matrix multiplication. This matrix is post-multiplied by another matrix, returning the resulting new matrix as `SVGMatrix`.</haxe_doc>
		</multiply>
		<inverse public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Returns the inverse matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</inverse>
		<translate public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a translation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</translate>
		<scale public="1" set="method">
			<f a="scaleFactor">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a uniform scale transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</scale>
		<scaleNonUniform public="1" set="method">
			<f a="scaleFactorX:scaleFactorY">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a non-uniform scale transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</scaleNonUniform>
		<rotate public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</rotate>
		<rotateFromVector public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as `SVGMatrix`. The rotation angle is determined by taking (+/-) atan(y/x). The direction of the vector (x, y) determines whether the positive or negative angle value is used.
		@throws DOMError</haxe_doc>
		</rotateFromVector>
		<flipX public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Post-multiplies the transformation [-1 0 0 1 0 0] and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</flipX>
		<flipY public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Post-multiplies the transformation [1 0 0 -1 0 0] and returns the resulting matrix as `SVGMatrix`.</haxe_doc>
		</flipY>
		<skewX public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a skewX transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</skewX>
		<skewY public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>Post-multiplies a skewY transformation on the current matrix and returns the resulting matrix as `SVGMatrix`.
		@throws DOMError</haxe_doc>
		</skewY>
		<haxe_doc><![CDATA[Many of SVG's graphics operations utilize 2x3 matrices of the form:

	Documentation [SVGMatrix](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGMatrix"</e></m></meta>
	</class>
	<class path="js.html.svg.Number" params="" file="/usr/local/lib/haxe/std/js/html/svg/Number.hx" extern="1">
		<value public="1">
			<x path="Float"/>
			<haxe_doc>A float representing the number.
		 Note: If the `SVGNumber` is read-only, a `DOMException` with the code NO_MODIFICATION_ALLOWED_ERR is raised on an attempt to change the value.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `SVGNumber` interface corresponds to the `number` basic data type.

	Documentation [SVGNumber](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGNumber"</e></m></meta>
	</class>
	<class path="js.html.svg.Point" params="" file="/usr/local/lib/haxe/std/js/html/svg/Point.hx" extern="1">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<matrixTransform public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Point"/>
</f></matrixTransform>
		<haxe_doc><![CDATA[An `SVGPoint` represents a 2D or 3D point in the SVG coordinate system.

	Documentation [SVGPoint](https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPoint"</e></m></meta>
	</class>
	<class path="js.html.svg.PreserveAspectRatio" params="" file="/usr/local/lib/haxe/std/js/html/svg/PreserveAspectRatio.hx" extern="1">
		<SVG_PRESERVEASPECTRATIO_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_UNKNOWN>
		<SVG_PRESERVEASPECTRATIO_NONE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_NONE>
		<SVG_PRESERVEASPECTRATIO_XMINYMIN public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMIN>
		<SVG_PRESERVEASPECTRATIO_XMIDYMIN public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMIN>
		<SVG_PRESERVEASPECTRATIO_XMAXYMIN public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMIN>
		<SVG_PRESERVEASPECTRATIO_XMINYMID public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMID>
		<SVG_PRESERVEASPECTRATIO_XMIDYMID public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMID>
		<SVG_PRESERVEASPECTRATIO_XMAXYMID public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMID>
		<SVG_PRESERVEASPECTRATIO_XMINYMAX public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMAX>
		<SVG_PRESERVEASPECTRATIO_XMIDYMAX public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMAX>
		<SVG_PRESERVEASPECTRATIO_XMAXYMAX public="1" get="inline" set="null" expr="10" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMAX>
		<SVG_MEETORSLICE_UNKNOWN public="1" get="inline" set="null" expr="0" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_MEETORSLICE_UNKNOWN>
		<SVG_MEETORSLICE_MEET public="1" get="inline" set="null" expr="1" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_MEETORSLICE_MEET>
		<SVG_MEETORSLICE_SLICE public="1" get="inline" set="null" expr="2" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_MEETORSLICE_SLICE>
		<align public="1"><x path="Int"/></align>
		<meetOrSlice public="1"><x path="Int"/></meetOrSlice>
		<haxe_doc><![CDATA[The `SVGPreserveAspectRatio` interface corresponds to the `preserveAspectRatio` attribute, which is available for some of SVG's elements.

	Documentation [SVGPreserveAspectRatio](https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPreserveAspectRatio"</e></m></meta>
	</class>
	<class path="js.html.svg.Rect" params="" file="/usr/local/lib/haxe/std/js/html/svg/Rect.hx" extern="1">
		<x public="1">
			<x path="Float"/>
			<haxe_doc>The exact effect of this coordinate depends on each element. If the attribute is not specified, the effect is as if a value of `0` were specified.</haxe_doc>
		</x>
		<y public="1">
			<x path="Float"/>
			<haxe_doc>The exact effect of this coordinate depends on each element.If the attribute is not specified, the effect is as if a value of `0` were specified.</haxe_doc>
		</y>
		<width public="1">
			<x path="Float"/>
			<haxe_doc>This represents the width of the rectangle.A value that is negative results to an error. A value of zero disables rendering of the element</haxe_doc>
		</width>
		<height public="1"><x path="Float"/></height>
		<haxe_doc><![CDATA[The `SVGRect` represents a rectangle. Rectangles consist of an x and y coordinate pair identifying a minimum x value, a minimum y value, and a width and height, which are constrained to be non-negative.

	Documentation [SVGRect](https://developer.mozilla.org/en-US/docs/Web/API/SVGRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGRect>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGRect"</e></m></meta>
	</class>
	<class path="js.html.svg.SVGElement" params="" file="/usr/local/lib/haxe/std/js/html/svg/SVGElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<SVG_ZOOMANDPAN_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_ZOOMANDPAN_UNKNOWN>
		<SVG_ZOOMANDPAN_DISABLE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_ZOOMANDPAN_DISABLE>
		<SVG_ZOOMANDPAN_MAGNIFY public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_ZOOMANDPAN_MAGNIFY>
		<x public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `x` attribute of the given `svg` element.</haxe_doc>
		</x>
		<y public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `y` attribute of the given `svg` element.</haxe_doc>
		</y>
		<width public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `width` attribute of the given `svg` element.</haxe_doc>
		</width>
		<height public="1" set="null">
			<c path="js.html.svg.AnimatedLength"/>
			<haxe_doc>An `SVGAnimatedLength` corresponding to the `height` attribute of the given `svg` element.</haxe_doc>
		</height>
		<useCurrentView public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The initial view (i.e., before magnification and panning) of the current innermost SVG document fragment can be either the "standard" view, i.e., based on attributes on the `svg` element such as `viewBox`) or on a "custom" view (i.e., a hyperlink into a particular `view` or other element). If the initial view is the "standard" view, then this attribute is `false`. If the initial view is a "custom" view, then this attribute is `true`.</haxe_doc>
		</useCurrentView>
		<currentScale public="1">
			<x path="Float"/>
			<haxe_doc>On an outermost `svg` element, this float attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations. DOM attributes `currentScale` and `currentTranslate` are equivalent to the 2x3 matrix `[a b c d e f] = [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]`. If "magnification" is enabled (i.e., `zoomAndPan="magnify"`), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost `svg` element).</haxe_doc>
		</currentScale>
		<currentTranslate public="1" set="null">
			<c path="js.html.svg.Point"/>
			<haxe_doc>An `SVGPoint` representing the translation factor that takes into account user "magnification" corresponding to an outermost `svg` element. The behavior is undefined for svg elements that are not at the outermost level.</haxe_doc>
		</currentTranslate>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<zoomAndPan public="1"><x path="Int"/></zoomAndPan>
		<suspendRedraw public="1" set="method">
			<f a="maxWaitMilliseconds">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Takes a time-out value which indicates that redraw shall not occur until:
		 the corresponding unsuspendRedraw() call has been made, an unsuspendRedrawAll() call has been made, or its timer has timed out.
		
		 In environments that do not support interactivity (e.g., print media), then redraw shall not be suspended. Calls to `suspendRedraw()` and `unsuspendRedraw()` should, but need not be, made in balanced pairs.
		
		 To suspend redraw actions as a collection of SVG DOM changes occur, precede the changes to the SVG DOM with a method call similar to:
		
		 suspendHandleID = suspendRedraw(maxWaitMilliseconds);
		
		 and follow the changes with a method call similar to:
		
		 unsuspendRedraw(suspendHandleID);
		
		 Note that multiple suspendRedraw calls can be used at once and that each such method call is treated independently of the other suspendRedraw method calls.</haxe_doc>
		</suspendRedraw>
		<unsuspendRedraw public="1" set="method">
			<f a="suspendHandleID">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Cancels a specified `suspendRedraw()` by providing a unique suspend handle ID that was returned by a previous `suspendRedraw()` call.</haxe_doc>
		</unsuspendRedraw>
		<unsuspendRedrawAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels all currently active `suspendRedraw()` method calls. This method is most useful at the very end of a set of SVG DOM calls to ensure that all pending `suspendRedraw()` method calls have been cancelled.</haxe_doc>
		</unsuspendRedrawAll>
		<forceRedraw public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>In rendering environments supporting interactivity, forces the user agent to immediately redraw all regions of the viewport that require updating.</haxe_doc>
		</forceRedraw>
		<pauseAnimations public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Suspends (i.e., pauses) all currently running animations that are defined within the SVG document fragment corresponding to this `svg` element, causing the animation clock corresponding to this document fragment to stand still until it is unpaused.</haxe_doc>
		</pauseAnimations>
		<unpauseAnimations public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unsuspends (i.e., unpauses) currently running animations that are defined within the SVG document fragment, causing the animation clock to continue from the time at which it was suspended.</haxe_doc>
		</unpauseAnimations>
		<animationsPaused public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if this SVG document fragment is in a paused state.</haxe_doc>
		</animationsPaused>
		<getCurrentTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the current time in seconds relative to the start time for the current SVG document fragment. If getCurrentTime is called before the document timeline has begun (for example, by script running in a `script` element before the document's SVGLoad event is dispatched), then 0 is returned.</haxe_doc>
		</getCurrentTime>
		<setCurrentTime public="1" set="method">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adjusts the clock for this SVG document fragment, establishing a new current time. If `setCurrentTime` is called before the document timeline has begun (for example, by script running in a `script` element before the document's SVGLoad event is dispatched), then the value of seconds in the last invocation of the method gives the time that the document will seek to once the document timeline has begun.</haxe_doc>
		</setCurrentTime>
		<deselectAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unselects any selected objects, including any selections of text strings and type-in bars.</haxe_doc>
		</deselectAll>
		<createSVGNumber public="1" set="method">
			<f a=""><c path="js.html.svg.Number"/></f>
			<haxe_doc>Creates an `SVGNumber` object outside of any document trees. The object is initialized to a value of zero.</haxe_doc>
		</createSVGNumber>
		<createSVGLength public="1" set="method">
			<f a=""><c path="js.html.svg.Length"/></f>
			<haxe_doc>Creates an `SVGLength` object outside of any document trees. The object is initialized to a value of zero user units.</haxe_doc>
		</createSVGLength>
		<createSVGAngle public="1" set="method">
			<f a=""><c path="js.html.svg.Angle"/></f>
			<haxe_doc>Creates an `SVGAngle` object outside of any document trees. The object is initialized to a value of zero degrees (unitless).</haxe_doc>
		</createSVGAngle>
		<createSVGPoint public="1" set="method">
			<f a=""><c path="js.html.svg.Point"/></f>
			<haxe_doc>Creates an `SVGPoint` object outside of any document trees. The object is initialized to the point (0,0) in the user coordinate system.</haxe_doc>
		</createSVGPoint>
		<createSVGMatrix public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>Creates an `SVGMatrix` object outside of any document trees. The object is initialized to the identity matrix.</haxe_doc>
		</createSVGMatrix>
		<createSVGRect public="1" set="method">
			<f a=""><c path="js.html.svg.Rect"/></f>
			<haxe_doc>Creates an `SVGRect` object outside of any document trees. The object is initialized such that all values are set to 0 user units.</haxe_doc>
		</createSVGRect>
		<createSVGTransform public="1" set="method">
			<f a=""><c path="js.html.svg.Transform"/></f>
			<haxe_doc>Creates an `SVGTransform` object outside of any document trees. The object is initialized to an identity matrix transform (`SVG_TRANSFORM_MATRIX`).</haxe_doc>
		</createSVGTransform>
		<createSVGTransformFromMatrix public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>Creates an `SVGTransform` object outside of any document trees. The object is initialized to the given matrix transform (i.e., `SVG_TRANSFORM_MATRIX`). The values from the parameter matrix are copied, the matrix parameter is not adopted as `SVGTransform::matrix`.</haxe_doc>
		</createSVGTransformFromMatrix>
		<getElementById public="1" set="method">
			<f a="elementId">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Searches this SVG document fragment (i.e., the search is restricted to a subset of the document tree) for an Element whose id is given by elementId. If an Element is found, that Element is returned. If no such element exists, returns null. Behavior is not defined if more than one element has this id.</haxe_doc>
		</getElementById>
		<haxe_doc><![CDATA[The `SVGSVGElement` interface provides access to the properties of `svg` elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.

	Documentation [SVGSVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGSVGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.StringList" params="" file="/usr/local/lib/haxe/std/js/html/svg/StringList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<haxe_doc><![CDATA[The `SVGStringList` defines a list of `DOMString` objects.

	Documentation [SVGStringList](https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGStringList"</e></m></meta>
	</class>
	<class path="js.html.svg.Transform" params="" file="/usr/local/lib/haxe/std/js/html/svg/Transform.hx" extern="1">
		<SVG_TRANSFORM_UNKNOWN public="1" get="inline" set="null" expr="0" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_TRANSFORM_UNKNOWN>
		<SVG_TRANSFORM_MATRIX public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_TRANSFORM_MATRIX>
		<SVG_TRANSFORM_TRANSLATE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_TRANSFORM_TRANSLATE>
		<SVG_TRANSFORM_SCALE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_TRANSFORM_SCALE>
		<SVG_TRANSFORM_ROTATE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_TRANSFORM_ROTATE>
		<SVG_TRANSFORM_SKEWX public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_TRANSFORM_SKEWX>
		<SVG_TRANSFORM_SKEWY public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_TRANSFORM_SKEWY>
		<type public="1" set="null"><x path="Int"/></type>
		<matrix public="1" set="null"><c path="js.html.svg.Matrix"/></matrix>
		<angle public="1" set="null"><x path="Float"/></angle>
		<setMatrix public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setMatrix>
		<setTranslate public="1" set="method">
			<f a="tx:ty">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setTranslate>
		<setScale public="1" set="method">
			<f a="sx:sy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setScale>
		<setRotate public="1" set="method">
			<f a="angle:cx:cy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setRotate>
		<setSkewX public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSkewX>
		<setSkewY public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSkewY>
		<haxe_doc><![CDATA[`SVGTransform` is the interface for one of the component transformations within an `SVGTransformList`; thus, an `SVGTransform` object corresponds to a single component (e.g., `scale(…)` or `matrix(…)`) within a `transform` attribute.

	Documentation [SVGTransform](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTransform"</e></m></meta>
	</class>
	<class path="js.html.svg.TransformList" params="" file="/usr/local/lib/haxe/std/js/html/svg/TransformList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<length public="1" set="null"><x path="Int"/></length>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Transform"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Transform"/>
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Transform"/>
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Transform"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<createSVGTransformFromMatrix public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Transform"/>
</f></createSVGTransformFromMatrix>
		<consolidate public="1" set="method">
			<f a=""><c path="js.html.svg.Transform"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</consolidate>
		<haxe_doc><![CDATA[The `SVGTransformList` defines a list of `SVGTransform` objects.

	Documentation [SVGTransformList](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTransformList"</e></m></meta>
	</class>
	<class path="js.html.webgl.ActiveInfo" params="" file="/usr/local/lib/haxe/std/js/html/webgl/ActiveInfo.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only size of the requested variable.</haxe_doc>
		</size>
		<type public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only type of the requested variable.</haxe_doc>
		</type>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The read-only name of the requested variable.</haxe_doc>
		</name>
		<haxe_doc><![CDATA[The WebGLActiveInfo interface is part of the WebGL API and represents the information returned by calling the `WebGLRenderingContext.getActiveAttrib()` and `WebGLRenderingContext.getActiveUniform()` methods.

	Documentation [WebGLActiveInfo](https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLActiveInfo"</e></m></meta>
	</class>
	<class path="js.html.webgl.Buffer" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Buffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLBuffer interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.

	Documentation [WebGLBuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLBuffer"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.ContextAttributes" params="" file="/usr/local/lib/haxe/std/js/html/webgl/ContextAttributes.hx"><a>
	<stencil>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</stencil>
	<preserveDrawingBuffer>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</preserveDrawingBuffer>
	<premultipliedAlpha>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</premultipliedAlpha>
	<powerPreference>
		<x path="Null"><x path="js.html.webgl.PowerPreference"/></x>
		<meta><m n=":optional"/></meta>
	</powerPreference>
	<failIfMajorPerformanceCaveat>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</failIfMajorPerformanceCaveat>
	<depth>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</depth>
	<antialias>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</antialias>
	<alpha>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</alpha>
</a></typedef>
	<abstract path="js.html.webgl.Extension" params="T" file="/usr/local/lib/haxe/std/js/html/webgl/Extension.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.webgl._Extension.Extension_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Extension.hx" private="1" module="js.html.webgl.Extension" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.webgl.Framebuffer" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Framebuffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLFramebuffer interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.

	Documentation [WebGLFramebuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLFramebuffer"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.GL" params="" file="/usr/local/lib/haxe/std/js/html/webgl/GL.hx">
		<c path="js.html.webgl.RenderingContext"/>
		<haxe_doc>An alias for accessing GL constants more naturally.</haxe_doc>
	</typedef>
	<abstract path="js.html.webgl.PowerPreference" params="" file="/usr/local/lib/haxe/std/js/html/webgl/PowerPreference.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.webgl._PowerPreference.PowerPreference_Impl_" params="" file="/usr/local/lib/haxe/std/js/html/webgl/PowerPreference.hx" private="1" module="js.html.webgl.PowerPreference" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.html.webgl.Program" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Program.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLProgram is part of the WebGL API and is a combination of two compiled `WebGLShader`s consisting of a vertex shader and a fragment shader (both written in GLSL). These are then linked into a usable program.

	Documentation [WebGLProgram](https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLProgram"</e></m></meta>
	</class>
	<class path="js.html.webgl.Query" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Query.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLQuery` interface is part of the WebGL 2 API and provides ways to asynchronously query for information. By default, occlusion queries and primitive queries are available.

	Documentation [WebGLQuery](https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLQuery"</e></m></meta>
	</class>
	<class path="js.html.webgl.Renderbuffer" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Renderbuffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLRenderbuffer interface is part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.

	Documentation [WebGLRenderbuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLRenderbuffer"</e></m></meta>
	</class>
	<class path="js.html.webgl.Sampler" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Sampler.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLSampler` interface is part of the WebGL 2 API and stores sampling parameters for `WebGLTexture` access inside of a shader.

	Documentation [WebGLSampler](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLSampler"</e></m></meta>
	</class>
	<class path="js.html.webgl.Shader" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Shader.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A `WebGLProgram` requires both types of shaders.

	Documentation [WebGLShader](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLShader"</e></m></meta>
	</class>
	<class path="js.html.webgl.ShaderPrecisionFormat" params="" file="/usr/local/lib/haxe/std/js/html/webgl/ShaderPrecisionFormat.hx" extern="1">
		<rangeMin public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The base 2 log of the absolute value of the minimum value that can be represented.</haxe_doc>
		</rangeMin>
		<rangeMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The base 2 log of the absolute value of the maximum value that can be represented.</haxe_doc>
		</rangeMax>
		<precision public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of bits of precision that can be represented. For integer formats this value is always 0.</haxe_doc>
		</precision>
		<haxe_doc><![CDATA[The WebGLShaderPrecisionFormat interface is part of the WebGL API and represents the information returned by calling the `WebGLRenderingContext.getShaderPrecisionFormat()` method.

	Documentation [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLShaderPrecisionFormat"</e></m></meta>
	</class>
	<class path="js.html.webgl.Sync" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Sync.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLSync` interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application.

	Documentation [WebGLSync](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLSync"</e></m></meta>
	</class>
	<class path="js.html.webgl.Texture" params="" file="/usr/local/lib/haxe/std/js/html/webgl/Texture.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLTexture interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.

	Documentation [WebGLTexture](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLTexture"</e></m></meta>
	</class>
	<class path="js.html.webgl.TransformFeedback" params="" file="/usr/local/lib/haxe/std/js/html/webgl/TransformFeedback.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLTransformFeedback` interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing. It allows to preserve the post-transform rendering state of an object and resubmit this data multiple times.

	Documentation [WebGLTransformFeedback](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLTransformFeedback"</e></m></meta>
	</class>
	<class path="js.html.webgl.UniformLocation" params="" file="/usr/local/lib/haxe/std/js/html/webgl/UniformLocation.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLUniformLocation interface is part of the WebGL API and represents the location of a uniform variable in a shader program.

	Documentation [WebGLUniformLocation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLUniformLocation"</e></m></meta>
	</class>
	<class path="js.html.webgl.VertexArrayObject" params="" file="/usr/local/lib/haxe/std/js/html/webgl/VertexArrayObject.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLVertexArrayObject` interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.

	Documentation [WebGLVertexArrayObject](https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLVertexArrayObject"</e></m></meta>
	</class>
	<class path="js.html.webgl.WebGL2RenderingContext" params="" file="/usr/local/lib/haxe/std/js/html/webgl/WebGL2RenderingContext.hx" extern="1">
		<extends path="js.html.webgl.RenderingContext"/>
		<READ_BUFFER public="1" get="inline" set="null" expr="3074" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3074</e></m></meta>
		</READ_BUFFER>
		<UNPACK_ROW_LENGTH public="1" get="inline" set="null" expr="3314" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3314</e></m></meta>
		</UNPACK_ROW_LENGTH>
		<UNPACK_SKIP_ROWS public="1" get="inline" set="null" expr="3315" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3315</e></m></meta>
		</UNPACK_SKIP_ROWS>
		<UNPACK_SKIP_PIXELS public="1" get="inline" set="null" expr="3316" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3316</e></m></meta>
		</UNPACK_SKIP_PIXELS>
		<PACK_ROW_LENGTH public="1" get="inline" set="null" expr="3330" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3330</e></m></meta>
		</PACK_ROW_LENGTH>
		<PACK_SKIP_ROWS public="1" get="inline" set="null" expr="3331" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3331</e></m></meta>
		</PACK_SKIP_ROWS>
		<PACK_SKIP_PIXELS public="1" get="inline" set="null" expr="3332" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3332</e></m></meta>
		</PACK_SKIP_PIXELS>
		<COLOR public="1" get="inline" set="null" expr="6144" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6144</e></m></meta>
		</COLOR>
		<DEPTH public="1" get="inline" set="null" expr="6145" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6145</e></m></meta>
		</DEPTH>
		<STENCIL public="1" get="inline" set="null" expr="6146" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6146</e></m></meta>
		</STENCIL>
		<RED public="1" get="inline" set="null" expr="6403" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6403</e></m></meta>
		</RED>
		<RGB8 public="1" get="inline" set="null" expr="32849" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32849</e></m></meta>
		</RGB8>
		<RGBA8 public="1" get="inline" set="null" expr="32856" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32856</e></m></meta>
		</RGBA8>
		<RGB10_A2 public="1" get="inline" set="null" expr="32857" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32857</e></m></meta>
		</RGB10_A2>
		<TEXTURE_BINDING_3D public="1" get="inline" set="null" expr="32874" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32874</e></m></meta>
		</TEXTURE_BINDING_3D>
		<UNPACK_SKIP_IMAGES public="1" get="inline" set="null" expr="32877" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32877</e></m></meta>
		</UNPACK_SKIP_IMAGES>
		<UNPACK_IMAGE_HEIGHT public="1" get="inline" set="null" expr="32878" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32878</e></m></meta>
		</UNPACK_IMAGE_HEIGHT>
		<TEXTURE_3D public="1" get="inline" set="null" expr="32879" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32879</e></m></meta>
		</TEXTURE_3D>
		<TEXTURE_WRAP_R public="1" get="inline" set="null" expr="32882" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32882</e></m></meta>
		</TEXTURE_WRAP_R>
		<MAX_3D_TEXTURE_SIZE public="1" get="inline" set="null" expr="32883" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32883</e></m></meta>
		</MAX_3D_TEXTURE_SIZE>
		<UNSIGNED_INT_2_10_10_10_REV public="1" get="inline" set="null" expr="33640" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33640</e></m></meta>
		</UNSIGNED_INT_2_10_10_10_REV>
		<MAX_ELEMENTS_VERTICES public="1" get="inline" set="null" expr="33000" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33000</e></m></meta>
		</MAX_ELEMENTS_VERTICES>
		<MAX_ELEMENTS_INDICES public="1" get="inline" set="null" expr="33001" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33001</e></m></meta>
		</MAX_ELEMENTS_INDICES>
		<TEXTURE_MIN_LOD public="1" get="inline" set="null" expr="33082" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33082</e></m></meta>
		</TEXTURE_MIN_LOD>
		<TEXTURE_MAX_LOD public="1" get="inline" set="null" expr="33083" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33083</e></m></meta>
		</TEXTURE_MAX_LOD>
		<TEXTURE_BASE_LEVEL public="1" get="inline" set="null" expr="33084" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33084</e></m></meta>
		</TEXTURE_BASE_LEVEL>
		<TEXTURE_MAX_LEVEL public="1" get="inline" set="null" expr="33085" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33085</e></m></meta>
		</TEXTURE_MAX_LEVEL>
		<MIN public="1" get="inline" set="null" expr="32775" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32775</e></m></meta>
		</MIN>
		<MAX public="1" get="inline" set="null" expr="32776" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32776</e></m></meta>
		</MAX>
		<DEPTH_COMPONENT24 public="1" get="inline" set="null" expr="33190" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33190</e></m></meta>
		</DEPTH_COMPONENT24>
		<MAX_TEXTURE_LOD_BIAS public="1" get="inline" set="null" expr="34045" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34045</e></m></meta>
		</MAX_TEXTURE_LOD_BIAS>
		<TEXTURE_COMPARE_MODE public="1" get="inline" set="null" expr="34892" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34892</e></m></meta>
		</TEXTURE_COMPARE_MODE>
		<TEXTURE_COMPARE_FUNC public="1" get="inline" set="null" expr="34893" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34893</e></m></meta>
		</TEXTURE_COMPARE_FUNC>
		<CURRENT_QUERY public="1" get="inline" set="null" expr="34917" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34917</e></m></meta>
		</CURRENT_QUERY>
		<QUERY_RESULT public="1" get="inline" set="null" expr="34918" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34918</e></m></meta>
		</QUERY_RESULT>
		<QUERY_RESULT_AVAILABLE public="1" get="inline" set="null" expr="34919" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34919</e></m></meta>
		</QUERY_RESULT_AVAILABLE>
		<STREAM_READ public="1" get="inline" set="null" expr="35041" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35041</e></m></meta>
		</STREAM_READ>
		<STREAM_COPY public="1" get="inline" set="null" expr="35042" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35042</e></m></meta>
		</STREAM_COPY>
		<STATIC_READ public="1" get="inline" set="null" expr="35045" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35045</e></m></meta>
		</STATIC_READ>
		<STATIC_COPY public="1" get="inline" set="null" expr="35046" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35046</e></m></meta>
		</STATIC_COPY>
		<DYNAMIC_READ public="1" get="inline" set="null" expr="35049" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35049</e></m></meta>
		</DYNAMIC_READ>
		<DYNAMIC_COPY public="1" get="inline" set="null" expr="35050" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35050</e></m></meta>
		</DYNAMIC_COPY>
		<MAX_DRAW_BUFFERS public="1" get="inline" set="null" expr="34852" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34852</e></m></meta>
		</MAX_DRAW_BUFFERS>
		<DRAW_BUFFER0 public="1" get="inline" set="null" expr="34853" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34853</e></m></meta>
		</DRAW_BUFFER0>
		<DRAW_BUFFER1 public="1" get="inline" set="null" expr="34854" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34854</e></m></meta>
		</DRAW_BUFFER1>
		<DRAW_BUFFER2 public="1" get="inline" set="null" expr="34855" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34855</e></m></meta>
		</DRAW_BUFFER2>
		<DRAW_BUFFER3 public="1" get="inline" set="null" expr="34856" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34856</e></m></meta>
		</DRAW_BUFFER3>
		<DRAW_BUFFER4 public="1" get="inline" set="null" expr="34857" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34857</e></m></meta>
		</DRAW_BUFFER4>
		<DRAW_BUFFER5 public="1" get="inline" set="null" expr="34858" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34858</e></m></meta>
		</DRAW_BUFFER5>
		<DRAW_BUFFER6 public="1" get="inline" set="null" expr="34859" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34859</e></m></meta>
		</DRAW_BUFFER6>
		<DRAW_BUFFER7 public="1" get="inline" set="null" expr="34860" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34860</e></m></meta>
		</DRAW_BUFFER7>
		<DRAW_BUFFER8 public="1" get="inline" set="null" expr="34861" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34861</e></m></meta>
		</DRAW_BUFFER8>
		<DRAW_BUFFER9 public="1" get="inline" set="null" expr="34862" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34862</e></m></meta>
		</DRAW_BUFFER9>
		<DRAW_BUFFER10 public="1" get="inline" set="null" expr="34863" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34863</e></m></meta>
		</DRAW_BUFFER10>
		<DRAW_BUFFER11 public="1" get="inline" set="null" expr="34864" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34864</e></m></meta>
		</DRAW_BUFFER11>
		<DRAW_BUFFER12 public="1" get="inline" set="null" expr="34865" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34865</e></m></meta>
		</DRAW_BUFFER12>
		<DRAW_BUFFER13 public="1" get="inline" set="null" expr="34866" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34866</e></m></meta>
		</DRAW_BUFFER13>
		<DRAW_BUFFER14 public="1" get="inline" set="null" expr="34867" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34867</e></m></meta>
		</DRAW_BUFFER14>
		<DRAW_BUFFER15 public="1" get="inline" set="null" expr="34868" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34868</e></m></meta>
		</DRAW_BUFFER15>
		<MAX_FRAGMENT_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35657" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35657</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_COMPONENTS>
		<MAX_VERTEX_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35658" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35658</e></m></meta>
		</MAX_VERTEX_UNIFORM_COMPONENTS>
		<SAMPLER_3D public="1" get="inline" set="null" expr="35679" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35679</e></m></meta>
		</SAMPLER_3D>
		<SAMPLER_2D_SHADOW public="1" get="inline" set="null" expr="35682" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35682</e></m></meta>
		</SAMPLER_2D_SHADOW>
		<FRAGMENT_SHADER_DERIVATIVE_HINT public="1" get="inline" set="null" expr="35723" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35723</e></m></meta>
		</FRAGMENT_SHADER_DERIVATIVE_HINT>
		<PIXEL_PACK_BUFFER public="1" get="inline" set="null" expr="35051" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35051</e></m></meta>
		</PIXEL_PACK_BUFFER>
		<PIXEL_UNPACK_BUFFER public="1" get="inline" set="null" expr="35052" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35052</e></m></meta>
		</PIXEL_UNPACK_BUFFER>
		<PIXEL_PACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35053" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35053</e></m></meta>
		</PIXEL_PACK_BUFFER_BINDING>
		<PIXEL_UNPACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35055" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35055</e></m></meta>
		</PIXEL_UNPACK_BUFFER_BINDING>
		<FLOAT_MAT2x3 public="1" get="inline" set="null" expr="35685" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35685</e></m></meta>
		</FLOAT_MAT2x3>
		<FLOAT_MAT2x4 public="1" get="inline" set="null" expr="35686" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35686</e></m></meta>
		</FLOAT_MAT2x4>
		<FLOAT_MAT3x2 public="1" get="inline" set="null" expr="35687" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35687</e></m></meta>
		</FLOAT_MAT3x2>
		<FLOAT_MAT3x4 public="1" get="inline" set="null" expr="35688" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35688</e></m></meta>
		</FLOAT_MAT3x4>
		<FLOAT_MAT4x2 public="1" get="inline" set="null" expr="35689" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35689</e></m></meta>
		</FLOAT_MAT4x2>
		<FLOAT_MAT4x3 public="1" get="inline" set="null" expr="35690" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35690</e></m></meta>
		</FLOAT_MAT4x3>
		<SRGB public="1" get="inline" set="null" expr="35904" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35904</e></m></meta>
		</SRGB>
		<SRGB8 public="1" get="inline" set="null" expr="35905" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35905</e></m></meta>
		</SRGB8>
		<SRGB8_ALPHA8 public="1" get="inline" set="null" expr="35907" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35907</e></m></meta>
		</SRGB8_ALPHA8>
		<COMPARE_REF_TO_TEXTURE public="1" get="inline" set="null" expr="34894" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34894</e></m></meta>
		</COMPARE_REF_TO_TEXTURE>
		<RGBA32F public="1" get="inline" set="null" expr="34836" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34836</e></m></meta>
		</RGBA32F>
		<RGB32F public="1" get="inline" set="null" expr="34837" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34837</e></m></meta>
		</RGB32F>
		<RGBA16F public="1" get="inline" set="null" expr="34842" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34842</e></m></meta>
		</RGBA16F>
		<RGB16F public="1" get="inline" set="null" expr="34843" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34843</e></m></meta>
		</RGB16F>
		<VERTEX_ATTRIB_ARRAY_INTEGER public="1" get="inline" set="null" expr="35069" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35069</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_INTEGER>
		<MAX_ARRAY_TEXTURE_LAYERS public="1" get="inline" set="null" expr="35071" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35071</e></m></meta>
		</MAX_ARRAY_TEXTURE_LAYERS>
		<MIN_PROGRAM_TEXEL_OFFSET public="1" get="inline" set="null" expr="35076" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35076</e></m></meta>
		</MIN_PROGRAM_TEXEL_OFFSET>
		<MAX_PROGRAM_TEXEL_OFFSET public="1" get="inline" set="null" expr="35077" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35077</e></m></meta>
		</MAX_PROGRAM_TEXEL_OFFSET>
		<MAX_VARYING_COMPONENTS public="1" get="inline" set="null" expr="35659" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35659</e></m></meta>
		</MAX_VARYING_COMPONENTS>
		<TEXTURE_2D_ARRAY public="1" get="inline" set="null" expr="35866" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35866</e></m></meta>
		</TEXTURE_2D_ARRAY>
		<TEXTURE_BINDING_2D_ARRAY public="1" get="inline" set="null" expr="35869" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35869</e></m></meta>
		</TEXTURE_BINDING_2D_ARRAY>
		<R11F_G11F_B10F public="1" get="inline" set="null" expr="35898" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35898</e></m></meta>
		</R11F_G11F_B10F>
		<UNSIGNED_INT_10F_11F_11F_REV public="1" get="inline" set="null" expr="35899" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35899</e></m></meta>
		</UNSIGNED_INT_10F_11F_11F_REV>
		<RGB9_E5 public="1" get="inline" set="null" expr="35901" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35901</e></m></meta>
		</RGB9_E5>
		<UNSIGNED_INT_5_9_9_9_REV public="1" get="inline" set="null" expr="35902" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35902</e></m></meta>
		</UNSIGNED_INT_5_9_9_9_REV>
		<TRANSFORM_FEEDBACK_BUFFER_MODE public="1" get="inline" set="null" expr="35967" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35967</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_MODE>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS public="1" get="inline" set="null" expr="35968" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35968</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS>
		<TRANSFORM_FEEDBACK_VARYINGS public="1" get="inline" set="null" expr="35971" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35971</e></m></meta>
		</TRANSFORM_FEEDBACK_VARYINGS>
		<TRANSFORM_FEEDBACK_BUFFER_START public="1" get="inline" set="null" expr="35972" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35972</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_START>
		<TRANSFORM_FEEDBACK_BUFFER_SIZE public="1" get="inline" set="null" expr="35973" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35973</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_SIZE>
		<TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN public="1" get="inline" set="null" expr="35976" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35976</e></m></meta>
		</TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN>
		<RASTERIZER_DISCARD public="1" get="inline" set="null" expr="35977" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35977</e></m></meta>
		</RASTERIZER_DISCARD>
		<MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS public="1" get="inline" set="null" expr="35978" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35978</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS>
		<MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS public="1" get="inline" set="null" expr="35979" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35979</e></m></meta>
		</MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS>
		<INTERLEAVED_ATTRIBS public="1" get="inline" set="null" expr="35980" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35980</e></m></meta>
		</INTERLEAVED_ATTRIBS>
		<SEPARATE_ATTRIBS public="1" get="inline" set="null" expr="35981" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35981</e></m></meta>
		</SEPARATE_ATTRIBS>
		<TRANSFORM_FEEDBACK_BUFFER public="1" get="inline" set="null" expr="35982" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35982</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER>
		<TRANSFORM_FEEDBACK_BUFFER_BINDING public="1" get="inline" set="null" expr="35983" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35983</e></m></meta>
		</TRANSFORM_FEEDBACK_BUFFER_BINDING>
		<RGBA32UI public="1" get="inline" set="null" expr="36208" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36208</e></m></meta>
		</RGBA32UI>
		<RGB32UI public="1" get="inline" set="null" expr="36209" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36209</e></m></meta>
		</RGB32UI>
		<RGBA16UI public="1" get="inline" set="null" expr="36214" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36214</e></m></meta>
		</RGBA16UI>
		<RGB16UI public="1" get="inline" set="null" expr="36215" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36215</e></m></meta>
		</RGB16UI>
		<RGBA8UI public="1" get="inline" set="null" expr="36220" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36220</e></m></meta>
		</RGBA8UI>
		<RGB8UI public="1" get="inline" set="null" expr="36221" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36221</e></m></meta>
		</RGB8UI>
		<RGBA32I public="1" get="inline" set="null" expr="36226" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36226</e></m></meta>
		</RGBA32I>
		<RGB32I public="1" get="inline" set="null" expr="36227" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36227</e></m></meta>
		</RGB32I>
		<RGBA16I public="1" get="inline" set="null" expr="36232" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36232</e></m></meta>
		</RGBA16I>
		<RGB16I public="1" get="inline" set="null" expr="36233" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36233</e></m></meta>
		</RGB16I>
		<RGBA8I public="1" get="inline" set="null" expr="36238" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36238</e></m></meta>
		</RGBA8I>
		<RGB8I public="1" get="inline" set="null" expr="36239" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36239</e></m></meta>
		</RGB8I>
		<RED_INTEGER public="1" get="inline" set="null" expr="36244" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36244</e></m></meta>
		</RED_INTEGER>
		<RGB_INTEGER public="1" get="inline" set="null" expr="36248" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36248</e></m></meta>
		</RGB_INTEGER>
		<RGBA_INTEGER public="1" get="inline" set="null" expr="36249" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36249</e></m></meta>
		</RGBA_INTEGER>
		<SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36289" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36289</e></m></meta>
		</SAMPLER_2D_ARRAY>
		<SAMPLER_2D_ARRAY_SHADOW public="1" get="inline" set="null" expr="36292" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36292</e></m></meta>
		</SAMPLER_2D_ARRAY_SHADOW>
		<SAMPLER_CUBE_SHADOW public="1" get="inline" set="null" expr="36293" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36293</e></m></meta>
		</SAMPLER_CUBE_SHADOW>
		<UNSIGNED_INT_VEC2 public="1" get="inline" set="null" expr="36294" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36294</e></m></meta>
		</UNSIGNED_INT_VEC2>
		<UNSIGNED_INT_VEC3 public="1" get="inline" set="null" expr="36295" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36295</e></m></meta>
		</UNSIGNED_INT_VEC3>
		<UNSIGNED_INT_VEC4 public="1" get="inline" set="null" expr="36296" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36296</e></m></meta>
		</UNSIGNED_INT_VEC4>
		<INT_SAMPLER_2D public="1" get="inline" set="null" expr="36298" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36298</e></m></meta>
		</INT_SAMPLER_2D>
		<INT_SAMPLER_3D public="1" get="inline" set="null" expr="36299" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36299</e></m></meta>
		</INT_SAMPLER_3D>
		<INT_SAMPLER_CUBE public="1" get="inline" set="null" expr="36300" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36300</e></m></meta>
		</INT_SAMPLER_CUBE>
		<INT_SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36303" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36303</e></m></meta>
		</INT_SAMPLER_2D_ARRAY>
		<UNSIGNED_INT_SAMPLER_2D public="1" get="inline" set="null" expr="36306" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36306</e></m></meta>
		</UNSIGNED_INT_SAMPLER_2D>
		<UNSIGNED_INT_SAMPLER_3D public="1" get="inline" set="null" expr="36307" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36307</e></m></meta>
		</UNSIGNED_INT_SAMPLER_3D>
		<UNSIGNED_INT_SAMPLER_CUBE public="1" get="inline" set="null" expr="36308" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36308</e></m></meta>
		</UNSIGNED_INT_SAMPLER_CUBE>
		<UNSIGNED_INT_SAMPLER_2D_ARRAY public="1" get="inline" set="null" expr="36311" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36311</e></m></meta>
		</UNSIGNED_INT_SAMPLER_2D_ARRAY>
		<DEPTH_COMPONENT32F public="1" get="inline" set="null" expr="36012" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36012</e></m></meta>
		</DEPTH_COMPONENT32F>
		<DEPTH32F_STENCIL8 public="1" get="inline" set="null" expr="36013" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36013</e></m></meta>
		</DEPTH32F_STENCIL8>
		<FLOAT_32_UNSIGNED_INT_24_8_REV public="1" get="inline" set="null" expr="36269" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36269</e></m></meta>
		</FLOAT_32_UNSIGNED_INT_24_8_REV>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING public="1" get="inline" set="null" expr="33296" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33296</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE public="1" get="inline" set="null" expr="33297" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_RED_SIZE public="1" get="inline" set="null" expr="33298" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33298</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_RED_SIZE>
		<FRAMEBUFFER_ATTACHMENT_GREEN_SIZE public="1" get="inline" set="null" expr="33299" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33299</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_GREEN_SIZE>
		<FRAMEBUFFER_ATTACHMENT_BLUE_SIZE public="1" get="inline" set="null" expr="33300" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33300</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_BLUE_SIZE>
		<FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE public="1" get="inline" set="null" expr="33301" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33301</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE>
		<FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE public="1" get="inline" set="null" expr="33302" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33302</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE>
		<FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE public="1" get="inline" set="null" expr="33303" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33303</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE>
		<FRAMEBUFFER_DEFAULT public="1" get="inline" set="null" expr="33304" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33304</e></m></meta>
		</FRAMEBUFFER_DEFAULT>
		<UNSIGNED_INT_24_8 public="1" get="inline" set="null" expr="34042" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34042</e></m></meta>
		</UNSIGNED_INT_24_8>
		<DEPTH24_STENCIL8 public="1" get="inline" set="null" expr="35056" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35056</e></m></meta>
		</DEPTH24_STENCIL8>
		<UNSIGNED_NORMALIZED public="1" get="inline" set="null" expr="35863" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
		</UNSIGNED_NORMALIZED>
		<DRAW_FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</DRAW_FRAMEBUFFER_BINDING>
		<READ_FRAMEBUFFER public="1" get="inline" set="null" expr="36008" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36008</e></m></meta>
		</READ_FRAMEBUFFER>
		<DRAW_FRAMEBUFFER public="1" get="inline" set="null" expr="36009" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36009</e></m></meta>
		</DRAW_FRAMEBUFFER>
		<READ_FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36010" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36010</e></m></meta>
		</READ_FRAMEBUFFER_BINDING>
		<RENDERBUFFER_SAMPLES public="1" get="inline" set="null" expr="36011" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36011</e></m></meta>
		</RENDERBUFFER_SAMPLES>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER public="1" get="inline" set="null" expr="36052" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36052</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER>
		<MAX_COLOR_ATTACHMENTS public="1" get="inline" set="null" expr="36063" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36063</e></m></meta>
		</MAX_COLOR_ATTACHMENTS>
		<COLOR_ATTACHMENT1 public="1" get="inline" set="null" expr="36065" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36065</e></m></meta>
		</COLOR_ATTACHMENT1>
		<COLOR_ATTACHMENT2 public="1" get="inline" set="null" expr="36066" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36066</e></m></meta>
		</COLOR_ATTACHMENT2>
		<COLOR_ATTACHMENT3 public="1" get="inline" set="null" expr="36067" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36067</e></m></meta>
		</COLOR_ATTACHMENT3>
		<COLOR_ATTACHMENT4 public="1" get="inline" set="null" expr="36068" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36068</e></m></meta>
		</COLOR_ATTACHMENT4>
		<COLOR_ATTACHMENT5 public="1" get="inline" set="null" expr="36069" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36069</e></m></meta>
		</COLOR_ATTACHMENT5>
		<COLOR_ATTACHMENT6 public="1" get="inline" set="null" expr="36070" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36070</e></m></meta>
		</COLOR_ATTACHMENT6>
		<COLOR_ATTACHMENT7 public="1" get="inline" set="null" expr="36071" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36071</e></m></meta>
		</COLOR_ATTACHMENT7>
		<COLOR_ATTACHMENT8 public="1" get="inline" set="null" expr="36072" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36072</e></m></meta>
		</COLOR_ATTACHMENT8>
		<COLOR_ATTACHMENT9 public="1" get="inline" set="null" expr="36073" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36073</e></m></meta>
		</COLOR_ATTACHMENT9>
		<COLOR_ATTACHMENT10 public="1" get="inline" set="null" expr="36074" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36074</e></m></meta>
		</COLOR_ATTACHMENT10>
		<COLOR_ATTACHMENT11 public="1" get="inline" set="null" expr="36075" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36075</e></m></meta>
		</COLOR_ATTACHMENT11>
		<COLOR_ATTACHMENT12 public="1" get="inline" set="null" expr="36076" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36076</e></m></meta>
		</COLOR_ATTACHMENT12>
		<COLOR_ATTACHMENT13 public="1" get="inline" set="null" expr="36077" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36077</e></m></meta>
		</COLOR_ATTACHMENT13>
		<COLOR_ATTACHMENT14 public="1" get="inline" set="null" expr="36078" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36078</e></m></meta>
		</COLOR_ATTACHMENT14>
		<COLOR_ATTACHMENT15 public="1" get="inline" set="null" expr="36079" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36079</e></m></meta>
		</COLOR_ATTACHMENT15>
		<FRAMEBUFFER_INCOMPLETE_MULTISAMPLE public="1" get="inline" set="null" expr="36182" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36182</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MULTISAMPLE>
		<MAX_SAMPLES public="1" get="inline" set="null" expr="36183" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36183</e></m></meta>
		</MAX_SAMPLES>
		<HALF_FLOAT public="1" get="inline" set="null" expr="5131" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5131</e></m></meta>
		</HALF_FLOAT>
		<RG public="1" get="inline" set="null" expr="33319" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33319</e></m></meta>
		</RG>
		<RG_INTEGER public="1" get="inline" set="null" expr="33320" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33320</e></m></meta>
		</RG_INTEGER>
		<R8 public="1" get="inline" set="null" expr="33321" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33321</e></m></meta>
		</R8>
		<RG8 public="1" get="inline" set="null" expr="33323" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33323</e></m></meta>
		</RG8>
		<R16F public="1" get="inline" set="null" expr="33325" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33325</e></m></meta>
		</R16F>
		<R32F public="1" get="inline" set="null" expr="33326" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33326</e></m></meta>
		</R32F>
		<RG16F public="1" get="inline" set="null" expr="33327" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33327</e></m></meta>
		</RG16F>
		<RG32F public="1" get="inline" set="null" expr="33328" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33328</e></m></meta>
		</RG32F>
		<R8I public="1" get="inline" set="null" expr="33329" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33329</e></m></meta>
		</R8I>
		<R8UI public="1" get="inline" set="null" expr="33330" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33330</e></m></meta>
		</R8UI>
		<R16I public="1" get="inline" set="null" expr="33331" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33331</e></m></meta>
		</R16I>
		<R16UI public="1" get="inline" set="null" expr="33332" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33332</e></m></meta>
		</R16UI>
		<R32I public="1" get="inline" set="null" expr="33333" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33333</e></m></meta>
		</R32I>
		<R32UI public="1" get="inline" set="null" expr="33334" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33334</e></m></meta>
		</R32UI>
		<RG8I public="1" get="inline" set="null" expr="33335" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33335</e></m></meta>
		</RG8I>
		<RG8UI public="1" get="inline" set="null" expr="33336" line="226" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33336</e></m></meta>
		</RG8UI>
		<RG16I public="1" get="inline" set="null" expr="33337" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33337</e></m></meta>
		</RG16I>
		<RG16UI public="1" get="inline" set="null" expr="33338" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33338</e></m></meta>
		</RG16UI>
		<RG32I public="1" get="inline" set="null" expr="33339" line="229" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33339</e></m></meta>
		</RG32I>
		<RG32UI public="1" get="inline" set="null" expr="33340" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33340</e></m></meta>
		</RG32UI>
		<VERTEX_ARRAY_BINDING public="1" get="inline" set="null" expr="34229" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34229</e></m></meta>
		</VERTEX_ARRAY_BINDING>
		<R8_SNORM public="1" get="inline" set="null" expr="36756" line="232" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36756</e></m></meta>
		</R8_SNORM>
		<RG8_SNORM public="1" get="inline" set="null" expr="36757" line="233" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36757</e></m></meta>
		</RG8_SNORM>
		<RGB8_SNORM public="1" get="inline" set="null" expr="36758" line="234" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36758</e></m></meta>
		</RGB8_SNORM>
		<RGBA8_SNORM public="1" get="inline" set="null" expr="36759" line="235" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36759</e></m></meta>
		</RGBA8_SNORM>
		<SIGNED_NORMALIZED public="1" get="inline" set="null" expr="36764" line="236" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36764</e></m></meta>
		</SIGNED_NORMALIZED>
		<COPY_READ_BUFFER public="1" get="inline" set="null" expr="36662" line="237" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36662</e></m></meta>
		</COPY_READ_BUFFER>
		<COPY_WRITE_BUFFER public="1" get="inline" set="null" expr="36663" line="238" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36663</e></m></meta>
		</COPY_WRITE_BUFFER>
		<COPY_READ_BUFFER_BINDING public="1" get="inline" set="null" expr="36662" line="239" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36662</e></m></meta>
		</COPY_READ_BUFFER_BINDING>
		<COPY_WRITE_BUFFER_BINDING public="1" get="inline" set="null" expr="36663" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36663</e></m></meta>
		</COPY_WRITE_BUFFER_BINDING>
		<UNIFORM_BUFFER public="1" get="inline" set="null" expr="35345" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35345</e></m></meta>
		</UNIFORM_BUFFER>
		<UNIFORM_BUFFER_BINDING public="1" get="inline" set="null" expr="35368" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35368</e></m></meta>
		</UNIFORM_BUFFER_BINDING>
		<UNIFORM_BUFFER_START public="1" get="inline" set="null" expr="35369" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35369</e></m></meta>
		</UNIFORM_BUFFER_START>
		<UNIFORM_BUFFER_SIZE public="1" get="inline" set="null" expr="35370" line="244" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35370</e></m></meta>
		</UNIFORM_BUFFER_SIZE>
		<MAX_VERTEX_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35371" line="245" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35371</e></m></meta>
		</MAX_VERTEX_UNIFORM_BLOCKS>
		<MAX_FRAGMENT_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35373" line="246" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35373</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_BLOCKS>
		<MAX_COMBINED_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35374" line="247" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35374</e></m></meta>
		</MAX_COMBINED_UNIFORM_BLOCKS>
		<MAX_UNIFORM_BUFFER_BINDINGS public="1" get="inline" set="null" expr="35375" line="248" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35375</e></m></meta>
		</MAX_UNIFORM_BUFFER_BINDINGS>
		<MAX_UNIFORM_BLOCK_SIZE public="1" get="inline" set="null" expr="35376" line="249" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35376</e></m></meta>
		</MAX_UNIFORM_BLOCK_SIZE>
		<MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35377" line="250" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35377</e></m></meta>
		</MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS>
		<MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS public="1" get="inline" set="null" expr="35379" line="251" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35379</e></m></meta>
		</MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS>
		<UNIFORM_BUFFER_OFFSET_ALIGNMENT public="1" get="inline" set="null" expr="35380" line="252" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35380</e></m></meta>
		</UNIFORM_BUFFER_OFFSET_ALIGNMENT>
		<ACTIVE_UNIFORM_BLOCKS public="1" get="inline" set="null" expr="35382" line="253" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35382</e></m></meta>
		</ACTIVE_UNIFORM_BLOCKS>
		<UNIFORM_TYPE public="1" get="inline" set="null" expr="35383" line="254" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35383</e></m></meta>
		</UNIFORM_TYPE>
		<UNIFORM_SIZE public="1" get="inline" set="null" expr="35384" line="255" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35384</e></m></meta>
		</UNIFORM_SIZE>
		<UNIFORM_BLOCK_INDEX public="1" get="inline" set="null" expr="35386" line="256" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35386</e></m></meta>
		</UNIFORM_BLOCK_INDEX>
		<UNIFORM_OFFSET public="1" get="inline" set="null" expr="35387" line="257" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35387</e></m></meta>
		</UNIFORM_OFFSET>
		<UNIFORM_ARRAY_STRIDE public="1" get="inline" set="null" expr="35388" line="258" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35388</e></m></meta>
		</UNIFORM_ARRAY_STRIDE>
		<UNIFORM_MATRIX_STRIDE public="1" get="inline" set="null" expr="35389" line="259" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35389</e></m></meta>
		</UNIFORM_MATRIX_STRIDE>
		<UNIFORM_IS_ROW_MAJOR public="1" get="inline" set="null" expr="35390" line="260" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35390</e></m></meta>
		</UNIFORM_IS_ROW_MAJOR>
		<UNIFORM_BLOCK_BINDING public="1" get="inline" set="null" expr="35391" line="261" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35391</e></m></meta>
		</UNIFORM_BLOCK_BINDING>
		<UNIFORM_BLOCK_DATA_SIZE public="1" get="inline" set="null" expr="35392" line="262" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35392</e></m></meta>
		</UNIFORM_BLOCK_DATA_SIZE>
		<UNIFORM_BLOCK_ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35394" line="263" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35394</e></m></meta>
		</UNIFORM_BLOCK_ACTIVE_UNIFORMS>
		<UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES public="1" get="inline" set="null" expr="35395" line="264" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35395</e></m></meta>
		</UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES>
		<UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER public="1" get="inline" set="null" expr="35396" line="265" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35396</e></m></meta>
		</UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER>
		<UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER public="1" get="inline" set="null" expr="35398" line="266" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35398</e></m></meta>
		</UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER>
		<INVALID_INDEX public="1" get="inline" set="null" expr="cast 4294967295" line="267" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>cast 4294967295</e></m></meta>
		</INVALID_INDEX>
		<MAX_VERTEX_OUTPUT_COMPONENTS public="1" get="inline" set="null" expr="37154" line="268" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37154</e></m></meta>
		</MAX_VERTEX_OUTPUT_COMPONENTS>
		<MAX_FRAGMENT_INPUT_COMPONENTS public="1" get="inline" set="null" expr="37157" line="269" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37157</e></m></meta>
		</MAX_FRAGMENT_INPUT_COMPONENTS>
		<MAX_SERVER_WAIT_TIMEOUT public="1" get="inline" set="null" expr="37137" line="270" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37137</e></m></meta>
		</MAX_SERVER_WAIT_TIMEOUT>
		<OBJECT_TYPE public="1" get="inline" set="null" expr="37138" line="271" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37138</e></m></meta>
		</OBJECT_TYPE>
		<SYNC_CONDITION public="1" get="inline" set="null" expr="37139" line="272" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37139</e></m></meta>
		</SYNC_CONDITION>
		<SYNC_STATUS public="1" get="inline" set="null" expr="37140" line="273" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37140</e></m></meta>
		</SYNC_STATUS>
		<SYNC_FLAGS public="1" get="inline" set="null" expr="37141" line="274" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37141</e></m></meta>
		</SYNC_FLAGS>
		<SYNC_FENCE public="1" get="inline" set="null" expr="37142" line="275" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37142</e></m></meta>
		</SYNC_FENCE>
		<SYNC_GPU_COMMANDS_COMPLETE public="1" get="inline" set="null" expr="37143" line="276" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37143</e></m></meta>
		</SYNC_GPU_COMMANDS_COMPLETE>
		<UNSIGNALED public="1" get="inline" set="null" expr="37144" line="277" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37144</e></m></meta>
		</UNSIGNALED>
		<SIGNALED public="1" get="inline" set="null" expr="37145" line="278" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37145</e></m></meta>
		</SIGNALED>
		<ALREADY_SIGNALED public="1" get="inline" set="null" expr="37146" line="279" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37146</e></m></meta>
		</ALREADY_SIGNALED>
		<TIMEOUT_EXPIRED public="1" get="inline" set="null" expr="37147" line="280" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37147</e></m></meta>
		</TIMEOUT_EXPIRED>
		<CONDITION_SATISFIED public="1" get="inline" set="null" expr="37148" line="281" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37148</e></m></meta>
		</CONDITION_SATISFIED>
		<WAIT_FAILED public="1" get="inline" set="null" expr="37149" line="282" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37149</e></m></meta>
		</WAIT_FAILED>
		<SYNC_FLUSH_COMMANDS_BIT public="1" get="inline" set="null" expr="1" line="283" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SYNC_FLUSH_COMMANDS_BIT>
		<VERTEX_ATTRIB_ARRAY_DIVISOR public="1" get="inline" set="null" expr="35070" line="284" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35070</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_DIVISOR>
		<ANY_SAMPLES_PASSED public="1" get="inline" set="null" expr="35887" line="285" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35887</e></m></meta>
		</ANY_SAMPLES_PASSED>
		<ANY_SAMPLES_PASSED_CONSERVATIVE public="1" get="inline" set="null" expr="36202" line="286" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36202</e></m></meta>
		</ANY_SAMPLES_PASSED_CONSERVATIVE>
		<SAMPLER_BINDING public="1" get="inline" set="null" expr="35097" line="287" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35097</e></m></meta>
		</SAMPLER_BINDING>
		<RGB10_A2UI public="1" get="inline" set="null" expr="36975" line="288" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36975</e></m></meta>
		</RGB10_A2UI>
		<INT_2_10_10_10_REV public="1" get="inline" set="null" expr="36255" line="289" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36255</e></m></meta>
		</INT_2_10_10_10_REV>
		<TRANSFORM_FEEDBACK public="1" get="inline" set="null" expr="36386" line="290" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36386</e></m></meta>
		</TRANSFORM_FEEDBACK>
		<TRANSFORM_FEEDBACK_PAUSED public="1" get="inline" set="null" expr="36387" line="291" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36387</e></m></meta>
		</TRANSFORM_FEEDBACK_PAUSED>
		<TRANSFORM_FEEDBACK_ACTIVE public="1" get="inline" set="null" expr="36388" line="292" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36388</e></m></meta>
		</TRANSFORM_FEEDBACK_ACTIVE>
		<TRANSFORM_FEEDBACK_BINDING public="1" get="inline" set="null" expr="36389" line="293" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36389</e></m></meta>
		</TRANSFORM_FEEDBACK_BINDING>
		<TEXTURE_IMMUTABLE_FORMAT public="1" get="inline" set="null" expr="37167" line="294" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37167</e></m></meta>
		</TEXTURE_IMMUTABLE_FORMAT>
		<MAX_ELEMENT_INDEX public="1" get="inline" set="null" expr="36203" line="295" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36203</e></m></meta>
		</MAX_ELEMENT_INDEX>
		<TEXTURE_IMMUTABLE_LEVELS public="1" get="inline" set="null" expr="33503" line="296" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33503</e></m></meta>
		</TEXTURE_IMMUTABLE_LEVELS>
		<TIMEOUT_IGNORED public="1" get="inline" set="null" expr="-1" line="297" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</TIMEOUT_IGNORED>
		<MAX_CLIENT_WAIT_TIMEOUT_WEBGL public="1" get="inline" set="null" expr="37447" line="298" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37447</e></m></meta>
		</MAX_CLIENT_WAIT_TIMEOUT_WEBGL>
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" expr="256" line="299" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" expr="1024" line="300" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" expr="16384" line="301" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16384</e></m></meta>
		</COLOR_BUFFER_BIT>
		<POINTS public="1" get="inline" set="null" expr="0" line="302" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</POINTS>
		<LINES public="1" get="inline" set="null" expr="1" line="303" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LINES>
		<LINE_LOOP public="1" get="inline" set="null" expr="2" line="304" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" expr="3" line="305" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LINE_STRIP>
		<TRIANGLES public="1" get="inline" set="null" expr="4" line="306" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</TRIANGLES>
		<TRIANGLE_STRIP public="1" get="inline" set="null" expr="5" line="307" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="inline" set="null" expr="6" line="308" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</TRIANGLE_FAN>
		<ZERO public="1" get="inline" set="null" expr="0" line="309" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ZERO>
		<ONE public="1" get="inline" set="null" expr="1" line="310" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ONE>
		<SRC_COLOR public="1" get="inline" set="null" expr="768" line="311" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>768</e></m></meta>
		</SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" expr="769" line="312" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>769</e></m></meta>
		</ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="inline" set="null" expr="770" line="313" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>770</e></m></meta>
		</SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" expr="771" line="314" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>771</e></m></meta>
		</ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="inline" set="null" expr="772" line="315" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>772</e></m></meta>
		</DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" expr="773" line="316" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>773</e></m></meta>
		</ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" expr="774" line="317" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>774</e></m></meta>
		</DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" expr="775" line="318" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>775</e></m></meta>
		</ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" expr="776" line="319" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>776</e></m></meta>
		</SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="inline" set="null" expr="32774" line="320" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32774</e></m></meta>
		</FUNC_ADD>
		<BLEND_EQUATION public="1" get="inline" set="null" expr="32777" line="321" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" expr="32777" line="322" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" expr="34877" line="323" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34877</e></m></meta>
		</BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="inline" set="null" expr="32778" line="324" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32778</e></m></meta>
		</FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" expr="32779" line="325" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32779</e></m></meta>
		</FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="inline" set="null" expr="32968" line="326" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32968</e></m></meta>
		</BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="inline" set="null" expr="32969" line="327" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32969</e></m></meta>
		</BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" expr="32970" line="328" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32970</e></m></meta>
		</BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" expr="32971" line="329" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32971</e></m></meta>
		</BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" expr="32769" line="330" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32769</e></m></meta>
		</CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" expr="32770" line="331" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32770</e></m></meta>
		</ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="inline" set="null" expr="32771" line="332" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32771</e></m></meta>
		</CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" expr="32772" line="333" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32772</e></m></meta>
		</ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="inline" set="null" expr="32773" line="334" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32773</e></m></meta>
		</BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="inline" set="null" expr="34962" line="335" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34962</e></m></meta>
		</ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" expr="34963" line="336" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34963</e></m></meta>
		</ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34964" line="337" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34964</e></m></meta>
		</ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34965" line="338" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34965</e></m></meta>
		</ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="inline" set="null" expr="35040" line="339" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35040</e></m></meta>
		</STREAM_DRAW>
		<STATIC_DRAW public="1" get="inline" set="null" expr="35044" line="340" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35044</e></m></meta>
		</STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="inline" set="null" expr="35048" line="341" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35048</e></m></meta>
		</DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="inline" set="null" expr="34660" line="342" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34660</e></m></meta>
		</BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" expr="34661" line="343" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34661</e></m></meta>
		</BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" expr="34342" line="344" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34342</e></m></meta>
		</CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="inline" set="null" expr="1028" line="345" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1028</e></m></meta>
		</FRONT>
		<BACK public="1" get="inline" set="null" expr="1029" line="346" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1029</e></m></meta>
		</BACK>
		<FRONT_AND_BACK public="1" get="inline" set="null" expr="1032" line="347" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1032</e></m></meta>
		</FRONT_AND_BACK>
		<CULL_FACE public="1" get="inline" set="null" expr="2884" line="348" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2884</e></m></meta>
		</CULL_FACE>
		<BLEND public="1" get="inline" set="null" expr="3042" line="349" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3042</e></m></meta>
		</BLEND>
		<DITHER public="1" get="inline" set="null" expr="3024" line="350" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3024</e></m></meta>
		</DITHER>
		<STENCIL_TEST public="1" get="inline" set="null" expr="2960" line="351" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2960</e></m></meta>
		</STENCIL_TEST>
		<DEPTH_TEST public="1" get="inline" set="null" expr="2929" line="352" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2929</e></m></meta>
		</DEPTH_TEST>
		<SCISSOR_TEST public="1" get="inline" set="null" expr="3089" line="353" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3089</e></m></meta>
		</SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" expr="32823" line="354" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32823</e></m></meta>
		</POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" expr="32926" line="355" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32926</e></m></meta>
		</SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" expr="32928" line="356" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32928</e></m></meta>
		</SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="inline" set="null" expr="0" line="357" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_ENUM public="1" get="inline" set="null" expr="1280" line="358" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1280</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" expr="1281" line="359" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1281</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" expr="1282" line="360" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1282</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" expr="1285" line="361" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1285</e></m></meta>
		</OUT_OF_MEMORY>
		<CW public="1" get="inline" set="null" expr="2304" line="362" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2304</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="2305" line="363" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2305</e></m></meta>
		</CCW>
		<LINE_WIDTH public="1" get="inline" set="null" expr="2849" line="364" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2849</e></m></meta>
		</LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" expr="33901" line="365" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33901</e></m></meta>
		</ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" expr="33902" line="366" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33902</e></m></meta>
		</ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="inline" set="null" expr="2885" line="367" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2885</e></m></meta>
		</CULL_FACE_MODE>
		<FRONT_FACE public="1" get="inline" set="null" expr="2886" line="368" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2886</e></m></meta>
		</FRONT_FACE>
		<DEPTH_RANGE public="1" get="inline" set="null" expr="2928" line="369" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2928</e></m></meta>
		</DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" expr="2930" line="370" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2930</e></m></meta>
		</DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" expr="2931" line="371" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2931</e></m></meta>
		</DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="inline" set="null" expr="2932" line="372" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2932</e></m></meta>
		</DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" expr="2961" line="373" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2961</e></m></meta>
		</STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="inline" set="null" expr="2962" line="374" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2962</e></m></meta>
		</STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="inline" set="null" expr="2964" line="375" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2964</e></m></meta>
		</STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="2965" line="376" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2965</e></m></meta>
		</STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="2966" line="377" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2966</e></m></meta>
		</STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" expr="2967" line="378" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2967</e></m></meta>
		</STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" expr="2963" line="379" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2963</e></m></meta>
		</STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" expr="2968" line="380" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2968</e></m></meta>
		</STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" expr="34816" line="381" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34816</e></m></meta>
		</STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" expr="34817" line="382" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34817</e></m></meta>
		</STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="34818" line="383" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34818</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="34819" line="384" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34819</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" expr="36003" line="385" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36003</e></m></meta>
		</STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" expr="36004" line="386" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36004</e></m></meta>
		</STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" expr="36005" line="387" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36005</e></m></meta>
		</STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="inline" set="null" expr="2978" line="388" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2978</e></m></meta>
		</VIEWPORT>
		<SCISSOR_BOX public="1" get="inline" set="null" expr="3088" line="389" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3088</e></m></meta>
		</SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" expr="3106" line="390" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3106</e></m></meta>
		</COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" expr="3107" line="391" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3107</e></m></meta>
		</COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" expr="3317" line="392" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3317</e></m></meta>
		</UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="inline" set="null" expr="3333" line="393" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3333</e></m></meta>
		</PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" expr="3379" line="394" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3379</e></m></meta>
		</MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" expr="3386" line="395" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3386</e></m></meta>
		</MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="inline" set="null" expr="3408" line="396" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3408</e></m></meta>
		</SUBPIXEL_BITS>
		<RED_BITS public="1" get="inline" set="null" expr="3410" line="397" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3410</e></m></meta>
		</RED_BITS>
		<GREEN_BITS public="1" get="inline" set="null" expr="3411" line="398" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3411</e></m></meta>
		</GREEN_BITS>
		<BLUE_BITS public="1" get="inline" set="null" expr="3412" line="399" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3412</e></m></meta>
		</BLUE_BITS>
		<ALPHA_BITS public="1" get="inline" set="null" expr="3413" line="400" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3413</e></m></meta>
		</ALPHA_BITS>
		<DEPTH_BITS public="1" get="inline" set="null" expr="3414" line="401" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3414</e></m></meta>
		</DEPTH_BITS>
		<STENCIL_BITS public="1" get="inline" set="null" expr="3415" line="402" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3415</e></m></meta>
		</STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" expr="10752" line="403" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10752</e></m></meta>
		</POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" expr="32824" line="404" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32824</e></m></meta>
		</POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" expr="32873" line="405" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32873</e></m></meta>
		</TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" expr="32936" line="406" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32936</e></m></meta>
		</SAMPLE_BUFFERS>
		<SAMPLES public="1" get="inline" set="null" expr="32937" line="407" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32937</e></m></meta>
		</SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" expr="32938" line="408" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32938</e></m></meta>
		</SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" expr="32939" line="409" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32939</e></m></meta>
		</SAMPLE_COVERAGE_INVERT>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" expr="34467" line="410" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34467</e></m></meta>
		</COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="inline" set="null" expr="4352" line="411" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4352</e></m></meta>
		</DONT_CARE>
		<FASTEST public="1" get="inline" set="null" expr="4353" line="412" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4353</e></m></meta>
		</FASTEST>
		<NICEST public="1" get="inline" set="null" expr="4354" line="413" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4354</e></m></meta>
		</NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" expr="33170" line="414" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33170</e></m></meta>
		</GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="inline" set="null" expr="5120" line="415" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5120</e></m></meta>
		</BYTE>
		<UNSIGNED_BYTE public="1" get="inline" set="null" expr="5121" line="416" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5121</e></m></meta>
		</UNSIGNED_BYTE>
		<SHORT public="1" get="inline" set="null" expr="5122" line="417" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5122</e></m></meta>
		</SHORT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" expr="5123" line="418" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5123</e></m></meta>
		</UNSIGNED_SHORT>
		<INT public="1" get="inline" set="null" expr="5124" line="419" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5124</e></m></meta>
		</INT>
		<UNSIGNED_INT public="1" get="inline" set="null" expr="5125" line="420" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5125</e></m></meta>
		</UNSIGNED_INT>
		<FLOAT public="1" get="inline" set="null" expr="5126" line="421" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5126</e></m></meta>
		</FLOAT>
		<DEPTH_COMPONENT public="1" get="inline" set="null" expr="6402" line="422" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6402</e></m></meta>
		</DEPTH_COMPONENT>
		<ALPHA public="1" get="inline" set="null" expr="6406" line="423" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6406</e></m></meta>
		</ALPHA>
		<RGB public="1" get="inline" set="null" expr="6407" line="424" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6407</e></m></meta>
		</RGB>
		<RGBA public="1" get="inline" set="null" expr="6408" line="425" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6408</e></m></meta>
		</RGBA>
		<LUMINANCE public="1" get="inline" set="null" expr="6409" line="426" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6409</e></m></meta>
		</LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" expr="6410" line="427" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6410</e></m></meta>
		</LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" expr="32819" line="428" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32819</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" expr="32820" line="429" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32820</e></m></meta>
		</UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" expr="33635" line="430" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33635</e></m></meta>
		</UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="inline" set="null" expr="35632" line="431" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35632</e></m></meta>
		</FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="inline" set="null" expr="35633" line="432" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35633</e></m></meta>
		</VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" expr="34921" line="433" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34921</e></m></meta>
		</MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36347" line="434" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36347</e></m></meta>
		</MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" expr="36348" line="435" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36348</e></m></meta>
		</MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35661" line="436" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35661</e></m></meta>
		</MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35660" line="437" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35660</e></m></meta>
		</MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="34930" line="438" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34930</e></m></meta>
		</MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36349" line="439" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36349</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="inline" set="null" expr="35663" line="440" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35663</e></m></meta>
		</SHADER_TYPE>
		<DELETE_STATUS public="1" get="inline" set="null" expr="35712" line="441" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35712</e></m></meta>
		</DELETE_STATUS>
		<LINK_STATUS public="1" get="inline" set="null" expr="35714" line="442" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35714</e></m></meta>
		</LINK_STATUS>
		<VALIDATE_STATUS public="1" get="inline" set="null" expr="35715" line="443" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35715</e></m></meta>
		</VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="inline" set="null" expr="35717" line="444" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35717</e></m></meta>
		</ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35718" line="445" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35718</e></m></meta>
		</ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" expr="35721" line="446" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35721</e></m></meta>
		</ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" expr="35724" line="447" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35724</e></m></meta>
		</SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="inline" set="null" expr="35725" line="448" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35725</e></m></meta>
		</CURRENT_PROGRAM>
		<NEVER public="1" get="inline" set="null" expr="512" line="449" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</NEVER>
		<LESS public="1" get="inline" set="null" expr="513" line="450" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>513</e></m></meta>
		</LESS>
		<EQUAL public="1" get="inline" set="null" expr="514" line="451" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>514</e></m></meta>
		</EQUAL>
		<LEQUAL public="1" get="inline" set="null" expr="515" line="452" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>515</e></m></meta>
		</LEQUAL>
		<GREATER public="1" get="inline" set="null" expr="516" line="453" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>516</e></m></meta>
		</GREATER>
		<NOTEQUAL public="1" get="inline" set="null" expr="517" line="454" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>517</e></m></meta>
		</NOTEQUAL>
		<GEQUAL public="1" get="inline" set="null" expr="518" line="455" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>518</e></m></meta>
		</GEQUAL>
		<ALWAYS public="1" get="inline" set="null" expr="519" line="456" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>519</e></m></meta>
		</ALWAYS>
		<KEEP public="1" get="inline" set="null" expr="7680" line="457" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7680</e></m></meta>
		</KEEP>
		<REPLACE public="1" get="inline" set="null" expr="7681" line="458" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7681</e></m></meta>
		</REPLACE>
		<INCR public="1" get="inline" set="null" expr="7682" line="459" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7682</e></m></meta>
		</INCR>
		<DECR public="1" get="inline" set="null" expr="7683" line="460" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7683</e></m></meta>
		</DECR>
		<INVERT public="1" get="inline" set="null" expr="5386" line="461" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5386</e></m></meta>
		</INVERT>
		<INCR_WRAP public="1" get="inline" set="null" expr="34055" line="462" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34055</e></m></meta>
		</INCR_WRAP>
		<DECR_WRAP public="1" get="inline" set="null" expr="34056" line="463" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34056</e></m></meta>
		</DECR_WRAP>
		<VENDOR public="1" get="inline" set="null" expr="7936" line="464" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7936</e></m></meta>
		</VENDOR>
		<RENDERER public="1" get="inline" set="null" expr="7937" line="465" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7937</e></m></meta>
		</RENDERER>
		<VERSION public="1" get="inline" set="null" expr="7938" line="466" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7938</e></m></meta>
		</VERSION>
		<NEAREST public="1" get="inline" set="null" expr="9728" line="467" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9728</e></m></meta>
		</NEAREST>
		<LINEAR public="1" get="inline" set="null" expr="9729" line="468" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9729</e></m></meta>
		</LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9984" line="469" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9984</e></m></meta>
		</NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9985" line="470" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9985</e></m></meta>
		</LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9986" line="471" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9986</e></m></meta>
		</NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9987" line="472" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9987</e></m></meta>
		</LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" expr="10240" line="473" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10240</e></m></meta>
		</TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" expr="10241" line="474" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10241</e></m></meta>
		</TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" expr="10242" line="475" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10242</e></m></meta>
		</TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" expr="10243" line="476" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10243</e></m></meta>
		</TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="inline" set="null" expr="3553" line="477" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3553</e></m></meta>
		</TEXTURE_2D>
		<TEXTURE public="1" get="inline" set="null" expr="5890" line="478" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5890</e></m></meta>
		</TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" expr="34067" line="479" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34067</e></m></meta>
		</TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" expr="34068" line="480" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34068</e></m></meta>
		</TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" expr="34069" line="481" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34069</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" expr="34070" line="482" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34070</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" expr="34071" line="483" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34071</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" expr="34072" line="484" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34072</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" expr="34073" line="485" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34073</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" expr="34074" line="486" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34074</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" expr="34076" line="487" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34076</e></m></meta>
		</MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="inline" set="null" expr="33984" line="488" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33984</e></m></meta>
		</TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" expr="33985" line="489" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33985</e></m></meta>
		</TEXTURE1>
		<TEXTURE2 public="1" get="inline" set="null" expr="33986" line="490" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33986</e></m></meta>
		</TEXTURE2>
		<TEXTURE3 public="1" get="inline" set="null" expr="33987" line="491" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33987</e></m></meta>
		</TEXTURE3>
		<TEXTURE4 public="1" get="inline" set="null" expr="33988" line="492" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33988</e></m></meta>
		</TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" expr="33989" line="493" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33989</e></m></meta>
		</TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" expr="33990" line="494" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33990</e></m></meta>
		</TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" expr="33991" line="495" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33991</e></m></meta>
		</TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" expr="33992" line="496" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33992</e></m></meta>
		</TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" expr="33993" line="497" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33993</e></m></meta>
		</TEXTURE9>
		<TEXTURE10 public="1" get="inline" set="null" expr="33994" line="498" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33994</e></m></meta>
		</TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" expr="33995" line="499" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33995</e></m></meta>
		</TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" expr="33996" line="500" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33996</e></m></meta>
		</TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" expr="33997" line="501" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33997</e></m></meta>
		</TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" expr="33998" line="502" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33998</e></m></meta>
		</TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" expr="33999" line="503" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33999</e></m></meta>
		</TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" expr="34000" line="504" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34000</e></m></meta>
		</TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" expr="34001" line="505" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34001</e></m></meta>
		</TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" expr="34002" line="506" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34002</e></m></meta>
		</TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" expr="34003" line="507" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34003</e></m></meta>
		</TEXTURE19>
		<TEXTURE20 public="1" get="inline" set="null" expr="34004" line="508" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34004</e></m></meta>
		</TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" expr="34005" line="509" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34005</e></m></meta>
		</TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" expr="34006" line="510" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34006</e></m></meta>
		</TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" expr="34007" line="511" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34007</e></m></meta>
		</TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" expr="34008" line="512" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34008</e></m></meta>
		</TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" expr="34009" line="513" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34009</e></m></meta>
		</TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" expr="34010" line="514" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34010</e></m></meta>
		</TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" expr="34011" line="515" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34011</e></m></meta>
		</TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" expr="34012" line="516" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34012</e></m></meta>
		</TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" expr="34013" line="517" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34013</e></m></meta>
		</TEXTURE29>
		<TEXTURE30 public="1" get="inline" set="null" expr="34014" line="518" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34014</e></m></meta>
		</TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" expr="34015" line="519" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34015</e></m></meta>
		</TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" expr="34016" line="520" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34016</e></m></meta>
		</ACTIVE_TEXTURE>
		<REPEAT public="1" get="inline" set="null" expr="10497" line="521" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10497</e></m></meta>
		</REPEAT>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" expr="33071" line="522" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33071</e></m></meta>
		</CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="inline" set="null" expr="33648" line="523" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33648</e></m></meta>
		</MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="inline" set="null" expr="35664" line="524" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35664</e></m></meta>
		</FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" expr="35665" line="525" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35665</e></m></meta>
		</FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" expr="35666" line="526" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35666</e></m></meta>
		</FLOAT_VEC4>
		<INT_VEC2 public="1" get="inline" set="null" expr="35667" line="527" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35667</e></m></meta>
		</INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" expr="35668" line="528" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35668</e></m></meta>
		</INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" expr="35669" line="529" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35669</e></m></meta>
		</INT_VEC4>
		<BOOL public="1" get="inline" set="null" expr="35670" line="530" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35670</e></m></meta>
		</BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" expr="35671" line="531" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35671</e></m></meta>
		</BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" expr="35672" line="532" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35672</e></m></meta>
		</BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" expr="35673" line="533" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35673</e></m></meta>
		</BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="inline" set="null" expr="35674" line="534" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35674</e></m></meta>
		</FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" expr="35675" line="535" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35675</e></m></meta>
		</FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" expr="35676" line="536" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35676</e></m></meta>
		</FLOAT_MAT4>
		<SAMPLER_2D public="1" get="inline" set="null" expr="35678" line="537" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35678</e></m></meta>
		</SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" expr="35680" line="538" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35680</e></m></meta>
		</SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" expr="34338" line="539" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34338</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" expr="34339" line="540" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34339</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" expr="34340" line="541" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34340</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" expr="34341" line="542" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34341</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" expr="34922" line="543" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34922</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" expr="34373" line="544" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34373</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34975" line="545" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34975</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<IMPLEMENTATION_COLOR_READ_TYPE public="1" get="inline" set="null" expr="35738" line="546" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35738</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_TYPE>
		<IMPLEMENTATION_COLOR_READ_FORMAT public="1" get="inline" set="null" expr="35739" line="547" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35739</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_FORMAT>
		<COMPILE_STATUS public="1" get="inline" set="null" expr="35713" line="548" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35713</e></m></meta>
		</COMPILE_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" expr="36336" line="549" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36336</e></m></meta>
		</LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="inline" set="null" expr="36337" line="550" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36337</e></m></meta>
		</MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="inline" set="null" expr="36338" line="551" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36338</e></m></meta>
		</HIGH_FLOAT>
		<LOW_INT public="1" get="inline" set="null" expr="36339" line="552" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36339</e></m></meta>
		</LOW_INT>
		<MEDIUM_INT public="1" get="inline" set="null" expr="36340" line="553" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36340</e></m></meta>
		</MEDIUM_INT>
		<HIGH_INT public="1" get="inline" set="null" expr="36341" line="554" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36341</e></m></meta>
		</HIGH_INT>
		<FRAMEBUFFER public="1" get="inline" set="null" expr="36160" line="555" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36160</e></m></meta>
		</FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" expr="36161" line="556" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36161</e></m></meta>
		</RENDERBUFFER>
		<RGBA4 public="1" get="inline" set="null" expr="32854" line="557" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32854</e></m></meta>
		</RGBA4>
		<RGB5_A1 public="1" get="inline" set="null" expr="32855" line="558" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32855</e></m></meta>
		</RGB5_A1>
		<RGB565 public="1" get="inline" set="null" expr="36194" line="559" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36194</e></m></meta>
		</RGB565>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" expr="33189" line="560" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33189</e></m></meta>
		</DEPTH_COMPONENT16>
		<STENCIL_INDEX8 public="1" get="inline" set="null" expr="36168" line="561" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36168</e></m></meta>
		</STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="inline" set="null" expr="34041" line="562" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34041</e></m></meta>
		</DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" expr="36162" line="563" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36162</e></m></meta>
		</RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" expr="36163" line="564" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36163</e></m></meta>
		</RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" expr="36164" line="565" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36164</e></m></meta>
		</RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" expr="36176" line="566" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36176</e></m></meta>
		</RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" expr="36177" line="567" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36177</e></m></meta>
		</RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" expr="36178" line="568" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36178</e></m></meta>
		</RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" expr="36179" line="569" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36179</e></m></meta>
		</RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" expr="36180" line="570" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36180</e></m></meta>
		</RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" expr="36181" line="571" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36181</e></m></meta>
		</RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" expr="36048" line="572" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36048</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" expr="36049" line="573" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36049</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" expr="36050" line="574" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36050</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" expr="36051" line="575" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36051</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" expr="36064" line="576" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
		</COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" expr="36096" line="577" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36096</e></m></meta>
		</DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="36128" line="578" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36128</e></m></meta>
		</STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="33306" line="579" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33306</e></m></meta>
		</DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="inline" set="null" expr="0" line="580" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" expr="36053" line="581" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36053</e></m></meta>
		</FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" expr="36054" line="582" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36054</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" expr="36055" line="583" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36055</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" expr="36057" line="584" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36057</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" expr="36061" line="585" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36061</e></m></meta>
		</FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="586" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" expr="36007" line="587" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36007</e></m></meta>
		</RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" expr="34024" line="588" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34024</e></m></meta>
		</MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" expr="1286" line="589" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1286</e></m></meta>
		</INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" expr="37440" line="590" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37440</e></m></meta>
		</UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" expr="37441" line="591" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37441</e></m></meta>
		</UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" expr="37442" line="592" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37442</e></m></meta>
		</CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" expr="37443" line="593" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37443</e></m></meta>
		</UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" expr="37444" line="594" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37444</e></m></meta>
		</BROWSER_DEFAULT_WEBGL>
		<bufferData public="1" set="method" override="1">
			<f a="target:srcData:usage:srcOffset:?length" v="::::0">
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0 }</e></m></meta>
			<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
			<overloads>
				<bufferData public="1" set="method">
					<f a="target:size:usage">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:srcData:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
				<bufferData public="1" set="method">
					<f a="target:srcData:usage">
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Initializes and creates the buffer object's data store.</haxe_doc>
				</bufferData>
			</overloads>
		</bufferData>
		<bufferSubData public="1" set="method" override="1">
			<f a="target:dstByteOffset:srcData:srcOffset:?length" v="::::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0 }</e></m></meta>
			<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
			<overloads>
				<bufferSubData public="1" set="method">
					<f a="target:offset:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBuffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
				</bufferSubData>
				<bufferSubData public="1" set="method">
					<f a="target:offset:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Updates a subset of a buffer object's data store.</haxe_doc>
				</bufferSubData>
			</overloads>
		</bufferSubData>
		<copyBufferSubData public="1" set="method">
			<f a="readTarget:writeTarget:readOffset:writeOffset:size">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies part of the data of a buffer to another buffer.</haxe_doc>
		</copyBufferSubData>
		<getBufferSubData public="1" set="method">
			<f a="target:srcByteOffset:dstData:?dstOffset:?length" v=":::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, dstOffset : 0 }</e></m></meta>
			<haxe_doc>Reads data from a buffer and writes them to an `ArrayBuffer` or `SharedArrayBuffer`.</haxe_doc>
		</getBufferSubData>
		<blitFramebuffer public="1" set="method">
			<f a="srcX0:srcY0:srcX1:srcY1:dstX0:dstY0:dstX1:dstY1:mask:filter">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Transfers a block of pixels from the read framebuffer to the draw framebuffer.</haxe_doc>
		</blitFramebuffer>
		<framebufferTextureLayer public="1" set="method">
			<f a="target:attachment:texture:level:layer">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Texture"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Attaches a single layer of a texture to a framebuffer.</haxe_doc>
		</framebufferTextureLayer>
		<invalidateFramebuffer public="1" set="method">
			<f a="target:attachments">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Invalidates the contents of attachments in a framebuffer.
		@throws DOMError</haxe_doc>
		</invalidateFramebuffer>
		<invalidateSubFramebuffer public="1" set="method">
			<f a="target:attachments:x:y:width:height">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Invalidates portions of the contents of attachments in a framebuffer
		@throws DOMError</haxe_doc>
		</invalidateSubFramebuffer>
		<readBuffer public="1" set="method">
			<f a="src">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Selects a color buffer as the source for pixels.</haxe_doc>
		</readBuffer>
		<getInternalformatParameter public="1" set="method">
			<f a="target:internalformat:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about implementation-dependent support for internal formats.
		@throws DOMError</haxe_doc>
		</getInternalformatParameter>
		<renderbufferStorageMultisample public="1" set="method">
			<f a="target:samples:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates and initializes a renderbuffer object's data store and allows specifying the number of samples to be used.</haxe_doc>
		</renderbufferStorageMultisample>
		<texStorage2D public="1" set="method">
			<f a="target:levels:internalformat:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies all levels of two-dimensional texture storage.</haxe_doc>
		</texStorage2D>
		<texStorage3D public="1" set="method">
			<f a="target:levels:internalformat:width:height:depth">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies all levels of a three-dimensional texture or two-dimensional array texture.</haxe_doc>
		</texStorage3D>
		<texImage2D public="1" set="method" override="1">
			<f a="target:level:internalformat:width:height:border:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
			</overloads>
		</texImage2D>
		<texSubImage2D public="1" set="method" override="1">
			<f a="target:level:xoffset:yoffset:width:height:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
			</overloads>
		</texSubImage2D>
		<texImage3D public="1" set="method">
			<f a="target:level:internalformat:width:height:depth:border:format:type:srcData:srcOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
			<overloads>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
				<texImage3D public="1" set="method">
					<f a="target:level:internalformat:width:height:depth:border:format:type:srcData">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a three-dimensional texture image.
		@throws DOMError</haxe_doc>
				</texImage3D>
			</overloads>
		</texImage3D>
		<texSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:srcData:?srcOffset" v=":::::::::::0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:pboOffset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.VideoElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageBitmap"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
				<texSubImage3D public="1" set="method">
					<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:type:source">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Specifies a sub-rectangle of the current 3D texture.
		@throws DOMError</haxe_doc>
				</texSubImage3D>
			</overloads>
		</texSubImage3D>
		<copyTexSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies pixels from the current `WebGLFramebuffer` into an existing 3D texture sub-image.</haxe_doc>
		</copyTexSubImage3D>
		<compressedTexImage2D public="1" set="method" override="1">
			<f a="target:level:internalformat:width:height:border:srcData:?srcOffset:?srcLengthOverride" v=":::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<overloads><compressedTexImage2D public="1" set="method"><f a="target:level:internalformat:width:height:border:imageSize:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compressedTexImage2D></overloads>
		</compressedTexImage2D>
		<compressedTexImage3D public="1" set="method">
			<f a="target:level:internalformat:width:height:depth:border:srcData:?srcOffset:?srcLengthOverride" v="::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a three-dimensional texture image in a compressed format.</haxe_doc>
			<overloads><compressedTexImage3D public="1" set="method">
	<f a="target:level:internalformat:width:height:depth:border:imageSize:offset">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Specifies a three-dimensional texture image in a compressed format.</haxe_doc>
</compressedTexImage3D></overloads>
		</compressedTexImage3D>
		<compressedTexSubImage2D public="1" set="method" override="1">
			<f a="target:level:xoffset:yoffset:width:height:format:srcData:?srcOffset:?srcLengthOverride" v="::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<overloads><compressedTexSubImage2D public="1" set="method"><f a="target:level:xoffset:yoffset:width:height:format:imageSize:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compressedTexSubImage2D></overloads>
		</compressedTexSubImage2D>
		<compressedTexSubImage3D public="1" set="method">
			<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:srcData:?srcOffset:?srcLengthOverride" v="::::::::::0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLengthOverride : 0, srcOffset : 0 }</e></m></meta>
			<haxe_doc>Specifies a three-dimensional sub-rectangle for a texture image in a compressed format.</haxe_doc>
			<overloads><compressedTexSubImage3D public="1" set="method">
	<f a="target:level:xoffset:yoffset:zoffset:width:height:depth:format:imageSize:offset">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>Specifies a three-dimensional sub-rectangle for a texture image in a compressed format.</haxe_doc>
</compressedTexSubImage3D></overloads>
		</compressedTexSubImage3D>
		<getFragDataLocation public="1" set="method">
			<f a="program:name">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the binding of color numbers to user-defined varying out variables.</haxe_doc>
		</getFragDataLocation>
		<uniform1ui public="1" set="method"><f a="location:v0">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1ui>
		<uniform2ui public="1" set="method"><f a="location:v0:v1">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2ui>
		<uniform3ui public="1" set="method"><f a="location:v0:v1:v2">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3ui>
		<uniform4ui public="1" set="method"><f a="location:v0:v1:v2:v3">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4ui>
		<uniform1fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1fv></overloads>
		</uniform1fv>
		<uniform2fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2fv></overloads>
		</uniform2fv>
		<uniform3fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3fv></overloads>
		</uniform3fv>
		<uniform4fv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4fv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4fv></overloads>
		</uniform4fv>
		<uniform1iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1iv></overloads>
		</uniform1iv>
		<uniform2iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2iv></overloads>
		</uniform2iv>
		<uniform3iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3iv></overloads>
		</uniform3iv>
		<uniform4iv public="1" set="method" override="1">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4iv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4iv></overloads>
		</uniform4iv>
		<uniform1uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform1uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform1uiv></overloads>
		</uniform1uiv>
		<uniform2uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform2uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform2uiv></overloads>
		</uniform2uiv>
		<uniform3uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform3uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform3uiv></overloads>
		</uniform3uiv>
		<uniform4uiv public="1" set="method">
			<f a="location:data:?srcOffset:?srcLength" v="::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniform4uiv public="1" set="method">
	<f a="location:data:?srcOffset:?srcLength" v="::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniform4uiv></overloads>
		</uniform4uiv>
		<uniformMatrix2fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2fv></overloads>
		</uniformMatrix2fv>
		<uniformMatrix3x2fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3x2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3x2fv></overloads>
		</uniformMatrix3x2fv>
		<uniformMatrix4x2fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4x2fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4x2fv></overloads>
		</uniformMatrix4x2fv>
		<uniformMatrix2x3fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2x3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2x3fv></overloads>
		</uniformMatrix2x3fv>
		<uniformMatrix3fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3fv></overloads>
		</uniformMatrix3fv>
		<uniformMatrix4x3fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4x3fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4x3fv></overloads>
		</uniformMatrix4x3fv>
		<uniformMatrix2x4fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix2x4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix2x4fv></overloads>
		</uniformMatrix2x4fv>
		<uniformMatrix3x4fv public="1" set="method">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix3x4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix3x4fv></overloads>
		</uniformMatrix3x4fv>
		<uniformMatrix4fv public="1" set="method" override="1">
			<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
			<overloads><uniformMatrix4fv public="1" set="method">
	<f a="location:transpose:data:?srcOffset:?srcLength" v=":::0:0">
		<c path="js.html.webgl.UniformLocation"/>
		<x path="Bool"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcLength : 0, srcOffset : 0 }</e></m></meta>
</uniformMatrix4fv></overloads>
		</uniformMatrix4fv>
		<vertexAttribI4i public="1" set="method"><f a="index:x:y:z:w">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4i>
		<vertexAttribI4iv public="1" set="method">
			<f a="index:values">
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttribI4iv public="1" set="method"><f a="index:values">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></vertexAttribI4iv></overloads>
		</vertexAttribI4iv>
		<vertexAttribI4ui public="1" set="method"><f a="index:x:y:z:w">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribI4ui>
		<vertexAttribI4uiv public="1" set="method">
			<f a="index:values">
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttribI4uiv public="1" set="method"><f a="index:values">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></vertexAttribI4uiv></overloads>
		</vertexAttribI4uiv>
		<vertexAttribIPointer public="1" set="method">
			<f a="index:size:type:stride:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies integer data formats and locations of vertex attributes in a vertex attributes array.</haxe_doc>
		</vertexAttribIPointer>
		<vertexAttribDivisor public="1" set="method">
			<f a="index:divisor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with `WebGL2RenderingContext.drawArraysInstanced()` and `WebGL2RenderingContext.drawElementsInstanced()`.</haxe_doc>
		</vertexAttribDivisor>
		<drawArraysInstanced public="1" set="method">
			<f a="mode:first:count:instanceCount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data. In addition, it can execute multiple instances of the range of elements.</haxe_doc>
		</drawArraysInstanced>
		<drawElementsInstanced public="1" set="method">
			<f a="mode:count:type:offset:instanceCount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data. In addition, it can execute multiple instances of a set of elements.</haxe_doc>
		</drawElementsInstanced>
		<drawRangeElements public="1" set="method">
			<f a="mode:start:end:count:type:offset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renders primitives from array data in a given range.</haxe_doc>
		</drawRangeElements>
		<readPixels public="1" set="method" override="1">
			<f a="x:y:width:height:format:type:dstData:dstOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.ArrayBufferView"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<readPixels public="1" set="method">
					<f a="x:y:width:height:format:type:dstData">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.lib.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</readPixels>
				<readPixels public="1" set="method">
					<f a="x:y:width:height:format:type:offset">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</readPixels>
			</overloads>
		</readPixels>
		<drawBuffers public="1" set="method">
			<f a="buffers">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies a list of color buffers to be drawn into.</haxe_doc>
		</drawBuffers>
		<clearBufferfv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferfv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferfv></overloads>
		</clearBufferfv>
		<clearBufferiv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferiv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferiv></overloads>
		</clearBufferiv>
		<clearBufferuiv public="1" set="method">
			<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
			<overloads><clearBufferuiv public="1" set="method">
	<f a="buffer:drawbuffer:values:?srcOffset" v=":::0">
		<x path="Int"/>
		<x path="Int"/>
		<c path="Array"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ srcOffset : 0 }</e></m></meta>
</clearBufferuiv></overloads>
		</clearBufferuiv>
		<clearBufferfi public="1" set="method"><f a="buffer:drawbuffer:depth:stencil">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clearBufferfi>
		<createQuery public="1" set="method">
			<f a=""><c path="js.html.webgl.Query"/></f>
			<haxe_doc>Creates a new `WebGLQuery` object.</haxe_doc>
		</createQuery>
		<deleteQuery public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLQuery` object.</haxe_doc>
		</deleteQuery>
		<isQuery public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLQuery` object.</haxe_doc>
		</isQuery>
		<beginQuery public="1" set="method">
			<f a="target:query">
				<x path="Int"/>
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Begins an asynchronous query.</haxe_doc>
		</beginQuery>
		<endQuery public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Marks the end of an asynchronous query.</haxe_doc>
		</endQuery>
		<getQuery public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns a `WebGLQuery` object for a given target.</haxe_doc>
		</getQuery>
		<getQueryParameter public="1" set="method">
			<f a="query:pname">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a query.</haxe_doc>
		</getQueryParameter>
		<createSampler public="1" set="method">
			<f a=""><c path="js.html.webgl.Sampler"/></f>
			<haxe_doc>Creates a new `WebGLSampler` object.</haxe_doc>
		</createSampler>
		<deleteSampler public="1" set="method">
			<f a="sampler">
				<c path="js.html.webgl.Sampler"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLSampler` object.</haxe_doc>
		</deleteSampler>
		<isSampler public="1" set="method">
			<f a="sampler">
				<c path="js.html.webgl.Sampler"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLSampler` object.</haxe_doc>
		</isSampler>
		<bindSampler public="1" set="method">
			<f a="unit:sampler">
				<x path="Int"/>
				<c path="js.html.webgl.Sampler"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLSampler` to a texture unit.</haxe_doc>
		</bindSampler>
		<samplerParameteri public="1" set="method"><f a="sampler:pname:param">
	<c path="js.html.webgl.Sampler"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></samplerParameteri>
		<samplerParameterf public="1" set="method"><f a="sampler:pname:param">
	<c path="js.html.webgl.Sampler"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></samplerParameterf>
		<getSamplerParameter public="1" set="method">
			<f a="sampler:pname">
				<c path="js.html.webgl.Sampler"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns sampler parameter information.</haxe_doc>
		</getSamplerParameter>
		<fenceSync public="1" set="method">
			<f a="condition:flags">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Sync"/>
			</f>
			<haxe_doc>Creates a new `WebGLSync` object and inserts it into the GL command stream.</haxe_doc>
		</fenceSync>
		<isSync public="1" set="method">
			<f a="sync">
				<c path="js.html.webgl.Sync"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed object is a valid `WebGLSync` object.</haxe_doc>
		</isSync>
		<deleteSync public="1" set="method">
			<f a="sync">
				<c path="js.html.webgl.Sync"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLSync` object.</haxe_doc>
		</deleteSync>
		<clientWaitSync public="1" set="method">
			<f a="sync:flags:timeout">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Blocks and waits for a `WebGLSync` object to become signaled or a given timeout to be passed.</haxe_doc>
		</clientWaitSync>
		<waitSync public="1" set="method">
			<f a="sync:flags:timeout">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Returns immediately, but waits on the GL server until the given `WebGLSync` object is signaled.</haxe_doc>
		</waitSync>
		<getSyncParameter public="1" set="method">
			<f a="sync:pname">
				<c path="js.html.webgl.Sync"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns parameter information of a `WebGLSync` object.</haxe_doc>
		</getSyncParameter>
		<createTransformFeedback public="1" set="method">
			<f a=""><c path="js.html.webgl.TransformFeedback"/></f>
			<haxe_doc>Creates and initializes `WebGLTransformFeedback` objects.</haxe_doc>
		</createTransformFeedback>
		<deleteTransformFeedback public="1" set="method">
			<f a="tf">
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLTransformFeedback` object.</haxe_doc>
		</deleteTransformFeedback>
		<isTransformFeedback public="1" set="method">
			<f a="tf">
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the passed object is a valid `WebGLTransformFeedback` object.</haxe_doc>
		</isTransformFeedback>
		<bindTransformFeedback public="1" set="method">
			<f a="target:tf">
				<x path="Int"/>
				<c path="js.html.webgl.TransformFeedback"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a passed `WebGLTransformFeedback` object to the current GL state.</haxe_doc>
		</bindTransformFeedback>
		<beginTransformFeedback public="1" set="method">
			<f a="primitiveMode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts a transform feedback operation.</haxe_doc>
		</beginTransformFeedback>
		<endTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Ends a transform feedback operation.</haxe_doc>
		</endTransformFeedback>
		<transformFeedbackVaryings public="1" set="method">
			<f a="program:varyings:bufferMode">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Specifies values to record in `WebGLTransformFeedback` buffers.</haxe_doc>
		</transformFeedbackVaryings>
		<getTransformFeedbackVarying public="1" set="method">
			<f a="program:index">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="js.html.webgl.ActiveInfo"/>
			</f>
			<haxe_doc>Returns information about varying variables from `WebGLTransformFeedback` buffers.</haxe_doc>
		</getTransformFeedbackVarying>
		<pauseTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Pauses a transform feedback operation.</haxe_doc>
		</pauseTransformFeedback>
		<resumeTransformFeedback public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resumes a transform feedback operation.</haxe_doc>
		</resumeTransformFeedback>
		<bindBufferBase public="1" set="method">
			<f a="target:index:buffer">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLBuffer` to a given binding point (`target`) at a given `index`.</haxe_doc>
		</bindBufferBase>
		<bindBufferRange public="1" set="method">
			<f a="target:index:buffer:offset:size">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.webgl.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a range of a given `WebGLBuffer` to a given binding point (`target`) at a given `index`.</haxe_doc>
		</bindBufferRange>
		<getIndexedParameter public="1" set="method">
			<f a="target:index">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns the indexed value for the given `target`.
		@throws DOMError</haxe_doc>
		</getIndexedParameter>
		<getUniformIndices public="1" set="method">
			<f a="program:uniformNames">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><c path="String"/></c>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Retrieves the indices of a number of uniforms within a `WebGLProgram`.</haxe_doc>
		</getUniformIndices>
		<getActiveUniforms public="1" set="method">
			<f a="program:uniformIndices:pname">
				<c path="js.html.webgl.Program"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Retrieves information about active uniforms within a `WebGLProgram`.</haxe_doc>
		</getActiveUniforms>
		<getUniformBlockIndex public="1" set="method">
			<f a="program:uniformBlockName">
				<c path="js.html.webgl.Program"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Retrieves the index of a uniform block within a `WebGLProgram`.</haxe_doc>
		</getUniformBlockIndex>
		<getActiveUniformBlockParameter public="1" set="method">
			<f a="program:uniformBlockIndex:pname">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Retrieves information about an active uniform block within a `WebGLProgram`.
		@throws DOMError</haxe_doc>
		</getActiveUniformBlockParameter>
		<getActiveUniformBlockName public="1" set="method">
			<f a="program:uniformBlockIndex">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the name of the active uniform block at a given index within a `WebGLProgram`.</haxe_doc>
		</getActiveUniformBlockName>
		<uniformBlockBinding public="1" set="method">
			<f a="program:uniformBlockIndex:uniformBlockBinding">
				<c path="js.html.webgl.Program"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Assigns binding points for active uniform blocks.</haxe_doc>
		</uniformBlockBinding>
		<createVertexArray public="1" set="method">
			<f a=""><c path="js.html.webgl.VertexArrayObject"/></f>
			<haxe_doc>Creates a new `WebGLVertexArrayObject`.</haxe_doc>
		</createVertexArray>
		<deleteVertexArray public="1" set="method">
			<f a="vertexArray">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLVertexArrayObject`.</haxe_doc>
		</deleteVertexArray>
		<isVertexArray public="1" set="method">
			<f a="vertexArray">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a valid `WebGLVertexArrayObject`.</haxe_doc>
		</isVertexArray>
		<bindVertexArray public="1" set="method">
			<f a="array">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLVertexArrayObject` to the buffer.</haxe_doc>
		</bindVertexArray>
		<getContextAttributes public="1" set="method" override="1"><f a=""><t path="js.html.webgl.ContextAttributes"/></f></getContextAttributes>
		<isContextLost public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isContextLost>
		<getSupportedExtensions public="1" set="method" override="1"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedExtensions>
		<getExtension public="1" params="T" set="method" override="1">
			<f a="name">
				<x path="js.html.webgl.Extension"><c path="getExtension.T"/></x>
				<c path="getExtension.T"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getExtension>
		<activeTexture public="1" set="method" override="1"><f a="texture">
	<x path="Int"/>
	<x path="Void"/>
</f></activeTexture>
		<attachShader public="1" set="method" override="1"><f a="program:shader">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></attachShader>
		<bindAttribLocation public="1" set="method" override="1"><f a="program:index:name">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></bindAttribLocation>
		<bindBuffer public="1" set="method" override="1"><f a="target:buffer">
	<x path="Int"/>
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></bindBuffer>
		<bindFramebuffer public="1" set="method" override="1"><f a="target:framebuffer">
	<x path="Int"/>
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Void"/>
</f></bindFramebuffer>
		<bindRenderbuffer public="1" set="method" override="1"><f a="target:renderbuffer">
	<x path="Int"/>
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></bindRenderbuffer>
		<bindTexture public="1" set="method" override="1"><f a="target:texture">
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Void"/>
</f></bindTexture>
		<blendColor public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></blendColor>
		<blendEquation public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquation>
		<blendEquationSeparate public="1" set="method" override="1"><f a="modeRGB:modeAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquationSeparate>
		<blendFunc public="1" set="method" override="1"><f a="sfactor:dfactor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFunc>
		<blendFuncSeparate public="1" set="method" override="1"><f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFuncSeparate>
		<checkFramebufferStatus public="1" set="method" override="1"><f a="target">
	<x path="Int"/>
	<x path="Int"/>
</f></checkFramebufferStatus>
		<clear public="1" set="method" override="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<clearColor public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearColor>
		<clearDepth public="1" set="method" override="1"><f a="depth">
	<x path="Float"/>
	<x path="Void"/>
</f></clearDepth>
		<clearStencil public="1" set="method" override="1"><f a="s">
	<x path="Int"/>
	<x path="Void"/>
</f></clearStencil>
		<colorMask public="1" set="method" override="1"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></colorMask>
		<compileShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></compileShader>
		<copyTexImage2D public="1" set="method" override="1"><f a="target:level:internalformat:x:y:width:height:border">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexImage2D>
		<copyTexSubImage2D public="1" set="method" override="1"><f a="target:level:xoffset:yoffset:x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage2D>
		<createBuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Buffer"/></f></createBuffer>
		<createFramebuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Framebuffer"/></f></createFramebuffer>
		<createProgram public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Program"/></f></createProgram>
		<createRenderbuffer public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Renderbuffer"/></f></createRenderbuffer>
		<createShader public="1" set="method" override="1"><f a="type">
	<x path="Int"/>
	<c path="js.html.webgl.Shader"/>
</f></createShader>
		<createTexture public="1" set="method" override="1"><f a=""><c path="js.html.webgl.Texture"/></f></createTexture>
		<cullFace public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></cullFace>
		<deleteBuffer public="1" set="method" override="1"><f a="buffer">
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></deleteBuffer>
		<deleteFramebuffer public="1" set="method" override="1"><f a="framebuffer">
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Void"/>
</f></deleteFramebuffer>
		<deleteProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></deleteProgram>
		<deleteRenderbuffer public="1" set="method" override="1"><f a="renderbuffer">
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></deleteRenderbuffer>
		<deleteShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></deleteShader>
		<deleteTexture public="1" set="method" override="1"><f a="texture">
	<c path="js.html.webgl.Texture"/>
	<x path="Void"/>
</f></deleteTexture>
		<depthFunc public="1" set="method" override="1"><f a="func">
	<x path="Int"/>
	<x path="Void"/>
</f></depthFunc>
		<depthMask public="1" set="method" override="1"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></depthMask>
		<depthRange public="1" set="method" override="1"><f a="zNear:zFar">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></depthRange>
		<detachShader public="1" set="method" override="1"><f a="program:shader">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></detachShader>
		<disable public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<disableVertexAttribArray public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></disableVertexAttribArray>
		<drawArrays public="1" set="method" override="1"><f a="mode:first:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArrays>
		<drawElements public="1" set="method" override="1"><f a="mode:count:type:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElements>
		<enable public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<enableVertexAttribArray public="1" set="method" override="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></enableVertexAttribArray>
		<finish public="1" set="method" override="1"><f a=""><x path="Void"/></f></finish>
		<flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></flush>
		<framebufferRenderbuffer public="1" set="method" override="1"><f a="target:attachment:renderbuffertarget:renderbuffer">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method" override="1"><f a="target:attachment:textarget:texture:level">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTexture2D>
		<frontFace public="1" set="method" override="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></frontFace>
		<generateMipmap public="1" set="method" override="1"><f a="target">
	<x path="Int"/>
	<x path="Void"/>
</f></generateMipmap>
		<getActiveAttrib public="1" set="method" override="1"><f a="program:index">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="js.html.webgl.ActiveInfo"/>
</f></getActiveAttrib>
		<getActiveUniform public="1" set="method" override="1"><f a="program:index">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="js.html.webgl.ActiveInfo"/>
</f></getActiveUniform>
		<getAttachedShaders public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<c path="Array"><c path="js.html.webgl.Shader"/></c>
</f></getAttachedShaders>
		<getAttribLocation public="1" set="method" override="1"><f a="program:name">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
	<x path="Int"/>
</f></getAttribLocation>
		<getBufferParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getBufferParameter>
		<getParameter public="1" set="method" override="1">
			<f a="pname">
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getParameter>
		<getError public="1" set="method" override="1"><f a=""><x path="Int"/></f></getError>
		<getFramebufferAttachmentParameter public="1" set="method" override="1">
			<f a="target:attachment:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFramebufferAttachmentParameter>
		<getProgramParameter public="1" set="method" override="1"><f a="program:pname">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<d/>
</f></getProgramParameter>
		<getProgramInfoLog public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
</f></getProgramInfoLog>
		<getRenderbufferParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getRenderbufferParameter>
		<getShaderParameter public="1" set="method" override="1"><f a="shader:pname">
	<c path="js.html.webgl.Shader"/>
	<x path="Int"/>
	<d/>
</f></getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method" override="1"><f a="shadertype:precisiontype">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.ShaderPrecisionFormat"/>
</f></getShaderPrecisionFormat>
		<getShaderInfoLog public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getShaderInfoLog>
		<getShaderSource public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getShaderSource>
		<getTexParameter public="1" set="method" override="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getTexParameter>
		<getUniform public="1" set="method" override="1"><f a="program:location">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.UniformLocation"/>
	<d/>
</f></getUniform>
		<getUniformLocation public="1" set="method" override="1"><f a="program:name">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
	<c path="js.html.webgl.UniformLocation"/>
</f></getUniformLocation>
		<getVertexAttrib public="1" set="method" override="1">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getVertexAttrib>
		<getVertexAttribOffset public="1" set="method" override="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribOffset>
		<hint public="1" set="method" override="1"><f a="target:mode">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hint>
		<isBuffer public="1" set="method" override="1"><f a="buffer">
	<c path="js.html.webgl.Buffer"/>
	<x path="Bool"/>
</f></isBuffer>
		<isEnabled public="1" set="method" override="1"><f a="cap">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isFramebuffer public="1" set="method" override="1"><f a="framebuffer">
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Bool"/>
</f></isFramebuffer>
		<isProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Bool"/>
</f></isProgram>
		<isRenderbuffer public="1" set="method" override="1"><f a="renderbuffer">
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Bool"/>
</f></isRenderbuffer>
		<isShader public="1" set="method" override="1"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Bool"/>
</f></isShader>
		<isTexture public="1" set="method" override="1"><f a="texture">
	<c path="js.html.webgl.Texture"/>
	<x path="Bool"/>
</f></isTexture>
		<lineWidth public="1" set="method" override="1"><f a="width">
	<x path="Float"/>
	<x path="Void"/>
</f></lineWidth>
		<linkProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></linkProgram>
		<pixelStorei public="1" set="method" override="1"><f a="pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pixelStorei>
		<polygonOffset public="1" set="method" override="1"><f a="factor:units">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></polygonOffset>
		<renderbufferStorage public="1" set="method" override="1"><f a="target:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorage>
		<sampleCoverage public="1" set="method" override="1"><f a="value:invert">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sampleCoverage>
		<scissor public="1" set="method" override="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<shaderSource public="1" set="method" override="1"><f a="shader:source">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
	<x path="Void"/>
</f></shaderSource>
		<stencilFunc public="1" set="method" override="1"><f a="func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFunc>
		<stencilFuncSeparate public="1" set="method" override="1"><f a="face:func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFuncSeparate>
		<stencilMask public="1" set="method" override="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMask>
		<stencilMaskSeparate public="1" set="method" override="1"><f a="face:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMaskSeparate>
		<stencilOp public="1" set="method" override="1"><f a="fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOp>
		<stencilOpSeparate public="1" set="method" override="1"><f a="face:fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOpSeparate>
		<texParameterf public="1" set="method" override="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method" override="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<uniform1f public="1" set="method" override="1"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform2f public="1" set="method" override="1"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform3f public="1" set="method" override="1"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform4f public="1" set="method" override="1"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform1i public="1" set="method" override="1"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform2i public="1" set="method" override="1"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform3i public="1" set="method" override="1"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform4i public="1" set="method" override="1"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<useProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></useProgram>
		<validateProgram public="1" set="method" override="1"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></validateProgram>
		<vertexAttrib1f public="1" set="method" override="1"><f a="indx:x">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib1fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib1fv></overloads>
		</vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method" override="1"><f a="indx:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib2fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib2fv></overloads>
		</vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method" override="1"><f a="indx:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib3fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib3fv></overloads>
		</vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method" override="1"><f a="indx:x:y:z:w">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method" override="1">
			<f a="indx:values">
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib4fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></vertexAttrib4fv></overloads>
		</vertexAttrib4fv>
		<vertexAttribPointer public="1" set="method" override="1"><f a="indx:size:type:normalized:stride:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribPointer>
		<viewport public="1" set="method" override="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></viewport>
		<haxe_doc><![CDATA[The WebGL2RenderingContext interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML `canvas` element.

	Documentation [WebGL2RenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGL2RenderingContext"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.ANGLEInstancedArrays" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/ANGLEInstancedArrays.hx" extern="1">
		<VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE public="1" get="inline" set="null" expr="35070" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35070</e></m></meta>
			<haxe_doc>Returns a `GLint` describing the frequency divisor used for instanced rendering when used in the `WebGLRenderingContext.getVertexAttrib()` as the `pname` parameter.</haxe_doc>
		</VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE>
		<drawArraysInstancedANGLE public="1" set="method">
			<f a="mode:first:count:primcount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Behaves identically to `WebGLRenderingContext.drawArrays()` except that multiple instances of the range of elements are executed, and the instance advances for each iteration.</haxe_doc>
		</drawArraysInstancedANGLE>
		<drawElementsInstancedANGLE public="1" set="method">
			<f a="mode:count:type:offset:primcount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Behaves identically to `WebGLRenderingContext.drawElements()` except that multiple instances of the set of elements are executed and the instance advances between each set.</haxe_doc>
		</drawElementsInstancedANGLE>
		<vertexAttribDivisorANGLE public="1" set="method">
			<f a="index:divisor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with `ANGLE_instanced_arrays.drawArraysInstancedANGLE()` and `ANGLE_instanced_arrays.drawElementsInstancedANGLE()`.</haxe_doc>
		</vertexAttribDivisorANGLE>
		<haxe_doc><![CDATA[The `ANGLE_instanced_arrays` extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.

	Documentation [ANGLE_instanced_arrays](https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays>]]></haxe_doc>
		<meta><m n=":native"><e>"ANGLE_instanced_arrays"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTBlendMinmax" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTBlendMinmax.hx" extern="1">
		<MIN_EXT public="1" get="inline" set="null" expr="32775" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32775</e></m></meta>
			<haxe_doc>Produces the minimum color components of the source and destination colors.</haxe_doc>
		</MIN_EXT>
		<MAX_EXT public="1" get="inline" set="null" expr="32776" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32776</e></m></meta>
			<haxe_doc>Produces the maximum color components of the source and destination colors.</haxe_doc>
		</MAX_EXT>
		<haxe_doc><![CDATA[The `EXT_blend_minmax` extension is part of the WebGL API and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.

	Documentation [EXT_blend_minmax](https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_blend_minmax"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.EXTColorBufferFloat" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTColorBufferFloat.hx"><a/></typedef>
	<class path="js.html.webgl.extension.EXTColorBufferHalfFloat" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTColorBufferHalfFloat.hx" extern="1">
		<RGBA16F_EXT public="1" get="inline" set="null" expr="34842" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34842</e></m></meta>
			<haxe_doc>RGBA 16-bit floating-point color-renderable format.</haxe_doc>
		</RGBA16F_EXT>
		<RGB16F_EXT public="1" get="inline" set="null" expr="34843" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34843</e></m></meta>
			<haxe_doc>RGB 16-bit floating-point color-renderable format.</haxe_doc>
		</RGB16F_EXT>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT public="1" get="inline" set="null" expr="33297" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT>
		<UNSIGNED_NORMALIZED_EXT public="1" get="inline" set="null" expr="35863" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</UNSIGNED_NORMALIZED_EXT>
		<haxe_doc><![CDATA[The `EXT_color_buffer_half_float` extension is part of the WebGL API and adds the ability to render to 16-bit floating-point color buffers.

	Documentation [EXT_color_buffer_half_float](https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_color_buffer_half_float"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTDisjointTimerQuery" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTDisjointTimerQuery.hx" extern="1">
		<QUERY_COUNTER_BITS_EXT public="1" get="inline" set="null" expr="34916" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34916</e></m></meta>
			<haxe_doc>A `GLint` indicating the number of bits used to hold the query result for the given target.</haxe_doc>
		</QUERY_COUNTER_BITS_EXT>
		<CURRENT_QUERY_EXT public="1" get="inline" set="null" expr="34917" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34917</e></m></meta>
			<haxe_doc>A `WebGLQuery` object, which is the currently active query for the given target.</haxe_doc>
		</CURRENT_QUERY_EXT>
		<QUERY_RESULT_EXT public="1" get="inline" set="null" expr="34918" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34918</e></m></meta>
			<haxe_doc>A `GLuint64EXT` containing the query result.</haxe_doc>
		</QUERY_RESULT_EXT>
		<QUERY_RESULT_AVAILABLE_EXT public="1" get="inline" set="null" expr="34919" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34919</e></m></meta>
			<haxe_doc>A `GLboolean` indicating whether or not a query result is available.</haxe_doc>
		</QUERY_RESULT_AVAILABLE_EXT>
		<TIME_ELAPSED_EXT public="1" get="inline" set="null" expr="35007" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35007</e></m></meta>
			<haxe_doc>Elapsed time (in nanoseconds).</haxe_doc>
		</TIME_ELAPSED_EXT>
		<TIMESTAMP_EXT public="1" get="inline" set="null" expr="36392" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36392</e></m></meta>
			<haxe_doc>The current time.</haxe_doc>
		</TIMESTAMP_EXT>
		<GPU_DISJOINT_EXT public="1" get="inline" set="null" expr="36795" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36795</e></m></meta>
			<haxe_doc>A `GLboolean` indicating whether or not the GPU performed any disjoint operation.</haxe_doc>
		</GPU_DISJOINT_EXT>
		<createQueryEXT public="1" set="method">
			<f a=""><c path="js.html.webgl.Query"/></f>
			<haxe_doc>Creates a new `WebGLQuery`.</haxe_doc>
		</createQueryEXT>
		<deleteQueryEXT public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLQuery`.</haxe_doc>
		</deleteQueryEXT>
		<isQueryEXT public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.Query"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a `WebGLQuery`.</haxe_doc>
		</isQueryEXT>
		<beginQueryEXT public="1" set="method">
			<f a="target:query">
				<x path="Int"/>
				<c path="js.html.webgl.Query"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The timer starts when all commands prior to `beginQueryEXT` have been fully executed.</haxe_doc>
		</beginQueryEXT>
		<endQueryEXT public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The timer stops when all commands prior to `endQueryEXT` have been fully executed.</haxe_doc>
		</endQueryEXT>
		<queryCounterEXT public="1" set="method">
			<f a="query:target">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Records the current time into the corresponding query object.</haxe_doc>
		</queryCounterEXT>
		<getQueryEXT public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a query target.</haxe_doc>
		</getQueryEXT>
		<getQueryObjectEXT public="1" set="method">
			<f a="query:pname">
				<c path="js.html.webgl.Query"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Return the state of a query object.</haxe_doc>
		</getQueryObjectEXT>
		<haxe_doc><![CDATA[The EXT_disjoint_timer_query extension is part of the WebGL API and provides a way to measure the duration of a set of GL commands, without stalling the rendering pipeline.

	Documentation [EXT_disjoint_timer_query](https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_disjoint_timer_query"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.EXTFragDepth" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTFragDepth.hx"><a/></typedef>
	<typedef path="js.html.webgl.extension.EXTShaderTextureLod" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTShaderTextureLod.hx"><a/></typedef>
	<class path="js.html.webgl.extension.EXTSrgb" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTSrgb.hx" extern="1">
		<SRGB_EXT public="1" get="inline" set="null" expr="35904" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35904</e></m></meta>
			<haxe_doc>Unsized sRGB format that leaves the precision up to the driver.</haxe_doc>
		</SRGB_EXT>
		<SRGB_ALPHA_EXT public="1" get="inline" set="null" expr="35906" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35906</e></m></meta>
			<haxe_doc>Unsized sRGB format with unsized alpha component.</haxe_doc>
		</SRGB_ALPHA_EXT>
		<SRGB8_ALPHA8_EXT public="1" get="inline" set="null" expr="35907" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35907</e></m></meta>
			<haxe_doc>Sized (8-bit) sRGB and alpha formats.</haxe_doc>
		</SRGB8_ALPHA8_EXT>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT public="1" get="inline" set="null" expr="33296" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33296</e></m></meta>
			<haxe_doc>Returns the framebuffer color encoding (`gl.LINEAR` or `ext.SRGB_EXT`).</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT>
		<haxe_doc><![CDATA[The `EXT_sRGB` extension is part of the WebGL API and adds sRGB support to textures and framebuffer objects.

	Documentation [EXT_sRGB](https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_sRGB"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.EXTTextureFilterAnisotropic" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/EXTTextureFilterAnisotropic.hx" extern="1">
		<TEXTURE_MAX_ANISOTROPY_EXT public="1" get="inline" set="null" expr="34046" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34046</e></m></meta>
			<haxe_doc>This is the `pname` argument to the `WebGLRenderingContext.getTexParameter` and `WebGLRenderingContext.texParameterf` / `WebGLRenderingContext.texParameteri` calls and sets the desired maximum anisotropy for a texture.</haxe_doc>
		</TEXTURE_MAX_ANISOTROPY_EXT>
		<MAX_TEXTURE_MAX_ANISOTROPY_EXT public="1" get="inline" set="null" expr="34047" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34047</e></m></meta>
			<haxe_doc>This is the `pname` argument to the `WebGLRenderingContext.getParameter` call, and it returns the maximum available anisotropy.</haxe_doc>
		</MAX_TEXTURE_MAX_ANISOTROPY_EXT>
		<haxe_doc><![CDATA[The `EXT_texture_filter_anisotropic` extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).

	Documentation [EXT_texture_filter_anisotropic](https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_texture_filter_anisotropic"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESElementIndexUint" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/OESElementIndexUint.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESStandardDerivatives" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/OESStandardDerivatives.hx" extern="1">
		<FRAGMENT_SHADER_DERIVATIVE_HINT_OES public="1" get="inline" set="null" expr="35723" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35723</e></m></meta>
			<haxe_doc>A `Glenum` indicating the accuracy of the derivative calculation for the GLSL built-in functions: `dFdx`, `dFdy`, and `fwidth`.</haxe_doc>
		</FRAGMENT_SHADER_DERIVATIVE_HINT_OES>
		<haxe_doc><![CDATA[The `OES_standard_derivatives` extension is part of the WebGL API and adds the GLSL derivative functions `dFdx`, `dFdy`, and `fwidth`.

	Documentation [OES_standard_derivatives](https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_standard_derivatives"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESTextureFloat" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/OESTextureFloat.hx"><a/></typedef>
	<typedef path="js.html.webgl.extension.OESTextureFloatLinear" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/OESTextureFloatLinear.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESTextureHalfFloat" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/OESTextureHalfFloat.hx" extern="1">
		<HALF_FLOAT_OES public="1" get="inline" set="null" expr="36193" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36193</e></m></meta>
			<haxe_doc>Half floating-point type (16-bit).</haxe_doc>
		</HALF_FLOAT_OES>
		<haxe_doc><![CDATA[The `OES_texture_half_float` extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.

	Documentation [OES_texture_half_float](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_texture_half_float"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.OESTextureHalfFloatLinear" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/OESTextureHalfFloatLinear.hx"><a/></typedef>
	<class path="js.html.webgl.extension.OESVertexArrayObject" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/OESVertexArrayObject.hx" extern="1">
		<VERTEX_ARRAY_BINDING_OES public="1" get="inline" set="null" expr="34229" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34229</e></m></meta>
			<haxe_doc>Returns a `WebGLVertexArrayObject` object when used in the `WebGLRenderingContext.getParameter()` method as the `pname` parameter.</haxe_doc>
		</VERTEX_ARRAY_BINDING_OES>
		<createVertexArrayOES public="1" set="method">
			<f a=""><c path="js.html.webgl.VertexArrayObject"/></f>
			<haxe_doc>Creates a new `WebGLVertexArrayObject`.</haxe_doc>
		</createVertexArrayOES>
		<deleteVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLVertexArrayObject`.</haxe_doc>
		</deleteVertexArrayOES>
		<isVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a `WebGLVertexArrayObject`.</haxe_doc>
		</isVertexArrayOES>
		<bindVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObject"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLVertexArrayObject` to the buffer.</haxe_doc>
		</bindVertexArrayOES>
		<haxe_doc><![CDATA[The OES_vertex_array_object extension is part of the WebGL API and provides vertex array objects (VAOs) which encapsulate vertex array states. These objects keep pointers to vertex data and provide names for different sets of vertex data.

	Documentation [OES_vertex_array_object](https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_vertex_array_object"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLColorBufferFloat" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLColorBufferFloat.hx" extern="1">
		<RGBA32F_EXT public="1" get="inline" set="null" expr="34836" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34836</e></m></meta>
			<haxe_doc>RGBA 32-bit floating-point color-renderable format.</haxe_doc>
		</RGBA32F_EXT>
		<RGB32F_EXT public="1" get="inline" set="null" expr="34837" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34837</e></m></meta>
			<haxe_doc>RGB 32-bit floating-point color-renderable format.</haxe_doc>
		</RGB32F_EXT>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT public="1" get="inline" set="null" expr="33297" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT>
		<UNSIGNED_NORMALIZED_EXT public="1" get="inline" set="null" expr="35863" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
			<haxe_doc>?</haxe_doc>
		</UNSIGNED_NORMALIZED_EXT>
		<haxe_doc><![CDATA[The `WEBGL_color_buffer_float` extension is part of the WebGL API and adds the ability to render to 32-bit floating-point color buffers.

	Documentation [WEBGL_color_buffer_float](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_color_buffer_float"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureAstc" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLCompressedTextureAstc.hx" extern="1">
		<COMPRESSED_RGBA_ASTC_4x4_KHR public="1" get="inline" set="null" expr="37808" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37808</e></m></meta>
		</COMPRESSED_RGBA_ASTC_4x4_KHR>
		<COMPRESSED_RGBA_ASTC_5x4_KHR public="1" get="inline" set="null" expr="37809" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37809</e></m></meta>
		</COMPRESSED_RGBA_ASTC_5x4_KHR>
		<COMPRESSED_RGBA_ASTC_5x5_KHR public="1" get="inline" set="null" expr="37810" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37810</e></m></meta>
		</COMPRESSED_RGBA_ASTC_5x5_KHR>
		<COMPRESSED_RGBA_ASTC_6x5_KHR public="1" get="inline" set="null" expr="37811" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37811</e></m></meta>
		</COMPRESSED_RGBA_ASTC_6x5_KHR>
		<COMPRESSED_RGBA_ASTC_6x6_KHR public="1" get="inline" set="null" expr="37812" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37812</e></m></meta>
		</COMPRESSED_RGBA_ASTC_6x6_KHR>
		<COMPRESSED_RGBA_ASTC_8x5_KHR public="1" get="inline" set="null" expr="37813" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37813</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x5_KHR>
		<COMPRESSED_RGBA_ASTC_8x6_KHR public="1" get="inline" set="null" expr="37814" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37814</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x6_KHR>
		<COMPRESSED_RGBA_ASTC_8x8_KHR public="1" get="inline" set="null" expr="37815" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37815</e></m></meta>
		</COMPRESSED_RGBA_ASTC_8x8_KHR>
		<COMPRESSED_RGBA_ASTC_10x5_KHR public="1" get="inline" set="null" expr="37816" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37816</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x5_KHR>
		<COMPRESSED_RGBA_ASTC_10x6_KHR public="1" get="inline" set="null" expr="37817" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37817</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x6_KHR>
		<COMPRESSED_RGBA_ASTC_10x8_KHR public="1" get="inline" set="null" expr="37818" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37818</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x8_KHR>
		<COMPRESSED_RGBA_ASTC_10x10_KHR public="1" get="inline" set="null" expr="37819" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37819</e></m></meta>
		</COMPRESSED_RGBA_ASTC_10x10_KHR>
		<COMPRESSED_RGBA_ASTC_12x10_KHR public="1" get="inline" set="null" expr="37820" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37820</e></m></meta>
		</COMPRESSED_RGBA_ASTC_12x10_KHR>
		<COMPRESSED_RGBA_ASTC_12x12_KHR public="1" get="inline" set="null" expr="37821" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37821</e></m></meta>
		</COMPRESSED_RGBA_ASTC_12x12_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR public="1" get="inline" set="null" expr="37840" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37840</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR public="1" get="inline" set="null" expr="37841" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37841</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR public="1" get="inline" set="null" expr="37842" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37842</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR public="1" get="inline" set="null" expr="37843" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37843</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR public="1" get="inline" set="null" expr="37844" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37844</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR public="1" get="inline" set="null" expr="37845" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37845</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR public="1" get="inline" set="null" expr="37846" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37846</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR public="1" get="inline" set="null" expr="37847" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37847</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR public="1" get="inline" set="null" expr="37848" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37848</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR public="1" get="inline" set="null" expr="37849" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37849</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR public="1" get="inline" set="null" expr="37850" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37850</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR public="1" get="inline" set="null" expr="37851" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37851</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR public="1" get="inline" set="null" expr="37852" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37852</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR>
		<COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR public="1" get="inline" set="null" expr="37853" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37853</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR>
		<getSupportedProfiles public="1" set="method"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedProfiles>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_astc` extension is part of the WebGL API and exposes Adaptive Scalable Texture Compression (ASTC) compressed texture formats to WebGL.

	Documentation [WEBGL_compressed_texture_astc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_astc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_astc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureAtc" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLCompressedTextureAtc.hx" extern="1">
		<COMPRESSED_RGB_ATC_WEBGL public="1" get="inline" set="null" expr="35986" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35986</e></m></meta>
			<haxe_doc>Compresses RGB textures with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB_ATC_WEBGL>
		<COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL public="1" get="inline" set="null" expr="35987" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35987</e></m></meta>
			<haxe_doc>Compresses RGBA textures using explicit alpha encoding (useful when alpha transitions are sharp).</haxe_doc>
		</COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL>
		<COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL public="1" get="inline" set="null" expr="34798" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34798</e></m></meta>
			<haxe_doc>Compresses RGBA textures using interpolated alpha encoding (useful when alpha transitions are gradient).</haxe_doc>
		</COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_atc` extension is part of the WebGL API and exposes 3 ATC compressed texture formats. ATC is a proprietary compression algorithm for compressing textures on handheld devices.

	Documentation [WEBGL_compressed_texture_atc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_atc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureEtc" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLCompressedTextureEtc.hx" extern="1">
		<COMPRESSED_R11_EAC public="1" get="inline" set="null" expr="37488" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37488</e></m></meta>
			<haxe_doc>One-channel (red) unsigned format compression.</haxe_doc>
		</COMPRESSED_R11_EAC>
		<COMPRESSED_SIGNED_R11_EAC public="1" get="inline" set="null" expr="37489" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37489</e></m></meta>
			<haxe_doc>One-channel (red) signed format compression.</haxe_doc>
		</COMPRESSED_SIGNED_R11_EAC>
		<COMPRESSED_RG11_EAC public="1" get="inline" set="null" expr="37490" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37490</e></m></meta>
			<haxe_doc>Two-channel (red and green) unsigned format compression.</haxe_doc>
		</COMPRESSED_RG11_EAC>
		<COMPRESSED_SIGNED_RG11_EAC public="1" get="inline" set="null" expr="37491" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37491</e></m></meta>
			<haxe_doc>Two-channel (red and green) signed format compression.</haxe_doc>
		</COMPRESSED_SIGNED_RG11_EAC>
		<COMPRESSED_RGB8_ETC2 public="1" get="inline" set="null" expr="37492" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37492</e></m></meta>
			<haxe_doc>Compresses RGB8 data with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB8_ETC2>
		<COMPRESSED_SRGB8_ETC2 public="1" get="inline" set="null" expr="37493" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37493</e></m></meta>
			<haxe_doc>Compresses sRGB8 data with no alpha channel.</haxe_doc>
		</COMPRESSED_SRGB8_ETC2>
		<COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 public="1" get="inline" set="null" expr="37494" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37494</e></m></meta>
			<haxe_doc>Similar to `RGB8_ETC`, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.</haxe_doc>
		</COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2>
		<COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 public="1" get="inline" set="null" expr="37495" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37495</e></m></meta>
			<haxe_doc>Similar to `SRGB8_ETC`, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent.</haxe_doc>
		</COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2>
		<COMPRESSED_RGBA8_ETC2_EAC public="1" get="inline" set="null" expr="37496" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37496</e></m></meta>
			<haxe_doc>Compresses RGBA8 data. The RGB part is encoded the same as `RGB_ETC2`, but the alpha part is encoded separately.</haxe_doc>
		</COMPRESSED_RGBA8_ETC2_EAC>
		<COMPRESSED_SRGB8_ALPHA8_ETC2_EAC public="1" get="inline" set="null" expr="37497" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37497</e></m></meta>
			<haxe_doc>Compresses sRGBA8 data. The sRGB part is encoded the same as `SRGB_ETC2`, but the alpha part is encoded separately.</haxe_doc>
		</COMPRESSED_SRGB8_ALPHA8_ETC2_EAC>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_etc` extension is part of the WebGL API and exposes 10 ETC/EAC compressed texture formats.

	Documentation [WEBGL_compressed_texture_etc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_etc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureEtc1" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLCompressedTextureEtc1.hx" extern="1">
		<COMPRESSED_RGB_ETC1_WEBGL public="1" get="inline" set="null" expr="36196" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36196</e></m></meta>
			<haxe_doc>Compresses 24-bit RGB data with no alpha channel.</haxe_doc>
		</COMPRESSED_RGB_ETC1_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_etc1` extension is part of the WebGL API and exposes the ETC1 compressed texture format.

	Documentation [WEBGL_compressed_texture_etc1](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_etc1"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTexturePvrtc" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLCompressedTexturePvrtc.hx" extern="1">
		<COMPRESSED_RGB_PVRTC_4BPPV1_IMG public="1" get="inline" set="null" expr="35840" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35840</e></m></meta>
			<haxe_doc>RGB compression in 4-bit mode. One block for each 4×4 pixels.</haxe_doc>
		</COMPRESSED_RGB_PVRTC_4BPPV1_IMG>
		<COMPRESSED_RGB_PVRTC_2BPPV1_IMG public="1" get="inline" set="null" expr="35841" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35841</e></m></meta>
			<haxe_doc>RGB compression in 2-bit mode. One block for each 8×4 pixels.</haxe_doc>
		</COMPRESSED_RGB_PVRTC_2BPPV1_IMG>
		<COMPRESSED_RGBA_PVRTC_4BPPV1_IMG public="1" get="inline" set="null" expr="35842" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35842</e></m></meta>
			<haxe_doc>RGBA compression in 4-bit mode. One block for each 4×4 pixels.</haxe_doc>
		</COMPRESSED_RGBA_PVRTC_4BPPV1_IMG>
		<COMPRESSED_RGBA_PVRTC_2BPPV1_IMG public="1" get="inline" set="null" expr="35843" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35843</e></m></meta>
			<haxe_doc>RGBA compression in 2-bit mode. One block for each 8×4 pixels.</haxe_doc>
		</COMPRESSED_RGBA_PVRTC_2BPPV1_IMG>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_pvrtc` extension is part of the WebGL API and exposes four PVRTC compressed texture formats.

	Documentation [WEBGL_compressed_texture_pvrtc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_pvrtc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureS3tc" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLCompressedTextureS3tc.hx" extern="1">
		<COMPRESSED_RGB_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="33776" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33776</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an RGB image format.</haxe_doc>
		</COMPRESSED_RGB_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="33777" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33777</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an RGB image format with a simple on/off alpha value.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT3_EXT public="1" get="inline" set="null" expr="33778" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33778</e></m></meta>
			<haxe_doc>A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT3_EXT>
		<COMPRESSED_RGBA_S3TC_DXT5_EXT public="1" get="inline" set="null" expr="33779" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33779</e></m></meta>
			<haxe_doc>A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3 compression in how the alpha compression is done.</haxe_doc>
		</COMPRESSED_RGBA_S3TC_DXT5_EXT>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_s3tc` extension is part of the WebGL API and exposes four S3TC compressed texture formats.

	Documentation [WEBGL_compressed_texture_s3tc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_s3tc"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLCompressedTextureS3tcSrgb" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLCompressedTextureS3tcSrgb.hx" extern="1">
		<COMPRESSED_SRGB_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="35916" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35916</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an sRGB image format.</haxe_doc>
		</COMPRESSED_SRGB_S3TC_DXT1_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="35917" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35917</e></m></meta>
			<haxe_doc>A DXT1-compressed image in an sRGB image format with a simple on/off alpha value.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT public="1" get="inline" set="null" expr="35918" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35918</e></m></meta>
			<haxe_doc>A DXT3-compressed image in an sRGBA image format.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT>
		<COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT public="1" get="inline" set="null" expr="35919" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35919</e></m></meta>
			<haxe_doc>A DXT5-compressed image in an sRGBA image format.</haxe_doc>
		</COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_s3tc_srgb` extension is part of the WebGL API and exposes four S3TC compressed texture formats for the sRGB colorspace.

	Documentation [WEBGL_compressed_texture_s3tc_srgb](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_s3tc_srgb"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLDebugRendererInfo" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLDebugRendererInfo.hx" extern="1">
		<UNMASKED_VENDOR_WEBGL public="1" get="inline" set="null" expr="37445" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37445</e></m></meta>
		</UNMASKED_VENDOR_WEBGL>
		<UNMASKED_RENDERER_WEBGL public="1" get="inline" set="null" expr="37446" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37446</e></m></meta>
		</UNMASKED_RENDERER_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_debug_renderer_info` extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.

	Documentation [WEBGL_debug_renderer_info](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_debug_renderer_info"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.WEBGLDebugShaders" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLDebugShaders.hx"><a><getTranslatedShaderSource set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getTranslatedShaderSource></a></typedef>
	<class path="js.html.webgl.extension.WEBGLDepthTexture" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLDepthTexture.hx" extern="1">
		<UNSIGNED_INT_24_8_WEBGL public="1" get="inline" set="null" expr="34042" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34042</e></m></meta>
			<haxe_doc>Unsigned integer type for 24-bit depth texture data.</haxe_doc>
		</UNSIGNED_INT_24_8_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_depth_texture` extension is part of the WebGL API and defines 2D depth and depth-stencil textures.

	Documentation [WEBGL_depth_texture](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_depth_texture"</e></m></meta>
	</class>
	<class path="js.html.webgl.extension.WEBGLDrawBuffers" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLDrawBuffers.hx" extern="1">
		<COLOR_ATTACHMENT0_WEBGL public="1" get="inline" set="null" expr="36064" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
			<haxe_doc>A `GLenum` specifying a color buffer.</haxe_doc>
		</COLOR_ATTACHMENT0_WEBGL>
		<COLOR_ATTACHMENT1_WEBGL public="1" get="inline" set="null" expr="36065" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36065</e></m></meta>
		</COLOR_ATTACHMENT1_WEBGL>
		<COLOR_ATTACHMENT2_WEBGL public="1" get="inline" set="null" expr="36066" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36066</e></m></meta>
		</COLOR_ATTACHMENT2_WEBGL>
		<COLOR_ATTACHMENT3_WEBGL public="1" get="inline" set="null" expr="36067" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36067</e></m></meta>
		</COLOR_ATTACHMENT3_WEBGL>
		<COLOR_ATTACHMENT4_WEBGL public="1" get="inline" set="null" expr="36068" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36068</e></m></meta>
		</COLOR_ATTACHMENT4_WEBGL>
		<COLOR_ATTACHMENT5_WEBGL public="1" get="inline" set="null" expr="36069" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36069</e></m></meta>
		</COLOR_ATTACHMENT5_WEBGL>
		<COLOR_ATTACHMENT6_WEBGL public="1" get="inline" set="null" expr="36070" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36070</e></m></meta>
		</COLOR_ATTACHMENT6_WEBGL>
		<COLOR_ATTACHMENT7_WEBGL public="1" get="inline" set="null" expr="36071" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36071</e></m></meta>
		</COLOR_ATTACHMENT7_WEBGL>
		<COLOR_ATTACHMENT8_WEBGL public="1" get="inline" set="null" expr="36072" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36072</e></m></meta>
		</COLOR_ATTACHMENT8_WEBGL>
		<COLOR_ATTACHMENT9_WEBGL public="1" get="inline" set="null" expr="36073" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36073</e></m></meta>
		</COLOR_ATTACHMENT9_WEBGL>
		<COLOR_ATTACHMENT10_WEBGL public="1" get="inline" set="null" expr="36074" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36074</e></m></meta>
		</COLOR_ATTACHMENT10_WEBGL>
		<COLOR_ATTACHMENT11_WEBGL public="1" get="inline" set="null" expr="36075" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36075</e></m></meta>
		</COLOR_ATTACHMENT11_WEBGL>
		<COLOR_ATTACHMENT12_WEBGL public="1" get="inline" set="null" expr="36076" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36076</e></m></meta>
		</COLOR_ATTACHMENT12_WEBGL>
		<COLOR_ATTACHMENT13_WEBGL public="1" get="inline" set="null" expr="36077" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36077</e></m></meta>
		</COLOR_ATTACHMENT13_WEBGL>
		<COLOR_ATTACHMENT14_WEBGL public="1" get="inline" set="null" expr="36078" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36078</e></m></meta>
		</COLOR_ATTACHMENT14_WEBGL>
		<COLOR_ATTACHMENT15_WEBGL public="1" get="inline" set="null" expr="36079" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36079</e></m></meta>
		</COLOR_ATTACHMENT15_WEBGL>
		<DRAW_BUFFER0_WEBGL public="1" get="inline" set="null" expr="34853" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34853</e></m></meta>
			<haxe_doc>A `GLenum` returning a draw buffer.</haxe_doc>
		</DRAW_BUFFER0_WEBGL>
		<DRAW_BUFFER1_WEBGL public="1" get="inline" set="null" expr="34854" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34854</e></m></meta>
		</DRAW_BUFFER1_WEBGL>
		<DRAW_BUFFER2_WEBGL public="1" get="inline" set="null" expr="34855" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34855</e></m></meta>
		</DRAW_BUFFER2_WEBGL>
		<DRAW_BUFFER3_WEBGL public="1" get="inline" set="null" expr="34856" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34856</e></m></meta>
		</DRAW_BUFFER3_WEBGL>
		<DRAW_BUFFER4_WEBGL public="1" get="inline" set="null" expr="34857" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34857</e></m></meta>
		</DRAW_BUFFER4_WEBGL>
		<DRAW_BUFFER5_WEBGL public="1" get="inline" set="null" expr="34858" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34858</e></m></meta>
		</DRAW_BUFFER5_WEBGL>
		<DRAW_BUFFER6_WEBGL public="1" get="inline" set="null" expr="34859" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34859</e></m></meta>
		</DRAW_BUFFER6_WEBGL>
		<DRAW_BUFFER7_WEBGL public="1" get="inline" set="null" expr="34860" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34860</e></m></meta>
		</DRAW_BUFFER7_WEBGL>
		<DRAW_BUFFER8_WEBGL public="1" get="inline" set="null" expr="34861" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34861</e></m></meta>
		</DRAW_BUFFER8_WEBGL>
		<DRAW_BUFFER9_WEBGL public="1" get="inline" set="null" expr="34862" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34862</e></m></meta>
		</DRAW_BUFFER9_WEBGL>
		<DRAW_BUFFER10_WEBGL public="1" get="inline" set="null" expr="34863" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34863</e></m></meta>
		</DRAW_BUFFER10_WEBGL>
		<DRAW_BUFFER11_WEBGL public="1" get="inline" set="null" expr="34864" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34864</e></m></meta>
		</DRAW_BUFFER11_WEBGL>
		<DRAW_BUFFER12_WEBGL public="1" get="inline" set="null" expr="34865" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34865</e></m></meta>
		</DRAW_BUFFER12_WEBGL>
		<DRAW_BUFFER13_WEBGL public="1" get="inline" set="null" expr="34866" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34866</e></m></meta>
		</DRAW_BUFFER13_WEBGL>
		<DRAW_BUFFER14_WEBGL public="1" get="inline" set="null" expr="34867" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34867</e></m></meta>
		</DRAW_BUFFER14_WEBGL>
		<DRAW_BUFFER15_WEBGL public="1" get="inline" set="null" expr="34868" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34868</e></m></meta>
		</DRAW_BUFFER15_WEBGL>
		<MAX_COLOR_ATTACHMENTS_WEBGL public="1" get="inline" set="null" expr="36063" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36063</e></m></meta>
			<haxe_doc>A `GLint` indicating the maximum number of framebuffer color attachment points.</haxe_doc>
		</MAX_COLOR_ATTACHMENTS_WEBGL>
		<MAX_DRAW_BUFFERS_WEBGL public="1" get="inline" set="null" expr="34852" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34852</e></m></meta>
			<haxe_doc>A `GLint` indicating the maximum number of draw buffers.</haxe_doc>
		</MAX_DRAW_BUFFERS_WEBGL>
		<drawBuffersWEBGL public="1" set="method">
			<f a="buffers">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the draw buffers to which all fragment colors are written. (When using `WebGL2RenderingContext`, this method is available as `WebGL2RenderingContext.drawBuffers()` by default).</haxe_doc>
		</drawBuffersWEBGL>
		<haxe_doc><![CDATA[The `WEBGL_draw_buffers` extension is part of the WebGL API and enables a fragment shader to write to several textures, which is useful for deferred shading, for example.

	Documentation [WEBGL_draw_buffers](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_draw_buffers"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.extension.WEBGLLoseContext" params="" file="/usr/local/lib/haxe/std/js/html/webgl/extension/WEBGLLoseContext.hx"><a>
	<restoreContext set="method"><f a=""><x path="Void"/></f></restoreContext>
	<loseContext set="method"><f a=""><x path="Void"/></f></loseContext>
</a></typedef>
	<class path="js.lib.Error" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="js.lib.EvalError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.lib.RangeError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.lib.ReferenceError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.lib.SyntaxError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.lib.TypeError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.lib.URIError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.lib.Float32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Float32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Float32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float32Array"/>
	</f>
	<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float32Array` typed array represents an array of 32-bit floating point numbers
	(corresponding to the C float data type) in the platform byte order. If control over byte order is
	needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation)

	Documentation [Float32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Float32Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.Float64Array" params="" file="/usr/local/lib/haxe/std/js/lib/Float64Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 8 in the case of an `Float64Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float64Array"/>
	</f>
	<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float64Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float64Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float64Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float64Array` typed array represents an array of 64-bit floating point numbers
	(corresponding to the C double data type) in the platform byte order. If control over byte order
	is needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation).

	Documentation [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float64Array"</e></m></meta>
	</class>
	<class path="js.lib.Function" params="" file="/usr/local/lib/haxe/std/js/lib/Function.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the number of arguments expected by the function.</haxe_doc>
		</length>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the function.</haxe_doc>
		</name>
		<apply public="1" set="method">
			<f a="thisArg:argsArray">
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Calls a function and sets its this to the provided value, arguments can be passed as an Array object.</haxe_doc>
		</apply>
		<call public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<t path="haxe.extern.Rest"><d/></t>
				<d/>
			</f>
			<haxe_doc>Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.</haxe_doc>
		</call>
		<bind public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Function"/>
			</f>
			<haxe_doc>Creates a new function which, when called, has its this set to the provided value,
		with a given sequence of arguments preceding any provided when the new function was called.</haxe_doc>
		</bind>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source code of the function.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="arg:rest">
				<c path="String"/>
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Function object.</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Function"</e></m>
		</meta>
	</class>
	<class path="js.lib.Int16Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Int16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int16Array"/>
	</f>
	<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int16Array` typed array represents an array of twos-complement 16-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Int16Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.Int32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Int32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int32Array"/>
	</f>
	<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int32Array` typed array represents an array of twos-complement 32-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to `0`. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int32Array"</e></m></meta>
	</class>
	<class path="js.lib.Int8Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Int8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int8Array"/>
	</f>
	<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int8Array` typed array represents an array of twos-complement 8-bit signed integers. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int8Array"</e></m></meta>
	</class>
	<typedef path="js.lib.Iterator" params="T" file="/usr/local/lib/haxe/std/js/lib/Iterator.hx">
		<a><next set="method"><f a=""><t path="js.lib.IteratorStep"><c path="js.lib.Iterator.T"/></t></f></next></a>
		<haxe_doc>Native JavaScript iterator structure. To enable haxe for-in iteration, use `js.lib.HaxeIterator`, for example `for (v in new js.lib.HaxeIterator(jsIterator))` or add `using js.lib.HaxeIterator;` to your module

	See [Iteration Protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)</haxe_doc>
	</typedef>
	<typedef path="js.lib.AsyncIterator" params="T" file="/usr/local/lib/haxe/std/js/lib/Iterator.hx" module="js.lib.Iterator">
		<a><next set="method"><f a=""><c path="js.lib.Promise"><t path="js.lib.IteratorStep"><c path="js.lib.AsyncIterator.T"/></t></c></f></next></a>
		<haxe_doc>Native JavaScript async iterator structure. 

	See [for await...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)</haxe_doc>
	</typedef>
	<typedef path="js.lib.IteratorStep" params="T" file="/usr/local/lib/haxe/std/js/lib/Iterator.hx" module="js.lib.Iterator"><a>
	<value>
		<x path="Null"><c path="js.lib.IteratorStep.T"/></x>
		<meta><m n=":optional"/></meta>
	</value>
	<done><x path="Bool"/></done>
</a></typedef>
	<abstract path="js.lib.KeyValue" params="K:V" file="/usr/local/lib/haxe/std/js/lib/KeyValue.hx">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper.</haxe_doc>
		<impl><class path="js.lib._KeyValue.KeyValue_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/KeyValue.hx" private="1" module="js.lib.KeyValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Math" params="" file="/usr/local/lib/haxe/std/js/lib/Math.hx" extern="1">
		<E public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Euler's constant and the base of natural logarithms, approximately 2.718.</haxe_doc>
		</E>
		<LN2 public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Natural logarithm of 2, approximately 0.693.</haxe_doc>
		</LN2>
		<LN10 public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Natural logarithm of 10, approximately 2.303.</haxe_doc>
		</LN10>
		<LOG2E public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Base 2 logarithm of E, approximately 1.443.</haxe_doc>
		</LOG2E>
		<LOG10E public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Base 10 logarithm of E, approximately 0.434.</haxe_doc>
		</LOG10E>
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Ratio of the circumference of a circle to its diameter, approximately 3.14159.</haxe_doc>
		</PI>
		<SQRT1_2 public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Square root of 1/2; equivalently, 1 over the square root of 2, approximately 0.707.</haxe_doc>
		</SQRT1_2>
		<SQRT2 public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Square root of 2, approximately 1.414.</haxe_doc>
		</SQRT2>
		<abs public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the absolute value of a number.</haxe_doc>
			<overloads><abs public="1" set="method">
	<f a="x">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<haxe_doc>Returns the absolute value of a number.</haxe_doc>
</abs></overloads>
		</abs>
		<acos public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the arccosine of a number.</haxe_doc>
		</acos>
		<acosh public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the hyperbolic arccosine of a number.</haxe_doc>
		</acosh>
		<asin public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the arcsine of a number.</haxe_doc>
		</asin>
		<asinh public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the hyperbolic arcsine of a number.</haxe_doc>
		</asinh>
		<atan public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the arctangent of a number.</haxe_doc>
		</atan>
		<atanh public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the hyperbolic arctangent of a number.</haxe_doc>
		</atanh>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the arctangent of the quotient of its arguments.</haxe_doc>
		</atan2>
		<cbrt public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the cube root of a number.</haxe_doc>
		</cbrt>
		<ceil public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer greater than or equal to a number.</haxe_doc>
		</ceil>
		<clz32 public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of leading zeroes of a 32-bit integer.</haxe_doc>
		</clz32>
		<cos public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the cosine of a number.</haxe_doc>
		</cos>
		<cosh public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the hyperbolic cosine of a number.</haxe_doc>
		</cosh>
		<exp public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Ex, where x is the argument, and E is Euler's constant (2.718…), the base of the natural logarithm.</haxe_doc>
		</exp>
		<expm1 public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns subtracting 1 from exp(x).</haxe_doc>
		</expm1>
		<floor public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer less than or equal to a number.</haxe_doc>
		</floor>
		<fround public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the nearest single precision float representation of a number.</haxe_doc>
		</fround>
		<hypot public="1" set="method" static="1">
			<f a="args">
				<t path="haxe.extern.Rest"><x path="Float"/></t>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of the sum of squares of its arguments.</haxe_doc>
		</hypot>
		<imul public="1" set="method" static="1">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the result of a 32-bit integer multiplication.</haxe_doc>
		</imul>
		<log public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm (loge, also ln) of a number.</haxe_doc>
		</log>
		<log1p public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm (loge, also ln) of 1 + x for a number x.</haxe_doc>
		</log1p>
		<log10 public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the base 10 logarithm of a number.</haxe_doc>
		</log10>
		<log2 public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the base 2 logarithm of a number.</haxe_doc>
		</log2>
		<max public="1" set="method" static="1">
			<f a="args">
				<t path="haxe.extern.Rest"><x path="Int"/></t>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest of zero or more numbers.</haxe_doc>
			<overloads><max public="1" set="method">
	<f a="args">
		<t path="haxe.extern.Rest"><x path="Float"/></t>
		<x path="Float"/>
	</f>
	<haxe_doc>Returns the largest of zero or more numbers.</haxe_doc>
</max></overloads>
		</max>
		<min public="1" set="method" static="1">
			<f a="args">
				<t path="haxe.extern.Rest"><x path="Int"/></t>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest of zero or more numbers.</haxe_doc>
			<overloads><min public="1" set="method">
	<f a="args">
		<t path="haxe.extern.Rest"><x path="Float"/></t>
		<x path="Float"/>
	</f>
	<haxe_doc>Returns the smallest of zero or more numbers.</haxe_doc>
</min></overloads>
		</min>
		<pow public="1" set="method" static="1">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns base to the exponent power, that is, baseexponent.</haxe_doc>
		</pow>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number between 0 and 1.</haxe_doc>
		</random>
		<round public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the value of a number rounded to the nearest integer.</haxe_doc>
		</round>
		<sign public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the sign of the x, indicating whether x is positive, negative or zero.</haxe_doc>
		</sign>
		<sin public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the sine of a number.</haxe_doc>
		</sin>
		<sinh public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the hyperbolic sine of a number.</haxe_doc>
		</sinh>
		<sqrt public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the positive square root of a number.</haxe_doc>
		</sqrt>
		<tan public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the tangent of a number.</haxe_doc>
		</tan>
		<tanh public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the hyperbolic tangent of a number.</haxe_doc>
		</tanh>
		<trunc public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the integer part of the number x, removing any fractional digits.</haxe_doc>
		</trunc>
		<haxe_doc>Math is a built-in object that has properties and methods for mathematical constants and functions.
	Not a function object.

	Documentation [Math](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Math"</e></m>
		</meta>
	</class>
	<class path="js.lib.Object" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" extern="1">
		<assign public="1" params="T" set="method" static="1">
			<f a="target:sources">
				<c path="assign.T"/>
				<t path="haxe.extern.Rest"><a/></t>
				<c path="assign.T"/>
			</f>
			<haxe_doc>Copies the values of all enumerable own properties from one or more
		source objects to a target object.</haxe_doc>
		</assign>
		<create public="1" params="T" set="method" static="1">
			<f a="proto:?propertiesObject">
				<a/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="create.T"/>
			</f>
			<haxe_doc>Creates a new object with the specified prototype object and properties.</haxe_doc>
		</create>
		<defineProperties public="1" params="T" set="method" static="1">
			<f a="obj:props">
				<c path="defineProperties.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="defineProperties.T"/>
			</f>
			<haxe_doc>Adds the named properties described by the given descriptors to an object.</haxe_doc>
		</defineProperties>
		<defineProperty public="1" params="T" set="method" static="1">
			<f a="obj:prop:descriptor">
				<c path="defineProperty.T"/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"/>
				<c path="defineProperty.T"/>
			</f>
			<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
			<overloads><defineProperty public="1" params="T" set="method">
	<f a="obj:prop:descriptor">
		<c path="defineProperty.T"/>
		<c path="js.lib.Symbol"/>
		<t path="js.lib.ObjectPropertyDescriptor"/>
		<c path="defineProperty.T"/>
	</f>
	<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
</defineProperty></overloads>
		</defineProperty>
		<entries public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="js.lib.ObjectEntry"/></c>
			</f>
			<haxe_doc>Returns an array containing all of the [key, value] pairs of a given
		object's own enumerable string properties.</haxe_doc>
		</entries>
		<freeze public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="freeze.T"/>
				<c path="freeze.T"/>
			</f>
			<haxe_doc>Freezes an object: other code can't delete or change any properties.</haxe_doc>
		</freeze>
		<fromEntries public="1" params="T" set="method" static="1">
			<f a="iterable">
				<x path="Any"/>
				<c path="fromEntries.T"/>
			</f>
			<haxe_doc>Returns a new object from an iterable of key-value pairs
		(reverses Object.entries).</haxe_doc>
		</fromEntries>
		<getOwnPropertyDescriptor public="1" set="method" static="1">
			<f a="obj:prop">
				<a/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
			</f>
			<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
			<overloads>
				<getOwnPropertyDescriptor public="1" params="T" set="method">
					<f a="target:propertyKey">
						<c path="Array"><c path="getOwnPropertyDescriptor.T"/></c>
						<x path="Int"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
					</f>
					<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
				</getOwnPropertyDescriptor>
				<getOwnPropertyDescriptor public="1" set="method">
					<f a="obj:prop">
						<a/>
						<c path="js.lib.Symbol"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
					</f>
					<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
				</getOwnPropertyDescriptor>
			</overloads>
		</getOwnPropertyDescriptor>
		<getOwnPropertyNames public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable and non-enumerable properties.</haxe_doc>
		</getOwnPropertyNames>
		<getOwnPropertySymbols public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="js.lib.Symbol"/></c>
			</f>
			<haxe_doc>Returns an array of all symbol properties found directly upon a given object.</haxe_doc>
		</getOwnPropertySymbols>
		<getPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Null"><c path="getPrototypeOf.TProto"/></x>
			</f>
			<haxe_doc>Returns the prototype of the specified object.</haxe_doc>
		</getPrototypeOf>
		<is public="1" params="T" set="method" static="1">
			<f a="value1:value2">
				<c path="is.T"/>
				<c path="is.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares if two values are the same value. Equates all NaN values
		(which differs from both Abstract Equality Comparison and
		Strict Equality Comparison).</haxe_doc>
		</is>
		<isExtensible public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if extending of an object is allowed.</haxe_doc>
		</isExtensible>
		<isFrozen public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object was frozen.</haxe_doc>
		</isFrozen>
		<isSealed public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object is sealed.</haxe_doc>
		</isSealed>
		<keys public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable string properties.</haxe_doc>
		</keys>
		<preventExtensions public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="preventExtensions.T"/>
				<c path="preventExtensions.T"/>
			</f>
			<haxe_doc>Prevents any extensions of an object.</haxe_doc>
		</preventExtensions>
		<seal public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="seal.T"/>
				<c path="seal.T"/>
			</f>
			<haxe_doc>Prevents other code from deleting properties of an object.</haxe_doc>
		</seal>
		<setPrototypeOf public="1" params="T" set="method" static="1">
			<f a="obj:prototype">
				<c path="setPrototypeOf.T"/>
				<x path="Null"><a/></x>
				<c path="setPrototypeOf.T"/>
			</f>
			<haxe_doc>Sets the prototype (i.e., the internal Prototype property).</haxe_doc>
		</setPrototypeOf>
		<values public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>Returns an array containing the values that correspond to all of
		a given object's own enumerable string properties.</haxe_doc>
		</values>
		<prototype public="1" set="null" static="1">
			<t path="js.lib.ObjectPrototype"/>
			<haxe_doc>Allows the addition of properties to all objects of type Object.</haxe_doc>
		</prototype>
		<new public="1" set="method">
			<f a="?value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The Object constructor creates an object wrapper.</haxe_doc>
		</new>
		<haxe_doc>The `js.lib.Object` constructor creates an object wrapper.

	Documentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Object"</e></m>
		</meta>
	</class>
	<typedef path="js.lib.ObjectPrototype" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<valueOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns the primitive value of the specified object.</haxe_doc>
			</valueOf>
			<toString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a string representation of the object.</haxe_doc>
			</toString>
			<toLocaleString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Calls `toString()`.</haxe_doc>
			</toLocaleString>
			<propertyIsEnumerable set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating if the internal enumerable attribute is set.</haxe_doc>
			</propertyIsEnumerable>
			<isPrototypeOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether the object this method is called
		upon is in the prototype chain of the specified object.</haxe_doc>
			</isPrototypeOf>
			<hasOwnProperty set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether an object contains the specified
		property as a direct property of that object and not inherited through
		the prototype chain.</haxe_doc>
			</hasOwnProperty>
		</a>
		<haxe_doc><![CDATA[Type for
	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>]]></haxe_doc>
	</typedef>
	<typedef path="js.lib.ObjectPropertyDescriptor" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the value associated with the property may be
		changed with an assignment operator.

		Defaults to `false`.</haxe_doc>
			</writable>
			<value>
				<x path="Null"><x path="Any"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The value associated with the property.
		Can be any valid JavaScript value (number, object, function, etc).</haxe_doc>
			</value>
			<set>
				<x path="Null"><f a="">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a setter for the property, or undefined if
		there is no setter. When the property is assigned to, this function
		is called with one argument (the value being assigned to the property)
		and with `this` set to the object through which the property is assigned.</haxe_doc>
			</set>
			<get>
				<x path="Null"><f a=""><x path="Any"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a getter for the property, or `undefined` if
		there is no getter. When the property is accessed, this function is
		called without arguments and with `this` set to the object through which
		the property is accessed (this may not be the object on which the
		property is defined due to inheritance).
		The return value will be used as the value of the property.</haxe_doc>
			</get>
			<enumerable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if this property shows up during enumeration of the
		properties on the corresponding object.

		Defaults to `false`.</haxe_doc>
			</enumerable>
			<configurable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the type of this property descriptor may be
		changed and if the property may be deleted from the corresponding object.

		Defaults to `false`.</haxe_doc>
			</configurable>
		</a>
		<haxe_doc><![CDATA[@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>]]></haxe_doc>
	</typedef>
	<abstract path="js.lib.ObjectEntry" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper for `js.lib.Object.entries()`.</haxe_doc>
		<impl><class path="js.lib._Object.ObjectEntry_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" private="1" module="js.lib.Object" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Promise" params="T" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" extern="1">
		<resolve public="1" params="T" set="method" static="1">
			<f a="thenable">
				<x path="js.lib.Thenable"><c path="resolve.T"/></x>
				<c path="js.lib.Promise"><c path="resolve.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
			<overloads><resolve public="1" params="T" set="method">
	<f a="?value">
		<c path="resolve.T"/>
		<c path="js.lib.Promise"><c path="resolve.T"/></c>
	</f>
	<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
</resolve></overloads>
		</resolve>
		<reject public="1" params="T" set="method" static="1">
			<f a="?reason">
				<d/>
				<c path="js.lib.Promise"><c path="reject.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is rejected with the given reason.</haxe_doc>
		</reject>
		<all public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><c path="Array"><d/></c></c>
			</f>
			<haxe_doc>Returns a promise that either fulfills when all of the promises in the
		iterable argument have fulfilled or rejects as soon as one of the
		promises in the iterable argument rejects. If the returned promise
		fulfills, it is fulfilled with an array of the values from the
		fulfilled promises in the same order as defined in the iterable.
		If the returned promise rejects, it is rejected with the reason from
		the first promise in the iterable that rejected. This method can be
		useful for aggregating results of multiple promises.</haxe_doc>
		</all>
		<allSettled public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><c path="Array"><t path="js.lib.PromiseSettleOutcome"/></c></c>
			</f>
			<haxe_doc>Returns a promise that resolves after all of the given promises have either fulfilled or rejected,
		with an array of objects that each describes the outcome of each promise.

		It is typically used when you have multiple asynchronous tasks that are not dependent on one another
		to complete successfully, or you'd always like to know the result of each promise.

		In comparison, the Promise returned by `Promise.all` may be more appropriate if the tasks are dependent
		on each other / if you'd like to immediately reject upon any of them rejecting.</haxe_doc>
		</allSettled>
		<race public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a promise that fulfills or rejects as soon as one of the
		promises in the iterable fulfills or rejects, with the value or reason
		from that promise.</haxe_doc>
		</race>
		<then public="1" params="TOut" set="method">
			<f a="onFulfilled:?onRejected">
				<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.Promise.T"/>
	<c path="then.TOut"/>
</x></x>
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="then.TOut"/>
				</x>
				<c path="js.lib.Promise"><c path="then.TOut"/></c>
			</f>
			<haxe_doc>Appends fulfillment and rejection handlers to the promise and returns a
		new promise resolving to the return value of the called handler, or to
		its original settled value if the promise was not handled
		(i.e. if the relevant handler onFulfilled or onRejected is not a function).</haxe_doc>
		</then>
		<catchError public="1" set="method">
			<f a="onRejected">
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="js.lib.Promise.T"/>
				</x>
				<c path="js.lib.Promise"><c path="js.lib.Promise.T"/></c>
			</f>
			<meta><m n=":native"><e>"catch"</e></m></meta>
			<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
			<overloads><catch public="1" params="TOut" set="method">
	<f a="onRejected">
		<x path="js.lib.PromiseHandler">
			<d/>
			<c path="catchError.TOut"/>
		</x>
		<c path="js.lib.Promise"><x path="haxe.extern.EitherType">
	<c path="js.lib.Promise.T"/>
	<c path="catchError.TOut"/>
</x></c>
	</f>
	<meta><m n=":native"><e>"catch"</e></m></meta>
	<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
</catch></overloads>
		</catchError>
		<finally public="1" set="method">
			<f a="onFinally">
				<f a=""><x path="Void"/></f>
				<c path="js.lib.Promise"><c path="js.lib.Promise.T"/></c>
			</f>
			<haxe_doc>Returns a Promise. When the promise is settled, i.e either fulfilled or rejected,
		the specified callback function is executed. This provides a way for code to be run
		whether the promise was fulfilled successfully or rejected once the Promise has been dealt with.</haxe_doc>
		</finally>
		<new public="1" set="method">
			<f a="init">
				<f a="resolve:reject">
					<f a="value">
						<c path="js.lib.Promise.T"/>
						<x path="Void"/>
					</f>
					<f a="reason">
						<d/>
						<x path="Void"/>
					</f>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc>The Promise object represents the eventual completion (or failure) of an
	asynchronous operation and its resulting value.

	Documentation [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Promise"</e></m></meta>
	</class>
	<abstract path="js.lib.PromiseHandler" params="T:TOut" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.Promise"><c path="js.lib.PromiseHandler.TOut"/></c>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<x path="js.lib.Thenable"><c path="js.lib.PromiseHandler.TOut"/></x>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.PromiseHandler.TOut"/>
</f></icast>
		</from>
		<this><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<d/>
</f></this>
		<haxe_doc>Handler type for the Promise object.</haxe_doc>
		<impl><class path="js.lib._Promise.PromiseHandler_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="js.lib.Thenable" params="T" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from><icast><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></icast></from>
		<this><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></this>
		<haxe_doc>A value with a `then` method.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="js.lib._Promise.Thenable_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="js.lib.ThenableStruct" params="T" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" module="js.lib.Promise"><a><then params="TOut" set="method"><f a="onFulfilled:?onRejected">
	<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.ThenableStruct.T"/>
	<c path="then.TOut"/>
</x></x>
	<x path="js.lib.PromiseHandler">
		<d/>
		<c path="then.TOut"/>
	</x>
	<x path="js.lib.Thenable"><c path="then.TOut"/></x>
</f></then></a></typedef>
	<typedef path="js.lib.PromiseSettleOutcome" params="" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" module="js.lib.Promise"><a>
	<value>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</value>
	<status><x path="js.lib.PromiseSettleStatus"/></status>
	<reason>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</reason>
</a></typedef>
	<abstract path="js.lib.PromiseSettleStatus" params="" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" module="js.lib.Promise">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib._Promise.PromiseSettleStatus_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.lib.RegExpMatch" params="" file="/usr/local/lib/haxe/std/js/lib/RegExp.hx" module="js.lib.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1">
			<x path="Int"/>
			<haxe_doc>The index of the search at which the result was found.</haxe_doc>
		</index>
		<input public="1">
			<c path="String"/>
			<haxe_doc>A copy of the search string.</haxe_doc>
		</input>
		<groups public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
			<haxe_doc>Named capturing groups or undefined if no named capturing groups were defined.
		See [Groups and Ranges](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges) for more information.

		Note: Not all browsers support this feature; refer to the [compatibility table](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Browser_compatibility).</haxe_doc>
		</groups>
		<haxe_doc>A return value of the `RegExp.exec` method.</haxe_doc>
	</class>
	<class path="js.lib.Symbol" params="" file="/usr/local/lib/haxe/std/js/lib/Symbol.hx" extern="1">
		<for_ public="1" set="method" static="1">
			<f a="key">
				<c path="String"/>
				<c path="js.lib.Symbol"/>
			</f>
			<meta><m n=":native"><e>"for"</e></m></meta>
			<haxe_doc>Searches for existing symbols with the given key and returns it if found.
		Otherwise a new symbol gets created in the global symbol registry with this key.</haxe_doc>
		</for_>
		<keyFor public="1" set="method" static="1">
			<f a="sym">
				<c path="js.lib.Symbol"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Retrieves a shared symbol key from the global symbol registry for the given symbol.</haxe_doc>
		</keyFor>
		<iterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method returning the default iterator for an object.</haxe_doc>
		</iterator>
		<asyncIterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method that returns the default AsyncIterator for an object.</haxe_doc>
		</asyncIterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the description of the Symbol.</haxe_doc>
		</toString>
		<ofObject public="1" params="T" get="inline" set="null" line="67">
			<f a="object">
				<a/>
				<x path="Null"><c path="ofObject.T"/></x>
			</f>
			<haxe_doc>Retrieve symbol from a given `object`.

		NOTE: This is a Haxe-specific method that generates an `object[symbol]` expression.</haxe_doc>
		</ofObject>
		<new public="1" set="method">
			<f a="?description">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>To create a new primitive symbol, use `new Symbol()` with an optional string as its `description`.

		NOTE: Unlike in plain JavaScript, `new Symbol()` syntax is used in Haxe. This generates a `Symbol(...)`
		expression as required by the JavaScript specification.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Symbol"</e></m></meta>
	</class>
	<class path="js.lib.Uint16Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Uint16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint16Array"/>
	</f>
	<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint16Array` typed array represents an array of 16-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Uint16Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.Uint32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Uint32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint32Array"/>
	</f>
	<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint32Array` typed array represents an array of 32-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Uint32Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.Uint8ClampedArray" params="" file="/usr/local/lib/haxe/std/js/lib/Uint8ClampedArray.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8ClampedArray`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8ClampedArray"/>
	</f>
	<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8ClampedArray` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8ClampedArray`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8ClampedArray"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8ClampedArray` typed array represents an array of 8-bit unsigned integers clamped
	to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead;
	if you specify a non-integer, the nearest integer will be set. The contents are initialized to `0`.
	Once established, you can reference elements in the array using the object's methods, or using
	standard array index syntax (that is, using bracket notation).

	Documentation [Uint8ClampedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint8ClampedArray"</e></m></meta>
	</class>
	<abstract path="js.lib.intl.LocaleMatcher" params="" file="/usr/local/lib/haxe/std/js/lib/intl/LocaleMatcher.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._LocaleMatcher.LocaleMatcher_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/LocaleMatcher.hx" private="1" module="js.lib.intl.LocaleMatcher" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.lib.intl.NumberFormat" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" extern="1">
		<supportedLocalesOf public="1" set="method" static="1">
			<f a="locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
			<overloads><supportedLocalesOf public="1" set="method">
	<f a="locales:?options">
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
</supportedLocalesOf></overloads>
		</supportedLocalesOf>
		<format public="1" set="method">
			<f a="number">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<haxe_doc>Getter function that formats a number according to the locale
		and formatting options of this `NumberFormat` object.</haxe_doc>
		</format>
		<formatToParts public="1" set="method">
			<f a="?number">
				<x path="Float"/>
				<c path="Array"><t path="js.lib.intl.NumberFormatPart"/></c>
			</f>
			<haxe_doc>Returns an `Array` of objects representing the number string in parts
		that can be used for custom locale-aware formatting.</haxe_doc>
		</formatToParts>
		<resolvedOptions public="1" set="method">
			<f a=""><t path="js.lib.intl.NumberFormatResolvedOption"/></f>
			<haxe_doc>Returns a new object with properties reflecting the locale and collation options
		computed during initialization of the object.</haxe_doc>
		</resolvedOptions>
		<new public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?locales:?options">
	<c path="Array"><c path="String"/></c>
	<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<haxe_doc>The `NumberFormat` object is a constructor for objects that enable language sensitive number formatting.

	Documentation [NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl.NumberFormat"</e></m></meta>
	</class>
	<typedef path="js.lib.intl.NumberFormatOptions" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.
		The default is `true`.</haxe_doc>
	</useGrouping>
	<style>
		<x path="Null"><x path="js.lib.intl.NumberFormatStyle"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The formatting style to use.
		The default is `Decimal`.</haxe_doc>
	</style>
	<minimumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of significant digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumSignificantDigits>
	<minimumIntegerDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of integer digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumIntegerDigits>
	<minimumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number and percent formatting is 0;
		the default for currency formatting is the number of minor unit digits provided by the
		[ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information).</haxe_doc>
	</minimumFractionDigits>
	<maximumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of significant digits to use.
		Possible values are from 1 to 21; the default is 21.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number formatting is the larger of
		minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits
		and the number of minor unit digits provided by the [ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information); the default for percent formatting is the larger of
		minimumFractionDigits and 0.</haxe_doc>
	</maximumFractionDigits>
	<localeMatcher>
		<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.
		For information about this option, see the [Intl page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).</haxe_doc>
	</localeMatcher>
	<currencyDisplay>
		<x path="Null"><x path="js.lib.intl.CurrencyDisplay"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>How to display the currency in currency formatting.
		The default is `Symbol`.</haxe_doc>
	</currencyDisplay>
	<currency>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc><![CDATA[The currency to use in currency formatting. Possible values are the ISO 4217 currency codes,
		such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the
		[Current currency & funds code list](https://www.currency-iso.org/en/home/tables/table-a1.html).
		There is no default value; if the style is "currency", the currency property must be provided.]]></haxe_doc>
	</currency>
</a></typedef>
	<typedef path="js.lib.intl.NumberFormatResolvedOption" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.</haxe_doc>
	</useGrouping>
	<style final="1" set="null"><x path="js.lib.intl.NumberFormatStyle"/></style>
	<numberingSystem final="1" set="null">
		<c path="String"/>
		<haxe_doc>The value requested using the Unicode extension key `"nu"` or filled in as a default.</haxe_doc>
	</numberingSystem>
	<minimumSignificantDigits final="1" set="null"><x path="Int"/></minimumSignificantDigits>
	<minimumIntegerDigits final="1" set="null"><x path="Int"/></minimumIntegerDigits>
	<minimumFractionDigits final="1" set="null"><x path="Int"/></minimumFractionDigits>
	<maximumSignificantDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if at least one of them was provided in the `options` argument.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if neither m`inimumSignificantDigits` nor `maximumSignificantDigits`
		was provided in the `options` argument.</haxe_doc>
	</maximumFractionDigits>
	<locale final="1" set="null">
		<c path="String"/>
		<haxe_doc>The BCP 47 language tag for the locale actually used. If any Unicode extension values were
		requested in the input BCP 47 language tag that led to this locale, the key-value pairs that
		were requested and are supported for this locale are included in `locale`.</haxe_doc>
	</locale>
	<currencyDisplay final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are only present if `style` is `"currency"`.</haxe_doc>
	</currencyDisplay>
	<currency final="1" set="null"><c path="String"/></currency>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatStyle" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatStyle_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.lib.intl.CurrencyDisplay" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.CurrencyDisplay_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatPart" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<value final="1" set="null"><c path="String"/></value>
	<type final="1" set="null"><x path="js.lib.intl.NumberFormatPartType"/></type>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatPartType" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatPartType_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatSupportedLocalesOfOptions" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a><localeMatcher>
	<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
</localeMatcher></a></typedef>
	<typedef path="justPath.EllipseArcData" params="" file="/usr/local/lib/haxeLibrary/justPath/0,0,2-alpha/justPath/EllipseArc.hx" module="justPath.EllipseArc"><a>
	<ry><x path="Float"/></ry>
	<rx><x path="Float"/></rx>
	<phiSin><x path="Float"/></phiSin>
	<phiCos><x path="Float"/></phiCos>
	<phi><x path="Float"/></phi>
	<omega><x path="Float"/></omega>
	<delta><x path="Float"/></delta>
	<cy><x path="Float"/></cy>
	<cx><x path="Float"/></cx>
	<alpha><x path="Float"/></alpha>
</a></typedef>
	<class path="justPath.EllipseArc" params="" file="/usr/local/lib/haxeLibrary/justPath/0,0,2-alpha/justPath/EllipseArc.hx">
		<arc><t path="justPath.EllipseArcData"/></arc>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<alphaPoint public="1" set="method" line="26"><f a=""><x path="Void"/></f></alphaPoint>
		<omegaPoint public="1" set="method" line="29"><f a=""><x path="Void"/></f></omegaPoint>
		<lineRender public="1" set="method" line="33">
			<f a="moveTo:lineTo:dA:?renderFirst" v=":::true">
				<f a=":">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<f a=":">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ renderFirst : true }</e></m></meta>
		</lineRender>
		<calculatePoint public="1" get="inline" set="null" line="51"><f a="theta">
	<x path="Float"/>
	<x path="Void"/>
</f></calculatePoint>
		<new public="1" set="method" line="23"><f a="arc_">
	<t path="justPath.EllipseArcData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":forward"/>
		</meta>
	</class>
	<abstract path="justPath.ConverterArc" params="" file="/usr/local/lib/haxeLibrary/justPath/0,0,2-alpha/justPath/EllipseArc.hx" module="justPath.EllipseArc">
		<from><icast><t path="justPath.EllipseArcData"/></icast></from>
		<this><t path="justPath.EllipseArcData"/></this>
		<to><icast><t path="justPath.EllipseArcData"/></icast></to>
		<impl><class path="justPath._EllipseArc.ConverterArc_Impl_" params="" file="/usr/local/lib/haxeLibrary/justPath/0,0,2-alpha/justPath/EllipseArc.hx" private="1" module="justPath.EllipseArc" final="1">
	<_new public="1" get="inline" set="null" line="67" static="1">
		<f a="sx:sy:xr:yr:phi:large:sweep:ex:ey">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="justPath.ConverterArc"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<zeroto2pi get="inline" set="null" line="139" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zeroto2pi>
</class></impl>
	</abstract>
	<class path="justPath._EllipseArc.ConverterArc_Impl_" params="" file="/usr/local/lib/haxeLibrary/justPath/0,0,2-alpha/justPath/EllipseArc.hx" private="1" module="justPath.EllipseArc" final="1">
		<_new public="1" get="inline" set="null" line="67" static="1">
			<f a="sx:sy:xr:yr:phi:large:sweep:ex:ey">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="justPath.ConverterArc"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<zeroto2pi get="inline" set="null" line="139" static="1"><f a="angle">
	<x path="Float"/>
	<x path="Float"/>
</f></zeroto2pi>
	</class>
	<class path="justPath.StoreF6" params="" file="/usr/local/lib/haxeLibrary/justPath/0,0,2-alpha/justPath/StoreF6.hx">
		<l expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</l>
		<s0 public="1"><x path="Null"><x path="Float"/></x></s0>
		<s1 public="1"><x path="Null"><x path="Float"/></x></s1>
		<s2 public="1"><x path="Null"><x path="Float"/></x></s2>
		<s3 public="1"><x path="Null"><x path="Float"/></x></s3>
		<s4 public="1"><x path="Null"><x path="Float"/></x></s4>
		<s5 public="1"><x path="Null"><x path="Float"/></x></s5>
		<s6 public="1"><c path="justPath.StoreF6"/></s6>
		<clear public="1" get="inline" set="null" line="13"><f a=""><x path="Void"/></f></clear>
		<length public="1" get="inline" set="null" line="23"><f a=""><x path="Int"/></f></length>
		<push public="1" get="inline" set="null" line="26"><f a="v">
	<x path="Null"><x path="Float"/></x>
	<x path="Void"/>
</f></push>
		<pop public="1" get="inline" set="null" line="46"><f a=""><x path="Null"><x path="Float"/></x></f></pop>
		<unshift public="1" get="inline" set="null" line="74"><f a="v">
	<x path="Null"><x path="Float"/></x>
	<x path="Void"/>
</f></unshift>
		<shift public="1" get="inline" set="null" line="84"><f a=""><x path="Null"><x path="Float"/></x></f></shift>
		<toString public="1" get="inline" set="null" line="98"><f a=""><c path="String"/></f></toString>
		<populatedToString public="1" get="inline" set="null" line="105"><f a=""><c path="String"/></f></populatedToString>
		<count expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<hasNext public="1" get="inline" set="null" line="129"><f a=""><x path="Bool"/></f></hasNext>
		<resetIterator public="1" get="inline" set="null" line="132"><f a=""><x path="Void"/></f></resetIterator>
		<next public="1" get="inline" set="null" line="136"><f a=""><x path="Null"><x path="Float"/></x></f></next>
		<first public="1" get="inline" set="null" line="157"><f a=""><x path="Null"><x path="Float"/></x></f></first>
		<last public="1" get="inline" set="null" line="160"><f a=""><x path="Null"><x path="Float"/></x></f></last>
		<penultimate public="1" get="inline" set="null" line="180"><f a=""><x path="Null"><x path="Float"/></x></f></penultimate>
		<toArray public="1" get="inline" set="null" line="200"><f a=""><x path="Void"/></f></toArray>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justPath.StoreF8" params="" file="/usr/local/lib/haxeLibrary/justPath/0,0,2-alpha/justPath/StoreF8.hx">
		<l expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</l>
		<s0 public="1"><x path="Null"><x path="Float"/></x></s0>
		<s1 public="1"><x path="Null"><x path="Float"/></x></s1>
		<s2 public="1"><x path="Null"><x path="Float"/></x></s2>
		<s3 public="1"><x path="Null"><x path="Float"/></x></s3>
		<s4 public="1"><x path="Null"><x path="Float"/></x></s4>
		<s5 public="1"><x path="Null"><x path="Float"/></x></s5>
		<s6 public="1"><x path="Null"><x path="Float"/></x></s6>
		<s7 public="1"><x path="Null"><x path="Float"/></x></s7>
		<clear public="1" get="inline" set="null" line="14"><f a=""><x path="Void"/></f></clear>
		<length public="1" get="inline" set="null" line="25"><f a=""><x path="Int"/></f></length>
		<push public="1" get="inline" set="null" line="28"><f a="v">
	<x path="Null"><x path="Float"/></x>
	<x path="Void"/>
</f></push>
		<pop public="1" get="inline" set="null" line="51"><f a=""><x path="Null"><x path="Float"/></x></f></pop>
		<unshift public="1" get="inline" set="null" line="85"><f a="v">
	<x path="Null"><x path="Float"/></x>
	<x path="Void"/>
</f></unshift>
		<shift public="1" get="inline" set="null" line="95"><f a=""><x path="Null"><x path="Float"/></x></f></shift>
		<toString public="1" get="inline" set="null" line="110"><f a=""><c path="String"/></f></toString>
		<populatedToString public="1" get="inline" set="null" line="113"><f a=""><c path="String"/></f></populatedToString>
		<count expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<hasNext public="1" get="inline" set="null" line="138"><f a=""><x path="Bool"/></f></hasNext>
		<resetIterator public="1" get="inline" set="null" line="141"><f a=""><x path="Void"/></f></resetIterator>
		<next public="1" get="inline" set="null" line="144"><f a=""><x path="Null"><x path="Float"/></x></f></next>
		<first public="1" get="inline" set="null" line="169"><f a=""><x path="Null"><x path="Float"/></x></f></first>
		<last public="1" get="inline" set="null" line="172"><f a=""><x path="Null"><x path="Float"/></x></f></last>
		<penultimate public="1" get="inline" set="null" line="196"><f a=""><x path="Null"><x path="Float"/></x></f></penultimate>
		<toArray public="1" get="inline" set="null" line="220"><f a=""><x path="Void"/></f></toArray>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="justPath.SvgPath" params="" file="/usr/local/lib/haxeLibrary/justPath/0,0,2-alpha/justPath/SvgPath.hx">
		<str expr="&quot;&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>""</e></m></meta>
		</str>
		<pos expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</pos>
		<lastX expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</lastX>
		<lastY expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</lastY>
		<controlX expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</controlX>
		<controlY expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</controlY>
		<c expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</c>
		<l expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</l>
		<pathContext><c path="justPath.IPathContext"/></pathContext>
		<store><c path="justPath.StoreF6"/></store>
		<quickTriangle set="method" line="20"><f a="x0:y0:off">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quickTriangle>
		<parse public="1" set="method" line="27"><f a="str_">
	<c path="String"/>
	<c path="String"/>
</f></parse>
		<extractArgs get="inline" set="null" line="391">
			<f a="?process" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ process : true }</e></m></meta>
		</extractArgs>
		<nextChar get="inline" set="null" line="473"><f a=""><x path="Int"/></f></nextChar>
		<new public="1" set="method" line="17"><f a="pathContext_">
	<c path="justPath.IPathContext"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justPath.transform.ScaleContext" params="" file="/usr/local/lib/haxeLibrary/justPath/0,0,2-alpha/justPath/transform/ScaleContext.hx">
		<implements path="justPath.IPathContext"/>
		<pathContext public="1"><c path="justPath.IPathContext"/></pathContext>
		<sx public="1"><x path="Float"/></sx>
		<sy public="1"><x path="Float"/></sy>
		<moveTo public="1" get="inline" set="null" line="13"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" get="inline" set="null" line="17"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" get="inline" set="null" line="21"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" get="inline" set="null" line="25"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<new public="1" set="method" line="7"><f a="pathContext_:sx_:sy_">
	<c path="justPath.IPathContext"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="justPath.transform.ScaleTranslateContext" params="" file="/usr/local/lib/haxeLibrary/justPath/0,0,2-alpha/justPath/transform/ScaleTranslateContext.hx">
		<implements path="justPath.IPathContext"/>
		<pathContext public="1"><c path="justPath.IPathContext"/></pathContext>
		<dx public="1"><x path="Float"/></dx>
		<dy public="1"><x path="Float"/></dy>
		<sx public="1"><x path="Float"/></sx>
		<sy public="1"><x path="Float"/></sy>
		<moveTo public="1" get="inline" set="null" line="17"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" get="inline" set="null" line="21"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" get="inline" set="null" line="25"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" get="inline" set="null" line="29"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<new public="1" set="method" line="9"><f a="pathContext_:dx_:dy_:sx_:sy_">
	<c path="justPath.IPathContext"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="justPath.transform.TranslationContext" params="" file="/usr/local/lib/haxeLibrary/justPath/0,0,2-alpha/justPath/transform/TranslationContext.hx">
		<implements path="justPath.IPathContext"/>
		<pathContext public="1"><c path="justPath.IPathContext"/></pathContext>
		<dx public="1"><x path="Float"/></dx>
		<dy public="1"><x path="Float"/></dy>
		<moveTo public="1" get="inline" set="null" line="13"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" get="inline" set="null" line="17"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadTo public="1" get="inline" set="null" line="21"><f a="x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadTo>
		<curveTo public="1" get="inline" set="null" line="25"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<new public="1" set="method" line="7"><f a="pathContext_:dx_:dy_">
	<c path="justPath.IPathContext"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
</haxe>